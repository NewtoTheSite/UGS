// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.logexport = function (msg)
	{
		if (window.console && window.console.log)
			window.console.log(msg);
	};
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.nextHighestPowerOfTwo = function(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		if (x >= 0)
			return x | 0;
		else
			return (x | 0) - 1;		// correctly round down when negative
	};
	cr.ceil = function (x)
	{
		var f = x | 0;
		return (f === x ? f : f + 1);
	};
	function Vector2(x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	Vector2.prototype.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	Vector2.prototype.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.vector2 = Vector2;
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		var max_ax, min_ax, max_ay, min_ay, max_bx, min_bx, max_by, min_by;
		if (a1x < a2x)
		{
			min_ax = a1x;
			max_ax = a2x;
		}
		else
		{
			min_ax = a2x;
			max_ax = a1x;
		}
		if (b1x < b2x)
		{
			min_bx = b1x;
			max_bx = b2x;
		}
		else
		{
			min_bx = b2x;
			max_bx = b1x;
		}
		if (max_ax < min_bx || min_ax > max_bx)
			return false;
		if (a1y < a2y)
		{
			min_ay = a1y;
			max_ay = a2y;
		}
		else
		{
			min_ay = a2y;
			max_ay = a1y;
		}
		if (b1y < b2y)
		{
			min_by = b1y;
			max_by = b2y;
		}
		else
		{
			min_by = b2y;
			max_by = b1y;
		}
		if (max_ay < min_by || min_ay > max_by)
			return false;
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		if (cr.abs(la) > d)
			return false;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(lb) <= d;
	};
	function Rect(left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	Rect.prototype.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	Rect.prototype.copy = function (r)
	{
		this.left = r.left;
		this.top = r.top;
		this.right = r.right;
		this.bottom = r.bottom;
	};
	Rect.prototype.width = function ()
	{
		return this.right - this.left;
	};
	Rect.prototype.height = function ()
	{
		return this.bottom - this.top;
	};
	Rect.prototype.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	Rect.prototype.normalize = function ()
	{
		var temp = 0;
		if (this.left > this.right)
		{
			temp = this.left;
			this.left = this.right;
			this.right = temp;
		}
		if (this.top > this.bottom)
		{
			temp = this.top;
			this.top = this.bottom;
			this.bottom = temp;
		}
	};
	Rect.prototype.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	Rect.prototype.intersects_rect_off = function (rc, ox, oy)
	{
		return !(rc.right + ox < this.left || rc.bottom + oy < this.top || rc.left + ox > this.right || rc.top + oy > this.bottom);
	};
	Rect.prototype.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	Rect.prototype.equals = function (r)
	{
		return this.left === r.left && this.top === r.top && this.right === r.right && this.bottom === r.bottom;
	};
	cr.rect = Rect;
	function Quad()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	Quad.prototype.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	Quad.prototype.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	Quad.prototype.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	var minresult = 0;
	var maxresult = 0;
	function minmax4(a, b, c, d)
	{
		if (a < b)
		{
			if (c < d)
			{
				if (a < c)
					minresult = a;
				else
					minresult = c;
				if (b > d)
					maxresult = b;
				else
					maxresult = d;
			}
			else
			{
				if (a < d)
					minresult = a;
				else
					minresult = d;
				if (b > c)
					maxresult = b;
				else
					maxresult = c;
			}
		}
		else
		{
			if (c < d)
			{
				if (b < c)
					minresult = b;
				else
					minresult = c;
				if (a > d)
					maxresult = a;
				else
					maxresult = d;
			}
			else
			{
				if (b < d)
					minresult = b;
				else
					minresult = d;
				if (a > c)
					maxresult = a;
				else
					maxresult = c;
			}
		}
	};
	Quad.prototype.bounding_box = function (rc)
	{
		minmax4(this.tlx, this.trx, this.brx, this.blx);
		rc.left = minresult;
		rc.right = maxresult;
		minmax4(this.tly, this.try_, this.bry, this.bly);
		rc.top = minresult;
		rc.bottom = maxresult;
	};
	Quad.prototype.contains_pt = function (x, y)
	{
		var v0x = this.trx - this.tlx;
		var v0y = this.try_ - this.tly;
		var v1x = this.brx - this.tlx;
		var v1y = this.bry - this.tly;
		var v2x = x - this.tlx;
		var v2y = y - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - this.tlx;
		v0y = this.bly - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	Quad.prototype.at = function (i, xory)
	{
		if (xory)
		{
			switch (i)
			{
				case 0: return this.tlx;
				case 1: return this.trx;
				case 2: return this.brx;
				case 3: return this.blx;
				case 4: return this.tlx;
				default: return this.tlx;
			}
		}
		else
		{
			switch (i)
			{
				case 0: return this.tly;
				case 1: return this.try_;
				case 2: return this.bry;
				case 3: return this.bly;
				case 4: return this.tly;
				default: return this.tly;
			}
		}
	};
	Quad.prototype.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	Quad.prototype.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	Quad.prototype.intersects_segment = function (x1, y1, x2, y2)
	{
		if (this.contains_pt(x1, y1) || this.contains_pt(x2, y2))
			return true;
		var a1x, a1y, a2x, a2y;
		var i;
		for (i = 0; i < 4; i++)
		{
			a1x = this.at(i, true);
			a1y = this.at(i, false);
			a2x = this.at(i + 1, true);
			a2y = this.at(i + 1, false);
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	Quad.prototype.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.quad = Quad;
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
		return a;
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		index = cr.floor(index);
		if (index < 0 || index >= arr.length)
			return;							// index out of bounds
		if (index === 0)					// removing first item
			arr.shift();
		else if (index === arr.length - 1)	// removing last item
			arr.pop();
		else
		{
			for (i = index, len = arr.length - 1; i < len; i++)
				arr[i] = arr[i + 1];
			arr.length = len;
		}
	};
	cr.shallowAssignArray = function (dest, src)
	{
		dest.length = src.length;
		var i, len;
		for (i = 0, len = src.length; i < len; i++)
			dest[i] = src[i];
	};
	cr.appendArray = function (a, b)
	{
		a.push.apply(a, b);
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = arr.indexOf(item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.rotatePtAround = function (px, py, a, ox, oy, getx)
	{
		if (a === 0)
			return getx ? px : py;
		var sin_a = Math.sin(a);
		var cos_a = Math.cos(a);
		px -= ox;
		py -= oy;
		var left_sin_a = px * sin_a;
		var top_sin_a = py * sin_a;
		var left_cos_a = px * cos_a;
		var top_cos_a = py * cos_a;
		px = left_cos_a - top_sin_a;
		py = top_cos_a + left_sin_a;
		px += ox;
		py += oy;
		return getx ? px : py;
	}
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.unlerp = function (a, b, c)
	{
		if (a === b)
			return 0;		// avoid divide by 0
		return (c - a) / (b - a);
	};
	cr.anglelerp = function (a, b, x)
	{
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			return a + diff * x;
		}
		else
		{
			return a - diff * x;
		}
	};
	cr.qarp = function (a, b, c, x)
	{
		return cr.lerp(cr.lerp(a, b, x), cr.lerp(b, c, x), x);
	};
	cr.cubic = function (a, b, c, d, x)
	{
		return cr.lerp(cr.qarp(a, b, c, x), cr.qarp(b, c, d, x), x);
	};
	cr.cosp = function (a, b, x)
	{
		return (a + b + (a - b) * Math.cos(x * Math.PI)) / 2;
	};
	cr.hasAnyOwnProperty = function (o)
	{
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
				return true;
		}
		return false;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	var startup_time = +(new Date());
	cr.performance_now = function()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["mozNow"] !== "undefined")
				return winperf["mozNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now() - startup_time;
	};
	var isChrome = false;
	var isSafari = false;
	var isEjecta = false;
	if (typeof window !== "undefined")		// not c2 editor
	{
		isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		isSafari = !isChrome && /safari/i.test(navigator.userAgent);
		isEjecta = window["c2ejecta"];
	}
	var supports_set = ((!isSafari && !isEjecta) && (typeof Set !== "undefined" && typeof Set.prototype["forEach"] !== "undefined"));
	function ObjectSet_()
	{
		this.s = null;
		this.items = null;			// lazy allocated (hopefully results in better GC performance)
		this.item_count = 0;
		if (supports_set)
		{
			this.s = new Set();
		}
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	ObjectSet_.prototype.contains = function (x)
	{
		if (this.isEmpty())
			return false;
		if (supports_set)
			return this.s["has"](x);
		else
			return (this.items && this.items.hasOwnProperty(x));
	};
	ObjectSet_.prototype.add = function (x)
	{
		if (supports_set)
		{
			if (!this.s["has"](x))
			{
				this.s["add"](x);
				this.cache_valid = false;
			}
		}
		else
		{
			var str = x.toString();
			var items = this.items;
			if (!items)
			{
				this.items = {};
				this.items[str] = x;
				this.item_count = 1;
				this.cache_valid = false;
			}
			else if (!items.hasOwnProperty(str))
			{
				items[str] = x;
				this.item_count++;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.remove = function (x)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			if (this.s["has"](x))
			{
				this.s["delete"](x);
				this.cache_valid = false;
			}
		}
		else if (this.items)
		{
			var str = x.toString();
			var items = this.items;
			if (items.hasOwnProperty(str))
			{
				delete items[str];
				this.item_count--;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.clear = function (/*wipe_*/)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			this.s["clear"]();			// best!
		}
		else
		{
				this.items = null;		// creates garbage; will lazy allocate on next add()
			this.item_count = 0;
		}
		this.values_cache.length = 0;
		this.cache_valid = true;
	};
	ObjectSet_.prototype.isEmpty = function ()
	{
		return this.count() === 0;
	};
	ObjectSet_.prototype.count = function ()
	{
		if (supports_set)
			return this.s["size"];
		else
			return this.item_count;
	};
	var current_arr = null;
	var current_index = 0;
	function set_append_to_arr(x)
	{
		current_arr[current_index++] = x;
	};
	ObjectSet_.prototype.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		if (supports_set)
		{
			this.values_cache.length = this.s["size"];
			current_arr = this.values_cache;
			current_index = 0;
			this.s["forEach"](set_append_to_arr);
;
			current_arr = null;
			current_index = 0;
		}
		else
		{
			var values_cache = this.values_cache;
			values_cache.length = this.item_count;
			var p, n = 0, items = this.items;
			if (items)
			{
				for (p in items)
				{
					if (items.hasOwnProperty(p))
						values_cache[n++] = items[p];
				}
			}
;
		}
		this.cache_valid = true;
	};
	ObjectSet_.prototype.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.ObjectSet = ObjectSet_;
	var tmpSet = new cr.ObjectSet();
	cr.removeArrayDuplicates = function (arr)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; ++i)
		{
			tmpSet.add(arr[i]);
		}
		cr.shallowAssignArray(arr, tmpSet.valuesRef());
		tmpSet.clear();
	};
	function KahanAdder_()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	KahanAdder_.prototype.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanAdder_.prototype.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.KahanAdder = KahanAdder_;
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	function CollisionPoly_(pts_array_)
	{
		this.pts_cache = [];
		this.bboxLeft = 0;
		this.bboxTop = 0;
		this.bboxRight = 0;
		this.bboxBottom = 0;
		this.convexpolys = null;		// for physics behavior to cache separated polys
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	CollisionPoly_.prototype.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPoly_.prototype.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPoly_.prototype.update_bbox = function ()
	{
		var myptscache = this.pts_cache;
		var bboxLeft_ = myptscache[0];
		var bboxRight_ = bboxLeft_;
		var bboxTop_ = myptscache[1];
		var bboxBottom_ = bboxTop_;
		var x, y, i = 1, i2, len = this.pts_count;
		for ( ; i < len; ++i)
		{
			i2 = i*2;
			x = myptscache[i2];
			y = myptscache[i2+1];
			if (x < bboxLeft_)
				bboxLeft_ = x;
			if (x > bboxRight_)
				bboxRight_ = x;
			if (y < bboxTop_)
				bboxTop_ = y;
			if (y > bboxBottom_)
				bboxBottom_ = y;
		}
		this.bboxLeft = bboxLeft_;
		this.bboxRight = bboxRight_;
		this.bboxTop = bboxTop_;
		this.bboxBottom = bboxBottom_;
	};
	CollisionPoly_.prototype.set_from_rect = function(rc, offx, offy)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = rc.left - offx;
		myptscache[1] = rc.top - offy;
		myptscache[2] = rc.right - offx;
		myptscache[3] = rc.top - offy;
		myptscache[4] = rc.right - offx;
		myptscache[5] = rc.bottom - offy;
		myptscache[6] = rc.left - offx;
		myptscache[7] = rc.bottom - offy;
		this.cache_width = rc.right - rc.left;
		this.cache_height = rc.bottom - rc.top;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_poly = function (r)
	{
		this.pts_count = r.pts_count;
		cr.shallowAssignArray(this.pts_cache, r.pts_cache);
		this.bboxLeft = r.bboxLeft;
		this.bboxTop - r.bboxTop;
		this.bboxRight = r.bboxRight;
		this.bboxBottom = r.bboxBottom;
	};
	CollisionPoly_.prototype.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, i2, i21, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			i2 = i*2;
			i21 = i2+1;
			x = myptsarray[i2] * w;
			y = myptsarray[i21] * h;
			myptscache[i2] = (x * cosa) - (y * sina);
			myptscache[i21] = (y * cosa) + (x * sina);
		}
		this.update_bbox();
	};
	CollisionPoly_.prototype.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var i, i2, imod, len = this.pts_count;
		var a1x = this.bboxLeft - 110;
		var a1y = this.bboxTop - 101;
		var a3x = this.bboxRight + 131
		var a3y = this.bboxBottom + 120;
		var b1x, b1y, b2x, b2y;
		var count1 = 0, count2 = 0;
		for (i = 0; i < len; i++)
		{
			i2 = i*2;
			imod = ((i+1)%len)*2;
			b1x = myptscache[i2];
			b1y = myptscache[i2+1];
			b2x = myptscache[imod];
			b2y = myptscache[imod+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPoly_.prototype.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, i2, imod, leni, j, j2, jmod, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2];
			a1y = mypts[i2+1];
			a2x = mypts[imod];
			a2y = mypts[imod+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				j2 = j*2;
				jmod = ((j+1)%lenj)*2;
				b1x = rhspts[j2] + offx;
				b1y = rhspts[j2+1] + offy;
				b2x = rhspts[jmod] + offx;
				b2y = rhspts[jmod+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	CollisionPoly_.prototype.intersects_segment = function (offx, offy, x1, y1, x2, y2)
	{
		var mypts = this.pts_cache;
		if (this.contains_pt(x1 - offx, y1 - offy))
			return true;
		var i, leni, i2, imod;
		var a1x, a1y, a2x, a2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2] + offx;
			a1y = mypts[i2+1] + offy;
			a2x = mypts[imod] + offx;
			a2y = mypts[imod+1] + offy;
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	CollisionPoly_.prototype.mirror = function (px)
	{
		var i, leni, i2;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			this.pts_cache[i2] = px * 2 - this.pts_cache[i2];
		}
	};
	CollisionPoly_.prototype.flip = function (py)
	{
		var i, leni, i21;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i21 = i*2+1;
			this.pts_cache[i21] = py * 2 - this.pts_cache[i21];
		}
	};
	CollisionPoly_.prototype.diag = function ()
	{
		var i, leni, i2, i21, temp;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			i21 = i2+1;
			temp = this.pts_cache[i2];
			this.pts_cache[i2] = this.pts_cache[i21];
			this.pts_cache[i21] = temp;
		}
	};
	cr.CollisionPoly = CollisionPoly_;
	function SparseGrid_(cellwidth_, cellheight_)
	{
		this.cellwidth = cellwidth_;
		this.cellheight = cellheight_;
		this.cells = {};
	};
	SparseGrid_.prototype.totalCellCount = 0;
	SparseGrid_.prototype.getCell = function (x_, y_, create_if_missing)
	{
		var ret;
		var col = this.cells[x_];
		if (!col)
		{
			if (create_if_missing)
			{
				ret = allocGridCell(this, x_, y_);
				this.cells[x_] = {};
				this.cells[x_][y_] = ret;
				return ret;
			}
			else
				return null;
		}
		ret = col[y_];
		if (ret)
			return ret;
		else if (create_if_missing)
		{
			ret = allocGridCell(this, x_, y_);
			this.cells[x_][y_] = ret;
			return ret;
		}
		else
			return null;
	};
	SparseGrid_.prototype.XToCell = function (x_)
	{
		return cr.floor(x_ / this.cellwidth);
	};
	SparseGrid_.prototype.YToCell = function (y_)
	{
		return cr.floor(y_ / this.cellheight);
	};
	SparseGrid_.prototype.update = function (inst, oldrange, newrange)
	{
		var x, lenx, y, leny, cell;
		if (oldrange)
		{
			for (x = oldrange.left, lenx = oldrange.right; x <= lenx; ++x)
			{
				for (y = oldrange.top, leny = oldrange.bottom; y <= leny; ++y)
				{
					if (newrange && newrange.contains_pt(x, y))
						continue;	// is still in this cell
					cell = this.getCell(x, y, false);	// don't create if missing
					if (!cell)
						continue;	// cell does not exist yet
					cell.remove(inst);
					if (cell.isEmpty())
					{
						freeGridCell(cell);
						this.cells[x][y] = null;
					}
				}
			}
		}
		if (newrange)
		{
			for (x = newrange.left, lenx = newrange.right; x <= lenx; ++x)
			{
				for (y = newrange.top, leny = newrange.bottom; y <= leny; ++y)
				{
					if (oldrange && oldrange.contains_pt(x, y))
						continue;	// is still in this cell
					this.getCell(x, y, true).insert(inst);
				}
			}
		}
	};
	SparseGrid_.prototype.queryRange = function (rc, result)
	{
		var x, lenx, ystart, y, leny, cell;
		x = this.XToCell(rc.left);
		ystart = this.YToCell(rc.top);
		lenx = this.XToCell(rc.right);
		leny = this.YToCell(rc.bottom);
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.dump(result);
			}
		}
	};
	cr.SparseGrid = SparseGrid_;
	var gridcellcache = [];
	function allocGridCell(grid_, x_, y_)
	{
		var ret;
		SparseGrid_.prototype.totalCellCount++;
		if (gridcellcache.length)
		{
			ret = gridcellcache.pop();
			ret.grid = grid_;
			ret.x = x_;
			ret.y = y_;
			return ret;
		}
		else
			return new cr.GridCell(grid_, x_, y_);
	};
	function freeGridCell(c)
	{
		SparseGrid_.prototype.totalCellCount--;
		c.objects.clear();
		if (gridcellcache.length < 1000)
			gridcellcache.push(c);
	};
	function GridCell_(grid_, x_, y_)
	{
		this.grid = grid_;
		this.x = x_;
		this.y = y_;
		this.objects = new cr.ObjectSet();
	};
	GridCell_.prototype.isEmpty = function ()
	{
		return this.objects.isEmpty();
	};
	GridCell_.prototype.insert = function (inst)
	{
		this.objects.add(inst);
	};
	GridCell_.prototype.remove = function (inst)
	{
		this.objects.remove(inst);
	};
	GridCell_.prototype.dump = function (result)
	{
		cr.appendArray(result, this.objects.valuesRef());
	};
	cr.GridCell = GridCell_;
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return cr.round(x * 1000000) / 1000000;
	};
	/*
	var localeCompare_options = {
		"usage": "search",
		"sensitivity": "accent"
	};
	var has_localeCompare = !!"a".localeCompare;
	var localeCompare_works1 = (has_localeCompare && "a".localeCompare("A", undefined, localeCompare_options) === 0);
	var localeCompare_works2 = (has_localeCompare && "a".localeCompare("á", undefined, localeCompare_options) !== 0);
	var supports_localeCompare = (has_localeCompare && localeCompare_works1 && localeCompare_works2);
	*/
	cr.equals_nocase = function (a, b)
	{
		if (typeof a !== "string" || typeof b !== "string")
			return false;
		if (a.length !== b.length)
			return false;
		if (a === b)
			return true;
		/*
		if (supports_localeCompare)
		{
			return (a.localeCompare(b, undefined, localeCompare_options) === 0);
		}
		else
		{
		*/
			return a.toLowerCase() === b.toLowerCase();
	};
}());
var MatrixArray=typeof Float32Array!=="undefined"?Float32Array:Array,glMatrixArrayType=MatrixArray,vec3={},mat3={},mat4={},quat4={};vec3.create=function(a){var b=new MatrixArray(3);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2]);return b};vec3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b};vec3.add=function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];return c};
vec3.subtract=function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c};vec3.negate=function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b};vec3.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c};
vec3.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(g){if(g===1)return b[0]=c,b[1]=d,b[2]=e,b}else return b[0]=0,b[1]=0,b[2]=0,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b};vec3.cross=function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c};vec3.length=function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)};vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]};
vec3.direction=function(a,b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c};vec3.lerp=function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d};vec3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};
mat3.create=function(a){var b=new MatrixArray(9);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]);return b};mat3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b};mat3.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a};
mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b};mat3.toMat4=function(a,b){b||(b=mat4.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b};
mat3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"};mat4.create=function(a){var b=new MatrixArray(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b};
mat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b};mat4.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a};
mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b};
mat4.determinant=function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],n=a[11],o=a[12],m=a[13],p=a[14],a=a[15];return o*k*h*e-j*m*h*e-o*f*l*e+g*m*l*e+j*f*p*e-g*k*p*e-o*k*d*i+j*m*d*i+o*c*l*i-b*m*l*i-j*c*p*i+b*k*p*i+o*f*d*n-g*m*d*n-o*c*h*n+b*m*h*n+g*c*p*n-b*f*p*n-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a};
mat4.inverse=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],n=a[10],o=a[11],m=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*m,y=k*r-n*m,z=k*s-o*m,C=l*r-n*p,D=l*s-o*p,E=n*s-o*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+n*v-o*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-m*w+r*t-s*B)*q;b[7]=(k*w-n*t+o*B)*q;b[8]=(f*D-h*z+j*x)*q;
b[9]=(-c*D+d*z-g*x)*q;b[10]=(m*v-p*t+s*A)*q;b[11]=(-k*v+l*t-o*A)*q;b[12]=(-f*C+h*y-i*x)*q;b[13]=(c*C-d*y+e*x)*q;b[14]=(-m*u+p*B-r*A)*q;b[15]=(k*u-l*B+n*A)*q;return b};mat4.toRotationMat=function(a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
mat4.toMat3=function(a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b};mat4.toInverseMat3=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,n=-k*g+h*i,o=j*g-f*i,m=c*l+d*n+e*o;if(!m)return null;m=1/m;b||(b=mat3.create());b[0]=l*m;b[1]=(-k*d+e*j)*m;b[2]=(h*d-e*f)*m;b[3]=n*m;b[4]=(k*c-e*i)*m;b[5]=(-h*c+e*g)*m;b[6]=o*m;b[7]=(-j*c+d*i)*m;b[8]=(f*c-d*g)*m;return b};
mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],n=a[9],o=a[10],m=a[11],p=a[12],r=a[13],s=a[14],a=a[15],A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14],b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*n+u*r;c[2]=A*g+B*j+t*o+u*s;c[3]=A*f+B*k+t*m+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*n+y*r;c[6]=v*g+w*j+x*o+y*s;c[7]=v*f+w*k+x*m+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*n+E*r;c[10]=z*g+C*
j+D*o+E*s;c[11]=z*f+C*k+D*m+E*a;c[12]=q*d+F*h+G*l+b*p;c[13]=q*e+F*i+G*n+b*r;c[14]=q*g+F*j+G*o+b*s;c[15]=q*f+F*k+G*m+b*a;return c};mat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c};
mat4.multiplyVec4=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c};
mat4.translate=function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,i,j,k,l,n,o,m,p,r;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];i=a[3];j=a[4];k=a[5];l=a[6];n=a[7];o=a[8];m=a[9];p=a[10];r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=n;c[8]=o;c[9]=m;c[10]=p;c[11]=r;c[12]=g*d+j*e+o*b+a[12];c[13]=f*d+k*e+m*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+n*e+r*b+a[15];
return c};mat4.scale=function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c};
mat4.rotate=function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,i,j,k,l,n,o,m,p,r,s,A,B,t,u,v,w,x,y,z;if(!f)return null;f!==1&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);i=Math.cos(b);j=1-i;b=a[0];f=a[1];k=a[2];l=a[3];n=a[4];o=a[5];m=a[6];p=a[7];r=a[8];s=a[9];A=a[10];B=a[11];t=e*e*j+i;u=g*e*j+c*h;v=c*e*j-g*h;w=e*g*j-c*h;x=g*g*j+i;y=c*g*j+e*h;z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+n*u+r*v;d[1]=f*t+o*u+s*v;d[2]=k*t+m*u+A*
v;d[3]=l*t+p*u+B*v;d[4]=b*w+n*x+r*y;d[5]=f*w+o*x+s*y;d[6]=k*w+m*x+A*y;d[7]=l*w+p*x+B*y;d[8]=b*z+n*e+r*g;d[9]=f*z+o*e+s*g;d[10]=k*z+m*e+A*g;d[11]=l*z+p*e+B*g;return d};mat4.rotateX=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c};
mat4.rotateY=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c};
mat4.rotateZ=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c};
mat4.frustum=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f};mat4.perspective=function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return mat4.frustum(-b,b,-a,a,c,d,e)};
mat4.ortho=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f};
mat4.lookAt=function(a,b,c,d){d||(d=mat4.create());var e,g,f,h,i,j,k,l,n=a[0],o=a[1],a=a[2];g=c[0];f=c[1];e=c[2];c=b[1];j=b[2];if(n===b[0]&&o===c&&a===j)return mat4.identity(d);c=n-b[0];j=o-b[1];k=a-b[2];l=1/Math.sqrt(c*c+j*j+k*k);c*=l;j*=l;k*=l;b=f*k-e*j;e=e*c-g*k;g=g*j-f*c;(l=Math.sqrt(b*b+e*e+g*g))?(l=1/l,b*=l,e*=l,g*=l):g=e=b=0;f=j*g-k*e;h=k*b-c*g;i=c*e-j*b;(l=Math.sqrt(f*f+h*h+i*i))?(l=1/l,f*=l,h*=l,i*=l):i=h=f=0;d[0]=b;d[1]=f;d[2]=c;d[3]=0;d[4]=e;d[5]=h;d[6]=j;d[7]=0;d[8]=g;d[9]=i;d[10]=k;d[11]=
0;d[12]=-(b*n+e*o+g*a);d[13]=-(f*n+h*o+i*a);d[14]=-(c*n+j*o+k*a);d[15]=1;return d};mat4.fromRotationTranslation=function(a,b,c){c||(c=mat4.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,i=e+e,j=g+g,a=d*h,k=d*i;d*=j;var l=e*i;e*=j;g*=j;h*=f;i*=f;f*=j;c[0]=1-(l+g);c[1]=k+f;c[2]=d-i;c[3]=0;c[4]=k-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+i;c[9]=e-h;c[10]=1-(a+l);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c};
mat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"};quat4.create=function(a){var b=new MatrixArray(4);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]);return b};quat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b};
quat4.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};quat4.inverse=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};quat4.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};
quat4.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(f===0)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};quat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],i=b[2],b=b[3];c[0]=d*b+a*f+e*i-g*h;c[1]=e*b+a*h+g*f-d*i;c[2]=g*b+a*i+d*h-e*f;c[3]=a*b-d*f-e*h-g*i;return c};
quat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],i=a*d+f*g-h*e,j=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=i*a+d*-b+j*-h-k*-f;c[1]=j*a+d*-f+k*-b-i*-h;c[2]=k*a+d*-h+i*-f-j*-b;return c};quat4.toMat3=function(a,b){b||(b=mat3.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(j+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(j+l);return b};
quat4.toMat4=function(a,b){b||(b=mat4.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(j+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(j+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
quat4.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(Math.abs(e)>=1)return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(Math.abs(f)<0.001)return d[0]=a[0]*0.5+b[0]*0.5,d[1]=a[1]*0.5+b[1]*0.5,d[2]=a[2]*0.5+b[2]*0.5,d[3]=a[3]*0.5+b[3]*0.5,d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};
quat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};
(function()
{
	var MAX_VERTICES = 8000;						// equates to 2500 objects being drawn
	var MAX_INDICES = (MAX_VERTICES / 2) * 3;		// 6 indices for every 4 vertices
	var MAX_POINTS = 8000;
	var MULTI_BUFFERS = 4;							// cycle 4 buffers to try and avoid blocking
	var BATCH_NULL = 0;
	var BATCH_QUAD = 1;
	var BATCH_SETTEXTURE = 2;
	var BATCH_SETOPACITY = 3;
	var BATCH_SETBLEND = 4;
	var BATCH_UPDATEMODELVIEW = 5;
	var BATCH_RENDERTOTEXTURE = 6;
	var BATCH_CLEAR = 7;
	var BATCH_POINTS = 8;
	var BATCH_SETPROGRAM = 9;
	var BATCH_SETPROGRAMPARAMETERS = 10;
	var BATCH_SETTEXTURE1 = 11;
	function GLWrap_(gl, isMobile)
	{
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.width = 0;		// not yet known, wait for call to setSize()
		this.height = 0;
		this.cam = vec3.create([0, 0, 100]);			// camera position
		this.look = vec3.create([0, 0, 0]);				// lookat position
		this.up = vec3.create([0, 1, 0]);				// up vector
		this.worldScale = vec3.create([1, 1, 1]);		// world scaling factor
		this.enable_mipmaps = true;
		this.matP = mat4.create();						// perspective matrix
		this.matMV = mat4.create();						// model view matrix
		this.lastMV = mat4.create();
		this.currentMV = mat4.create();
		this.gl = gl;
		this.initState();
	};
	GLWrap_.prototype.initState = function ()
	{
		var gl = this.gl;
		var i, len;
		this.lastOpacity = 1;
		this.lastTexture0 = null;			// last bound to TEXTURE0
		this.lastTexture1 = null;			// last bound to TEXTURE1
		this.currentOpacity = 1;
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.CULL_FACE);
		gl.disable(gl.DEPTH_TEST);
		this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		this.lastSrcBlend = gl.ONE;
		this.lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
		this.pointBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
		this.vertexBuffers = new Array(MULTI_BUFFERS);
		this.texcoordBuffers = new Array(MULTI_BUFFERS);
		for (i = 0; i < MULTI_BUFFERS; i++)
		{
			this.vertexBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[i]);
			this.texcoordBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[i]);
		}
		this.curBuffer = 0;
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		this.vertexData = new Float32Array(MAX_VERTICES * 2);
		this.texcoordData = new Float32Array(MAX_VERTICES * 2);
		this.pointData = new Float32Array(MAX_POINTS * 4);
		var indexData = new Uint16Array(MAX_INDICES);
		i = 0, len = MAX_INDICES;
		var fv = 0;
		while (i < len)
		{
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 1;	// top right
			indexData[i++] = fv + 2;	// bottom right (first tri)
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 2;	// bottom right
			indexData[i++] = fv + 3;	// bottom left
			fv += 4;
		}
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);
		this.vertexPtr = 0;
		this.pointPtr = 0;
		var fsSource, vsSource;
		this.shaderPrograms = [];
		fsSource = [
			"varying mediump vec2 vTex;",
			"uniform lowp float opacity;",
			"uniform lowp sampler2D samplerFront;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, vTex);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		vsSource = [
			"attribute highp vec2 aPos;",
			"attribute mediump vec2 aTex;",
			"varying mediump vec2 vTex;",
			"uniform highp mat4 matP;",
			"uniform highp mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	vTex = aTex;",
			"}"
		].join("\n");
		var shaderProg = this.createShaderProgram({src: fsSource}, vsSource, "<default>");
;
		this.shaderPrograms.push(shaderProg);		// Default shader is always shader 0
		fsSource = [
			"uniform mediump sampler2D samplerFront;",
			"varying lowp float opacity;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, gl_PointCoord);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		var pointVsSource = [
			"attribute vec4 aPos;",
			"varying float opacity;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	gl_PointSize = aPos.z;",
			"	opacity = aPos.w;",
			"}"
		].join("\n");
		shaderProg = this.createShaderProgram({src: fsSource}, pointVsSource, "<point>");
;
		this.shaderPrograms.push(shaderProg);		// Point shader is always shader 1
		for (var shader_name in cr.shaders)
		{
			if (cr.shaders.hasOwnProperty(shader_name))
				this.shaderPrograms.push(this.createShaderProgram(cr.shaders[shader_name], vsSource, shader_name));
		}
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.batch = [];
		this.batchPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.lastProgram = -1;				// start -1 so first switchProgram can do work
		this.currentProgram = -1;			// current program during batch execution
		this.currentShader = null;
		this.fbo = gl.createFramebuffer();
		this.renderToTex = null;
		this.tmpVec3 = vec3.create([0, 0, 0]);
;
;
		var pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
		this.minPointSize = pointsizes[0];
		this.maxPointSize = pointsizes[1];
		if (this.maxPointSize > 2048)
			this.maxPointSize = 2048;
;
		this.switchProgram(0);
		cr.seal(this);
	};
	function GLShaderProgram(gl, shaderProgram, name)
	{
		this.gl = gl;
		this.shaderProgram = shaderProgram;
		this.name = name;
		this.locAPos = gl.getAttribLocation(shaderProgram, "aPos");
		this.locATex = gl.getAttribLocation(shaderProgram, "aTex");
		this.locMatP = gl.getUniformLocation(shaderProgram, "matP");
		this.locMatMV = gl.getUniformLocation(shaderProgram, "matMV");
		this.locOpacity = gl.getUniformLocation(shaderProgram, "opacity");
		this.locSamplerFront = gl.getUniformLocation(shaderProgram, "samplerFront");
		this.locSamplerBack = gl.getUniformLocation(shaderProgram, "samplerBack");
		this.locDestStart = gl.getUniformLocation(shaderProgram, "destStart");
		this.locDestEnd = gl.getUniformLocation(shaderProgram, "destEnd");
		this.locSeconds = gl.getUniformLocation(shaderProgram, "seconds");
		this.locPixelWidth = gl.getUniformLocation(shaderProgram, "pixelWidth");
		this.locPixelHeight = gl.getUniformLocation(shaderProgram, "pixelHeight");
		this.locLayerScale = gl.getUniformLocation(shaderProgram, "layerScale");
		this.locLayerAngle = gl.getUniformLocation(shaderProgram, "layerAngle");
		this.locViewOrigin = gl.getUniformLocation(shaderProgram, "viewOrigin");
		this.hasAnyOptionalUniforms = !!(this.locPixelWidth || this.locPixelHeight || this.locSeconds || this.locSamplerBack || this.locDestStart || this.locDestEnd || this.locLayerScale || this.locLayerAngle || this.locViewOrigin);
		if (this.locOpacity)
			gl.uniform1f(this.locOpacity, 1);
		if (this.locSamplerFront)
			gl.uniform1i(this.locSamplerFront, 0);
		if (this.locSamplerBack)
			gl.uniform1i(this.locSamplerBack, 1);
		if (this.locDestStart)
			gl.uniform2f(this.locDestStart, 0.0, 0.0);
		if (this.locDestEnd)
			gl.uniform2f(this.locDestEnd, 1.0, 1.0);
		if (this.locLayerScale)
			gl.uniform1f(this.locLayerScale, 1.0);
		if (this.locLayerAngle)
			gl.uniform1f(this.locLayerAngle, 0.0);
		if (this.locViewOrigin)
			gl.uniform2f(this.locViewOrigin, 0.0, 0.0);
		this.hasCurrentMatMV = false;		// matMV needs updating
	};
	GLWrap_.prototype.createShaderProgram = function(shaderEntry, vsSource, name)
	{
		var gl = this.gl;
		var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(fragmentShader, shaderEntry.src);
		gl.compileShader(fragmentShader);
		if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			return null;
		}
		var vertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(vertexShader, vsSource);
		gl.compileShader(vertexShader);
		if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			return null;
		}
		var shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, fragmentShader);
		gl.attachShader(shaderProgram, vertexShader);
		gl.linkProgram(shaderProgram);
		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			gl.deleteProgram(shaderProgram);
			return null;
		}
		gl.useProgram(shaderProgram);
;
		gl.deleteShader(fragmentShader);
		gl.deleteShader(vertexShader);
		var ret = new GLShaderProgram(gl, shaderProgram, name);
		ret.extendBoxHorizontal = shaderEntry.extendBoxHorizontal || 0;
		ret.extendBoxVertical = shaderEntry.extendBoxVertical || 0;
		ret.crossSampling = !!shaderEntry.crossSampling;
		ret.animated = !!shaderEntry.animated;
		ret.parameters = shaderEntry.parameters || [];
		var i, len;
		for (i = 0, len = ret.parameters.length; i < len; i++)
		{
			ret.parameters[i][1] = gl.getUniformLocation(shaderProgram, ret.parameters[i][0]);
			gl.uniform1f(ret.parameters[i][1], 0);
		}
		cr.seal(ret);
		return ret;
	};
	GLWrap_.prototype.getShaderIndex = function(name_)
	{
		var i, len;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			if (this.shaderPrograms[i].name === name_)
				return i;
		}
		return -1;
	};
	GLWrap_.prototype.project = function (x, y, out)
	{
		var mv = this.matMV;
		var proj = this.matP;
		var fTempo = [0, 0, 0, 0, 0, 0, 0, 0];
		fTempo[0] = mv[0]*x+mv[4]*y+mv[12];
		fTempo[1] = mv[1]*x+mv[5]*y+mv[13];
		fTempo[2] = mv[2]*x+mv[6]*y+mv[14];
		fTempo[3] = mv[3]*x+mv[7]*y+mv[15];
		fTempo[4] = proj[0]*fTempo[0]+proj[4]*fTempo[1]+proj[8]*fTempo[2]+proj[12]*fTempo[3];
		fTempo[5] = proj[1]*fTempo[0]+proj[5]*fTempo[1]+proj[9]*fTempo[2]+proj[13]*fTempo[3];
		fTempo[6] = proj[2]*fTempo[0]+proj[6]*fTempo[1]+proj[10]*fTempo[2]+proj[14]*fTempo[3];
		fTempo[7] = -fTempo[2];
		if(fTempo[7]===0.0)	//The w value
			return;
		fTempo[7]=1.0/fTempo[7];
		fTempo[4]*=fTempo[7];
		fTempo[5]*=fTempo[7];
		fTempo[6]*=fTempo[7];
		out[0]=(fTempo[4]*0.5+0.5)*this.width;
		out[1]=(fTempo[5]*0.5+0.5)*this.height;
	};
	GLWrap_.prototype.setSize = function(w, h, force)
	{
		if (this.width === w && this.height === h && !force)
			return;
		this.endBatch();
		this.width = w;
		this.height = h;
		this.gl.viewport(0, 0, w, h);
		mat4.perspective(45, w / h, 1, 1000, this.matP);
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		var tl = [0, 0];
		var br = [0, 0];
		this.project(0, 0, tl);
		this.project(1, 1, br);
		this.worldScale[0] = 1 / (br[0] - tl[0]);
		this.worldScale[1] = -1 / (br[1] - tl[1]);
		var i, len, s;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			s = this.shaderPrograms[i];
			s.hasCurrentMatMV = false;
			if (s.locMatP)
			{
				this.gl.useProgram(s.shaderProgram);
				this.gl.uniformMatrix4fv(s.locMatP, false, this.matP);
			}
		}
		this.gl.useProgram(this.shaderPrograms[this.lastProgram].shaderProgram);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE1);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.lastTexture0 = null;
		this.lastTexture1 = null;
	};
	GLWrap_.prototype.resetModelView = function ()
	{
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		mat4.scale(this.matMV, this.worldScale);
	};
	GLWrap_.prototype.translate = function (x, y)
	{
		if (x === 0 && y === 0)
			return;
		this.tmpVec3[0] = x;// * this.worldScale[0];
		this.tmpVec3[1] = y;// * this.worldScale[1];
		this.tmpVec3[2] = 0;
		mat4.translate(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.scale = function (x, y)
	{
		if (x === 1 && y === 1)
			return;
		this.tmpVec3[0] = x;
		this.tmpVec3[1] = y;
		this.tmpVec3[2] = 1;
		mat4.scale(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.rotateZ = function (a)
	{
		if (a === 0)
			return;
		mat4.rotateZ(this.matMV, a);
	};
	GLWrap_.prototype.updateModelView = function()
	{
		var anydiff = false;
		for (var i = 0; i < 16; i++)
		{
			if (this.lastMV[i] !== this.matMV[i])
			{
				anydiff = true;
				break;
			}
		}
		if (!anydiff)
			return;
		var b = this.pushBatch();
		b.type = BATCH_UPDATEMODELVIEW;
		if (b.mat4param)
			mat4.set(this.matMV, b.mat4param);
		else
			b.mat4param = mat4.create(this.matMV);
		mat4.set(this.matMV, this.lastMV);
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	/*
	var debugBatch = false;
	jQuery(document).mousedown(
		function(info) {
			if (info.which === 2)
				debugBatch = true;
		}
	);
	*/
	function GLBatchJob(type_, glwrap_)
	{
		this.type = type_;
		this.glwrap = glwrap_;
		this.gl = glwrap_.gl;
		this.opacityParam = 0;		// for setOpacity()
		this.startIndex = 0;		// for quad()
		this.indexCount = 0;		// "
		this.texParam = null;		// for setTexture()
		this.mat4param = null;		// for updateModelView()
		this.shaderParams = [];		// for user parameters
		cr.seal(this);
	};
	GLBatchJob.prototype.doSetTexture = function ()
	{
		this.gl.bindTexture(this.gl.TEXTURE_2D, this.texParam);
	};
	GLBatchJob.prototype.doSetTexture1 = function ()
	{
		var gl = this.gl;
		gl.activeTexture(gl.TEXTURE1);
		gl.bindTexture(gl.TEXTURE_2D, this.texParam);
		gl.activeTexture(gl.TEXTURE0);
	};
	GLBatchJob.prototype.doSetOpacity = function ()
	{
		var o = this.opacityParam;
		var glwrap = this.glwrap;
		glwrap.currentOpacity = o;
		var curProg = glwrap.currentShader;
		if (curProg.locOpacity)
			this.gl.uniform1f(curProg.locOpacity, o);
	};
	GLBatchJob.prototype.doQuad = function ()
	{
		this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, this.startIndex * 2);
	};
	GLBatchJob.prototype.doSetBlend = function ()
	{
		this.gl.blendFunc(this.startIndex, this.indexCount);
	};
	GLBatchJob.prototype.doUpdateModelView = function ()
	{
		var i, len, s, shaderPrograms = this.glwrap.shaderPrograms, currentProgram = this.glwrap.currentProgram;
		for (i = 0, len = shaderPrograms.length; i < len; i++)
		{
			s = shaderPrograms[i];
			if (i === currentProgram && s.locMatMV)
			{
				this.gl.uniformMatrix4fv(s.locMatMV, false, this.mat4param);
				s.hasCurrentMatMV = true;
			}
			else
				s.hasCurrentMatMV = false;
		}
		mat4.set(this.mat4param, this.glwrap.currentMV);
	};
	GLBatchJob.prototype.doRenderToTexture = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		if (this.texParam)
		{
			if (glwrap.lastTexture1 === this.texParam)
			{
				gl.activeTexture(gl.TEXTURE1);
				gl.bindTexture(gl.TEXTURE_2D, null);
				glwrap.lastTexture1 = null;
				gl.activeTexture(gl.TEXTURE0);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER, glwrap.fbo);
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texParam, 0);
		}
		else
		{
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		}
	};
	GLBatchJob.prototype.doClear = function ()
	{
		var gl = this.gl;
		if (this.startIndex === 0)		// clear whole surface
		{
			gl.clearColor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clear(gl.COLOR_BUFFER_BIT);
		}
		else							// clear rectangle
		{
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clearColor(0, 0, 0, 0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);
			gl.disable(gl.SCISSOR_TEST);
		}
	};
	GLBatchJob.prototype.doPoints = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[1];
		gl.useProgram(s.shaderProgram);
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		gl.enableVertexAttribArray(s.locAPos);
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.pointBuffer);
		gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.POINTS, this.startIndex / 4, this.indexCount);
		s = glwrap.currentShader;
		gl.useProgram(s.shaderProgram);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	};
	GLBatchJob.prototype.doSetProgram = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[this.startIndex];		// recycled param to save memory
		glwrap.currentProgram = this.startIndex;			// current batch program
		glwrap.currentShader = s;
		gl.useProgram(s.shaderProgram);						// switch to
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		if (s.locOpacity)
			gl.uniform1f(s.locOpacity, glwrap.currentOpacity);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	}
	GLBatchJob.prototype.doSetProgramParameters = function ()
	{
		var i, len, s = this.glwrap.currentShader;
		var gl = this.gl;
		var mat4param = this.mat4param;
		if (s.locSamplerBack && this.glwrap.lastTexture1 !== this.texParam)
		{
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, this.texParam);
			this.glwrap.lastTexture1 = this.texParam;
			gl.activeTexture(gl.TEXTURE0);
		}
		if (s.locPixelWidth)
			gl.uniform1f(s.locPixelWidth, mat4param[0]);
		if (s.locPixelHeight)
			gl.uniform1f(s.locPixelHeight, mat4param[1]);
		if (s.locDestStart)
			gl.uniform2f(s.locDestStart, mat4param[2], mat4param[3]);
		if (s.locDestEnd)
			gl.uniform2f(s.locDestEnd, mat4param[4], mat4param[5]);
		if (s.locLayerScale)
			gl.uniform1f(s.locLayerScale, mat4param[6]);
		if (s.locLayerAngle)
			gl.uniform1f(s.locLayerAngle, mat4param[7]);
		if (s.locViewOrigin)
			gl.uniform2f(s.locViewOrigin, mat4param[8], mat4param[9]);
		if (s.locSeconds)
			gl.uniform1f(s.locSeconds, cr.performance_now() / 1000.0);
		if (s.parameters.length)
		{
			for (i = 0, len = s.parameters.length; i < len; i++)
			{
				gl.uniform1f(s.parameters[i][1], this.shaderParams[i]);
			}
		}
	};
	GLWrap_.prototype.pushBatch = function ()
	{
		if (this.batchPtr === this.batch.length)
			this.batch.push(new GLBatchJob(BATCH_NULL, this));
		return this.batch[this.batchPtr++];
	};
	GLWrap_.prototype.endBatch = function ()
	{
		if (this.batchPtr === 0)
			return;
		if (this.gl.isContextLost())
			return;
		var gl = this.gl;
		if (this.pointPtr > 0)
		{
			gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.pointData.subarray(0, this.pointPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name === "<point>")
				gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		}
		if (this.vertexPtr > 0)
		{
			var s = this.currentShader;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.texcoordData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locATex >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
		var i, len, b;
		for (i = 0, len = this.batchPtr; i < len; i++)
		{
			b = this.batch[i];
			switch (b.type) {
			case 1:
				b.doQuad();
				break;
			case 2:
				b.doSetTexture();
				break;
			case 3:
				b.doSetOpacity();
				break;
			case 4:
				b.doSetBlend();
				break;
			case 5:
				b.doUpdateModelView();
				break;
			case 6:
				b.doRenderToTexture();
				break;
			case 7:
				b.doClear();
				break;
			case 8:
				b.doPoints();
				break;
			case 9:
				b.doSetProgram();
				break;
			case 10:
				b.doSetProgramParameters();
				break;
			case 11:
				b.doSetTexture1();
				break;
			}
		}
		this.batchPtr = 0;
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.curBuffer++;
		if (this.curBuffer >= MULTI_BUFFERS)
			this.curBuffer = 0;
	};
	GLWrap_.prototype.setOpacity = function (op)
	{
		if (op === this.lastOpacity)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETOPACITY;
		b.opacityParam = op;
		this.lastOpacity = op;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setTexture = function (tex)
	{
		if (tex === this.lastTexture0)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_SETTEXTURE;
		b.texParam = tex;
		this.lastTexture0 = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setBlend = function (s, d)
	{
		if (s === this.lastSrcBlend && d === this.lastDestBlend)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETBLEND;
		b.startIndex = s;		// recycle params to save memory
		b.indexCount = d;
		this.lastSrcBlend = s;
		this.lastDestBlend = d;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.isPremultipliedAlphaBlend = function ()
	{
		return (this.lastSrcBlend === this.gl.ONE && this.lastDestBlend === this.gl.ONE_MINUS_SRC_ALPHA);
	};
	GLWrap_.prototype.setAlphaBlend = function ()
	{
		this.setBlend(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	GLWrap_.prototype.setNoPremultiplyAlphaBlend = function ()
	{
		this.setBlend(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	var LAST_VERTEX = MAX_VERTICES * 2 - 8;
	GLWrap_.prototype.quad = function(tlx, tly, trx, try_, brx, bry, blx, bly)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = 0;
		vd[v] = tly;
		td[v++] = 0;
		vd[v] = trx;
		td[v++] = 1;
		vd[v] = try_;
		td[v++] = 0;
		vd[v] = brx;
		td[v++] = 1;
		vd[v] = bry;
		td[v++] = 1;
		vd[v] = blx;
		td[v++] = 0;
		vd[v] = bly;
		td[v++] = 1;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTex = function(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		var rc_left = rcTex.left;
		var rc_top = rcTex.top;
		var rc_right = rcTex.right;
		var rc_bottom = rcTex.bottom;
		vd[v] = tlx;
		td[v++] = rc_left;
		vd[v] = tly;
		td[v++] = rc_top;
		vd[v] = trx;
		td[v++] = rc_right;
		vd[v] = try_;
		td[v++] = rc_top;
		vd[v] = brx;
		td[v++] = rc_right;
		vd[v] = bry;
		td[v++] = rc_bottom;
		vd[v] = blx;
		td[v++] = rc_left;
		vd[v] = bly;
		td[v++] = rc_bottom;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTexUV = function(tlx, tly, trx, try_, brx, bry, blx, bly, tlu, tlv, tru, trv, bru, brv, blu, blv)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = tlu;
		vd[v] = tly;
		td[v++] = tlv;
		vd[v] = trx;
		td[v++] = tru;
		vd[v] = try_;
		td[v++] = trv;
		vd[v] = brx;
		td[v++] = bru;
		vd[v] = bry;
		td[v++] = brv;
		vd[v] = blx;
		td[v++] = blu;
		vd[v] = bly;
		td[v++] = blv;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.convexPoly = function(pts)
	{
		var pts_count = pts.length / 2;
;
		var tris = pts_count - 2;	// 3 points = 1 tri, 4 points = 2 tris, 5 points = 3 tris etc.
		var last_tri = tris - 1;
		var p0x = pts[0];
		var p0y = pts[1];
		var i, i2, p1x, p1y, p2x, p2y, p3x, p3y;
		for (i = 0; i < tris; i += 2)		// draw 2 triangles at a time
		{
			i2 = i * 2;
			p1x = pts[i2 + 2];
			p1y = pts[i2 + 3];
			p2x = pts[i2 + 4];
			p2y = pts[i2 + 5];
			if (i === last_tri)
			{
				this.quad(p0x, p0y, p1x, p1y, p2x, p2y, p2x, p2y);
			}
			else
			{
				p3x = pts[i2 + 6];
				p3y = pts[i2 + 7];
				this.quad(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y);
			}
		}
	};
	var LAST_POINT = MAX_POINTS - 4;
	GLWrap_.prototype.point = function(x_, y_, size_, opacity_)
	{
		if (this.pointPtr >= LAST_POINT)
			this.endBatch();
		var p = this.pointPtr;			// point cursor
		var pd = this.pointData;		// point data array
		if (this.hasPointBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount++;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_POINTS;
			b.startIndex = p;
			b.indexCount = 1;
			this.hasPointBatchTop = true;
			this.hasQuadBatchTop = false;
		}
		pd[p++] = x_;
		pd[p++] = y_;
		pd[p++] = size_;
		pd[p++] = opacity_;
		this.pointPtr = p;
	};
	GLWrap_.prototype.switchProgram = function (progIndex)
	{
		if (this.lastProgram === progIndex)
			return;			// no change
		var shaderProg = this.shaderPrograms[progIndex];
		if (!shaderProg)
		{
			if (this.lastProgram === 0)
				return;								// already on default shader
			progIndex = 0;
			shaderProg = this.shaderPrograms[0];
		}
		var b = this.pushBatch();
		b.type = BATCH_SETPROGRAM;
		b.startIndex = progIndex;
		this.lastProgram = progIndex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.programUsesDest = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd);
	};
	GLWrap_.prototype.programUsesCrossSampling = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd || s.crossSampling);
	};
	GLWrap_.prototype.programExtendsBox = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return s.extendBoxHorizontal !== 0 || s.extendBoxVertical !== 0;
	};
	GLWrap_.prototype.getProgramBoxExtendHorizontal = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxHorizontal;
	};
	GLWrap_.prototype.getProgramBoxExtendVertical = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxVertical;
	};
	GLWrap_.prototype.getProgramParameterType = function (progIndex, paramIndex)
	{
		return this.shaderPrograms[progIndex].parameters[paramIndex][2];
	};
	GLWrap_.prototype.programIsAnimated = function (progIndex)
	{
		return this.shaderPrograms[progIndex].animated;
	};
	GLWrap_.prototype.setProgramParameters = function (backTex, pixelWidth, pixelHeight, destStartX, destStartY, destEndX, destEndY, layerScale, layerAngle, viewOriginLeft, viewOriginTop, params)
	{
		var i, len;
		var s = this.shaderPrograms[this.lastProgram];
		var b, mat4param, shaderParams;
		if (s.hasAnyOptionalUniforms || params.length)
		{
			b = this.pushBatch();
			b.type = BATCH_SETPROGRAMPARAMETERS;
			if (b.mat4param)
				mat4.set(this.matMV, b.mat4param);
			else
				b.mat4param = mat4.create();
			mat4param = b.mat4param;
			mat4param[0] = pixelWidth;
			mat4param[1] = pixelHeight;
			mat4param[2] = destStartX;
			mat4param[3] = destStartY;
			mat4param[4] = destEndX;
			mat4param[5] = destEndY;
			mat4param[6] = layerScale;
			mat4param[7] = layerAngle;
			mat4param[8] = viewOriginLeft;
			mat4param[9] = viewOriginTop;
			if (s.locSamplerBack)
			{
;
				b.texParam = backTex;
			}
			else
				b.texParam = null;
			if (params.length)
			{
				shaderParams = b.shaderParams;
				shaderParams.length = params.length;
				for (i = 0, len = params.length; i < len; i++)
					shaderParams[i] = params[i];
			}
			this.hasQuadBatchTop = false;
			this.hasPointBatchTop = false;
		}
	};
	GLWrap_.prototype.clear = function (r, g, b_, a)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 0;					// clear all mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = r;
		b.mat4param[1] = g;
		b.mat4param[2] = b_;
		b.mat4param[3] = a;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.clearRect = function (x, y, w, h)
	{
		if (w < 0 || h < 0)
			return;							// invalid clear area
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 1;					// clear rect mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = x;
		b.mat4param[1] = y;
		b.mat4param[2] = w;
		b.mat4param[3] = h;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.present = function ()
	{
		this.endBatch();
		this.gl.flush();
		/*
		if (debugBatch)
		{
;
			debugBatch = false;
		}
		*/
	};
	function nextHighestPowerOfTwo(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	var all_textures = [];
	var textures_by_src = {};
	var BF_RGBA8 = 0;
	var BF_RGB8 = 1;
	var BF_RGBA4 = 2;
	var BF_RGB5_A1 = 3;
	var BF_RGB565 = 4;
	GLWrap_.prototype.loadTexture = function (img, tiling, linearsampling, pixelformat, tiletype, nomip)
	{
		tiling = !!tiling;
		linearsampling = !!linearsampling;
		var tex_key = img.src + "," + tiling + "," + linearsampling + (tiling ? ("," + tiletype) : "");
		var webGL_texture = null;
		if (typeof img.src !== "undefined" && textures_by_src.hasOwnProperty(tex_key))
		{
			webGL_texture = textures_by_src[tex_key];
			webGL_texture.c2refcount++;
			return webGL_texture;
		}
		this.endBatch();
;
		var gl = this.gl;
		var isPOT = (cr.isPOT(img.width) && cr.isPOT(img.height));
		webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		if (pixelformat && !this.isIE)
		{
			switch (pixelformat) {
			case BF_RGB8:
				internalformat = gl.RGB;
				format = gl.RGB;
				break;
			case BF_RGBA4:
				type = gl.UNSIGNED_SHORT_4_4_4_4;
				break;
			case BF_RGB5_A1:
				type = gl.UNSIGNED_SHORT_5_5_5_1;
				break;
			case BF_RGB565:
				internalformat = gl.RGB;
				format = gl.RGB;
				type = gl.UNSIGNED_SHORT_5_6_5;
				break;
			}
		}
		if (!isPOT && tiling)
		{
			var canvas = document.createElement("canvas");
			canvas.width = cr.nextHighestPowerOfTwo(img.width);
			canvas.height = cr.nextHighestPowerOfTwo(img.height);
			var ctx = canvas.getContext("2d");
			ctx["webkitImageSmoothingEnabled"] = linearsampling;
			ctx["mozImageSmoothingEnabled"] = linearsampling;
			ctx["msImageSmoothingEnabled"] = linearsampling;
			ctx["imageSmoothingEnabled"] = linearsampling;
			ctx.drawImage(img,
						  0, 0, img.width, img.height,
						  0, 0, canvas.width, canvas.height);
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, canvas);
		}
		else
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, img);
		if (tiling)
		{
			if (tiletype === "repeat-x")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			}
			else if (tiletype === "repeat-y")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
			else
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		if (linearsampling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			if (isPOT && this.enable_mipmaps && !nomip)
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
				gl.generateMipmap(gl.TEXTURE_2D);
			}
			else
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = img.width;
		webGL_texture.c2height = img.height;
		webGL_texture.c2refcount = 1;
		webGL_texture.c2texkey = tex_key;
		all_textures.push(webGL_texture);
		textures_by_src[tex_key] = webGL_texture;
		return webGL_texture;
	};
	GLWrap_.prototype.createEmptyTexture = function (w, h, linearsampling, _16bit, tiling)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, null);
		if (tiling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = w;
		webGL_texture.c2height = h;
		all_textures.push(webGL_texture);
		return webGL_texture;
	};
	GLWrap_.prototype.videoToTexture = function (video_, texture_, _16bit)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		gl.bindTexture(gl.TEXTURE_2D, texture_);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, video_);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
	};
	GLWrap_.prototype.deleteTexture = function (tex)
	{
		if (!tex)
			return;
		if (typeof tex.c2refcount !== "undefined" && tex.c2refcount > 1)
		{
			tex.c2refcount--;
			return;
		}
		this.endBatch();
		if (tex === this.lastTexture0)
		{
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.lastTexture0 = null;
		}
		if (tex === this.lastTexture1)
		{
			this.gl.activeTexture(this.gl.TEXTURE1);
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.lastTexture1 = null;
		}
		cr.arrayFindRemove(all_textures, tex);
		if (typeof tex.c2texkey !== "undefined")
			delete textures_by_src[tex.c2texkey];
		this.gl.deleteTexture(tex);
	};
	GLWrap_.prototype.estimateVRAM = function ()
	{
		var total = this.width * this.height * 4 * 2;
		var i, len, t;
		for (i = 0, len = all_textures.length; i < len; i++)
		{
			t = all_textures[i];
			total += (t.c2width * t.c2height * 4);
		}
		return total;
	};
	GLWrap_.prototype.textureCount = function ()
	{
		return all_textures.length;
	};
	GLWrap_.prototype.setRenderingToTexture = function (tex)
	{
		if (tex === this.renderToTex)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_RENDERTOTEXTURE;
		b.texParam = tex;
		this.renderToTex = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	cr.GLWrap = GLWrap_;
}());
;
(function()
{
	function Runtime(canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;
		else
			canvas["c2runtime"] = this;
		var self = this;
		this.isCrosswalk = /crosswalk/i.test(navigator.userAgent) || /xwalk/i.test(navigator.userAgent) || !!(typeof window["c2isCrosswalk"] !== "undefined" && window["c2isCrosswalk"]);
		this.isPhoneGap = (!this.isCrosswalk && (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined"))) || (typeof window["c2isphonegap"] !== "undefined" && window["c2isphonegap"]);
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		this.isEjecta = !!window["c2ejecta"];
		if (this.isCocoonJs)
		{
			CocoonJS["App"]["onSuspended"].addEventListener(function() {
				self["setSuspended"](true);
			});
			CocoonJS["App"]["onActivated"].addEventListener(function () {
				self["setSuspended"](false);
			});
		}
		if (this.isEjecta)
		{
			document.addEventListener("pagehide", function() {
				self["setSuspended"](true);
			});
			document.addEventListener("pageshow", function() {
				self["setSuspended"](false);
			});
			document.addEventListener("resize", function () {
				self["setSize"](window.innerWidth, window.innerHeight);
			});
		}
		this.isDomFree = (this.isDirectCanvas || this.isCocoonJs || this.isEjecta);
		this.isTizen = /tizen/i.test(navigator.userAgent);
		this.isAndroid = /android/i.test(navigator.userAgent) && !this.isTizen;		// tizen says "like Android"
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.isiPhone = /iphone/i.test(navigator.userAgent) || /ipod/i.test(navigator.userAgent);	// treat ipod as an iphone
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad || this.isEjecta;
		this.isiPhoneiOS6 = (this.isiPhone && /os\s6/i.test(navigator.userAgent));
		this.isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		this.isAmazonWebApp = /amazonwebappplatform/i.test(navigator.userAgent);
		this.isFirefox = /firefox/i.test(navigator.userAgent);
		this.isSafari = !this.isChrome && /safari/i.test(navigator.userAgent);		// Chrome includes Safari in UA
		this.isWindows = /windows/i.test(navigator.userAgent);
		this.isNodeWebkit = (typeof window["c2nodewebkit"] !== "undefined" || /nodewebkit/i.test(navigator.userAgent));
		this.isArcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.isWindows8App = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.isWindows8Capable = !!(typeof window["c2isWindows8Capable"] !== "undefined" && window["c2isWindows8Capable"]);
		this.isWindowsPhone8 = !!(typeof window["c2isWindowsPhone8"] !== "undefined" && window["c2isWindowsPhone8"]);
		this.isWindowsPhone81 = !!(typeof window["c2isWindowsPhone81"] !== "undefined" && window["c2isWindowsPhone81"]);
		this.isWinJS = (this.isWindows8App || this.isWindows8Capable || this.isWindowsPhone81);	// note not WP8.0
		this.isBlackberry10 = !!(typeof window["c2isBlackberry10"] !== "undefined" && window["c2isBlackberry10"]);
		this.isAndroidStockBrowser = (this.isAndroid && !this.isChrome && !this.isFirefox && !this.isAmazonWebApp && !this.isDomFree);
		this.devicePixelRatio = 1;
		this.isMobile = (this.isPhoneGap || this.isCrosswalk || this.isAppMobi || this.isCocoonJs || this.isAndroid || this.isiOS || this.isWindowsPhone8 || this.isWindowsPhone81 || this.isBlackberry10 || this.isTizen || this.isEjecta);
		if (!this.isMobile)
		{
			this.isMobile = /(blackberry|bb10|playbook|palm|symbian|nokia|windows\s+ce|phone|mobile|tablet|kindle|silk)/i.test(navigator.userAgent);
		}
		if (typeof cr_is_preview !== "undefined" && !this.isNodeWebkit && (window.location.search === "?nw" || /nodewebkit/i.test(navigator.userAgent)))
		{
			this.isNodeWebkit = true;
		}
		this.isDebug = (typeof cr_is_preview !== "undefined" && window.location.search.indexOf("debug") > -1);
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.ctx = null;
		this.fullscreenOldMarginCss = "";
		this.firstInFullscreen = false;
		this.oldWidth = 0;		// for restoring non-fullscreen canvas after fullscreen
		this.oldHeight = 0;
		this.canvas.oncontextmenu = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		this.canvas.onselectstart = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		if (this.isNodeWebkit)
		{
			window["ondragover"] = function(e) { e.preventDefault(); return false; };
			window["ondrop"] = function(e) { e.preventDefault(); return false; };
			require("nw.gui")["App"]["clearCache"]();
		}
		this.width = canvas.width;
		this.height = canvas.height;
		this.draw_width = this.width;
		this.draw_height = this.height;
		this.cssWidth = this.width;
		this.cssHeight = this.height;
		this.lastWindowWidth = window.innerWidth;
		this.lastWindowHeight = window.innerHeight;
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.all_local_vars = [];
		this.solidBehavior = null;
		this.jumpthruBehavior = null;
		this.shadowcasterBehavior = null;
		this.deathRow = new cr.ObjectSet();
		this.isInClearDeathRow = false;
		this.isInOnDestroy = 0;					// needs to support recursion so increments and decrements and is true if > 0
		this.isRunningEvents = false;
		this.createRow = [];
		this.isLoadingState = false;
		this.saveToSlot = "";
		this.loadFromSlot = "";
		this.loadFromJson = "";
		this.lastSaveJson = "";
		this.signalledContinuousPreview = false;
		this.suspendDrawing = false;		// for hiding display until continuous preview loads
		this.dt = 0;
        this.dt1 = 0;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
		this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.measuring_dt = true;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.localvar_stack = [[]];
		this.localvar_stack_index = 0;
		this.trigger_depth = 0;		// recursion depth for triggers
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.next_puid = 0;		// permanent unique ids
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = -1;
		this.timeout_id = -1;
		this.isloading = true;
		this.loadingprogress = 0;
		this.isNodeFullscreen = false;
		this.stackLocalCount = 0;	// number of stack-based local vars for recursion
		this.halfFramerateMode = false;
		this.lastRafTime = 0;		// time of last requestAnimationFrame call
		this.ranLastRaf = false;	// false if last requestAnimationFrame was skipped for half framerate mode
		this.had_a_click = false;
		this.isInUserInputEvent = false;
        this.objects_to_tick = new cr.ObjectSet();
		this.objects_to_tick2 = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.temp_poly2 = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.groups_by_name = {};
		this.cndsBySid = {};
		this.actsBySid = {};
		this.varsBySid = {};
		this.blocksBySid = {};
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.layout_tex = null;
		this.layout_canvas = null;
		this.layout_ctx = null;
		this.is_WebGL_context_lost = false;
		this.uses_background_blending = false;	// if any shader uses background blending, so entire layout renders to texture
		this.fx_tex = [null, null];
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.objectsByUid = {};				// maps every in-use UID (as a string) to its instance
		this.loaderlogo = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.load();
		this.isRetina = ((!this.isDomFree || this.isEjecta) && this.useHighDpi && !this.isAndroidStockBrowser);
		this.devicePixelRatio = (this.isRetina ? (window["devicePixelRatio"] || window["webkitDevicePixelRatio"] || window["mozDevicePixelRatio"] || window["msDevicePixelRatio"] || 1) : 1);
		this.ClearDeathRow();
		var attribs;
		var alpha_canvas = this.alphaBackground && !(this.isNodeWebkit || this.isWinJS || this.isWindowsPhone8 || this.isCrosswalk);
		if (this.fullscreen_mode > 0)
			this["setSize"](window.innerWidth, window.innerHeight, true);
		try {
			if (this.enableWebGL && (this.isCocoonJs || this.isEjecta || !this.isDomFree))
			{
				attribs = {
					"alpha": alpha_canvas,
					"depth": false,
					"antialias": false,
					"failIfMajorPerformanceCaveat": true
				};
				this.gl = (canvas.getContext("webgl", attribs) || canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
;
			if (!this.isDomFree)
			{
				this.overlay_canvas = document.createElement("canvas");
				jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
				this.overlay_canvas.oncontextmenu = function (e) { return false; };
				this.overlay_canvas.onselectstart = function (e) { return false; };
				this.overlay_canvas.width = this.cssWidth;
				this.overlay_canvas.height = this.cssHeight;
				jQuery(this.overlay_canvas).css({"width": this.cssWidth + "px",
												"height": this.cssHeight + "px"});
				this.positionOverlayCanvas();
				this.overlay_ctx = this.overlay_canvas.getContext("2d");
			}
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile);
			this.glwrap.setSize(canvas.width, canvas.height);
			this.glwrap.enable_mipmaps = (this.downscalingQuality !== 0);
			this.ctx = null;
			this.canvas.addEventListener("webglcontextlost", function (ev) {
				ev.preventDefault();
				self.onContextLost();
				console.log("[Construct 2] WebGL context lost");
				window["cr_setSuspended"](true);		// stop rendering
			}, false);
			this.canvas.addEventListener("webglcontextrestored", function (ev) {
				self.glwrap.initState();
				self.glwrap.setSize(self.glwrap.width, self.glwrap.height, true);
				self.layer_tex = null;
				self.layout_tex = null;
				self.fx_tex[0] = null;
				self.fx_tex[1] = null;
				self.onContextRestored();
				self.redraw = true;
				console.log("[Construct 2] WebGL context restored");
				window["cr_setSuspended"](false);		// resume rendering
			}, false);
			var i, len, j, lenj, k, lenk, t, s, l, y;
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
				{
					s = t.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
				}
			}
			for (i = 0, len = this.layouts_by_index.length; i < len; i++)
			{
				l = this.layouts_by_index[i];
				for (j = 0, lenj = l.effect_types.length; j < lenj; j++)
				{
					s = l.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
				}
				for (j = 0, lenj = l.layers.length; j < lenj; j++)
				{
					y = l.layers[j];
					for (k = 0, lenk = y.effect_types.length; k < lenk; k++)
					{
						s = y.effect_types[k];
						s.shaderindex = this.glwrap.getShaderIndex(s.id);
						this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
					}
				}
			}
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
					this.ctx["imageSmoothingEnabled"] = this.linearSampling;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = {
						"antialias": !!this.linearSampling,
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				else
				{
					attribs = {
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["imageSmoothingEnabled"] = this.linearSampling;
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = function () { self.tick(false); };
		if (window != window.top && !this.isDomFree && !this.isWinJS && !this.isWindowsPhone8)
		{
			document.addEventListener("mousedown", function () {
				window.focus();
			}, true);
			document.addEventListener("touchstart", function () {
				window.focus();
			}, true);
		}
		if (typeof cr_is_preview !== "undefined")
		{
			if (this.isCocoonJs)
				console.log("[Construct 2] In preview-over-wifi via CocoonJS mode");
			if (window.location.search.indexOf("continuous") > -1)
			{
				cr.logexport("Reloading for continuous preview");
				this.loadFromSlot = "__c2_continuouspreview";
				this.suspendDrawing = true;
			}
			if (this.pauseOnBlur && !this.isMobile)
			{
				jQuery(window).focus(function ()
				{
					self["setSuspended"](false);
				});
				jQuery(window).blur(function ()
				{
					self["setSuspended"](true);
				});
			}
		}
		if (this.fullscreen_mode === 0 && this.isRetina && this.devicePixelRatio > 1)
		{
			this["setSize"](this.original_width, this.original_height, true);
		}
		this.tryLockOrientation();
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var webkitRepaintFlag = false;
	Runtime.prototype["setSize"] = function (w, h, force)
	{
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		var tryHideAddressBar = (this.isiPhoneiOS6 && this.isSafari && !navigator["standalone"] && !this.isDomFree && !this.isPhoneGap);
		if (tryHideAddressBar)
			h += 60;		// height of Safari iPhone iOS 6 address bar
		if (this.lastWindowWidth === w && this.lastWindowHeight === h && !force)
			return;
		this.lastWindowWidth = w;
		this.lastWindowHeight = h;
		var mode = this.fullscreen_mode;
		var orig_aspect, cur_aspect;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen) && !this.isPhoneGap;
		if (!isfullscreen && this.fullscreen_mode === 0 && !force)
			return;			// ignore size events when not fullscreen and not using a fullscreen-in-browser mode
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		if (mode >= 4)
		{
			orig_aspect = this.original_width / this.original_height;
			cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = neww / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = newh / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
			if (isfullscreen && !this.isNodeWebkit)
			{
				offx = 0;
				offy = 0;
			}
			offx = Math.floor(offx);
			offy = Math.floor(offy);
			w = Math.floor(w);
			h = Math.floor(h);
		}
		else if (this.isNodeWebkit && this.isNodeFullscreen && this.fullscreen_mode_set === 0)
		{
			offx = Math.floor((w - this.original_width) / 2);
			offy = Math.floor((h - this.original_height) / 2);
			w = this.original_width;
			h = this.original_height;
		}
		if (mode < 2)
			this.aspect_scale = this.devicePixelRatio;
		if (this.isRetina && this.isiPad && this.devicePixelRatio > 1)	// don't apply to iPad 1-2
		{
			if (w >= 1024)
				w = 1023;		// 2046 retina pixels
			if (h >= 1024)
				h = 1023;
		}
		var multiplier = this.devicePixelRatio;
		this.cssWidth = w;
		this.cssHeight = h;
		this.width = Math.round(w * multiplier);
		this.height = Math.round(h * multiplier);
		this.redraw = true;
		if (this.wantFullscreenScalingQuality)
		{
			this.draw_width = this.width;
			this.draw_height = this.height;
			this.fullscreenScalingQuality = true;
		}
		else
		{
			if ((this.width < this.original_width && this.height < this.original_height) || mode === 1)
			{
				this.draw_width = this.width;
				this.draw_height = this.height;
				this.fullscreenScalingQuality = true;
			}
			else
			{
				this.draw_width = this.original_width;
				this.draw_height = this.original_height;
				this.fullscreenScalingQuality = false;
				/*var orig_aspect = this.original_width / this.original_height;
				var cur_aspect = this.width / this.height;
				if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
					this.aspect_scale = this.height / this.original_height;
				else
					this.aspect_scale = this.width / this.original_width;*/
				if (mode === 2)		// scale inner
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect < orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect > orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
				else if (mode === 3)
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect > orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect < orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
			}
		}
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": w + "px",
										"height": h + "px",
										"margin-left": offx,
										"margin-top": offy});
			if (typeof cr_is_preview !== "undefined")
			{
				jQuery("#borderwrap").css({"width": w + "px",
											"height": h + "px"});
			}
		}
		if (this.canvas)
		{
			this.canvas.width = Math.round(w * multiplier);
			this.canvas.height = Math.round(h * multiplier);
			if (this.isEjecta)
			{
				this.canvas.style.left = offx + "px";
				this.canvas.style.top = offy + "px";
				this.canvas.style.width = w + "px";
				this.canvas.style.height = h + "px";
			}
			else if (this.isRetina && !this.isDomFree)
			{
				jQuery(this.canvas).css({"width": w + "px",
										"height": h + "px"});
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = w;
			this.overlay_canvas.height = h;
			jQuery(this.overlay_canvas).css({"width": w + "px",
											"height": h + "px"});
		}
		if (this.glwrap)
		{
			this.glwrap.setSize(Math.round(w * multiplier), Math.round(h * multiplier));
		}
		if (this.isDirectCanvas && this.ctx)
		{
			this.ctx.width = w;
			this.ctx.height = h;
		}
		if (this.ctx)
		{
			this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["imageSmoothingEnabled"] = this.linearSampling;
		}
		this.tryLockOrientation();
		if (!this.isDomFree && (tryHideAddressBar || this.isiPhone))
		{
			window.setTimeout(function () {
				window.scrollTo(0, 1);
			}, 100);
		}
	};
	Runtime.prototype.tryLockOrientation = function ()
	{
		if (!this.autoLockOrientation || this.orientations === 0)
			return;
		var orientation = "portrait";
		if (this.orientations === 2)
			orientation = "landscape";
		if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"])
			screen["msLockOrientation"](orientation);
	};
	Runtime.prototype.onContextLost = function ()
	{
		this.is_WebGL_context_lost = true;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onLostWebGLContext)
				t.onLostWebGLContext();
		}
	};
	Runtime.prototype.onContextRestored = function ()
	{
		this.is_WebGL_context_lost = false;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onRestoreWebGLContext)
				t.onRestoreWebGLContext();
		}
	};
	Runtime.prototype.positionOverlayCanvas = function()
	{
		if (this.isDomFree)
			return;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen) && !this.isPhoneGap;
		var overlay_position = isfullscreen ? jQuery(this.canvas).offset() : jQuery(this.canvas).position();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	Runtime.prototype["setSuspended"] = function (s)
	{
		var i, len;
		if (s && !this.isSuspended)
		{
			cr.logexport("[Construct 2] Suspending");
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== -1 && caf)		// note: CocoonJS does not implement cancelAnimationFrame
				caf(this.raf_id);
			if (this.timeout_id !== -1)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			cr.logexport("[Construct 2] Resuming");
			this.isSuspended = false;
			this.last_tick_time = cr.performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = cr.performance_now();	// reset FPS counter
			this.framecount = 0;
			this.logictime = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick(false);						// kick off runtime again
		}
	};
	Runtime.prototype.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	Runtime.prototype.load = function ()
	{
;
		var pm = cr.getProjectModel();
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[11];	// 0 = off, 1 = crop, 2 = scale inner, 3 = scale outer, 4 = letterbox scale, 5 = integer letterbox scale
		this.fullscreen_mode_set = pm[11];
		this.original_width = pm[9];
		this.original_height = pm[10];
		this.parallax_x_origin = this.original_width / 2;
		this.parallax_y_origin = this.original_height / 2;
		if (this.isDomFree && !this.isEjecta && (pm[11] >= 4 || pm[11] === 0))
		{
			cr.logexport("[Construct 2] Letterbox scale fullscreen modes are not supported on this platform - falling back to 'Scale outer'");
			this.fullscreen_mode = 3;
			this.fullscreen_mode_set = 3;
		}
		this.uses_loader_layout = pm[17];
		this.loaderstyle = pm[18];
		if (this.loaderstyle === 0)
		{
			this.loaderlogo = new Image();
			this.loaderlogo.src = "loading-logo.png";
		}
		this.next_uid = pm[20];
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
;
			cr.add_common_aces(m);
			plugin = new m[0](this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			plugin.must_predraw = m[9];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		pm = cr.getProjectModel();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = m[1];
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.instvar_sids = m[3].slice(0);
			type_inst.vars_count = m[3].length;
			type_inst.behs_count = m[4];
			type_inst.fx_count = m[5];
			type_inst.sid = m[11];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			type_inst.family_fx_map = null;
			type_inst.is_contained = false;
			type_inst.container = null;
			if (m[6])
			{
				type_inst.texture_file = m[6][0];
				type_inst.texture_filesize = m[6][1];
				type_inst.texture_pixelformat = m[6][2];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
				type_inst.texture_pixelformat = 0;		// rgba8
			}
			if (m[7])
			{
				type_inst.animations = m[7];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.default_layerindex = 0;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.getEffectIndexByName = cr.type_getEffectIndexByName;
			type_inst.applySolToContainer = cr.type_applySolToContainer;
			type_inst.getInstanceByIID = cr.type_getInstanceByIID;
			type_inst.collision_grid = new cr.SparseGrid(this.original_width, this.original_height);
			type_inst.any_cell_changed = true;
			type_inst.any_instance_parallaxed = false;
			type_inst.extra = {};
			type_inst.toString = cr.type_toString;
			type_inst.behaviors = [];
			for (j = 0, lenj = m[8].length; j < lenj; j++)
			{
				b = m[8][j];
				var behavior_ctor = b[1];
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_types = [];						// types using this behavior
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
					if (cr.behaviors.solid && behavior_plugin instanceof cr.behaviors.solid)
						this.solidBehavior = behavior_plugin;
					if (cr.behaviors.jumpthru && behavior_plugin instanceof cr.behaviors.jumpthru)
						this.jumpthruBehavior = behavior_plugin;
					if (cr.behaviors.shadowcaster && behavior_plugin instanceof cr.behaviors.shadowcaster)
						this.shadowcasterBehavior = behavior_plugin;
				}
				if (behavior_plugin.my_types.indexOf(type_inst) === -1)
					behavior_plugin.my_types.push(type_inst);
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.sid = b[2];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[9];
			type_inst.isOnLoaderLayout = m[10];
			type_inst.effect_types = [];
			for (j = 0, lenj = m[12].length; j < lenj; j++)
			{
				type_inst.effect_types.push({
					id: m[12][j][0],
					name: m[12][j][1],
					shaderindex: -1,
					active: true,
					index: j
				});
			}
			type_inst.tile_poly_data = m[13];
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid++;
				instance.puid = this.next_puid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[14];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
				this.objectsByUid[instance.uid.toString()] = instance;
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		for (i = 0, len = pm[24].length; i < len; i++)
		{
			var containerdata = pm[24][i];
			var containertypes = [];
			for (j = 0, lenj = containerdata.length; j < lenj; j++)
				containertypes.push(this.types_by_index[containerdata[j]]);
			for (j = 0, lenj = containertypes.length; j < lenj; j++)
			{
				containertypes[j].is_contained = true;
				containertypes[j].container = containertypes;
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				t.family_fx_map = new Array(this.family_count);
				var all_fx = [];
				var varsum = 0;
				var behsum = 0;
				var fxsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
					t.family_fx_map[f.family_index] = fxsum;
					fxsum += f.fx_count;
					for (k = 0, lenk = f.effect_types.length; k < lenk; k++)
						all_fx.push(cr.shallowCopy({}, f.effect_types[k]));
				}
				t.effect_types = all_fx.concat(t.effect_types);
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
					t.effect_types[j].index = j;
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].updateDeepIncludes();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		this.triggers_to_postinit.length = 0;
		this.files_subfolder = pm[7];
		this.pixel_rounding = pm[8];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[12];
		this.linearSampling = pm[13];
		this.alphaBackground = pm[14];
		this.versionstr = pm[15];
		this.useHighDpi = pm[16];
		this.orientations = pm[19];		// 0 = any, 1 = portrait, 2 = landscape
		this.autoLockOrientation = (this.orientations > 0);
		this.pauseOnBlur = pm[21];
		this.wantFullscreenScalingQuality = pm[22];		// false = low quality, true = high quality
		this.fullscreenScalingQuality = this.wantFullscreenScalingQuality;
		this.downscalingQuality = pm[23];	// 0 = low (mips off), 1 = medium (mips on, dense spritesheet), 2 = high (mips on, sparse spritesheet)
		this.start_time = Date.now();
	};
	var anyImageHadError = false;
	Runtime.prototype.waitForImageLoad = function (img_)
	{
		img_.onerror = function (e)
		{
			img_.c2error = true;
			anyImageHadError = true;
			if (console && console.error)
				console.error("Error loading image '" + img_.src + "': ", e);
		};
		this.wait_for_textures.push(img_);
	};
	Runtime.prototype.findWaitingTexture = function (src_)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].cr_src === src_)
				return this.wait_for_textures[i];
		}
		return null;
	};
	Runtime.prototype.areAllTexturesLoaded = function ()
	{
		var totalsize = 0;
		var completedsize = 0;
		var ret = true;
		var i, len, img;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			img = this.wait_for_textures[i];
			var filesize = img.cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if ((img.complete || img["loaded"]) && !img.c2error)
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (totalsize == 0)
			this.progress = 0;
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	Runtime.prototype.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		this.progress = 0;
		this.last_progress = -1;
		if (this.areAllTexturesLoaded())
			this.go_textures_done();
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			if (ctx)
			{
				var overlay_width = this.width;
				var overlay_height = this.height;
				var multiplier = this.devicePixelRatio;
				if (this.overlay_canvas)
				{
					overlay_width = this.cssWidth;
					overlay_height = this.cssHeight;
					multiplier = 1;
				}
				if (this.loaderstyle !== 3 && (this.isCocoonJs || (ms_elapsed >= 500 && this.last_progress != this.progress)))
				{
					ctx.clearRect(0, 0, overlay_width, overlay_height);
					var mx = overlay_width / 2;
					var my = overlay_height / 2;
					var haslogo = (this.loaderstyle === 0 && this.loaderlogo.complete);
					var hlw = 40 * multiplier;
					var hlh = 0;
					var logowidth = 80 * multiplier;
					var logoheight;
					if (haslogo)
					{
						logowidth = this.loaderlogo.width * multiplier;
						logoheight = this.loaderlogo.height * multiplier;
						hlw = logowidth / 2;
						hlh = logoheight / 2;
						ctx.drawImage(this.loaderlogo, cr.floor(mx - hlw), cr.floor(my - hlh), logowidth, logoheight);
					}
					if (this.loaderstyle <= 1)
					{
						my += hlh + (haslogo ? 12 * multiplier : 0);
						mx -= hlw;
						mx = cr.floor(mx) + 0.5;
						my = cr.floor(my) + 0.5;
						ctx.fillStyle = anyImageHadError ? "red" : "DodgerBlue";
						ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6 * multiplier);
						ctx.strokeStyle = "black";
						ctx.strokeRect(mx, my, logowidth, 6 * multiplier);
						ctx.strokeStyle = "white";
						ctx.strokeRect(mx - 1 * multiplier, my - 1 * multiplier, logowidth + 2 * multiplier, 8 * multiplier);
					}
					else if (this.loaderstyle === 2)
					{
						ctx.font = (this.isEjecta ? "12pt ArialMT" : "12pt Arial");
						ctx.fillStyle = anyImageHadError ? "#f00" : "#999";
						ctx.textBaseLine = "middle";
						var percent_text = Math.round(this.progress * 100) + "%";
						var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
						var text_width = text_dim ? text_dim.width : 0;
						ctx.fillText(percent_text, mx - (text_width / 2), my);
					}
				}
				this.last_progress = this.progress;
			}
			setTimeout((function (self) { return function () { self.go(); }; })(this), (this.isCocoonJs ? 10 : 100));
		}
	};
	Runtime.prototype.go_textures_done = function ()
	{
		if (this.overlay_canvas)
		{
			this.canvas.parentNode.removeChild(this.overlay_canvas);
			this.overlay_ctx = null;
			this.overlay_canvas = null;
		}
		this.start_time = Date.now();
		this.last_fps_time = cr.performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.fullscreen_mode >= 2)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
				this.aspect_scale = this.height / this.original_height;
			else
				this.aspect_scale = this.width / this.original_width;
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
		}
		if (navigator["splashscreen"] && navigator["splashscreen"]["hide"])
			navigator["splashscreen"]["hide"]();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onAppBegin)
				t.onAppBegin();
		}
		this.tick(false);
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	Runtime.prototype.tick = function (background_wake)
	{
		if (!this.running_layout)
			return;
		var logic_start = cr.performance_now();
		if (this.halfFramerateMode && this.ranLastRaf)
		{
			if (logic_start - this.lastRafTime < 29)
			{
				this.ranLastRaf = false;
				this.lastRafTime = logic_start;
				if (raf)
					this.raf_id = raf(this.tickFunc, this.canvas);
				else	// no idea if this works without raf/hi res timers but let's hope for the best
					this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
				return;		// skipped this frame
			}
		}
		this.ranLastRaf = true;
		this.lastRafTime = logic_start;
		var fsmode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"]) && !this.isPhoneGap;
		if ((isfullscreen || this.isNodeFullscreen) && this.fullscreen_scaling > 0)
			fsmode = this.fullscreen_scaling;
		if (fsmode > 0 && (!this.isiOS || window.self !== window.top))
		{
			var curwidth = window.innerWidth;
			var curheight = window.innerHeight;
			if (this.lastWindowWidth !== curwidth || this.lastWindowHeight !== curheight)
			{
					this["setSize"](curwidth, curheight);
			}
		}
		if (!this.isDomFree)
		{
			if (isfullscreen)
			{
				if (!this.firstInFullscreen)
				{
					this.fullscreenOldMarginCss = jQuery(this.canvas).css("margin") || "0";
					this.firstInFullscreen = true;
				}
				if (!this.isChrome && !this.isNodeWebkit)
				{
					jQuery(this.canvas).css({
						"margin-left": "" + Math.floor((screen.width - (this.width / this.devicePixelRatio)) / 2) + "px",
						"margin-top": "" + Math.floor((screen.height - (this.height / this.devicePixelRatio)) / 2) + "px"
					});
				}
			}
			else
			{
				if (this.firstInFullscreen)
				{
					if (!this.isChrome && !this.isNodeWebkit)
					{
						jQuery(this.canvas).css("margin", this.fullscreenOldMarginCss);
					}
					this.fullscreenOldMarginCss = "";
					this.firstInFullscreen = false;
					if (this.fullscreen_mode === 0)
					{
						this["setSize"](Math.round(this.oldWidth / this.devicePixelRatio), Math.round(this.oldHeight / this.devicePixelRatio), true);
					}
				}
				else
				{
					this.oldWidth = this.width;
					this.oldHeight = this.height;
				}
			}
		}
		if (this.isloading)
		{
			var done = this.areAllTexturesLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			}
		}
		this.logic();
		if ((this.redraw || this.isCocoonJs) && !this.is_WebGL_context_lost && !this.suspendDrawing && !background_wake)
		{
			this.redraw = false;
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		if (!this.hit_breakpoint)
		{
			this.tickcount++;
			this.execcount++;
			this.framecount++;
		}
		this.logictime += cr.performance_now() - logic_start;
		if (this.isSuspended || background_wake)
			return;
		if (raf)
			this.raf_id = raf(this.tickFunc, this.canvas);
		else
		{
			this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
		}
	};
	Runtime.prototype.logic = function ()
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		var cur_time = cr.performance_now();
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		if (this.measuring_dt)
		{
			if (this.last_tick_time !== 0)
			{
				var ms_diff = cur_time - this.last_tick_time;
				if (ms_diff === 0 && !this.isDebug)
				{
					this.zeroDtCount++;
					if (this.zeroDtCout >= 10)
						this.measuring_dt = false;
					this.dt1 = 1.0 / 60.0;            // 60fps assumed (0.01666...)
				}
				else
				{
					this.dt1 = ms_diff / 1000.0; // dt measured in seconds
					if (this.dt1 > 0.5)
						this.dt1 = 0;
					else if (this.dt1 > 0.1)
						this.dt1 = 0.1;
				}
			}
			this.last_tick_time = cur_time;
		}
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen) && !this.isPhoneGap;
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			var mode = this.fullscreen_mode;
			if (isfullscreen && this.fullscreen_scaling > 0)
				mode = this.fullscreen_scaling;
			if ((mode !== 2 && cur_aspect > orig_aspect) || (mode === 2 && cur_aspect < orig_aspect))
			{
				this.aspect_scale = this.height / this.original_height;
			}
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = (this.isRetina ? this.devicePixelRatio : 1);
		this.ClearDeathRow();
		this.isInOnDestroy++;
		this.system.runWaits();		// prevent instance list changing
		this.isInOnDestroy--;
		this.ClearDeathRow();		// allow instance list changing
		this.isInOnDestroy++;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.posttick)
						binst.posttick();
				}
			}
		}
        var tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
		this.handleSaveLoad();		// save/load now if queued
		i = 0;
		while (this.changelayout && i++ < 10)
		{
			this.doChangeLayout(this.changelayout);
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		this.registered_collisions.length = 0;
		this.layout_first_tick = false;
		this.isInOnDestroy++;		// prevent instance lists from being changed
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
        tickarr = this.objects_to_tick2.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick2();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
	};
	Runtime.prototype.doChangeLayout = function (changeToLayout)
	{
;
		var prev_layout = this.running_layout;
		this.running_layout.stopRunning();
		var i, len, j, lenj, k, lenk, type, inst, binst;
		if (this.glwrap)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				type = this.types_by_index[i];
				if (type.is_family)
					continue;
				if (type.unloadTextures && (!type.global || type.instances.length === 0) && changeToLayout.initial_types.indexOf(type) === -1)
				{
					type.unloadTextures();
				}
			}
		}
		if (prev_layout == changeToLayout)
			this.system.waits.length = 0;
		changeToLayout.startRunning();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (!type.global && !type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (inst.onLayoutChange)
					inst.onLayoutChange();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.onLayoutChange)
							binst.onLayoutChange();
					}
				}
			}
		}
		this.redraw = true;
		this.layout_first_tick = true;
		this.ClearDeathRow();
	};
    Runtime.prototype.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	Runtime.prototype.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
	Runtime.prototype.tick2Me = function (inst)
    {
        this.objects_to_tick2.add(inst);
    };
	Runtime.prototype.untick2Me = function (inst)
	{
		this.objects_to_tick2.remove(inst);
	};
    Runtime.prototype.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	Runtime.prototype.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	Runtime.prototype.drawGL = function ()
	{
		this.running_layout.drawGL(this.glwrap);
		this.glwrap.present();
	};
	Runtime.prototype.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	Runtime.prototype.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	Runtime.prototype.getObjectByUID = function (uid_)
	{
;
		var uidstr = uid_.toString();
		if (this.objectsByUid.hasOwnProperty(uidstr))
			return this.objectsByUid[uidstr];
		else
			return null;
	};
	Runtime.prototype.DestroyInstance = function (inst)
	{
		var i, len;
		if (!this.deathRow.contains(inst))
		{
			this.deathRow.add(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					this.DestroyInstance(inst.siblings[i]);
				}
			}
			if (this.isInClearDeathRow)
				this.deathRow.values_cache.push(inst);
			this.isInOnDestroy++;		// support recursion
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
			this.isInOnDestroy--;
		}
	};
	Runtime.prototype.ClearDeathRow = function ()
	{
		var inst, index, type, instances, binst;
		var i, j, k, leni, lenj, lenk;
		var w, f;
		this.isInClearDeathRow = true;
		for (i = 0, leni = this.createRow.length; i < leni; i++)
		{
			inst = this.createRow[i];
			type = inst.type;
			type.instances.push(inst);
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				type.families[j].instances.push(inst);
				type.families[j].stale_iids = true;
			}
		}
		this.createRow.length = 0;
		var arr = this.deathRow.valuesRef();	// get array of items from set
		for (i = 0; i < arr.length; i++)		// check array length every time in case it changes
		{
			inst = arr[i];
			type = inst.type;
			instances = type.instances;
			for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
				this.destroycallbacks[j](inst);
			cr.arrayFindRemove(instances, inst);
			if (instances.length === 0)
				type.any_instance_parallaxed = false;
			if (inst.collcells)
			{
				type.collision_grid.update(inst, inst.collcells, null);
			}
			if (inst.layer)
			{
				cr.arrayRemove(inst.layer.instances, inst.get_zindex());
				inst.layer.zindices_stale = true;
			}
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				cr.arrayFindRemove(type.families[j].instances, inst);
				type.families[j].stale_iids = true;
			}
			if (inst.behavior_insts)
			{
				for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++)
				{
					binst = inst.behavior_insts[j];
					if (binst.onDestroy)
						binst.onDestroy();
					binst.behavior.my_instances.remove(inst);
				}
			}
            this.objects_to_tick.remove(inst);
			this.objects_to_tick2.remove(inst);
			for (j = 0, lenj = this.system.waits.length; j < lenj; j++)
			{
				w = this.system.waits[j];
				if (w.sols.hasOwnProperty(type.index))
					cr.arrayFindRemove(w.sols[type.index].insts, inst);
				if (!type.is_family)
				{
					for (k = 0, lenk = type.families.length; k < lenk; k++)
					{
						f = type.families[k];
						if (w.sols.hasOwnProperty(f.index))
							cr.arrayFindRemove(w.sols[f.index].insts, inst);
					}
				}
			}
			if (inst.onDestroy)
				inst.onDestroy();
			if (this.objectsByUid.hasOwnProperty(inst.uid.toString()))
				delete this.objectsByUid[inst.uid.toString()];
			this.objectcount--;
			if (type.deadCache.length < 64)
				type.deadCache.push(inst);
			type.stale_iids = true;
		}
		if (!this.deathRow.isEmpty())
			this.redraw = true;
		this.deathRow.clear();
		this.isInClearDeathRow = false;
	};
	Runtime.prototype.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		if (!type.default_instance)
		{
			return null;
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy, false);
	};
	var all_behaviors = [];
	Runtime.prototype.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy, skip_siblings)
	{
		var i, len, j, lenj, p, effect_fallback, x, y;
		if (!initial_inst)
			return null;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (is_world && !this.glwrap && initial_inst[0][11] === 11)
			return null;
		var original_layer = layer;
		if (!is_world)
			layer = null;
		var inst;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			inst.recycled = true;
			type.plugin.Instance.call(inst, type);
		}
		else
		{
			inst = new type.plugin.Instance(type);
			inst.recycled = false;
		}
		if (is_startup_instance && !skip_siblings)
			inst.uid = initial_inst[2];
		else
			inst.uid = this.next_uid++;
		this.objectsByUid[inst.uid.toString()] = inst;
		inst.puid = this.next_puid++;
		inst.iid = type.instances.length;
		for (i = 0, len = this.createRow.length; i < len; ++i)
		{
			if (this.createRow[i].type === type)
				inst.iid++;
		}
		inst.get_iid = cr.inst_get_iid;
		var initial_vars = initial_inst[3];
		if (inst.recycled)
		{
			cr.wipe(inst.extra);
		}
		else
		{
			inst.extra = {};
			if (typeof cr_is_preview !== "undefined")
			{
				inst.instance_var_names = [];
				inst.instance_var_names.length = initial_vars.length;
				for (i = 0, len = initial_vars.length; i < len; i++)
					inst.instance_var_names[i] = initial_vars[i][1];
			}
			inst.instance_vars = [];
			inst.instance_vars.length = initial_vars.length;
		}
		for (i = 0, len = initial_vars.length; i < len; i++)
			inst.instance_vars[i] = initial_vars[i][0];
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			inst.blend_mode = wm[10];
			effect_fallback = wm[11];
			if (!this.glwrap && type.effect_types.length)	// no WebGL renderer and shaders used
				inst.blend_mode = effect_fallback;			// use fallback blend mode - destroy mode was handled above
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			if (inst.recycled)
			{
				for (i = 0, len = wm[12].length; i < len; i++)
				{
					for (j = 0, lenj = wm[12][i].length; j < lenj; j++)
						inst.effect_params[i][j] = wm[12][i][j];
				}
				inst.bbox.set(0, 0, 0, 0);
				inst.collcells.set(0, 0, -1, -1);
				inst.bquad.set_from_rect(inst.bbox);
				inst.bbox_changed_callbacks.length = 0;
			}
			else
			{
				inst.effect_params = wm[12].slice(0);
				for (i = 0, len = inst.effect_params.length; i < len; i++)
					inst.effect_params[i] = wm[12][i].slice(0);
				inst.active_effect_types = [];
				inst.active_effect_flags = [];
				inst.active_effect_flags.length = type.effect_types.length;
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.collcells = new cr.rect(0, 0, -1, -1);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.update_collision_cell = cr.update_collision_cell;
				inst.get_zindex = cr.inst_get_zindex;
			}
			inst.tilemap_exists = false;
			inst.tilemap_width = 0;
			inst.tilemap_height = 0;
			inst.tilemap_data = null;
			if (wm.length === 14)
			{
				inst.tilemap_exists = true;
				inst.tilemap_width = wm[13][0];
				inst.tilemap_height = wm[13][1];
				inst.tilemap_data = wm[13][2];
			}
			for (i = 0, len = type.effect_types.length; i < len; i++)
				inst.active_effect_flags[i] = true;
			inst.updateActiveEffects = cr.inst_updateActiveEffects;
			inst.updateActiveEffects();
			inst.uses_shaders = !!inst.active_effect_types.length;
			inst.bbox_changed = true;
			inst.cell_changed = true;
			type.any_cell_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			if (typeof inst.collision_poly === "undefined")
				inst.collision_poly = null;
			inst.collisionsEnabled = true;
			this.redraw = true;
		}
		inst.toString = cr.inst_toString;
		var initial_props, binst;
		all_behaviors.length = 0;
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (inst.recycled)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				binst.recycled = true;
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[4][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.recycled = false;
				binst.properties = initial_inst[4][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[5];
		if (inst.recycled)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		this.createRow.push(inst);
		if (layer)
		{
;
			layer.instances.push(inst);
			if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
				type.any_instance_parallaxed = true;
		}
		this.objectcount++;
		if (type.is_contained)
		{
			inst.is_contained = true;
			if (inst.recycled)
				inst.siblings.length = 0;
			else
				inst.siblings = [];			// note: should not include self in siblings
			if (!is_startup_instance && !skip_siblings)	// layout links initial instances
			{
				for (i = 0, len = type.container.length; i < len; i++)
				{
					if (type.container[i] === type)
						continue;
					if (!type.container[i].default_instance)
					{
						return null;
					}
					inst.siblings.push(this.createInstanceFromInit(type.container[i].default_instance, original_layer, false, is_world ? inst.x : sx, is_world ? inst.y : sy, true));
				}
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					inst.siblings[i].siblings.push(inst);
					for (j = 0; j < len; j++)
					{
						if (i !== j)
							inst.siblings[i].siblings.push(inst.siblings[j]);
					}
				}
			}
		}
		else
		{
			inst.is_contained = false;
			inst.siblings = null;
		}
		inst.onCreate();
		if (!inst.recycled)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	Runtime.prototype.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (cr.equals_nocase(layer.name, layer_name))
				return layer;
		}
		return null;
	};
	Runtime.prototype.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	Runtime.prototype.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	Runtime.prototype.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	Runtime.prototype.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	Runtime.prototype.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	Runtime.prototype.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	Runtime.prototype.updateAllCells = function (type)
	{
		if (!type.any_cell_changed)
			return;		// all instances must already be up-to-date
		var i, len, instances = type.instances;
		for (i = 0, len = instances.length; i < len; ++i)
		{
			instances[i].update_collision_cell();
		}
		var createRow = this.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === type)
				createRow[i].update_collision_cell();
		}
		type.any_cell_changed = false;
	};
	Runtime.prototype.getCollisionCandidates = function (layer, rtype, bbox, candidates)
	{
		var i, len, t;
		var is_parallaxed = (layer ? (layer.parallaxX !== 1 || layer.parallaxY !== 1) : false);
		if (rtype.is_family)
		{
			for (i = 0, len = rtype.members.length; i < len; ++i)
			{
				t = rtype.members[i];
				if (is_parallaxed || t.any_instance_parallaxed)
				{
					cr.appendArray(candidates, t.instances);
				}
				else
				{
					this.updateAllCells(t);
					t.collision_grid.queryRange(bbox, candidates);
				}
			}
		}
		else
		{
			if (is_parallaxed || rtype.any_instance_parallaxed)
			{
				cr.appendArray(candidates, rtype.instances);
			}
			else
			{
				this.updateAllCells(rtype);
				rtype.collision_grid.queryRange(bbox, candidates);
			}
		}
	};
	Runtime.prototype.getTypesCollisionCandidates = function (layer, types, bbox, candidates)
	{
		var i, len;
		for (i = 0, len = types.length; i < len; ++i)
		{
			this.getCollisionCandidates(layer, types[i], bbox, candidates);
		}
	};
	Runtime.prototype.getSolidCollisionCandidates = function (layer, bbox, candidates)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		this.getTypesCollisionCandidates(layer, solid.my_types, bbox, candidates);
	};
	Runtime.prototype.getJumpthruCollisionCandidates = function (layer, bbox, candidates)
	{
		var jumpthru = this.getJumpthruBehavior();
		if (!jumpthru)
			return null;
		this.getTypesCollisionCandidates(layer, jumpthru.my_types, bbox, candidates);
	};
	Runtime.prototype.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var lx, ly;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				sol.instances.length = 0;   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
			}
		}
		else
		{
			j = 0;
			for (i = 0, len = sol.instances.length; i < len; i++)
			{
				inst = sol.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				sol.instances.length = j;
		}
		type.applySolToContainer();
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	Runtime.prototype.testOverlap = function (a, b)
	{
		if (!a || !b || a === b || !a.collisionsEnabled || !b.collisionsEnabled)
			return false;
		a.update_bbox();
		b.update_bbox();
		var layera = a.layer;
		var layerb = b.layer;
		var different_layers = (layera !== layerb && (layera.parallaxX !== layerb.parallaxX || layerb.parallaxY !== layerb.parallaxY || layera.scale !== layerb.scale || layera.angle !== layerb.angle || layera.zoomRate !== layerb.zoomRate));
		var i, len, i2, i21, x, y, haspolya, haspolyb, polya, polyb;
		if (!different_layers)	// same layers: easy check
		{
			if (!a.bbox.intersects_rect(b.bbox))
				return false;
			if (!a.bquad.intersects_quad(b.bquad))
				return false;
			if (a.tilemap_exists && b.tilemap_exists)
				return false;
			if (a.tilemap_exists)
				return this.testTilemapOverlap(a, b);
			if (b.tilemap_exists)
				return this.testTilemapOverlap(b, a);
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolya && !haspolyb)
				return true;
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				polya = a.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
				polya = this.temp_poly;
			}
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				polyb = b.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
				polyb = this.temp_poly;
			}
			return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
		}
		else	// different layers: need to do full translated check
		{
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				this.temp_poly.set_from_poly(a.collision_poly);
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			}
			polya = this.temp_poly;
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				this.temp_poly2.set_from_poly(b.collision_poly);
			}
			else
			{
				this.temp_poly2.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			}
			polyb = this.temp_poly2;
			for (i = 0, len = polya.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polya.pts_cache[i2];
				y = polya.pts_cache[i21];
				polya.pts_cache[i2] = layera.layerToCanvas(x + a.x, y + a.y, true);
				polya.pts_cache[i21] = layera.layerToCanvas(x + a.x, y + a.y, false);
			}
			polya.update_bbox();
			for (i = 0, len = polyb.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polyb.pts_cache[i2];
				y = polyb.pts_cache[i21];
				polyb.pts_cache[i2] = layerb.layerToCanvas(x + b.x, y + b.y, true);
				polyb.pts_cache[i21] = layerb.layerToCanvas(x + b.x, y + b.y, false);
			}
			polyb.update_bbox();
			return polya.intersects_poly(polyb, 0, 0);
		}
	};
	var tmpQuad = new cr.quad();
	var tmpRect = new cr.rect(0, 0, 0, 0);
	var collrect_candidates = [];
	Runtime.prototype.testTilemapOverlap = function (tm, a)
	{
		var i, len, c, rc;
		var bbox = a.bbox;
		var tmx = tm.x;
		var tmy = tm.y;
		tm.getCollisionRectCandidates(bbox, collrect_candidates);
		var collrects = collrect_candidates;
		var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
		for (i = 0, len = collrects.length; i < len; ++i)
		{
			c = collrects[i];
			rc = c.rc;
			if (bbox.intersects_rect_off(rc, tmx, tmy))
			{
				tmpQuad.set_from_rect(rc);
				tmpQuad.offset(tmx, tmy);
				if (tmpQuad.intersects_quad(a.bquad))
				{
					if (haspolya)
					{
						a.collision_poly.cache_poly(a.width, a.height, a.angle);
						if (c.poly)
						{
							if (c.poly.intersects_poly(a.collision_poly, a.x - (tmx + rc.left), a.y - (tmy + rc.top)))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							this.temp_poly.set_from_quad(tmpQuad, 0, 0, rc.right - rc.left, rc.bottom - rc.top);
							if (this.temp_poly.intersects_poly(a.collision_poly, a.x, a.y))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
					}
					else
					{
						if (c.poly)
						{
							this.temp_poly.set_from_quad(a.bquad, 0, 0, a.width, a.height);
							if (c.poly.intersects_poly(this.temp_poly, -(tmx + rc.left), -(tmy + rc.top)))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
				}
			}
		}
		collrect_candidates.length = 0;
		return false;
	};
	Runtime.prototype.testRectOverlap = function (r, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		if (!b.bbox.intersects_rect(r))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(r, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (r.intersects_rect_off(tilerc, tmx, tmy))
				{
					if (c.poly)
					{
						this.temp_poly.set_from_rect(r, 0, 0);
						if (c.poly.intersects_poly(this.temp_poly, -(tmx + tilerc.left), -(tmy + tilerc.top)))
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
					else
					{
						collrect_candidates.length = 0;
						return true;
					}
				}
			}
			collrect_candidates.length = 0;
			return false;
		}
		else
		{
			tmpQuad.set_from_rect(r);
			if (!b.bquad.intersects_quad(tmpQuad))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			tmpQuad.offset(-r.left, -r.top);
			this.temp_poly.set_from_quad(tmpQuad, 0, 0, 1, 1);
			return b.collision_poly.intersects_poly(this.temp_poly, r.left - b.x, r.top - b.y);
		}
	};
	Runtime.prototype.testSegmentOverlap = function (x1, y1, x2, y2, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		tmpRect.set(cr.min(x1, x2), cr.min(y1, y2), cr.max(x1, x2), cr.max(y1, y2));
		if (!b.bbox.intersects_rect(tmpRect))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(tmpRect, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (tmpRect.intersects_rect_off(tilerc, tmx, tmy))
				{
					tmpQuad.set_from_rect(tilerc);
					tmpQuad.offset(tmx, tmy);
					if (tmpQuad.intersects_segment(x1, y1, x2, y2))
					{
						if (c.poly)
						{
							if (c.poly.intersects_segment(tmx + tilerc.left, tmy + tilerc.top, x1, y1, x2, y2))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
				}
			}
			collrect_candidates.length = 0;
			return false;
		}
		else
		{
			if (!b.bquad.intersects_segment(x1, y1, x2, y2))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			return b.collision_poly.intersects_segment(b.x, b.y, x1, y1, x2, y2);
		}
	};
	Runtime.prototype.typeHasBehavior = function (t, b)
	{
		if (!b)
			return false;
		var i, len, j, lenj, f;
		for (i = 0, len = t.behaviors.length; i < len; i++)
		{
			if (t.behaviors[i].behavior instanceof b)
				return true;
		}
		if (!t.is_family)
		{
			for (i = 0, len = t.families.length; i < len; i++)
			{
				f = t.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (f.behaviors[j].behavior instanceof b)
						return true;
				}
			}
		}
		return false;
	};
	Runtime.prototype.typeHasNoSaveBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.NoSave);
	};
	Runtime.prototype.typeHasPersistBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.Persist);
	};
	Runtime.prototype.getSolidBehavior = function ()
	{
		return this.solidBehavior;
	};
	Runtime.prototype.getJumpthruBehavior = function ()
	{
		return this.jumpthruBehavior;
	};
	var candidates = [];
	Runtime.prototype.testOverlapSolid = function (inst)
	{
		var i, len, s;
		inst.update_bbox();
		this.getSolidCollisionCandidates(inst.layer, inst.bbox, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testOverlap(inst, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	Runtime.prototype.testRectOverlapSolid = function (r)
	{
		var i, len, s;
		this.getSolidCollisionCandidates(null, r, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testRectOverlap(r, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	var jumpthru_array_ret = [];
	Runtime.prototype.testOverlapJumpThru = function (inst, all)
	{
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			ret.length = 0;
		}
		inst.update_bbox();
		this.getJumpthruCollisionCandidates(inst.layer, inst.bbox, candidates);
		var i, len, j;
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			j = candidates[i];
			if (!j.extra.jumpthruEnabled)
				continue;
			if (this.testOverlap(inst, j))
			{
				if (all)
					ret.push(j);
				else
				{
					candidates.length = 0;
					return j;
				}
			}
		}
		candidates.length = 0;
		return ret;
	};
	Runtime.prototype.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus, specific_jumpthru)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null, secondlast_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (last_overlapped)
					secondlast_overlapped = last_overlapped;
				if (!last_overlapped)
				{
					if (include_jumpthrus)
					{
						if (specific_jumpthru)
							last_overlapped = (this.testOverlap(inst, specific_jumpthru) ? specific_jumpthru : null);
						else
							last_overlapped = this.testOverlapJumpThru(inst);
						if (last_overlapped)
							secondlast_overlapped = last_overlapped;
					}
					if (!last_overlapped)
					{
						if (secondlast_overlapped)
							this.pushInFractional(inst, xdir, ydir, secondlast_overlapped, 16);
						return true;
					}
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushOut = function (inst, xdir, ydir, dist, otherinst)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, otherinst))
				return true;
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushInFractional = function (inst, xdir, ydir, obj, limit)
	{
		var divisor = 2;
		var frac;
		var forward = false;
		var overlapping = false;
		var bestx = inst.x;
		var besty = inst.y;
		while (divisor <= limit)
		{
			frac = 1 / divisor;
			divisor *= 2;
			inst.x += xdir * frac * (forward ? 1 : -1);
			inst.y += ydir * frac * (forward ? 1 : -1);
			inst.set_bbox_changed();
			if (this.testOverlap(inst, obj))
			{
				forward = true;
				overlapping = true;
			}
			else
			{
				forward = false;
				overlapping = false;
				bestx = inst.x;
				besty = inst.y;
			}
		}
		if (overlapping)
		{
			inst.x = bestx;
			inst.y = besty;
			inst.set_bbox_changed();
		}
	};
	Runtime.prototype.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = this.testOverlapSolid(inst);
		if (!last_overlapped)
			return true;		// already clear of solids
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.registerCollision = function (a, b)
	{
		if (!a.collisionsEnabled || !b.collisionsEnabled)
			return;
		this.registered_collisions.push([a, b]);
	};
	Runtime.prototype.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	Runtime.prototype.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	var triggerSheetIndex = -1;
	Runtime.prototype.trigger = function (method, inst, value /* for fast triggers */)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		var ret = false;
		var r, i, len;
		triggerSheetIndex++;
		var deep_includes = sheet.deep_includes;
		for (i = 0, len = deep_includes.length; i < len; ++i)
		{
			r = this.triggerOnSheet(method, inst, deep_includes[i], value);
			ret = ret || r;
		}
		r = this.triggerOnSheet(method, inst, sheet, value);
		ret = ret || r;
		triggerSheetIndex--;
		return ret;
    };
    Runtime.prototype.triggerOnSheet = function (method, inst, sheet, value)
    {
        var ret = false;
		var i, leni, r, families;
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet, value);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet, value);
			ret = ret || r;
			families = inst.type.families;
			for (i = 0, leni = families.length; i < leni; ++i)
			{
				r = this.triggerOnSheetForTypeName(method, inst, families[i].name, sheet, value);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	Runtime.prototype.triggerOnSheetForTypeName = function (method, inst, type_name, sheet, value)
	{
		var i, leni;
		var ret = false, ret2 = false;
		var trig, index;
		var fasttrigger = (typeof value !== "undefined");
		var triggers = (fasttrigger ? sheet.fasttriggers : sheet.triggers);
		var obj_entry = triggers[type_name];
		if (!obj_entry)
			return ret;
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; ++i)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		var triggers_to_fire;
		if (fasttrigger)
		{
			triggers_to_fire = triggers_list[value];
		}
		else
		{
			triggers_to_fire = triggers_list;
		}
		if (!triggers_to_fire)
			return null;
		for (i = 0, leni = triggers_to_fire.length; i < leni; i++)
		{
			trig = triggers_to_fire[i][0];
			index = triggers_to_fire[i][1];
			ret2 = this.executeSingleTrigger(inst, type_name, trig, index);
			ret = ret || ret2;
		}
		return ret;
	};
	Runtime.prototype.executeSingleTrigger = function (inst, type_name, trig, index)
	{
		var i, leni;
		var ret = false;
		this.trigger_depth++;
		var current_event = this.getCurrentEventStack().current_event;
		if (current_event)
			this.pushCleanSol(current_event.solModifiersIncludingParents);
		var isrecursive = (this.trigger_depth > 1);		// calling trigger from inside another trigger
		this.pushCleanSol(trig.solModifiersIncludingParents);
		if (isrecursive)
			this.pushLocalVarStack();
		var event_stack = this.pushEventStack(trig);
		event_stack.current_event = trig;
		if (inst)
		{
			var sol = this.types[type_name].getCurrentSol();
			sol.select_all = false;
			sol.instances.length = 1;
			sol.instances[0] = inst;
			this.types[type_name].applySolToContainer();
		}
		var ok_to_run = true;
		if (trig.parent)
		{
			var temp_parents_arr = event_stack.temp_parents_arr;
			var cur_parent = trig.parent;
			while (cur_parent)
			{
				temp_parents_arr.push(cur_parent);
				cur_parent = cur_parent.parent;
			}
			temp_parents_arr.reverse();
			for (i = 0, leni = temp_parents_arr.length; i < leni; i++)
			{
				if (!temp_parents_arr[i].run_pretrigger())   // parent event failed
				{
					ok_to_run = false;
					break;
				}
			}
		}
		if (ok_to_run)
		{
			this.execcount++;
			if (trig.orblock)
				trig.run_orblocktrigger(index);
			else
				trig.run();
			ret = ret || event_stack.last_event_true;
		}
		this.popEventStack();
		if (isrecursive)
			this.popLocalVarStack();
		this.popSol(trig.solModifiersIncludingParents);
		if (current_event)
			this.popSol(current_event.solModifiersIncludingParents);
		if (this.isInOnDestroy === 0 && triggerSheetIndex === 0 && !this.isRunningEvents && (!this.deathRow.isEmpty() || this.createRow.length))
		{
			this.ClearDeathRow();
		}
		this.trigger_depth--;
		return ret;
	};
	Runtime.prototype.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	Runtime.prototype.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	Runtime.prototype.pushLocalVarStack = function ()
	{
		this.localvar_stack_index++;
		if (this.localvar_stack_index >= this.localvar_stack.length)
			this.localvar_stack.push([]);
	};
	Runtime.prototype.popLocalVarStack = function ()
	{
;
		this.localvar_stack_index--;
	};
	Runtime.prototype.getCurrentLocalVarStack = function ()
	{
		return this.localvar_stack[this.localvar_stack_index];
	};
	Runtime.prototype.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	Runtime.prototype.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	Runtime.prototype.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	Runtime.prototype.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	Runtime.prototype.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	Runtime.prototype.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	Runtime.prototype.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
		}
		return null;
	};
	Runtime.prototype.getLayoutBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			if (this.layouts_by_index[i].sid === sid_)
				return this.layouts_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getObjectTypeBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			if (this.types_by_index[i].sid === sid_)
				return this.types_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getGroupBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			if (this.allGroups[i].sid === sid_)
				return this.allGroups[i];
		}
		return null;
	};
	function makeSaveDb(e)
	{
		var db = e.target.result;
		db.createObjectStore("saves", { keyPath: "slot" });
	};
	function IndexedDB_WriteSlot(slot_, data_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"], "readwrite");
			var objectStore = transaction.objectStore("saves");
			var putReq = objectStore.put({"slot": slot_, "data": data_ });
			putReq.onsuccess = oncomplete_;
		};
	};
	function IndexedDB_ReadSlot(slot_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"]);
			var objectStore = transaction.objectStore("saves");
			var readReq = objectStore.get(slot_);
			readReq.onsuccess = function (e)
			{
				if (readReq.result)
					oncomplete_(readReq.result["data"]);
				else
					oncomplete_(null);
			};
		};
	};
	Runtime.prototype.signalContinuousPreview = function ()
	{
		this.signalledContinuousPreview = true;
	};
	function doContinuousPreviewReload()
	{
		cr.logexport("Reloading for continuous preview");
		if (!!window["c2cocoonjs"])
		{
			CocoonJS["App"]["reload"]();
		}
		else
		{
			if (window.location.search.indexOf("continuous") > -1)
				window.location.reload(true);
			else
				window.location = window.location + "?continuous";
		}
	};
	Runtime.prototype.handleSaveLoad = function ()
	{
		var self = this;
		var savingToSlot = this.saveToSlot;
		var savingJson = this.lastSaveJson;
		var loadingFromSlot = this.loadFromSlot;
		var continuous = false;
		if (this.signalledContinuousPreview)
		{
			continuous = true;
			savingToSlot = "__c2_continuouspreview";
			this.signalledContinuousPreview = false;
		}
		if (savingToSlot.length)
		{
			this.ClearDeathRow();
			savingJson = this.saveToJSONString();
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_WriteSlot(savingToSlot, savingJson, function ()
				{
					cr.logexport("Saved state to IndexedDB storage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}, function (e)
				{
					try {
						localStorage.setItem("__c2save_" + savingToSlot, savingJson);
						cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
						self.lastSaveJson = savingJson;
						self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
						self.lastSaveJson = "";
						if (continuous)
							doContinuousPreviewReload();
					}
					catch (f)
					{
						cr.logexport("Failed to save game state: " + e + "; " + f);
					}
				});
			}
			else
			{
				try {
					localStorage.setItem("__c2save_" + savingToSlot, savingJson);
					cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					this.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}
				catch (e)
				{
					cr.logexport("Error saving to WebStorage: " + e);
				}
			}
			this.saveToSlot = "";
			this.loadFromSlot = "";
			this.loadFromJson = "";
		}
		if (loadingFromSlot.length)
		{
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_ReadSlot(loadingFromSlot, function (result_)
				{
					if (result_)
					{
						self.loadFromJson = result_;
						cr.logexport("Loaded state from IndexedDB storage (" + self.loadFromJson.length + " bytes)");
					}
					else
					{
						self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
						cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					}
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				}, function (e)
				{
					self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				});
			}
			else
			{
				this.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
				cr.logexport("Loaded state from WebStorage (" + this.loadFromJson.length + " bytes)");
				this.suspendDrawing = false;
				if (!self.loadFromJson.length)
					self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
			}
			this.loadFromSlot = "";
			this.saveToSlot = "";
		}
		if (this.loadFromJson.length)
		{
			this.ClearDeathRow();
			this.loadFromJSONString(this.loadFromJson);
			this.lastSaveJson = this.loadFromJson;
			this.trigger(cr.system_object.prototype.cnds.OnLoadComplete, null);
			this.lastSaveJson = "";
			this.loadFromJson = "";
		}
	};
	function CopyExtraObject(extra)
	{
		var p, ret = {};
		for (p in extra)
		{
			if (extra.hasOwnProperty(p))
			{
				if (extra[p] instanceof cr.ObjectSet)
					continue;
				if (extra[p] && typeof extra[p].c2userdata !== "undefined")
					continue;
				ret[p] = extra[p];
			}
		}
		return ret;
	};
	Runtime.prototype.saveToJSONString = function()
	{
		var i, len, j, lenj, type, layout, typeobj, g, c, a, v, p;
		var o = {
			"c2save":				true,
			"version":				1,
			"rt": {
				"time":				this.kahanTime.sum,
				"timescale":		this.timescale,
				"tickcount":		this.tickcount,
				"execcount":		this.execcount,
				"next_uid":			this.next_uid,
				"running_layout":	this.running_layout.sid,
				"start_time_offset": (Date.now() - this.start_time)
			},
			"types": {},
			"layouts": {},
			"events": {
				"groups": {},
				"cnds": {},
				"acts": {},
				"vars": {}
			}
		};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			typeobj = {
				"instances": []
			};
			if (cr.hasAnyOwnProperty(type.extra))
				typeobj["ex"] = CopyExtraObject(type.extra);
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				typeobj["instances"].push(this.saveInstanceToJSON(type.instances[j]));
			}
			o["types"][type.sid.toString()] = typeobj;
		}
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			layout = this.layouts_by_index[i];
			o["layouts"][layout.sid.toString()] = layout.saveToJSON();
		}
		var ogroups = o["events"]["groups"];
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			g = this.allGroups[i];
			ogroups[g.sid.toString()] = this.groups_by_name[g.group_name].group_active;
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				c = this.cndsBySid[p];
				if (cr.hasAnyOwnProperty(c.extra))
					ocnds[p] = { "ex": CopyExtraObject(c.extra) };
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				a = this.actsBySid[p];
				if (cr.hasAnyOwnProperty(a.extra))
					oacts[p] = { "ex": a.extra };
			}
		}
		var ovars = o["events"]["vars"];
		for (p in this.varsBySid)
		{
			if (this.varsBySid.hasOwnProperty(p))
			{
				v = this.varsBySid[p];
				if (!v.is_constant && (!v.parent || v.is_static))
					ovars[p] = v.data;
			}
		}
		o["system"] = this.system.saveToJSON();
		return JSON.stringify(o);
	};
	Runtime.prototype.refreshUidMap = function ()
	{
		var i, len, type, j, lenj, inst;
		this.objectsByUid = {};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				this.objectsByUid[inst.uid.toString()] = inst;
			}
		}
	};
	Runtime.prototype.loadFromJSONString = function (str)
	{
		var o = JSON.parse(str);
		if (!o["c2save"])
			return;		// probably not a c2 save state
		if (o["version"] > 1)
			return;		// from future version of c2; assume not compatible
		var rt = o["rt"];
		this.kahanTime.reset();
		this.kahanTime.sum = rt["time"];
		this.timescale = rt["timescale"];
		this.tickcount = rt["tickcount"];
		this.start_time = Date.now() - rt["start_time_offset"];
		var layout_sid = rt["running_layout"];
		if (layout_sid !== this.running_layout.sid)
		{
			var changeToLayout = this.getLayoutBySid(layout_sid);
			if (changeToLayout)
				this.doChangeLayout(changeToLayout);
			else
				return;		// layout that was saved on has gone missing (deleted?)
		}
		this.isLoadingState = true;
		var i, len, j, lenj, k, lenk, p, type, existing_insts, load_insts, inst, binst, layout, layer, g, iid, t;
		var otypes = o["types"];
		for (p in otypes)
		{
			if (otypes.hasOwnProperty(p))
			{
				type = this.getObjectTypeBySid(parseInt(p, 10));
				if (!type || type.is_family || this.typeHasNoSaveBehavior(type))
					continue;
				if (otypes[p]["ex"])
					type.extra = otypes[p]["ex"];
				else
					cr.wipe(type.extra);
				existing_insts = type.instances;
				load_insts = otypes[p]["instances"];
				for (i = 0, len = cr.min(existing_insts.length, load_insts.length); i < len; i++)
				{
					this.loadInstanceFromJSON(existing_insts[i], load_insts[i]);
				}
				for (i = load_insts.length, len = existing_insts.length; i < len; i++)
					this.DestroyInstance(existing_insts[i]);
				for (i = existing_insts.length, len = load_insts.length; i < len; i++)
				{
					layer = null;
					if (type.plugin.is_world)
					{
						layer = this.running_layout.getLayerBySid(load_insts[i]["w"]["l"]);
						if (!layer)
							continue;
					}
					inst = this.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
					this.loadInstanceFromJSON(inst, load_insts[i]);
				}
				type.stale_iids = true;
			}
		}
		this.ClearDeathRow();
		this.refreshUidMap();
		var olayouts = o["layouts"];
		for (p in olayouts)
		{
			if (olayouts.hasOwnProperty(p))
			{
				layout = this.getLayoutBySid(parseInt(p, 10));
				if (!layout)
					continue;		// must've gone missing
				layout.loadFromJSON(olayouts[p]);
			}
		}
		var ogroups = o["events"]["groups"];
		for (p in ogroups)
		{
			if (ogroups.hasOwnProperty(p))
			{
				g = this.getGroupBySid(parseInt(p, 10));
				if (g && this.groups_by_name[g.group_name])
					this.groups_by_name[g.group_name].group_active = ogroups[p];
			}
		}
		var ocnds = o["events"]["cnds"];
		for (p in ocnds)
		{
			if (ocnds.hasOwnProperty(p) && this.cndsBySid.hasOwnProperty(p))
			{
				this.cndsBySid[p].extra = ocnds[p]["ex"];
			}
		}
		var oacts = o["events"]["acts"];
		for (p in oacts)
		{
			if (oacts.hasOwnProperty(p) && this.actsBySid.hasOwnProperty(p))
			{
				this.actsBySid[p].extra = oacts[p]["ex"];
			}
		}
		var ovars = o["events"]["vars"];
		for (p in ovars)
		{
			if (ovars.hasOwnProperty(p) && this.varsBySid.hasOwnProperty(p))
			{
				this.varsBySid[p].data = ovars[p];
			}
		}
		this.next_uid = rt["next_uid"];
		this.isLoadingState = false;
		this.system.loadFromJSON(o["system"]);
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (type.is_contained)
				{
					iid = inst.get_iid();
					inst.siblings.length = 0;
					for (k = 0, lenk = type.container.length; k < lenk; k++)
					{
						t = type.container[k];
						if (type === t)
							continue;
;
						inst.siblings.push(t.instances[iid]);
					}
				}
				if (inst.afterLoad)
					inst.afterLoad();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.afterLoad)
							binst.afterLoad();
					}
				}
			}
		}
		this.redraw = true;
	};
	Runtime.prototype.saveInstanceToJSON = function(inst, state_only)
	{
		var i, len, world, behinst, et;
		var type = inst.type;
		var plugin = type.plugin;
		var o = {};
		if (state_only)
			o["c2"] = true;		// mark as known json data from Construct 2
		else
			o["uid"] = inst.uid;
		if (cr.hasAnyOwnProperty(inst.extra))
			o["ex"] = CopyExtraObject(inst.extra);
		if (inst.instance_vars && inst.instance_vars.length)
		{
			o["ivs"] = {};
			for (i = 0, len = inst.instance_vars.length; i < len; i++)
			{
				o["ivs"][inst.type.instvar_sids[i].toString()] = inst.instance_vars[i];
			}
		}
		if (plugin.is_world)
		{
			world = {
				"x": inst.x,
				"y": inst.y,
				"w": inst.width,
				"h": inst.height,
				"l": inst.layer.sid,
				"zi": inst.get_zindex()
			};
			if (inst.angle !== 0)
				world["a"] = inst.angle;
			if (inst.opacity !== 1)
				world["o"] = inst.opacity;
			if (inst.hotspotX !== 0.5)
				world["hX"] = inst.hotspotX;
			if (inst.hotspotY !== 0.5)
				world["hY"] = inst.hotspotY;
			if (inst.blend_mode !== 0)
				world["bm"] = inst.blend_mode;
			if (!inst.visible)
				world["v"] = inst.visible;
			if (!inst.collisionsEnabled)
				world["ce"] = inst.collisionsEnabled;
			if (inst.my_timescale !== -1)
				world["mts"] = inst.my_timescale;
			if (type.effect_types.length)
			{
				world["fx"] = [];
				for (i = 0, len = type.effect_types.length; i < len; i++)
				{
					et = type.effect_types[i];
					world["fx"].push({"name": et.name,
									  "active": inst.active_effect_flags[et.index],
									  "params": inst.effect_params[et.index] });
				}
			}
			o["w"] = world;
		}
		if (inst.behavior_insts && inst.behavior_insts.length)
		{
			o["behs"] = {};
			for (i = 0, len = inst.behavior_insts.length; i < len; i++)
			{
				behinst = inst.behavior_insts[i];
				if (behinst.saveToJSON)
					o["behs"][behinst.type.sid.toString()] = behinst.saveToJSON();
			}
		}
		if (inst.saveToJSON)
			o["data"] = inst.saveToJSON();
		return o;
	};
	Runtime.prototype.getInstanceVarIndexBySid = function (type, sid_)
	{
		var i, len;
		for (i = 0, len = type.instvar_sids.length; i < len; i++)
		{
			if (type.instvar_sids[i] === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.getBehaviorIndexBySid = function (inst, sid_)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].type.sid === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.loadInstanceFromJSON = function(inst, o, state_only)
	{
		var p, i, len, iv, oivs, world, fxindex, obehs, behindex;
		var oldlayer;
		var type = inst.type;
		var plugin = type.plugin;
		if (state_only)
		{
			if (!o["c2"])
				return;
		}
		else
			inst.uid = o["uid"];
		if (o["ex"])
			inst.extra = o["ex"];
		else
			cr.wipe(inst.extra);
		oivs = o["ivs"];
		if (oivs)
		{
			for (p in oivs)
			{
				if (oivs.hasOwnProperty(p))
				{
					iv = this.getInstanceVarIndexBySid(type, parseInt(p, 10));
					if (iv < 0 || iv >= inst.instance_vars.length)
						continue;		// must've gone missing
					inst.instance_vars[iv] = oivs[p];
				}
			}
		}
		if (plugin.is_world)
		{
			world = o["w"];
			if (inst.layer.sid !== world["l"])
			{
				oldlayer = inst.layer;
				inst.layer = this.running_layout.getLayerBySid(world["l"]);
				if (inst.layer)
				{
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
					cr.arrayFindRemove(oldlayer.instances, inst);
					oldlayer.zindices_stale = true;
				}
				else
				{
					inst.layer = oldlayer;
					this.DestroyInstance(inst);
				}
			}
			inst.x = world["x"];
			inst.y = world["y"];
			inst.width = world["w"];
			inst.height = world["h"];
			inst.zindex = world["zi"];
			inst.angle = world.hasOwnProperty("a") ? world["a"] : 0;
			inst.opacity = world.hasOwnProperty("o") ? world["o"] : 1;
			inst.hotspotX = world.hasOwnProperty("hX") ? world["hX"] : 0.5;
			inst.hotspotY = world.hasOwnProperty("hY") ? world["hY"] : 0.5;
			inst.visible = world.hasOwnProperty("v") ? world["v"] : true;
			inst.collisionsEnabled = world.hasOwnProperty("ce") ? world["ce"] : true;
			inst.my_timescale = world.hasOwnProperty("mts") ? world["mts"] : -1;
			inst.blend_mode = world.hasOwnProperty("bm") ? world["bm"] : 0;;
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			inst.set_bbox_changed();
			if (world.hasOwnProperty("fx"))
			{
				for (i = 0, len = world["fx"].length; i < len; i++)
				{
					fxindex = type.getEffectIndexByName(world["fx"][i]["name"]);
					if (fxindex < 0)
						continue;		// must've gone missing
					inst.active_effect_flags[fxindex] = world["fx"][i]["active"];
					inst.effect_params[fxindex] = world["fx"][i]["params"];
				}
			}
			inst.updateActiveEffects();
		}
		obehs = o["behs"];
		if (obehs)
		{
			for (p in obehs)
			{
				if (obehs.hasOwnProperty(p))
				{
					behindex = this.getBehaviorIndexBySid(inst, parseInt(p, 10));
					if (behindex < 0)
						continue;		// must've gone missing
					inst.behavior_insts[behindex].loadFromJSON(obehs[p]);
				}
			}
		}
		if (o["data"])
			inst.loadFromJSON(o["data"]);
	};
	cr.runtime = Runtime;
	cr.createRuntime = function (canvasid)
	{
		return new Runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new Runtime({ "dc": true, "width": w, "height": h });
	};
	window["cr_createRuntime"] = cr.createRuntime;
	window["cr_createDCRuntime"] = cr.createDCRuntime;
	window["createCocoonJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("screencanvas") || document.createElement("canvas");
		canvas.screencanvas = true;
		document.body.appendChild(canvas);
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
	window["createEjectaRuntime"] = function ()
	{
		var canvas = document.getElementById("canvas");
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
	else
		return null;
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	function Layout(runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.first_visit = true;
		this.name = m[0];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		this.sid = m[5];
		var lm = m[6];
		var i, len;
		this.layers = [];
		this.initial_types = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[7];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
			if (this.initial_types.indexOf(type) === -1)
				this.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[8].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[8][i][0],
				name: m[8][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[8][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
		this.persist_data = {};
	};
	Layout.prototype.saveObjectToPersist = function (inst)
	{
		var sidStr = inst.type.sid.toString();
		if (!this.persist_data.hasOwnProperty(sidStr))
			this.persist_data[sidStr] = [];
		var type_persist = this.persist_data[sidStr];
		type_persist.push(this.runtime.saveInstanceToJSON(inst));
	};
	Layout.prototype.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	Layout.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layout.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	var created_instances = [];
	Layout.prototype.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
			this.event_sheet.updateDeepIncludes();
		}
		this.runtime.running_layout = this;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type, type_instances, inst, iid, t, s, p, q, type_data, layer;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.is_family)
				continue;		// instances are only transferred for their real type
			type_instances = type.instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		var layer;
		created_instances.length = 0;
		this.boundScrolling();
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();		// fills created_instances
			layer.disableAngle = true;
			var px = layer.canvasToLayer(0, 0, true, true);
			var py = layer.canvasToLayer(0, 0, false, true);
			layer.disableAngle = false;
			if (this.runtime.pixel_rounding)
			{
				px = (px + 0.5) | 0;
				py = (py + 0.5) | 0;
			}
			layer.rotateViewport(px, py, null);
		}
		var uids_changed = false;
		if (!this.first_visit)
		{
			for (p in this.persist_data)
			{
				if (this.persist_data.hasOwnProperty(p))
				{
					type = this.runtime.getObjectTypeBySid(parseInt(p, 10));
					if (!type || type.is_family || !this.runtime.typeHasPersistBehavior(type))
						continue;
					type_data = this.persist_data[p];
					for (i = 0, len = type_data.length; i < len; i++)
					{
						layer = null;
						if (type.plugin.is_world)
						{
							layer = this.getLayerBySid(type_data[i]["w"]["l"]);
							if (!layer)
								continue;
						}
						inst = this.runtime.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
						this.runtime.loadInstanceFromJSON(inst, type_data[i]);
						uids_changed = true;
						created_instances.push(inst);
					}
					type_data.length = 0;
				}
			}
			for (i = 0, len = this.layers.length; i < len; i++)
			{
				this.layers[i].instances.sort(sortInstanceByZIndex);
				this.layers[i].zindices_stale = true;		// in case of duplicates/holes
			}
		}
		if (uids_changed)
		{
			this.runtime.ClearDeathRow();
			this.runtime.refreshUidMap();
		}
		for (i = 0; i < created_instances.length; i++)
		{
			inst = created_instances[i];
			if (!inst.type.is_contained)
				continue;
			iid = inst.get_iid();
			for (k = 0, lenk = inst.type.container.length; k < lenk; k++)
			{
				t = inst.type.container[k];
				if (inst.type === t)
					continue;
				if (t.instances.length > iid)
					inst.siblings.push(t.instances[iid]);
				else
				{
					if (!t.default_instance)
					{
					}
					else
					{
						s = this.runtime.createInstanceFromInit(t.default_instance, inst.layer, true, inst.x, inst.y, true);
						this.runtime.ClearDeathRow();
						t.updateIIDs();
						inst.siblings.push(s);
						created_instances.push(s);		// come back around and link up its own instances too
					}
				}
			}
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
;
		}
		this.runtime.changelayout = null;
		this.runtime.ClearDeathRow();
		if (this.runtime.ctx && !this.runtime.isDomFree)
		{
			for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
			{
				t = this.runtime.types_by_index[i];
				if (t.is_family || !t.instances.length || !t.preloadCanvas2D)
					continue;
				t.preloadCanvas2D(this.runtime.ctx);
			}
		}
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout start: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		for (i = 0, len = created_instances.length; i < len; i++)
		{
			inst = created_instances[i];
			this.runtime.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
		}
		created_instances.length = 0;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
		this.first_visit = false;
	};
	Layout.prototype.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
				inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		this.initial_nonworld.length = k;
	};
	Layout.prototype.stopRunning = function ()
	{
;
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout end: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		this.runtime.system.waits.length = 0;
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
				{
					if (this.runtime.typeHasPersistBehavior(inst.type))
						this.saveObjectToPersist(inst);
					this.runtime.DestroyInstance(inst);
				}
			}
			this.runtime.ClearDeathRow();
			layer_instances.length = 0;
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal || type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
	};
	Layout.prototype.draw = function (ctx)
	{
		var layout_canvas;
		var layout_ctx = ctx;
		var ctx_changed = false;
		var render_offscreen = !this.runtime.fullscreenScalingQuality;
		if (render_offscreen)
		{
			if (!this.runtime.layout_canvas)
			{
				this.runtime.layout_canvas = document.createElement("canvas");
				layout_canvas = this.runtime.layout_canvas;
				layout_canvas.width = this.runtime.draw_width;
				layout_canvas.height = this.runtime.draw_height;
				this.runtime.layout_ctx = layout_canvas.getContext("2d");
				ctx_changed = true;
			}
			layout_canvas = this.runtime.layout_canvas;
			layout_ctx = this.runtime.layout_ctx;
			if (layout_canvas.width !== this.runtime.draw_width)
			{
				layout_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layout_canvas.height !== this.runtime.draw_height)
			{
				layout_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layout_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
		}
		layout_ctx.globalAlpha = 1;
		layout_ctx.globalCompositeOperation = "source-over";
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			layout_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && l.blend_mode !== 11)
				l.draw(layout_ctx);
		}
		if (render_offscreen)
		{
			ctx.drawImage(layout_canvas, 0, 0, this.runtime.width, this.runtime.height);
		}
	};
	Layout.prototype.drawGL = function (glw)
	{
		var render_to_texture = (this.active_effect_types.length > 0 ||
								 this.runtime.uses_background_blending ||
								 !this.runtime.fullscreenScalingQuality);
		if (render_to_texture)
		{
			if (!this.runtime.layout_tex)
			{
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layout_tex.c2width !== this.runtime.draw_width || this.runtime.layout_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layout_tex);
			if (!this.runtime.fullscreenScalingQuality)
			{
				glw.setSize(this.runtime.draw_width, this.runtime.draw_height);
			}
		}
		else
		{
			if (this.runtime.layout_tex)
			{
				glw.setRenderingToTexture(null);
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = null;
			}
		}
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].drawGL(glw);
		}
		if (render_to_texture)
		{
			if (this.active_effect_types.length === 0 ||
				(this.active_effect_types.length === 1 && this.runtime.fullscreenScalingQuality))
			{
				if (this.active_effect_types.length === 1)
				{
					var etindex = this.active_effect_types[0].index;
					glw.switchProgram(this.active_effect_types[0].shaderindex);
					glw.setProgramParameters(null,								// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.scale,						// layerScale
											 this.angle,						// layerAngle
											 0.0, 0.0,							// viewOrigin
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(this.active_effect_types[0].shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
				}
				glw.setRenderingToTexture(null);				// to backbuffer
				glw.setOpacity(1);
				glw.setTexture(this.runtime.layout_tex);
				glw.setAlphaBlend();
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.renderEffectChain(glw, null, null, null);
			}
		}
	};
	Layout.prototype.getRenderTarget = function()
	{
		return (this.active_effect_types.length > 0 ||
				this.runtime.uses_background_blending ||
				!this.runtime.fullscreenScalingQuality) ? this.runtime.layout_tex : null;
	};
	Layout.prototype.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	Layout.prototype.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.draw_width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.draw_height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.boundScrolling = function ()
	{
		this.scrollToX(this.scrollX);
		this.scrollToY(this.scrollY);
	};
	Layout.prototype.renderEffectChain = function (glw, layer, inst, rendertarget)
	{
		var active_effect_types = inst ?
							inst.active_effect_types :
							layer ?
								layer.active_effect_types :
								this.active_effect_types;
		var layerScale = 1, layerAngle = 0, viewOriginLeft = 0, viewOriginTop = 0;
		if (inst)
		{
			layerScale = inst.layer.getScale();
			layerAngle = inst.layer.getAngle();
			viewOriginLeft = inst.layer.viewLeft;
			viewOriginTop = inst.layer.viewTop;
		}
		else if (layer)
		{
			layerScale = layer.getScale();
			layerAngle = layer.getAngle();
			viewOriginLeft = layer.viewLeft;
			viewOriginTop = layer.viewTop;
		}
		var fx_tex = this.runtime.fx_tex;
		var i, len, last, temp, fx_index = 0, other_fx_index = 1;
		var y, h;
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var halfw = windowWidth / 2;
		var halfh = windowHeight / 2;
		var rcTex = layer ? layer.rcTex : this.rcTex;
		var rcTex2 = layer ? layer.rcTex2 : this.rcTex2;
		var screenleft = 0, clearleft = 0;
		var screentop = 0, cleartop = 0;
		var screenright = windowWidth, clearright = windowWidth;
		var screenbottom = windowHeight, clearbottom = windowHeight;
		var boxExtendHorizontal = 0;
		var boxExtendVertical = 0;
		var inst_layer_angle = inst ? inst.layer.getAngle() : 0;
		if (inst)
		{
			for (i = 0, len = active_effect_types.length; i < len; i++)
			{
				boxExtendHorizontal += glw.getProgramBoxExtendHorizontal(active_effect_types[i].shaderindex);
				boxExtendVertical += glw.getProgramBoxExtendVertical(active_effect_types[i].shaderindex);
			}
			var bbox = inst.bbox;
			screenleft = layer.layerToCanvas(bbox.left, bbox.top, true, true);
			screentop = layer.layerToCanvas(bbox.left, bbox.top, false, true);
			screenright = layer.layerToCanvas(bbox.right, bbox.bottom, true, true);
			screenbottom = layer.layerToCanvas(bbox.right, bbox.bottom, false, true);
			if (inst_layer_angle !== 0)
			{
				var screentrx = layer.layerToCanvas(bbox.right, bbox.top, true, true);
				var screentry = layer.layerToCanvas(bbox.right, bbox.top, false, true);
				var screenblx = layer.layerToCanvas(bbox.left, bbox.bottom, true, true);
				var screenbly = layer.layerToCanvas(bbox.left, bbox.bottom, false, true);
				temp = Math.min(screenleft, screenright, screentrx, screenblx);
				screenright = Math.max(screenleft, screenright, screentrx, screenblx);
				screenleft = temp;
				temp = Math.min(screentop, screenbottom, screentry, screenbly);
				screenbottom = Math.max(screentop, screenbottom, screentry, screenbly);
				screentop = temp;
			}
			screenleft -= boxExtendHorizontal;
			screentop -= boxExtendVertical;
			screenright += boxExtendHorizontal;
			screenbottom += boxExtendVertical;
			rcTex2.left = screenleft / windowWidth;
			rcTex2.top = 1 - screentop / windowHeight;
			rcTex2.right = screenright / windowWidth;
			rcTex2.bottom = 1 - screenbottom / windowHeight;
			clearleft = screenleft = cr.floor(screenleft);
			cleartop = screentop = cr.floor(screentop);
			clearright = screenright = cr.ceil(screenright);
			clearbottom = screenbottom = cr.ceil(screenbottom);
			clearleft -= boxExtendHorizontal;
			cleartop -= boxExtendVertical;
			clearright += boxExtendHorizontal;
			clearbottom += boxExtendVertical;
			if (screenleft < 0)					screenleft = 0;
			if (screentop < 0)					screentop = 0;
			if (screenright > windowWidth)		screenright = windowWidth;
			if (screenbottom > windowHeight)	screenbottom = windowHeight;
			if (clearleft < 0)					clearleft = 0;
			if (cleartop < 0)					cleartop = 0;
			if (clearright > windowWidth)		clearright = windowWidth;
			if (clearbottom > windowHeight)		clearbottom = windowHeight;
			rcTex.left = screenleft / windowWidth;
			rcTex.top = 1 - screentop / windowHeight;
			rcTex.right = screenright / windowWidth;
			rcTex.bottom = 1 - screenbottom / windowHeight;
		}
		else
		{
			rcTex.left = rcTex2.left = 0;
			rcTex.top = rcTex2.top = 0;
			rcTex.right = rcTex2.right = 1;
			rcTex.bottom = rcTex2.bottom = 1;
		}
		var pre_draw = (inst && (((inst.angle || inst_layer_angle) && glw.programUsesDest(active_effect_types[0].shaderindex)) || boxExtendHorizontal !== 0 || boxExtendVertical !== 0 || inst.opacity !== 1 || inst.type.plugin.must_predraw)) || (layer && !inst && layer.opacity !== 1);
		glw.setAlphaBlend();
		if (pre_draw)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(0);
			glw.setRenderingToTexture(fx_tex[fx_index]);
			h = clearbottom - cleartop;
			y = (windowHeight - cleartop) - h;
			glw.clearRect(clearleft, y, clearright - clearleft, h);
			if (inst)
			{
				inst.drawGL(glw);
			}
			else
			{
				glw.setTexture(this.runtime.layer_tex);
				glw.setOpacity(layer.opacity);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			}
			rcTex2.left = rcTex2.top = 0;
			rcTex2.right = rcTex2.bottom = 1;
			if (inst)
			{
				temp = rcTex.top;
				rcTex.top = rcTex.bottom;
				rcTex.bottom = temp;
			}
			fx_index = 1;
			other_fx_index = 0;
		}
		glw.setOpacity(1);
		var last = active_effect_types.length - 1;
		var post_draw = glw.programUsesCrossSampling(active_effect_types[last].shaderindex) ||
						(!layer && !inst && !this.runtime.fullscreenScalingQuality);
		var etindex = 0;
		for (i = 0, len = active_effect_types.length; i < len; i++)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(active_effect_types[i].shaderindex);
			etindex = active_effect_types[i].index;
			if (glw.programIsAnimated(active_effect_types[i].shaderindex))
				this.runtime.redraw = true;
			if (i == 0 && !pre_draw)
			{
				glw.setRenderingToTexture(fx_tex[fx_index]);
				h = clearbottom - cleartop;
				y = (windowHeight - cleartop) - h;
				glw.clearRect(clearleft, y, clearright - clearleft, h);
				if (inst)
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / inst.width,				// pixelWidth
											 1.0 / inst.height,				// pixelHeight
											 rcTex2.left, rcTex2.top,		// destStart
											 rcTex2.right, rcTex2.bottom,	// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 inst.effect_params[etindex]);	// fx params
					inst.drawGL(glw);
				}
				else
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / windowWidth,				// pixelWidth
											 1.0 / windowHeight,			// pixelHeight
											 0.0, 0.0,						// destStart
											 1.0, 1.0,						// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 layer ?						// fx params
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
					glw.setTexture(layer ? this.runtime.layer_tex : this.runtime.layout_tex);
					glw.resetModelView();
					glw.translate(-halfw, -halfh);
					glw.updateModelView();
					glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				}
				rcTex2.left = rcTex2.top = 0;
				rcTex2.right = rcTex2.bottom = 1;
				if (inst && !post_draw)
				{
					temp = screenbottom;
					screenbottom = screentop;
					screentop = temp;
				}
			}
			else
			{
				glw.setProgramParameters(rendertarget,						// backTex
										 1.0 / windowWidth,					// pixelWidth
										 1.0 / windowHeight,				// pixelHeight
										 rcTex2.left, rcTex2.top,			// destStart
										 rcTex2.right, rcTex2.bottom,		// destEnd
										 layerScale,
										 layerAngle,
										 viewOriginLeft, viewOriginTop,
										 inst ?								// fx params
											inst.effect_params[etindex] :
											layer ?
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
				glw.setTexture(null);
				if (i === last && !post_draw)
				{
					if (inst)
						glw.setBlend(inst.srcBlend, inst.destBlend);
					else if (layer)
						glw.setBlend(layer.srcBlend, layer.destBlend);
					glw.setRenderingToTexture(rendertarget);
				}
				else
				{
					glw.setRenderingToTexture(fx_tex[fx_index]);
					h = clearbottom - cleartop;
					y = (windowHeight - cleartop) - h;
					glw.clearRect(clearleft, y, clearright - clearleft, h);
				}
				glw.setTexture(fx_tex[other_fx_index]);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				if (i === last && !post_draw)
					glw.setTexture(null);
			}
			fx_index = (fx_index === 0 ? 1 : 0);
			other_fx_index = (fx_index === 0 ? 1 : 0);		// will be opposite to fx_index since it was just assigned
		}
		if (post_draw)
		{
			glw.switchProgram(0);
			if (inst)
				glw.setBlend(inst.srcBlend, inst.destBlend);
			else if (layer)
				glw.setBlend(layer.srcBlend, layer.destBlend);
			else
			{
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
					halfw = this.runtime.width / 2;
					halfh = this.runtime.height / 2;
					screenleft = 0;
					screentop = 0;
					screenright = this.runtime.width;
					screenbottom = this.runtime.height;
				}
			}
			glw.setRenderingToTexture(rendertarget);
			glw.setTexture(fx_tex[other_fx_index]);
			glw.resetModelView();
			glw.translate(-halfw, -halfh);
			glw.updateModelView();
			if (inst && active_effect_types.length === 1 && !pre_draw)
				glw.quadTex(screenleft, screentop, screenright, screentop, screenright, screenbottom, screenleft, screenbottom, rcTex);
			else
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			glw.setTexture(null);
		}
	};
	Layout.prototype.getLayerBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].sid === sid_)
				return this.layers[i];
		}
		return null;
	};
	Layout.prototype.saveToJSON = function ()
	{
		var i, len, layer, et;
		var o = {
			"sx": this.scrollX,
			"sy": this.scrollY,
			"s": this.scale,
			"a": this.angle,
			"w": this.width,
			"h": this.height,
			"fv": this.first_visit,			// added r127
			"persist": this.persist_data,
			"fx": [],
			"layers": {}
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			o["layers"][layer.sid.toString()] = layer.saveToJSON();
		}
		return o;
	};
	Layout.prototype.loadFromJSON = function (o)
	{
		var i, len, fx, p, layer;
		this.scrollX = o["sx"];
		this.scrollY = o["sy"];
		this.scale = o["s"];
		this.angle = o["a"];
		this.width = o["w"];
		this.height = o["h"];
		this.persist_data = o["persist"];
		if (typeof o["fv"] !== "undefined")
			this.first_visit = o["fv"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		var olayers = o["layers"];
		for (p in olayers)
		{
			if (olayers.hasOwnProperty(p))
			{
				layer = this.getLayerBySid(parseInt(p, 10));
				if (!layer)
					continue;		// must've gone missing
				layer.loadFromJSON(olayers[p]);
			}
		}
	};
	cr.layout = Layout;
	function Layer(layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.name = m[0];
		this.index = m[1];
		this.sid = m[2];
		this.visible = m[3];		// initially visible
		this.background_color = m[4];
		this.transparent = m[5];
		this.parallaxX = m[6];
		this.parallaxY = m[7];
		this.opacity = m[8];
		this.forceOwnTexture = m[9];
		this.zoomRate = m[10];
		this.blend_mode = m[11];
		this.effect_fallback = m[12];
		this.compositeOp = "source-over";
		this.srcBlend = 0;
		this.destBlend = 0;
		this.render_offscreen = false;
		var im = m[13];
		var i, len;
		this.initial_instances = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
			{
				type.default_instance = inst;
				type.default_layerindex = this.index;
			}
			this.initial_instances.push(inst);
			if (this.layout.initial_types.indexOf(type) === -1)
				this.layout.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[14].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[14][i][0],
				name: m[14][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[14][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
	};
	Layer.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layer.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	Layer.prototype.createInitialInstances = function ()
	{
		var i, k, len, inst, initial_inst, type, keep, hasPersistBehavior;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			initial_inst = this.initial_instances[i];
			type = this.runtime.types_by_index[initial_inst[1]];
;
			hasPersistBehavior = this.runtime.typeHasPersistBehavior(type);
			keep = true;
			if (!hasPersistBehavior || this.layout.first_visit)
			{
				inst = this.runtime.createInstanceFromInit(initial_inst, this, true);
;
				created_instances.push(inst);
				if (inst.type.global)
					keep = false;
			}
			if (keep)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
		this.runtime.ClearDeathRow();		// flushes creation row so IIDs will be correct
		if (!this.runtime.glwrap && this.effect_types.length)	// no WebGL renderer and shaders used
			this.blend_mode = this.effect_fallback;				// use fallback blend mode
		this.compositeOp = cr.effectToCompositeOp(this.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(this, this.blend_mode, this.runtime.gl);
	};
	Layer.prototype.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
;
;
			this.instances[i].zindex = i;
		}
		this.zindices_stale = false;
	};
	Layer.prototype.getScale = function (include_aspect)
	{
		return this.getNormalScale() * (this.runtime.fullscreenScalingQuality || include_aspect ? this.runtime.aspect_scale : 1);
	};
	Layer.prototype.getNormalScale = function ()
	{
		return ((this.scale * this.layout.scale) - 1) * this.zoomRate + 1;
	};
	Layer.prototype.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	Layer.prototype.draw = function (ctx)
	{
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.blend_mode !== 0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		var ctx_changed = false;
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.draw_width;
				layer_canvas.height = this.runtime.draw_height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
				ctx_changed = true;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.draw_width)
			{
				layer_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layer_canvas.height !== this.runtime.draw_height)
			{
				layer_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layer_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.globalAlpha = 1;
		layer_ctx.globalCompositeOperation = "source-over";
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			layer_ctx.globalCompositeOperation = inst.compositeOp;
			inst.draw(layer_ctx);
		}
		layer_ctx.restore();
		if (this.render_offscreen)
		{
			ctx.globalCompositeOperation = this.compositeOp;
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	Layer.prototype.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.draw_width * (1 / myscale));
		this.viewBottom = py + (this.runtime.draw_height * (1 / myscale));
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.draw_width / 2, this.runtime.draw_height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.draw_width / -2, this.runtime.draw_height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	Layer.prototype.drawGL = function (glw)
	{
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.active_effect_types.length > 0 || this.blend_mode !== 0);
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.draw_width || this.runtime.layer_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			if (inst.uses_shaders)
			{
				shaderindex = inst.active_effect_types[0].shaderindex;
				etindex = inst.active_effect_types[0].index;
				if (inst.active_effect_types.length === 1 && !glw.programUsesCrossSampling(shaderindex) &&
					!glw.programExtendsBox(shaderindex) && ((!inst.angle && !inst.layer.getAngle()) || !glw.programUsesDest(shaderindex)) &&
					inst.opacity === 1 && !inst.type.plugin.must_predraw)
				{
					glw.switchProgram(shaderindex);
					glw.setBlend(inst.srcBlend, inst.destBlend);
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
					var destStartX = 0, destStartY = 0, destEndX = 0, destEndY = 0;
					if (glw.programUsesDest(shaderindex))
					{
						var bbox = inst.bbox;
						var screenleft = this.layerToCanvas(bbox.left, bbox.top, true, true);
						var screentop = this.layerToCanvas(bbox.left, bbox.top, false, true);
						var screenright = this.layerToCanvas(bbox.right, bbox.bottom, true, true);
						var screenbottom = this.layerToCanvas(bbox.right, bbox.bottom, false, true);
						destStartX = screenleft / windowWidth;
						destStartY = 1 - screentop / windowHeight;
						destEndX = screenright / windowWidth;
						destEndY = 1 - screenbottom / windowHeight;
					}
					glw.setProgramParameters(this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget(), // backTex
											 1.0 / inst.width,			// pixelWidth
											 1.0 / inst.height,			// pixelHeight
											 destStartX, destStartY,
											 destEndX, destEndY,
											 this.getScale(),
											 this.getAngle(),
											 this.viewLeft, this.viewTop,
											 inst.effect_params[etindex]);
					inst.drawGL(glw);
				}
				else
				{
					this.layout.renderEffectChain(glw, this, inst, this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget());
					glw.resetModelView();
					glw.scale(myscale, myscale);
					glw.rotateZ(-this.getAngle());
					glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
					glw.updateModelView();
				}
			}
			else
			{
				glw.switchProgram(0);		// un-set any previously set shader
				glw.setBlend(inst.srcBlend, inst.destBlend);
				inst.drawGL(glw);
			}
		}
		if (this.render_offscreen)
		{
			shaderindex = this.active_effect_types.length ? this.active_effect_types[0].shaderindex : 0;
			etindex = this.active_effect_types.length ? this.active_effect_types[0].index : 0;
			if (this.active_effect_types.length === 0 || (this.active_effect_types.length === 1 &&
				!glw.programUsesCrossSampling(shaderindex) && this.opacity === 1))
			{
				if (this.active_effect_types.length === 1)
				{
					glw.switchProgram(shaderindex);
					glw.setProgramParameters(this.layout.getRenderTarget(),		// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.getScale(),					// layerScale
											 this.getAngle(),
											 this.viewLeft, this.viewTop,
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(this.layout.getRenderTarget());
				glw.setOpacity(this.opacity);
				glw.setTexture(this.runtime.layer_tex);
				glw.setBlend(this.srcBlend, this.destBlend);
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.draw_width / 2;
				var halfh = this.runtime.draw_height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.layout.renderEffectChain(glw, this, null, this.layout.getRenderTarget());
			}
		}
	};
	Layer.prototype.canvasToLayer = function (ptx, pty, getx, using_draw_area)
	{
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= this.layout.scrollX;
			y -= this.layout.scrollY;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += this.layout.scrollX;
			y += this.layout.scrollY;
		}
		return getx ? x : y;
	};
	Layer.prototype.layerToCanvas = function (ptx, pty, getx, using_draw_area)
	{
		var a = this.getAngle();
		if (a !== 0)
		{
			ptx -= this.layout.scrollX;
			pty -= this.layout.scrollY;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (ptx * cosa) - (pty * sina);
			pty = (pty * cosa) + (ptx * sina);
			ptx = x_temp;
			ptx += this.layout.scrollX;
			pty += this.layout.scrollY;
		}
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina && !using_draw_area)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
	Layer.prototype.rotatePt = function (x_, y_, getx)
	{
		if (this.getAngle() === 0)
			return getx ? x_ : y_;
		var nx = this.layerToCanvas(x_, y_, true);
		var ny = this.layerToCanvas(x_, y_, false);
		this.disableAngle = true;
		var px = this.canvasToLayer(nx, ny, true);
		var py = this.canvasToLayer(nx, ny, true);
		this.disableAngle = false;
		return getx ? px : py;
	};
	Layer.prototype.saveToJSON = function ()
	{
		var i, len, et;
		var o = {
			"s": this.scale,
			"a": this.angle,
			"vl": this.viewLeft,
			"vt": this.viewTop,
			"vr": this.viewRight,
			"vb": this.viewBottom,
			"v": this.visible,
			"bc": this.background_color,
			"t": this.transparent,
			"px": this.parallaxX,
			"py": this.parallaxY,
			"o": this.opacity,
			"zr": this.zoomRate,
			"fx": [],
			"instances": []
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		return o;
	};
	function sortInstanceByZIndex(a, b)
	{
		return a.zindex - b.zindex;
	};
	Layer.prototype.loadFromJSON = function (o)
	{
		var i, len, p, inst, fx;
		this.scale = o["s"];
		this.angle = o["a"];
		this.viewLeft = o["vl"];
		this.viewTop = o["vt"];
		this.viewRight = o["vr"];
		this.viewBottom = o["vb"];
		this.visible = o["v"];
		this.background_color = o["bc"];
		this.transparent = o["t"];
		this.parallaxX = o["px"];
		this.parallaxY = o["py"];
		this.opacity = o["o"];
		this.zoomRate = o["zr"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		this.instances.sort(sortInstanceByZIndex);
		this.zindices_stale = true;
	};
	cr.layer = Layer;
}());
;
(function()
{
	var allUniqueSolModifiers = [];
	function testSolsMatch(arr1, arr2)
	{
		var i, len = arr1.length;
		switch (len) {
		case 0:
			return true;
		case 1:
			return arr1[0] === arr2[0];
		case 2:
			return arr1[0] === arr2[0] && arr1[1] === arr2[1];
		default:
			for (i = 0; i < len; i++)
			{
				if (arr1[i] !== arr2[i])
					return false;
			}
			return true;
		}
	};
	function solArraySorter(t1, t2)
	{
		return t1.index - t2.index;
	};
	function findMatchingSolModifier(arr)
	{
		var i, len, u, temp, subarr;
		if (arr.length === 2)
		{
			if (arr[0].index > arr[1].index)
			{
				temp = arr[0];
				arr[0] = arr[1];
				arr[1] = temp;
			}
		}
		else if (arr.length > 2)
			arr.sort(solArraySorter);		// so testSolsMatch compares in same order
		if (arr.length >= allUniqueSolModifiers.length)
			allUniqueSolModifiers.length = arr.length + 1;
		if (!allUniqueSolModifiers[arr.length])
			allUniqueSolModifiers[arr.length] = [];
		subarr = allUniqueSolModifiers[arr.length];
		for (i = 0, len = subarr.length; i < len; i++)
		{
			u = subarr[i];
			if (testSolsMatch(arr, u))
				return u;
		}
		subarr.push(arr);
		return arr;
	};
	function EventSheet(runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
		this.fasttriggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); 	// all event sheets included by this sheet, at first-level indirection only
		this.deep_includes = [];				// all includes from this sheet recursively, in trigger order
		this.already_included_sheets = [];		// used while building deep_includes
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
    EventSheet.prototype.toString = function ()
    {
        return this.name;
    };
	EventSheet.prototype.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	EventSheet.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	EventSheet.prototype.updateDeepIncludes = function ()
	{
		this.deep_includes.length = 0;
		this.already_included_sheets.length = 0;
		this.addDeepIncludes(this);
		this.already_included_sheets.length = 0;
	};
	EventSheet.prototype.addDeepIncludes = function (root_sheet)
	{
		var i, len, inc, sheet;
		var deep_includes = root_sheet.deep_includes;
		var already_included_sheets = root_sheet.already_included_sheets;
		var arr = this.includes.valuesRef();
		for (i = 0, len = arr.length; i < len; ++i)
		{
			inc = arr[i];
			sheet = inc.include_sheet;
			if (!inc.isActive() || root_sheet === sheet || already_included_sheets.indexOf(sheet) > -1)
				continue;
			already_included_sheets.push(sheet);
			sheet.addDeepIncludes(root_sheet);
			deep_includes.push(sheet);
		}
	};
	EventSheet.prototype.run = function (from_include)
	{
		if (!this.runtime.resuming_breakpoint)
		{
			this.hasRun = true;
			if (!from_include)
				this.runtime.isRunningEvents = true;
		}
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
				this.runtime.clearSol(ev.solModifiers);
				if (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length)
					this.runtime.ClearDeathRow();
		}
			if (!from_include)
				this.runtime.isRunningEvents = false;
	};
	function isPerformanceSensitiveTrigger(method)
	{
		if (cr.plugins_.Sprite && method === cr.plugins_.Sprite.prototype.cnds.OnFrameChanged)
		{
			return true;
		}
		return false;
	};
	EventSheet.prototype.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var i, len;
		var cnd = trig.conditions[index];
		var type_name;
		if (cnd.type)
			type_name = cnd.type.name;
		else
			type_name = "system";
		var fasttrigger = cnd.fasttrigger;
		var triggers = (fasttrigger ? this.fasttriggers : this.triggers);
		if (!triggers[type_name])
			triggers[type_name] = [];
		var obj_entry = triggers[type_name];
		var method = cnd.func;
		if (fasttrigger)
		{
			if (!cnd.parameters.length)				// no parameters
				return;
			var firstparam = cnd.parameters[0];
			if (firstparam.type !== 1 ||			// not a string param
				firstparam.expression.type !== 2)	// not a string literal node
			{
				return;
			}
			var fastevs;
			var firstvalue = firstparam.expression.value.toLowerCase();
			var i, len;
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					fastevs = obj_entry[i].evs;
					if (!fastevs[firstvalue])
						fastevs[firstvalue] = [[trig, index]];
					else
						fastevs[firstvalue].push([trig, index]);
					return;
				}
			}
			fastevs = {};
			fastevs[firstvalue] = [[trig, index]];
			obj_entry.push({ method: method, evs: fastevs });
		}
		else
		{
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					obj_entry[i].evs.push([trig, index]);
					return;
				}
			}
			if (isPerformanceSensitiveTrigger(method))
				obj_entry.unshift({ method: method, evs: [[trig, index]]});
			else
				obj_entry.push({ method: method, evs: [[trig, index]]});
		}
	};
	cr.eventsheet = EventSheet;
	function Selection(type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	Selection.prototype.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	Selection.prototype.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	/*
	Selection.prototype.ensure_picked = function (inst, skip_siblings)
	{
		var i, len;
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
		if (!skip_siblings)
		{
		}
	};
	*/
	Selection.prototype.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				this.instances.length = 0;
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			this.instances.length = 1;
			this.instances[0] = inst;
		}
	};
	cr.selection = Selection;
	function EventBlock(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solModifiersIncludingParents = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelevent = false;			// is an event block parented only by a top-level group
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
		this.group_name = "";
		this.group = false;
		this.initially_activated = false;
		this.group_active = false;
		this.contained_includes = null;
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.contained_includes = [];
			this.group_active = this.initially_activated;
			this.runtime.allGroups.push(this);
            this.runtime.groups_by_name[this.group_name] = this;
        }
		this.orblock = m[2];
		this.sid = m[4];
		if (!this.group)
			this.runtime.blocksBySid[this.sid.toString()] = this;
		var i, len;
		var cm = m[5];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cnd.index = i;
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[6];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			act.index = i;
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 8)
		{
			var em = m[7];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
		{
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
		}
	};
	window["_c2hh_"] = "86842871454851DA912AF27A58AC8008F1F7C46C";
	EventBlock.prototype.postInit = function (hasElse/*, prevBlock_*/)
	{
		var i, len;
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.toplevelevent = !this.is_trigger() && (!this.parent || (this.parent.group && this.parent.toplevelgroup));
		this.has_else_block = !!hasElse;
		this.solModifiersIncludingParents = this.solModifiers.slice(0);
		p = this.parent;
		while (p)
		{
			for (i = 0, len = p.solModifiers.length; i < len; i++)
				this.addParentSolModifier(p.solModifiers[i]);
			p = p.parent;
		}
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		this.solModifiersIncludingParents = findMatchingSolModifier(this.solModifiersIncludingParents);
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	};
	EventBlock.prototype.setGroupActive = function (a)
	{
		if (this.group_active === !!a)
			return;		// same state
		this.group_active = !!a;
		var i, len;
		for (i = 0, len = this.contained_includes.length; i < len; ++i)
		{
			this.contained_includes[i].updateActive();
		}
		if (len > 0 && this.runtime.running_layout.event_sheet)
			this.runtime.running_layout.event_sheet.updateDeepIncludes();
	};
	function addSolModifierToList(type, arr)
	{
		var i, len, t;
		if (!type)
			return;
		if (arr.indexOf(type) === -1)
			arr.push(type);
		if (type.is_contained)
		{
			for (i = 0, len = type.container.length; i < len; i++)
			{
				t = type.container[i];
				if (type === t)
					continue;		// already handled
				if (arr.indexOf(t) === -1)
					arr.push(t);
			}
		}
	};
	EventBlock.prototype.addSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiers);
	};
	EventBlock.prototype.addParentSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiersIncludingParents);
	};
	EventBlock.prototype.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	EventBlock.prototype.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	EventBlock.prototype.run = function ()
	{
		var i, len, any_true = false, cnd_result;
		var runtime = this.runtime;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var conditions = this.conditions;
			if (!this.is_else_block)
				evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			if (conditions.length === 0)
				any_true = true;		// be sure to run if empty block
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (conditions[evinfo.cndindex].trigger)		// skip triggers when running OR block
					continue;
				cnd_result = conditions[evinfo.cndindex].run();
				if (cnd_result)			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				cnd_result = conditions[evinfo.cndindex].run();
				if (!cnd_result)    // condition failed
				{
					evinfo.last_event_true = false;
					if (this.toplevelevent && (!runtime.deathRow.isEmpty() || runtime.createRow.length))
						runtime.ClearDeathRow();
					return;		// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		this.end_run(evinfo);
	};
	EventBlock.prototype.end_run = function (evinfo)
	{
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
		if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
			this.runtime.ClearDeathRow();
	};
	EventBlock.prototype.run_orblocktrigger = function (index)
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
			this.runtime.getCurrentEventStack().last_event_true = true;
		}
	};
	EventBlock.prototype.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
			this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
					pushpop = (!this.toplevelgroup || (!this.group && i < last));
					if (pushpop)
						this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
					if (pushpop)
						this.runtime.popSol(subev.solModifiers);
					else
						this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
			this.runtime.popEventStack();
	};
	EventBlock.prototype.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	EventBlock.prototype.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	EventBlock.prototype.isFirstConditionOfType = function (cnd)
	{
		var cndindex = cnd.index;
		if (cndindex === 0)
			return true;
		--cndindex;
		for ( ; cndindex >= 0; --cndindex)
		{
			if (this.conditions[cndindex].type === cnd.type)
				return false;
		}
		return true;
	};
	cr.eventblock = EventBlock;
	function Condition(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = m[1];
;
		this.trigger = (m[3] > 0);
		this.fasttrigger = (m[3] === 2);
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		this.sid = m[7];
		this.runtime.cndsBySid[this.sid.toString()] = this;
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (this.fasttrigger)
			this.run = this.run_true;
		if (m.length === 10)
		{
			var i, len;
			var em = m[9];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Condition.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	/*
	Condition.prototype.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	Condition.prototype.run_true = function ()
	{
		return true;
	};
	Condition.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	Condition.prototype.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		var ret = this.func.apply(this.behaviortype ? this.behaviortype : this.type, this.results);
		this.type.applySolToContainer();
		return ret;
	};
	Condition.prototype.run_object = function ()
	{
		var i, j, k, leni, lenj, p, ret, met, inst, s, sol2;
		var type = this.type;
		var sol = type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		var is_contained = type.is_contained;
		var is_family = type.is_family;
		var family_index = type.family_index;
		var beh_index = this.beh_index;
		var is_beh = (beh_index > -1);
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var inverted = this.inverted;
		var func = this.func;
		var arr, container;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		if (sol.select_all) {
			sol.instances.length = 0;       // clear contents
			sol.else_instances.length = 0;
			arr = type.instances;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				met = cr.xor(ret, inverted);
				if (met)
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (type.finish)
				type.finish(true);
			sol.select_all = false;
			type.applySolToContainer();
			return sol.hasObjects();
		}
		else {
			k = 0;
			var using_else_instances = (is_orblock && !this.block.isFirstConditionOfType(this));
			arr = (using_else_instances ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				if (cr.xor(ret, inverted))
				{
					any_true = true;
					if (using_else_instances)
					{
						sol.instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances.push(s);
							}
						}
					}
					else
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances[k] = s;
							}
						}
						k++;
					}
				}
				else
				{
					if (using_else_instances)
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances[k] = s;
							}
						}
						k++;
					}
					else if (is_orblock)
					{
						sol.else_instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances.push(s);
							}
						}
					}
				}
			}
			arr.length = k;
			if (is_contained)
			{
				container = type.container;
				for (i = 0, leni = container.length; i < leni; i++)
				{
					sol2 = container[i].getCurrentSol();
					if (using_else_instances)
						sol2.else_instances.length = k;
					else
						sol2.instances.length = k;
				}
			}
			var pick_in_finish = any_true;		// don't pick in finish() if we're only doing the logic test below
			if (using_else_instances && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					if (params_vary)
					{
						for (j = 0, lenj = parameters.length; j < lenj; j++)
						{
							p = parameters[j];
							if (p.variesPerInstance)
								results[j] = p.get(i);
						}
					}
					if (is_beh)
						ret = func.apply(inst.behavior_insts[beh_index], results);
					else
						ret = func.apply(inst, results);
					if (cr.xor(ret, inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (type.finish)
				type.finish(pick_in_finish || is_orblock);
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.condition = Condition;
	function Action(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = m[1];
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		this.sid = m[3];
		this.runtime.actsBySid[this.sid.toString()] = this;
		if (m.length === 6)
		{
			var i, len;
			var em = m[5];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Action.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	Action.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.runtime.system, this.results);
	};
	Action.prototype.run_object = function ()
	{
		var instances = this.type.getCurrentSol().getObjects();
		var is_family = this.type.is_family;
		var family_index = this.type.family_index;
		var beh_index = this.beh_index;
		var is_beh = (beh_index > -1);
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var func = this.func;
		var i, j, leni, lenj, p, inst, offset;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		for (i = 0, leni = instances.length; i < leni; ++i)
		{
			inst = instances[i];
			if (params_vary)
			{
				for (j = 0, lenj = parameters.length; j < lenj; ++j)
				{
					p = parameters[j];
					if (p.variesPerInstance)
						results[j] = p.get(i);    // pass i to use as default SOL index
				}
			}
			if (is_beh)
			{
				offset = 0;
				if (is_family)
				{
					offset = inst.type.family_beh_map[family_index];
				}
				func.apply(inst.behavior_insts[beh_index + offset], results);
			}
			else
				func.apply(inst, results);
		}
		return false;
	};
	cr.action = Action;
	var tempValues = [];
	var tempValuesPtr = -1;
	function Parameter(owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.get = null;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = null;
		this.eventvar = null;
		this.fileinfo = null;
		this.subparams = null;
		this.variadicret = null;
		this.subparams = null;
		this.variadicret = null;
		this.variesPerInstance = false;
		var i, len, param;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type.is_family)
				{
					this.get = this.get_familyvar;
					this.variesPerInstance = true;
				}
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			case 13:	// variadic
				this.get = this.get_variadic;
				this.subparams = [];
				this.variadicret = [];
				for (i = 1, len = m.length; i < len; i++)
				{
					param = new cr.parameter(this.owner, m[i]);
					cr.seal(param);
					this.subparams.push(param);
					this.variadicret.push(0);
				}
				break;
			default:
;
		}
	};
	Parameter.prototype.postInit = function ()
	{
		var i, len;
		if (this.type === 11)		// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		else if (this.type === 13)	// variadic, postInit all sub-params
		{
			for (i = 0, len = this.subparams.length; i < len; i++)
				this.subparams[i].postInit();
		}
		if (this.expression)
			this.expression.postInit();
	};
	Parameter.prototype.maybeVaryForType = function (t)
	{
		if (this.variesPerInstance)
			return;				// already varies per instance, no need to check again
		if (!t)
			return;				// never vary for system type
		if (!t.plugin.singleglobal)
		{
			this.variesPerInstance = true;
			return;
		}
	};
	Parameter.prototype.setVaries = function ()
	{
		this.variesPerInstance = true;
	};
	Parameter.prototype.pushTempValue = function ()
	{
		tempValuesPtr++;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	Parameter.prototype.popTempValue = function ()
	{
		tempValuesPtr--;
	};
	Parameter.prototype.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		return temp.data;      			// return actual JS value, not expvalue
	};
	Parameter.prototype.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (cr.is_string(temp.data))
			return temp.data;
		else
			return "";
	};
	Parameter.prototype.get_object = function ()
	{
		return this.object;
	};
	Parameter.prototype.get_combosel = function ()
	{
		return this.combosel;
	};
	Parameter.prototype.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (temp.is_number())
			return this.runtime.getLayerByNumber(temp.data);
		else
			return this.runtime.getLayerByName(temp.data);
	}
	Parameter.prototype.get_layout = function ()
	{
		return this.layout;
	};
	Parameter.prototype.get_key = function ()
	{
		return this.key;
	};
	Parameter.prototype.get_instvar = function ()
	{
		return this.index;
	};
	Parameter.prototype.get_familyvar = function (solindex_)
	{
		var solindex = solindex_ || 0;
		var familytype = this.owner.type;
		var realtype = null;
		var sol = familytype.getCurrentSol();
		var objs = sol.getObjects();
		if (objs.length)
			realtype = objs[solindex % objs.length].type;
		else if (sol.else_instances.length)
			realtype = sol.else_instances[solindex % sol.else_instances.length].type;
		else if (familytype.instances.length)
			realtype = familytype.instances[solindex % familytype.instances.length].type;
		else
			return 0;
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	Parameter.prototype.get_eventvar = function ()
	{
		return this.eventvar;
	};
	Parameter.prototype.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	Parameter.prototype.get_variadic = function ()
	{
		var i, len;
		for (i = 0, len = this.subparams.length; i < len; i++)
		{
			this.variadicret[i] = this.subparams[i].get();
		}
		return this.variadicret;
	};
	cr.parameter = Parameter;
	function EventVariable(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.is_static = !!m[4];
		this.is_constant = !!m[5];
		this.sid = m[6];
		this.runtime.varsBySid[this.sid.toString()] = this;
		this.data = this.initial;	// note: also stored in event stack frame for local nonstatic nonconst vars
		if (this.parent)			// local var
		{
			if (this.is_static || this.is_constant)
				this.localIndex = -1;
			else
				this.localIndex = this.runtime.stackLocalCount++;
			this.runtime.all_local_vars.push(this);
		}
		else						// global var
		{
			this.localIndex = -1;
			this.runtime.all_global_vars.push(this);
		}
	};
	EventVariable.prototype.postInit = function ()
	{
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventVariable.prototype.setValue = function (x)
	{
;
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs)
			this.data = x;
		else	// local nonstatic variable: use event stack to keep value at this level of recursion
		{
			if (this.localIndex >= lvs.length)
				lvs.length = this.localIndex + 1;
			lvs[this.localIndex] = x;
		}
	};
	EventVariable.prototype.getValue = function ()
	{
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs || this.is_constant)
			return this.data;
		else	// local nonstatic variable
		{
			if (this.localIndex >= lvs.length)
			{
;
				return this.initial;
			}
			if (typeof lvs[this.localIndex] === "undefined")
			{
;
				return this.initial;
			}
			return lvs[this.localIndex];
		}
	};
	EventVariable.prototype.run = function ()
	{
			if (this.parent && !this.is_static && !this.is_constant)
				this.setValue(this.initial);
	};
	cr.eventvariable = EventVariable;
	function EventInclude(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
		this.active = true;
	};
	EventInclude.prototype.toString = function ()
	{
		return "include:" + this.include_sheet.toString();
	};
	EventInclude.prototype.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this);
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		var p = this.parent;
		while (p)
		{
			if (p.group)
				p.contained_includes.push(this);
			p = p.parent;
		}
		this.updateActive();
	};
	EventInclude.prototype.run = function ()
	{
			if (this.parent)
				this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run(true);			// from include
			if (this.parent)
				this.runtime.popSol(this.runtime.types_by_index);
	};
	EventInclude.prototype.updateActive = function ()
	{
		var p = this.parent;
		while (p)
		{
			if (p.group && !p.group_active)
			{
				this.active = false;
				return;
			}
			p = p.parent;
		}
		this.active = true;
	};
	EventInclude.prototype.isActive = function ()
	{
		return this.active;
	};
	cr.eventinclude = EventInclude;
	function EventStackFrame()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	EventStackFrame.prototype.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		this.temp_parents_arr.length = 0;
		this.last_event_true = false;
		this.else_branch_ran = false;
		this.any_true_state = false;
	};
	EventStackFrame.prototype.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	cr.eventStackFrame = EventStackFrame;
}());
(function()
{
	function ExpNode(owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_behavior_exp,
					this.eval_instvar_exp,
					this.eval_object_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = null;
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = m[1];
;
			if (this.func === cr.system_object.prototype.exps.random
			 || this.func === cr.system_object.prototype.exps.choose)
			{
				this.owner.setVaries();
			}
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = m[2];
			this.return_string = m[3];
			if (cr.plugins_.Function && this.func === cr.plugins_.Function.prototype.exps.Call)
			{
				this.owner.setVaries();
			}
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = m[3];
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		this.owner.maybeVaryForType(this.object_type);
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	ExpNode.prototype.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	ExpNode.prototype.eval_system_exp = function (ret)
	{
		this.results[0] = ret;
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		this.owner.popTempValue();
		this.func.apply(this.runtime.system, this.results);
	};
	ExpNode.prototype.eval_object_behavior_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		this.results[0] = ret;
		ret.object_class = this.object_type;		// so expression can access family type if need be
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++) {
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		var index = this.owner.solindex;
		if (this.instance_expr) {
			this.instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = this.object_type.instances;    // pick from all instances, not SOL
			}
		}
		this.owner.popTempValue();
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var returned_val;
		var inst = instances[index];
		if (this.beh_index > -1)
		{
			var offset = 0;
			if (this.object_type.is_family)
			{
				offset = inst.type.family_beh_map[this.object_type.family_index];
			}
			returned_val = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
		}
		else
			returned_val = this.func.apply(inst, this.results);
;
	};
	ExpNode.prototype.eval_instvar_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		var index = this.owner.solindex;
		if (this.instance_expr)
		{
			var temp = this.owner.pushTempValue();
			this.instance_expr.get(temp);
			if (temp.is_number())
			{
				index = temp.data;
				var type_instances = this.object_type.instances;
				index %= type_instances.length;     // wraparound
				if (index < 0)                      // offset
					index += type_instances.length;
				var to_ret = type_instances[index].instance_vars[this.varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				this.owner.popTempValue();
				return;         // done
			}
			this.owner.popTempValue();
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var inst = instances[index];
		var offset = 0;
		if (this.object_type.is_family)
		{
			offset = inst.type.family_var_map[this.object_type.family_index];
		}
		var to_ret = inst.instance_vars[this.varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	ExpNode.prototype.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	ExpNode.prototype.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data += temp.data;          // both operands numbers: add
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data -= temp.data;          // both operands numbers: subtract
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data *= temp.data;          // both operands numbers: multiply
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data /= temp.data;          // both operands numbers: divide
			ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data %= temp.data;          // both operands numbers: modulo
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data = Math.pow(ret.data, temp.data);   // both operands numbers: raise to power
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_and = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number())
		{
			if (temp.is_string())
			{
				ret.set_string(ret.data.toString() + temp.data);
			}
			else
			{
				if (ret.data && temp.data)
					ret.set_int(1);
				else
					ret.set_int(0);
			}
		}
		else if (ret.is_string())
		{
			if (temp.is_string())
				ret.data += temp.data;
			else
			{
				ret.data += (Math.round(temp.data * 1e10) / 1e10).toString();
			}
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			if (ret.data || temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	ExpNode.prototype.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data === temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data !== temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data < temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data <= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data > temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data >= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_eventvar_exp = function (ret)
	{
		var val = this.eventvar.getValue();
		if (cr.is_number(val))
			ret.set_float(val);
		else
			ret.set_string(val);
	};
	cr.expNode = ExpNode;
	function ExpValue(type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = Math.floor(this.data);
		cr.seal(this);
	};
	ExpValue.prototype.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	ExpValue.prototype.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	ExpValue.prototype.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = Math.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	ExpValue.prototype.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	ExpValue.prototype.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	ExpValue.prototype.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = Math.floor(val);
	};
	ExpValue.prototype.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	ExpValue.prototype.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	ExpValue.prototype.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.expvalue = ExpValue;
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
cr.system_object.prototype.saveToJSON = function ()
{
	var o = {};
	var i, len, j, lenj, p, w, t, sobj;
	o["waits"] = [];
	var owaits = o["waits"];
	var waitobj;
	for (i = 0, len = this.waits.length; i < len; i++)
	{
		w = this.waits[i];
		waitobj = {
			"t": w.time,
			"ev": w.ev.sid,
			"sm": [],
			"sols": {}
		};
		if (w.ev.actions[w.actindex])
			waitobj["act"] = w.ev.actions[w.actindex].sid;
		for (j = 0, lenj = w.solModifiers.length; j < lenj; j++)
			waitobj["sm"].push(w.solModifiers[j].sid);
		for (p in w.sols)
		{
			if (w.sols.hasOwnProperty(p))
			{
				t = this.runtime.types_by_index[parseInt(p, 10)];
;
				sobj = {
					"sa": w.sols[p].sa,
					"insts": []
				};
				for (j = 0, lenj = w.sols[p].insts.length; j < lenj; j++)
					sobj["insts"].push(w.sols[p].insts[j].uid);
				waitobj["sols"][t.sid.toString()] = sobj;
			}
		}
		owaits.push(waitobj);
	}
	return o;
};
cr.system_object.prototype.loadFromJSON = function (o)
{
	var owaits = o["waits"];
	var i, len, j, lenj, p, w, addWait, e, aindex, t, savedsol, nusol, inst;
	this.waits.length = 0;
	for (i = 0, len = owaits.length; i < len; i++)
	{
		w = owaits[i];
		e = this.runtime.blocksBySid[w["ev"].toString()];
		if (!e)
			continue;	// event must've gone missing
		aindex = -1;
		for (j = 0, lenj = e.actions.length; j < lenj; j++)
		{
			if (e.actions[j].sid === w["act"])
			{
				aindex = j;
				break;
			}
		}
		if (aindex === -1)
			continue;	// action must've gone missing
		addWait = {};
		addWait.sols = {};
		addWait.solModifiers = [];
		addWait.deleteme = false;
		addWait.time = w["t"];
		addWait.ev = e;
		addWait.actindex = aindex;
		for (j = 0, lenj = w["sm"].length; j < lenj; j++)
		{
			t = this.runtime.getObjectTypeBySid(w["sm"][j]);
			if (t)
				addWait.solModifiers.push(t);
		}
		for (p in w["sols"])
		{
			if (w["sols"].hasOwnProperty(p))
			{
				t = this.runtime.getObjectTypeBySid(parseInt(p, 10));
				if (!t)
					continue;		// type must've been deleted
				savedsol = w["sols"][p];
				nusol = {
					sa: savedsol["sa"],
					insts: []
				};
				for (j = 0, lenj = savedsol["insts"].length; j < lenj; j++)
				{
					inst = this.runtime.getObjectByUID(savedsol["insts"][j]);
					if (inst)
						nusol.insts.push(inst);
				}
				addWait.sols[t.index.toString()] = nusol;
			}
		}
		this.waits.push(addWait);
	}
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	function SysCnds() {};
    SysCnds.prototype.EveryTick = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutStart = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutEnd = function()
    {
        return true;
    };
    SysCnds.prototype.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    SysCnds.prototype.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed)
            {
                if (elapsed >= t)
                {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    SysCnds.prototype.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	SysCnds.prototype.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    SysCnds.prototype.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	SysCnds.prototype.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    SysCnds.prototype.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (end < start)
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
		else
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	var foreach_instancestack = [];
	var foreach_instanceptr = -1;
    SysCnds.prototype.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len, j, lenj, inst, s, sol2;
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra.c2_foreachordered_val;
		var vb = b.extra.c2_foreachordered_val;
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	SysCnds.prototype.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len, j, lenj, inst, s, sol2;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra.c2_foreachordered_val = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	SysCnds.prototype.PickByComparison = function (obj_, exp_, cmp_, val_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			val_ = current_condition.parameters[3].get(i);
			if (cr.do_cmp(exp_, cmp_, val_))
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
	SysCnds.prototype.PickByEvaluate = function (obj_, exp_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			if (exp_)
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
    SysCnds.prototype.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra.TriggerOnce_lastTick === "undefined")
			cndextra.TriggerOnce_lastTick = -1;
        var last_tick = cndextra.TriggerOnce_lastTick;
        var cur_tick = this.runtime.tickcount;
        cndextra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    SysCnds.prototype.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
		if (typeof cnd.extra.Every_seconds === "undefined")
			cnd.extra.Every_seconds = seconds;
		var this_seconds = cnd.extra.Every_seconds;
        if (cur_time >= last_time + this_seconds)
        {
            cnd.extra.Every_lastTime = last_time + this_seconds;
			if (cur_time >= cnd.extra.Every_lastTime + 0.04)
			{
				cnd.extra.Every_lastTime = cur_time;
			}
			cnd.extra.Every_seconds = seconds;
            return true;
        }
		else if (cur_time < last_time - 0.1)
		{
			cnd.extra.Every_lastTime = cur_time;
		}
		return false;
    };
    SysCnds.prototype.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.getValue(), cmp, val);
    };
    SysCnds.prototype.IsGroupActive = function (group)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
        return g && g.group_active;
    };
	SysCnds.prototype.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	SysCnds.prototype.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	SysCnds.prototype.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	SysCnds.prototype.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	SysCnds.prototype.OnLoadFinished = function ()
	{
		return true;
	};
	SysCnds.prototype.OnCanvasSnapshot = function ()
	{
		return true;
	};
	SysCnds.prototype.EffectsSupported = function ()
	{
		return !!this.runtime.glwrap;
	};
	SysCnds.prototype.OnSaveComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.ObjectUIDExists = function (u)
	{
		return !!this.runtime.getObjectByUID(u);
	};
	SysCnds.prototype.IsOnPlatform = function (p)
	{
		var rt = this.runtime;
		switch (p) {
		case 0:		// HTML5 website
			return !rt.isDomFree && !rt.isNodeWebkit && !rt.isPhoneGap && !rt.isCrosswalk && !rt.isWinJS && !rt.isWindowsPhone8 && !rt.isBlackberry10 && !rt.isAmazonWebApp;
		case 1:		// iOS
			return rt.isiOS;
		case 2:		// Android
			return rt.isAndroid;
		case 3:		// Windows 8
			return rt.isWindows8App;
		case 4:		// Windows Phone 8
			return rt.isWindowsPhone8;
		case 5:		// Blackberry 10
			return rt.isBlackberry10;
		case 6:		// Tizen
			return rt.isTizen;
		case 7:		// CocoonJS
			return rt.isCocoonJs;
		case 8:		// PhoneGap
			return rt.isPhoneGap;
		case 9:	// Scirra Arcade
			return rt.isArcade;
		case 10:	// node-webkit
			return rt.isNodeWebkit;
		case 11:	// crosswalk
			return rt.isCrosswalk;
		case 12:	// amazon webapp
			return rt.isAmazonWebApp;
		default:	// should not be possible
			return false;
		}
	};
	var cacheRegex = null;
	var lastRegex = "";
	var lastFlags = "";
	function getRegex(regex_, flags_)
	{
		if (!cacheRegex || regex_ !== lastRegex || flags_ !== lastFlags)
		{
			cacheRegex = new RegExp(regex_, flags_);
			lastRegex = regex_;
			lastFlags = flags_;
		}
		cacheRegex.lastIndex = 0;		// reset
		return cacheRegex;
	};
	SysCnds.prototype.RegexTest = function (str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		return regex.test(str_);
	};
	var tmp_arr = [];
	SysCnds.prototype.PickOverlappingPoint = function (obj_, x_, y_)
	{
		if (!obj_)
            return false;
        var sol = obj_.getCurrentSol();
        var instances = sol.getObjects();
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		var cnd = this.runtime.getCurrentCondition();
		var i, len, inst, pick;
		if (sol.select_all)
		{
			cr.shallowAssignArray(tmp_arr, instances);
			sol.else_instances.length = 0;
			sol.select_all = false;
			sol.instances.length = 0;
		}
		else
		{
			if (orblock)
			{
				cr.shallowAssignArray(tmp_arr, sol.else_instances);
				sol.else_instances.length = 0;
			}
			else
			{
				cr.shallowAssignArray(tmp_arr, instances);
				sol.instances.length = 0;
			}
		}
		for (i = 0, len = tmp_arr.length; i < len; ++i)
		{
			inst = tmp_arr[i];
			inst.update_bbox();
			pick = cr.xor(inst.contains_pt(x_, y_), cnd.inverted);
			if (pick)
				sol.instances.push(inst);
			else
				sol.else_instances.push(inst);
		}
		obj_.applySolToContainer();
		return cr.xor(!!sol.instances.length, cnd.inverted);
	};
	sysProto.cnds = new SysCnds();
    function SysActs() {};
    SysActs.prototype.GoToLayout = function(to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
        this.runtime.changelayout = to;
    };
    SysActs.prototype.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		sol.instances.length = 1;
		sol.instances[0] = inst;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				sol = s.type.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = s;
			}
		}
    };
    SysActs.prototype.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	SysActs.prototype.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.running_layout.boundScrolling();
			this.runtime.redraw = true;
		}
	};
    SysActs.prototype.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    SysActs.prototype.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	SysActs.prototype.SetVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(x);
			else
				v.setValue(parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(x.toString());
	};
	SysActs.prototype.AddVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() + x);
			else
				v.setValue(v.getValue() + parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(v.getValue() + x.toString());
	};
	SysActs.prototype.SubVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() - x);
			else
				v.setValue(v.getValue() - parseFloat(x));
		}
	};
    SysActs.prototype.SetGroupActive = function (group, active)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
		if (!g)
			return;
		switch (active) {
		case 0:
			g.setGroupActive(false);
			break;
		case 1:
			g.setGroupActive(true);
			break;
		case 2:
			g.setGroupActive(!g.group_active);
			break;
		}
    };
    SysActs.prototype.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    SysActs.prototype.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    SysActs.prototype.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	var waitobjrecycle = [];
	function allocWaitObject()
	{
		var w;
		if (waitobjrecycle.length)
			w = waitobjrecycle.pop();
		else
		{
			w = {};
			w.sols = {};
			w.solModifiers = [];
		}
		w.deleteme = false;
		return w;
	};
	function freeWaitObject(w)
	{
		cr.wipe(w.sols);
		w.solModifiers.length = 0;
		waitobjrecycle.push(w);
	};
	var solstateobjects = [];
	function allocSolStateObject()
	{
		var s;
		if (solstateobjects.length)
			s = solstateobjects.pop();
		else
		{
			s = {};
			s.insts = [];
		}
		s.sa = false;
		return s;
	};
	function freeSolStateObject(s)
	{
		s.insts.length = 0;
		solstateobjects.push(s);
	};
	SysActs.prototype.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	SysActs.prototype.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	SysActs.prototype.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	SysActs.prototype.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerParallax = function (layer, px, py)
    {
        if (!layer)
            return;
		if (layer.parallaxX === px / 100 && layer.parallaxY === py / 100)
			return;
        layer.parallaxX = px / 100;
		layer.parallaxY = py / 100;
		if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
		{
			var i, len, instances = layer.instances;
			for (i = 0, len = instances.length; i < len; ++i)
			{
				instances[i].type.any_instance_parallaxed = true;
			}
		}
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBackground = function (layer, c)
    {
        if (!layer)
            return;
		var r = cr.GetRValue(c);
		var g = cr.GetGValue(c);
		var b = cr.GetBValue(c);
		if (layer.background_color[0] === r && layer.background_color[1] === g && layer.background_color[2] === b)
			return;
        layer.background_color[0] = r;
		layer.background_color[1] = g;
		layer.background_color[2] = b;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerTransparent = function (layer, t)
    {
        if (!layer)
            return;
		if (!!t === !!layer.transparent)
			return;
		layer.transparent = !!t;
        this.runtime.redraw = true;
    };
	SysActs.prototype.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	SysActs.prototype.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to different layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && cr.equals_nocase(l, layoutname))
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	SysActs.prototype.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			g.setGroupActive(g.initially_activated);
		}
	};
	SysActs.prototype.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.snapshotCanvas = [format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100];
		this.runtime.redraw = true;		// force redraw so snapshot is always taken
	};
	SysActs.prototype.SetCanvasSize = function (w, h)
	{
		if (w <= 0 || h <= 0)
			return;
		var mode = this.runtime.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
		if (isfullscreen && this.runtime.fullscreen_scaling > 0)
			mode = this.runtime.fullscreen_scaling;
		if (mode === 0)
		{
			this.runtime["setSize"](w, h, true);
		}
		else
		{
			this.runtime.original_width = w;
			this.runtime.original_height = h;
			this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
		}
	};
	SysActs.prototype.SetLayoutEffectEnabled = function (enable_, effectname_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		this.runtime.running_layout.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectEnabled = function (layer, enable_, effectname_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		layer.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayoutEffectParam = function (effectname_, index_, value_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = this.runtime.running_layout.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectParam = function (layer, effectname_, index_, value_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = layer.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SaveState = function (slot_)
	{
		this.runtime.saveToSlot = slot_;
	};
	SysActs.prototype.LoadState = function (slot_)
	{
		this.runtime.loadFromSlot = slot_;
	};
	SysActs.prototype.LoadStateJSON = function (jsonstr_)
	{
		this.runtime.loadFromJson = jsonstr_;
	};
	SysActs.prototype.SetHalfFramerateMode = function (set_)
	{
		this.runtime.halfFramerateMode = (set_ !== 0);
	};
	SysActs.prototype.SetFullscreenQuality = function (q)
	{
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.runtime.fullscreen_mode === 0)
			return;
		this.runtime.wantFullscreenScalingQuality = (q !== 0);
		this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
	};
	sysProto.acts = new SysActs();
    function SysExps() {};
    SysExps.prototype["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    SysExps.prototype["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    SysExps.prototype.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    SysExps.prototype.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    SysExps.prototype.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    SysExps.prototype.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    SysExps.prototype.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    SysExps.prototype.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    SysExps.prototype.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    SysExps.prototype.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    SysExps.prototype.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    SysExps.prototype.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    SysExps.prototype.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    SysExps.prototype.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    SysExps.prototype.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    SysExps.prototype.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    SysExps.prototype.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    SysExps.prototype.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    SysExps.prototype.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    SysExps.prototype.max = function(ret)
    {
		var max_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (max_ < arguments[i])
				max_ = arguments[i];
		}
		ret.set_float(max_);
    };
    SysExps.prototype.min = function(ret)
    {
        var min_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (min_ > arguments[i])
				min_ = arguments[i];
		}
		ret.set_float(min_);
    };
    SysExps.prototype.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    SysExps.prototype.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    SysExps.prototype.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    SysExps.prototype.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    SysExps.prototype.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    SysExps.prototype.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    SysExps.prototype.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    SysExps.prototype.loopindex = function(ret, name_)
    {
		var loop, i, len;
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++)
            {
                loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
			loop = this.runtime.getCurrentLoop();
			ret.set_int(loop ? loop.index : -1);
        }
    };
    SysExps.prototype.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    SysExps.prototype.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    SysExps.prototype.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    SysExps.prototype.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    SysExps.prototype.newline = function(ret)
    {
        ret.set_string("\n");
    };
    SysExps.prototype.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
	SysExps.prototype.qarp = function(ret, a, b, c, x)
    {
        ret.set_float(cr.qarp(a, b, c, x));
    };
	SysExps.prototype.cubic = function(ret, a, b, c, d, x)
    {
        ret.set_float(cr.cubic(a, b, c, d, x));
    };
	SysExps.prototype.cosp = function(ret, a, b, x)
    {
        ret.set_float(cr.cosp(a, b, x));
    };
    SysExps.prototype.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    SysExps.prototype.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	SysExps.prototype.uppercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toUpperCase() : "");
	};
	SysExps.prototype.lowercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toLowerCase() : "");
	};
	SysExps.prototype.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	SysExps.prototype.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	SysExps.prototype.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	SysExps.prototype.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	SysExps.prototype.layerparallaxx = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxX * 100);
	};
	SysExps.prototype.layerparallaxy = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxY * 100);
	};
	SysExps.prototype.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	SysExps.prototype.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	SysExps.prototype.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	SysExps.prototype.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	SysExps.prototype.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	SysExps.prototype.find = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.left = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(0, n) : "");
	};
	SysExps.prototype.right = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(text.length - n) : "");
	};
	SysExps.prototype.mid = function (ret, text, index_, length_)
	{
		ret.set_string(cr.is_string(text) ? text.substr(index_, length_) : "");
	};
	SysExps.prototype.tokenat = function (ret, text, index_, sep)
	{
		if (cr.is_string(text) && cr.is_string(sep))
		{
			var arr = text.split(sep);
			var i = cr.floor(index_);
			if (i < 0 || i >= arr.length)
				ret.set_string("");
			else
				ret.set_string(arr[i]);
		}
		else
			ret.set_string("");
	};
	SysExps.prototype.tokencount = function (ret, text, sep)
	{
		if (cr.is_string(text) && text.length)
			ret.set_int(text.split(sep).length);
		else
			ret.set_int(0);
	};
	SysExps.prototype.replace = function (ret, text, find_, replace_)
	{
		if (cr.is_string(text) && cr.is_string(find_) && cr.is_string(replace_))
			ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
		else
			ret.set_string(cr.is_string(text) ? text : "");
	};
	SysExps.prototype.trim = function (ret, text)
	{
		ret.set_string(cr.is_string(text) ? text.trim() : "");
	};
	SysExps.prototype.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	SysExps.prototype.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	SysExps.prototype.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	SysExps.prototype.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	SysExps.prototype.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	SysExps.prototype.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	SysExps.prototype.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	SysExps.prototype.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	SysExps.prototype.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	SysExps.prototype.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	SysExps.prototype.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	SysExps.prototype.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	SysExps.prototype.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	SysExps.prototype.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	SysExps.prototype.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	SysExps.prototype.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	SysExps.prototype.unlerp = function(ret, a, b, y)
    {
        ret.set_float(cr.unlerp(a, b, y));
    };
	SysExps.prototype.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	SysExps.prototype.urlencode = function (ret, s)
	{
		ret.set_string(encodeURIComponent(s));
	};
	SysExps.prototype.urldecode = function (ret, s)
	{
		ret.set_string(decodeURIComponent(s));
	};
	SysExps.prototype.canvastolayerx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, true) : 0);
	};
	SysExps.prototype.canvastolayery = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, false) : 0);
	};
	SysExps.prototype.layertocanvasx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, true) : 0);
	};
	SysExps.prototype.layertocanvasy = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, false) : 0);
	};
	SysExps.prototype.savestatejson = function (ret)
	{
		ret.set_string(this.runtime.lastSaveJson);
	};
	SysExps.prototype.imagememoryusage = function (ret)
	{
		if (this.runtime.glwrap)
			ret.set_float(Math.round(100 * this.runtime.glwrap.estimateVRAM() / (1024 * 1024)) / 100);
		else
			ret.set_float(0);
	};
	SysExps.prototype.regexsearch = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_int(str_ ? str_.search(regex) : -1);
	};
	SysExps.prototype.regexreplace = function (ret, str_, regex_, flags_, replace_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_string(str_ ? str_.replace(regex, replace_) : "");
	};
	var regexMatches = [];
	var lastMatchesStr = "";
	var lastMatchesRegex = "";
	var lastMatchesFlags = "";
	function updateRegexMatches(str_, regex_, flags_)
	{
		if (str_ === lastMatchesStr && regex_ === lastMatchesRegex && flags_ === lastMatchesFlags)
			return;
		var regex = getRegex(regex_, flags_);
		regexMatches = str_.match(regex);
		lastMatchesStr = str_;
		lastMatchesRegex = regex_;
		lastMatchesFlags = flags_;
	};
	SysExps.prototype.regexmatchcount = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		ret.set_int(regexMatches ? regexMatches.length : 0);
	};
	SysExps.prototype.regexmatchat = function (ret, str_, regex_, flags_, index_)
	{
		index_ = Math.floor(index_);
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		if (!regexMatches || index_ < 0 || index_ >= regexMatches.length)
			ret.set_string("");
		else
			ret.set_string(regexMatches[index_]);
	};
	SysExps.prototype.infinity = function (ret)
	{
		ret.set_float(Infinity);
	};
	SysExps.prototype.setbit = function (ret, n, b, v)
	{
		n = n | 0;
		b = b | 0;
		v = (v !== 0 ? 1 : 0);
		ret.set_int((n & ~(1 << b)) | (v << b));
	};
	SysExps.prototype.togglebit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int(n ^ (1 << b));
	};
	SysExps.prototype.getbit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int((n & (1 << b)) ? 1 : 0);
	};
	sysProto.exps = new SysExps();
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time > this.runtime.kahanTime.sum)
				continue;
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					ss = w.sols[k];
					s.select_all = ss.sa;
					cr.shallowAssignArray(s.instances, ss.insts);
					freeSolStateObject(ss);
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (w.deleteme)
				freeWaitObject(w);
			else
				j++;
		}
		this.waits.length = j;
	};
}());
;
(function () {
	cr.add_common_aces = function (m)
	{
		var pluginProto = m[0].prototype;
		var singleglobal_ = m[1];
		var position_aces = m[3];
		var size_aces = m[4];
		var angle_aces = m[5];
		var appearance_aces = m[6];
		var zorder_aces = m[7];
		var effects_aces = m[8];
		if (!pluginProto.cnds)
			pluginProto.cnds = {};
		if (!pluginProto.acts)
			pluginProto.acts = {};
		if (!pluginProto.exps)
			pluginProto.exps = {};
		var cnds = pluginProto.cnds;
		var acts = pluginProto.acts;
		var exps = pluginProto.exps;
		if (position_aces)
		{
			cnds.CompareX = function (cmp, x)
			{
				return cr.do_cmp(this.x, cmp, x);
			};
			cnds.CompareY = function (cmp, y)
			{
				return cr.do_cmp(this.y, cmp, y);
			};
			cnds.IsOnScreen = function ()
			{
				var layer = this.layer;
				this.update_bbox();
				var bbox = this.bbox;
				return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
			};
			cnds.IsOutsideLayout = function ()
			{
				this.update_bbox();
				var bbox = this.bbox;
				var layout = this.runtime.running_layout;
				return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
			};
			cnds.PickDistance = function (which, x, y)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var dist = cr.distanceTo(inst.x, inst.y, x, y);
				var i, len, d;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					d = cr.distanceTo(inst.x, inst.y, x, y);
					if ((which === 0 && d < dist) || (which === 1 && d > dist))
					{
						dist = d;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.SetX = function (x)
			{
				if (this.x !== x)
				{
					this.x = x;
					this.set_bbox_changed();
				}
			};
			acts.SetY = function (y)
			{
				if (this.y !== y)
				{
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPos = function (x, y)
			{
				if (this.x !== x || this.y !== y)
				{
					this.x = x;
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPosToObject = function (obj, imgpt)
			{
				var inst = obj.getPairedInstance(this);
				if (!inst)
					return;
				var newx, newy;
				if (inst.getImagePoint)
				{
					newx = inst.getImagePoint(imgpt, true);
					newy = inst.getImagePoint(imgpt, false);
				}
				else
				{
					newx = inst.x;
					newy = inst.y;
				}
				if (this.x !== newx || this.y !== newy)
				{
					this.x = newx;
					this.y = newy;
					this.set_bbox_changed();
				}
			};
			acts.MoveForward = function (dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(this.angle) * dist;
					this.y += Math.sin(this.angle) * dist;
					this.set_bbox_changed();
				}
			};
			acts.MoveAtAngle = function (a, dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(cr.to_radians(a)) * dist;
					this.y += Math.sin(cr.to_radians(a)) * dist;
					this.set_bbox_changed();
				}
			};
			exps.X = function (ret)
			{
				ret.set_float(this.x);
			};
			exps.Y = function (ret)
			{
				ret.set_float(this.y);
			};
			exps.dt = function (ret)
			{
				ret.set_float(this.runtime.getDt(this));
			};
		}
		if (size_aces)
		{
			cnds.CompareWidth = function (cmp, w)
			{
				return cr.do_cmp(this.width, cmp, w);
			};
			cnds.CompareHeight = function (cmp, h)
			{
				return cr.do_cmp(this.height, cmp, h);
			};
			acts.SetWidth = function (w)
			{
				if (this.width !== w)
				{
					this.width = w;
					this.set_bbox_changed();
				}
			};
			acts.SetHeight = function (h)
			{
				if (this.height !== h)
				{
					this.height = h;
					this.set_bbox_changed();
				}
			};
			acts.SetSize = function (w, h)
			{
				if (this.width !== w || this.height !== h)
				{
					this.width = w;
					this.height = h;
					this.set_bbox_changed();
				}
			};
			exps.Width = function (ret)
			{
				ret.set_float(this.width);
			};
			exps.Height = function (ret)
			{
				ret.set_float(this.height);
			};
			exps.BBoxLeft = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.left);
			};
			exps.BBoxTop = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.top);
			};
			exps.BBoxRight = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.right);
			};
			exps.BBoxBottom = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.bottom);
			};
		}
		if (angle_aces)
		{
			cnds.AngleWithin = function (within, a)
			{
				return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
			};
			cnds.IsClockwiseFrom = function (a)
			{
				return cr.angleClockwise(this.angle, cr.to_radians(a));
			};
			cnds.IsBetweenAngles = function (a, b)
			{
				var lower = cr.to_clamped_radians(a);
				var upper = cr.to_clamped_radians(b);
				var angle = cr.clamp_angle(this.angle);
				var obtuse = (!cr.angleClockwise(upper, lower));
				if (obtuse)
					return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
				else
					return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
			};
			acts.SetAngle = function (a)
			{
				var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateClockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle += cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateCounterclockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle -= cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardAngle = function (amt, target)
			{
				var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardPosition = function (amt, x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var target = Math.atan2(dy, dx);
				var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.SetTowardPosition = function (x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var newangle = Math.atan2(dy, dx);
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			exps.Angle = function (ret)
			{
				ret.set_float(cr.to_clamped_degrees(this.angle));
			};
		}
		if (!singleglobal_)
		{
			cnds.CompareInstanceVar = function (iv, cmp, val)
			{
				return cr.do_cmp(this.instance_vars[iv], cmp, val);
			};
			cnds.IsBoolInstanceVarSet = function (iv)
			{
				return this.instance_vars[iv];
			};
			cnds.PickInstVarHiLow = function (which, iv)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var val = inst.instance_vars[iv];
				var i, len, v;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					v = inst.instance_vars[iv];
					if ((which === 0 && v < val) || (which === 1 && v > val))
					{
						val = v;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			cnds.PickByUID = function (u)
			{
				var i, len, j, inst, families, instances, sol;
				var cnd = this.runtime.getCurrentCondition();
				if (cnd.inverted)
				{
					sol = this.getCurrentSol();
					if (sol.select_all)
					{
						sol.select_all = false;
						sol.instances.length = 0;
						sol.else_instances.length = 0;
						instances = this.instances;
						for (i = 0, len = instances.length; i < len; i++)
						{
							inst = instances[i];
							if (inst.uid === u)
								sol.else_instances.push(inst);
							else
								sol.instances.push(inst);
						}
						this.applySolToContainer();
						return !!sol.instances.length;
					}
					else
					{
						for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
						{
							inst = sol.instances[i];
							sol.instances[j] = inst;
							if (inst.uid === u)
							{
								sol.else_instances.push(inst);
							}
							else
								j++;
						}
						sol.instances.length = j;
						this.applySolToContainer();
						return !!sol.instances.length;
					}
				}
				else
				{
					inst = this.runtime.getObjectByUID(u);
					if (!inst)
						return false;
					sol = this.getCurrentSol();
					if (!sol.select_all && sol.instances.indexOf(inst) === -1)
						return false;		// not picked
					if (this.is_family)
					{
						families = inst.type.families;
						for (i = 0, len = families.length; i < len; i++)
						{
							if (families[i] === this)
							{
								sol.pick_one(inst);
								this.applySolToContainer();
								return true;
							}
						}
					}
					else if (inst.type === this)
					{
						sol.pick_one(inst);
						this.applySolToContainer();
						return true;
					}
					return false;
				}
			};
			cnds.OnCreated = function ()
			{
				return true;
			};
			cnds.OnDestroyed = function ()
			{
				return true;
			};
			acts.SetInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = val.toString();
				}
				else
;
			};
			acts.AddInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += val.toString();
				}
				else
;
			};
			acts.SubInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] -= val;
					else
						myinstvars[iv] -= parseFloat(val);
				}
				else
;
			};
			acts.SetBoolInstanceVar = function (iv, val)
			{
				this.instance_vars[iv] = val ? 1 : 0;
			};
			acts.ToggleBoolInstanceVar = function (iv)
			{
				this.instance_vars[iv] = 1 - this.instance_vars[iv];
			};
			acts.Destroy = function ()
			{
				this.runtime.DestroyInstance(this);
			};
			if (!acts.LoadFromJsonString)
			{
				acts.LoadFromJsonString = function (str_)
				{
					var o, i, len, binst;
					try {
						o = JSON.parse(str_);
					}
					catch (e) {
						return;
					}
					this.runtime.loadInstanceFromJSON(this, o, true);
					if (this.afterLoad)
						this.afterLoad();
					if (this.behavior_insts)
					{
						for (i = 0, len = this.behavior_insts.length; i < len; ++i)
						{
							binst = this.behavior_insts[i];
							if (binst.afterLoad)
								binst.afterLoad();
						}
					}
				};
			}
			exps.Count = function (ret)
			{
				var count = ret.object_class.instances.length;
				var i, len, inst;
				for (i = 0, len = this.runtime.createRow.length; i < len; i++)
				{
					inst = this.runtime.createRow[i];
					if (ret.object_class.is_family)
					{
						if (inst.type.families.indexOf(ret.object_class) >= 0)
							count++;
					}
					else
					{
						if (inst.type === ret.object_class)
							count++;
					}
				}
				ret.set_int(count);
			};
			exps.PickedCount = function (ret)
			{
				ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
			};
			exps.UID = function (ret)
			{
				ret.set_int(this.uid);
			};
			exps.IID = function (ret)
			{
				ret.set_int(this.get_iid());
			};
			if (!exps.AsJSON)
			{
				exps.AsJSON = function (ret)
				{
					ret.set_string(JSON.stringify(this.runtime.saveInstanceToJSON(this, true)));
				};
			}
		}
		if (appearance_aces)
		{
			cnds.IsVisible = function ()
			{
				return this.visible;
			};
			acts.SetVisible = function (v)
			{
				if (!v !== !this.visible)
				{
					this.visible = v;
					this.runtime.redraw = true;
				}
			};
			cnds.CompareOpacity = function (cmp, x)
			{
				return cr.do_cmp(cr.round6dp(this.opacity * 100), cmp, x);
			};
			acts.SetOpacity = function (x)
			{
				var new_opacity = x / 100.0;
				if (new_opacity < 0)
					new_opacity = 0;
				else if (new_opacity > 1)
					new_opacity = 1;
				if (new_opacity !== this.opacity)
				{
					this.opacity = new_opacity;
					this.runtime.redraw = true;
				}
			};
			exps.Opacity = function (ret)
			{
				ret.set_float(cr.round6dp(this.opacity * 100.0));
			};
		}
		if (zorder_aces)
		{
			cnds.IsOnLayer = function (layer_)
			{
				if (!layer_)
					return false;
				return this.layer === layer_;
			};
			cnds.PickTopBottom = function (which_)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var i, len;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					if (which_ === 0)
					{
						if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
					else
					{
						if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.MoveToTop = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === this.layer.instances.length - 1)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.push(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToBottom = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === 0)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.unshift(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToLayer = function (layerMove)
			{
				if (!layerMove || layerMove == this.layer)
					return;
				cr.arrayRemove(this.layer.instances, this.get_zindex());
				this.layer.zindices_stale = true;
				this.layer = layerMove;
				this.zindex = layerMove.instances.length;
				layerMove.instances.push(this);
				this.runtime.redraw = true;
			};
			acts.ZMoveToObject = function (where_, obj_)
			{
				var isafter = (where_ === 0);
				if (!obj_)
					return;
				var other = obj_.getFirstPicked(this);
				if (!other || other.uid === this.uid)
					return;
				if (this.layer.index !== other.layer.index)
				{
					cr.arrayRemove(this.layer.instances, this.get_zindex());
					this.layer.zindices_stale = true;
					this.layer = other.layer;
					this.zindex = other.layer.instances.length;
					other.layer.instances.push(this);
				}
				var myZ = this.get_zindex();
				var insertZ = other.get_zindex();
				cr.arrayRemove(this.layer.instances, myZ);
				if (myZ < insertZ)
					insertZ--;
				if (isafter)
					insertZ++;
				if (insertZ === this.layer.instances.length)
					this.layer.instances.push(this);
				else
					this.layer.instances.splice(insertZ, 0, this);
				this.layer.zindices_stale = true;
				this.runtime.redraw = true;
			};
			exps.LayerNumber = function (ret)
			{
				ret.set_int(this.layer.number);
			};
			exps.LayerName = function (ret)
			{
				ret.set_string(this.layer.name);
			};
			exps.ZIndex = function (ret)
			{
				ret.set_int(this.get_zindex());
			};
		}
		if (effects_aces)
		{
			acts.SetEffectEnabled = function (enable_, effectname_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var enable = (enable_ === 1);
				if (this.active_effect_flags[i] === enable)
					return;		// no change
				this.active_effect_flags[i] = enable;
				this.updateActiveEffects();
				this.runtime.redraw = true;
			};
			acts.SetEffectParam = function (effectname_, index_, value_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var et = this.type.effect_types[i];
				var params = this.effect_params[i];
				index_ = Math.floor(index_);
				if (index_ < 0 || index_ >= params.length)
					return;		// effect index out of bounds
				if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
					value_ /= 100.0;
				if (params[index_] === value_)
					return;		// no change
				params[index_] = value_;
				if (et.active)
					this.runtime.redraw = true;
			};
		}
	};
	cr.set_bbox_changed = function ()
	{
		this.bbox_changed = true;      		// will recreate next time box requested
		this.cell_changed = true;
		this.type.any_cell_changed = true;	// avoid unnecessary updateAllBBox() calls
		this.runtime.redraw = true;     	// assume runtime needs to redraw
		var i, len, callbacks = this.bbox_changed_callbacks;
		for (i = 0, len = callbacks.length; i < len; ++i)
		{
			callbacks[i](this);
		}
	};
	cr.add_bbox_changed_callback = function (f)
	{
		if (f)
		{
			this.bbox_changed_callbacks.push(f);
		}
	};
	cr.update_bbox = function ()
	{
		if (!this.bbox_changed)
			return;                 // bounding box not changed
		var bbox = this.bbox;
		var bquad = this.bquad;
		bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
		bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
		if (!this.angle)
		{
			bquad.set_from_rect(bbox);    // make bounding quad from box
		}
		else
		{
			bbox.offset(-this.x, -this.y);       			// translate to origin
			bquad.set_from_rotated_rect(bbox, this.angle);	// rotate around origin
			bquad.offset(this.x, this.y);      				// translate back to original position
			bquad.bounding_box(bbox);
		}
		bbox.normalize();
		this.bbox_changed = false;  // bounding box up to date
	};
	var tmprc = new cr.rect(0, 0, 0, 0);
	cr.update_collision_cell = function ()
	{
		if (!this.cell_changed || !this.collisionsEnabled)
			return;
		this.update_bbox();
		var mygrid = this.type.collision_grid;
		var collcells = this.collcells;
		var bbox = this.bbox;
		tmprc.set(mygrid.XToCell(bbox.left), mygrid.YToCell(bbox.top), mygrid.XToCell(bbox.right), mygrid.YToCell(bbox.bottom));
		if (collcells.equals(tmprc))
			return;
		if (collcells.right < collcells.left)
			mygrid.update(this, null, tmprc);		// first insertion with invalid rect: don't provide old range
		else
			mygrid.update(this, collcells, tmprc);
		collcells.copy(tmprc);
		this.cell_changed = false;
	};
	cr.inst_contains_pt = function (x, y)
	{
		if (!this.bbox.contains_pt(x, y))
			return false;
		if (!this.bquad.contains_pt(x, y))
			return false;
		if (this.collision_poly && !this.collision_poly.is_empty())
		{
			this.collision_poly.cache_poly(this.width, this.height, this.angle);
			return this.collision_poly.contains_pt(x - this.x, y - this.y);
		}
		else
			return true;
	};
	cr.inst_get_iid = function ()
	{
		this.type.updateIIDs();
		return this.iid;
	};
	cr.inst_get_zindex = function ()
	{
		this.layer.updateZIndices();
		return this.zindex;
	};
	cr.inst_updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et, inst;
		for (i = 0, len = this.active_effect_flags.length; i < len; i++)
		{
			if (this.active_effect_flags[i])
				this.active_effect_types.push(this.type.effect_types[i]);
		}
		this.uses_shaders = !!this.active_effect_types.length;
	};
	cr.inst_toString = function ()
	{
		return "Inst" + this.puid;
	};
	cr.type_getFirstPicked = function (frominst)
	{
		if (frominst && frominst.is_contained && frominst.type != this)
		{
			var i, len, s;
			for (i = 0, len = frominst.siblings.length; i < len; i++)
			{
				s = frominst.siblings[i];
				if (s.type == this)
					return s;
			}
		}
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[0];
		else
			return null;
	};
	cr.type_getPairedInstance = function (inst)
	{
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[inst.get_iid() % instances.length];
		else
			return null;
	};
	cr.type_updateIIDs = function ()
	{
		if (!this.stale_iids || this.is_family)
			return;		// up to date or is family - don't want family to overwrite IIDs
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].iid = i;
		var next_iid = i;
		var createRow = this.runtime.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === this)
				createRow[i].iid = next_iid++;
		}
		this.stale_iids = false;
	};
	cr.type_getInstanceByIID = function (i)
	{
		if (i < this.instances.length)
			return this.instances[i];
		i -= this.instances.length;
		var createRow = this.runtime.createRow;
		var j, lenj;
		for (j = 0, lenj = createRow.length; j < lenj; ++j)
		{
			if (createRow[j].type === this)
			{
				if (i === 0)
					return createRow[j];
				--i;
			}
		}
;
		return null;
	};
	cr.type_getCurrentSol = function ()
	{
		return this.solstack[this.cur_sol];
	};
	cr.type_pushCleanSol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		else
			this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
	};
	cr.type_pushCopySol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		var clonesol = this.solstack[this.cur_sol];
		var prevsol = this.solstack[this.cur_sol - 1];
		if (prevsol.select_all)
			clonesol.select_all = true;
		else
		{
			clonesol.select_all = false;
			cr.shallowAssignArray(clonesol.instances, prevsol.instances);
			cr.shallowAssignArray(clonesol.else_instances, prevsol.else_instances);
		}
	};
	cr.type_popSol = function ()
	{
;
		this.cur_sol--;
	};
	cr.type_getBehaviorByName = function (behname)
	{
		var i, len, j, lenj, f, index = 0;
		if (!this.is_family)
		{
			for (i = 0, len = this.families.length; i < len; i++)
			{
				f = this.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (behname === f.behaviors[j].name)
					{
						this.extra.lastBehIndex = index;
						return f.behaviors[j];
					}
					index++;
				}
			}
		}
		for (i = 0, len = this.behaviors.length; i < len; i++) {
			if (behname === this.behaviors[i].name)
			{
				this.extra.lastBehIndex = index;
				return this.behaviors[i];
			}
			index++;
		}
		return null;
	};
	cr.type_getBehaviorIndexByName = function (behname)
	{
		var b = this.getBehaviorByName(behname);
		if (b)
			return this.extra.lastBehIndex;
		else
			return -1;
	};
	cr.type_getEffectIndexByName = function (name_)
	{
		var i, len;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			if (this.effect_types[i].name === name_)
				return i;
		}
		return -1;
	};
	cr.type_applySolToContainer = function ()
	{
		if (!this.is_contained || this.is_family)
			return;
		var i, len, j, lenj, t, sol, sol2;
		this.updateIIDs();
		sol = this.getCurrentSol();
		var select_all = sol.select_all;
		var es = this.runtime.getCurrentEventStack();
		var orblock = es && es.current_event && es.current_event.orblock;
		for (i = 0, len = this.container.length; i < len; i++)
		{
			t = this.container[i];
			if (t === this)
				continue;
			t.updateIIDs();
			sol2 = t.getCurrentSol();
			sol2.select_all = select_all;
			if (!select_all)
			{
				sol2.instances.length = sol.instances.length;
				for (j = 0, lenj = sol.instances.length; j < lenj; j++)
					sol2.instances[j] = t.getInstanceByIID(sol.instances[j].iid);
				if (orblock)
				{
					sol2.else_instances.length = sol.else_instances.length;
					for (j = 0, lenj = sol.else_instances.length; j < lenj; j++)
						sol2.else_instances[j] = t.getInstanceByIID(sol.else_instances[j].iid);
				}
			}
		}
	};
	cr.type_toString = function ()
	{
		return "Type" + this.sid;
	};
	cr.do_cmp = function (x, cmp, y)
	{
		if (typeof x === "undefined" || typeof y === "undefined")
			return false;
		switch (cmp)
		{
			case 0:     // equal
				return x === y;
			case 1:     // not equal
				return x !== y;
			case 2:     // less
				return x < y;
			case 3:     // less/equal
				return x <= y;
			case 4:     // greater
				return x > y;
			case 5:     // greater/equal
				return x >= y;
			default:
;
				return false;
		}
	};
})();
cr.shaders = {};
cr.shaders["grayscale"] = {src: ["varying mediump vec2 vTex;",
"uniform lowp sampler2D samplerFront;",
"uniform lowp float intensity;",
"void main(void)",
"{",
"lowp vec4 front = texture2D(samplerFront, vTex);",
"lowp float gray = front.r * 0.299 + front.g * 0.587 + front.b * 0.114;",
"gl_FragColor = mix(front, vec4(gray, gray, gray, front.a), intensity);",
"}"
].join("\n"),
	extendBoxHorizontal: 0,
	extendBoxVertical: 0,
	crossSampling: false,
	animated: false,
	parameters: [["intensity", 0, 1]] }
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for PhoneGap only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_PHONEGAP = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var masterVolume = 1;
	var listenerX = 0;
	var listenerY = 0;
	var panningModel = 1;		// HRTF
	var distanceModel = 1;		// Inverse
	var refDistance = 10;
	var maxDistance = 10000;
	var rolloffFactor = 1;
	var micSource = null;
	var micTag = "";
	var isMusicWorkaround = false;
	var musicPlayNextTouch = [];
	function dbToLinear(x)
	{
		var v = dbToLinear_nocap(x);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	function linearToDb(x)
	{
		if (x < 0)
			x = 0;
		if (x > 1)
			x = 1;
		return linearToDb_nocap(x);
	};
	function dbToLinear_nocap(x)
	{
		return Math.pow(10, x / 20);
	};
	function linearToDb_nocap(x)
	{
		return (Math.log(x) / Math.log(10)) * 20;
	};
	var effects = {};
	function getDestinationForTag(tag)
	{
		tag = tag.toLowerCase();
		if (effects.hasOwnProperty(tag))
		{
			if (effects[tag].length)
				return effects[tag][0].getInputNode();
		}
		return context["destination"];
	};
	function createGain()
	{
		if (context["createGain"])
			return context["createGain"]();
		else
			return context["createGainNode"]();
	};
	function createDelay(d)
	{
		if (context["createDelay"])
			return context["createDelay"](d);
		else
			return context["createDelayNode"](d);
	};
	function startSource(s)
	{
		if (s["start"])
			s["start"](0);
		else
			s["noteOn"](0);
	};
	function startSourceAt(s, x, d)
	{
		if (s["start"])
			s["start"](0, x);
		else
			s["noteGrainOn"](0, x, d - x);
	};
	function stopSource(s)
	{
		try {
			if (s["stop"])
				s["stop"](0);
			else
				s["noteOff"](0);
		}
		catch (e) {}
	};
	function setAudioParam(ap, value, ramp, time)
	{
		if (!ap)
			return;		// iOS is missing some parameters
		ap["cancelScheduledValues"](0);
		if (time === 0)
		{
			ap["value"] = value;
			return;
		}
		var curTime = context["currentTime"];
		time += curTime;
		switch (ramp) {
		case 0:		// step
			ap["setValueAtTime"](value, time);
			break;
		case 1:		// linear
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["linearRampToValueAtTime"](value, time);
			break;
		case 2:		// exponential
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["exponentialRampToValueAtTime"](value, time);
			break;
		}
	};
	var filterTypes = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
	function FilterEffect(type, freq, detune, q, gain, mix)
	{
		this.type = "filter";
		this.params = [type, freq, detune, q, gain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = type;
		else
			this.filterNode["type"] = filterTypes[type];
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.filterNode["gain"]["value"] = gain;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
	};
	FilterEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	FilterEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	FilterEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FilterEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 1:		// filter frequency
			this.params[1] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[2] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[3] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is in dB here)
			this.params[4] = value;
			setAudioParam(this.filterNode["gain"], value, ramp, time);
			break;
		}
	};
	function DelayEffect(delayTime, delayGain, mix)
	{
		this.type = "delay";
		this.params = [delayTime, delayGain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.mainNode = createGain();
		this.delayNode = createDelay(delayTime);
		this.delayNode["delayTime"]["value"] = delayTime;
		this.delayGainNode = createGain();
		this.delayGainNode["gain"]["value"] = delayGain;
		this.inputNode["connect"](this.mainNode);
		this.inputNode["connect"](this.dryNode);
		this.mainNode["connect"](this.wetNode);
		this.mainNode["connect"](this.delayNode);
		this.delayNode["connect"](this.delayGainNode);
		this.delayGainNode["connect"](this.mainNode);
	};
	DelayEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DelayEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.mainNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.delayGainNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DelayEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DelayEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[2] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is passed in dB but needs to be linear here)
			this.params[1] = dbToLinear(value);
			setAudioParam(this.delayGainNode["gain"], dbToLinear(value), ramp, time);
			break;
		case 5:		// delay time
			this.params[0] = value;
			setAudioParam(this.delayNode["delayTime"], value, ramp, time);
			break;
		}
	};
	function ConvolveEffect(buffer, normalize, mix, src)
	{
		this.type = "convolve";
		this.params = [normalize, mix, src];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.convolveNode = context["createConvolver"]();
		if (buffer)
		{
			this.convolveNode["normalize"] = normalize;
			this.convolveNode["buffer"] = buffer;
		}
		this.inputNode["connect"](this.convolveNode);
		this.inputNode["connect"](this.dryNode);
		this.convolveNode["connect"](this.wetNode);
	};
	ConvolveEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	ConvolveEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.convolveNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	ConvolveEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	ConvolveEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function FlangerEffect(delay, modulation, freq, feedback, mix)
	{
		this.type = "flanger";
		this.params = [delay, modulation, freq, feedback, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.feedbackNode = createGain();
		this.feedbackNode["gain"]["value"] = feedback;
		this.delayNode = createDelay(delay + modulation);
		this.delayNode["delayTime"]["value"] = delay;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.delayNode);
		this.inputNode["connect"](this.dryNode);
		this.delayNode["connect"](this.wetNode);
		this.delayNode["connect"](this.feedbackNode);
		this.feedbackNode["connect"](this.delayNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.delayNode["delayTime"]);
		startSource(this.oscNode);
	};
	FlangerEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	FlangerEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.feedbackNode["disconnect"]();
	};
	FlangerEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FlangerEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 6:		// modulation
			this.params[1] = value / 1000;
			setAudioParam(this.oscGainNode["gain"], value / 1000, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[2] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		case 8:		// feedback
			this.params[3] = value / 100;
			setAudioParam(this.feedbackNode["gain"], value / 100, ramp, time);
			break;
		}
	};
	function PhaserEffect(freq, detune, q, modulation, modfreq, mix)
	{
		this.type = "phaser";
		this.params = [freq, detune, q, modulation, modfreq, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = 7;	// all-pass
		else
			this.filterNode["type"] = "allpass";
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = modfreq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.filterNode["frequency"]);
		startSource(this.oscNode);
	};
	PhaserEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	PhaserEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
	};
	PhaserEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	PhaserEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 6:		// modulation
			this.params[3] = value;
			setAudioParam(this.oscGainNode["gain"], value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[4] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function GainEffect(g)
	{
		this.type = "gain";
		this.params = [g];
		this.node = createGain();
		this.node["gain"]["value"] = g;
	};
	GainEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	GainEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	GainEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	GainEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 4:		// gain
			this.params[0] = dbToLinear(value);
			setAudioParam(this.node["gain"], dbToLinear(value), ramp, time);
			break;
		}
	};
	function TremoloEffect(freq, mix)
	{
		this.type = "tremolo";
		this.params = [freq, mix];
		this.node = createGain();
		this.node["gain"]["value"] = 1 - (mix / 2);
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = mix / 2;
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.node["gain"]);
		startSource(this.oscNode);
	};
	TremoloEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	TremoloEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.node["disconnect"]();
	};
	TremoloEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	TremoloEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.node["gain"]["value"], 1 - (value / 2), ramp, time);
			setAudioParam(this.oscGainNode["gain"]["value"], value / 2, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function RingModulatorEffect(freq, mix)
	{
		this.type = "ringmod";
		this.params = [freq, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.ringNode = createGain();
		this.ringNode["gain"]["value"] = 0;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscNode["connect"](this.ringNode["gain"]);
		startSource(this.oscNode);
		this.inputNode["connect"](this.ringNode);
		this.inputNode["connect"](this.dryNode);
		this.ringNode["connect"](this.wetNode);
	};
	RingModulatorEffect.prototype.connectTo = function (node_)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node_);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node_);
	};
	RingModulatorEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.ringNode["disconnect"]();
		this.inputNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	RingModulatorEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	RingModulatorEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function DistortionEffect(threshold, headroom, drive, makeupgain, mix)
	{
		this.type = "distortion";
		this.params = [threshold, headroom, drive, makeupgain, mix];
		this.inputNode = createGain();
		this.preGain = createGain();
		this.postGain = createGain();
		this.setDrive(drive, dbToLinear_nocap(makeupgain));
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.waveShaper = context["createWaveShaper"]();
		this.curve = new Float32Array(65536);
		this.generateColortouchCurve(threshold, headroom);
		this.waveShaper.curve = this.curve;
		this.inputNode["connect"](this.preGain);
		this.inputNode["connect"](this.dryNode);
		this.preGain["connect"](this.waveShaper);
		this.waveShaper["connect"](this.postGain);
		this.postGain["connect"](this.wetNode);
	};
	DistortionEffect.prototype.setDrive = function (drive, makeupgain)
	{
		if (drive < 0.01)
			drive = 0.01;
		this.preGain["gain"]["value"] = drive;
		this.postGain["gain"]["value"] = Math.pow(1 / drive, 0.6) * makeupgain;
	};
	function e4(x, k)
	{
		return 1.0 - Math.exp(-k * x);
	}
	DistortionEffect.prototype.shape = function (x, linearThreshold, linearHeadroom)
	{
		var maximum = 1.05 * linearHeadroom * linearThreshold;
		var kk = (maximum - linearThreshold);
		var sign = x < 0 ? -1 : +1;
		var absx = x < 0 ? -x : x;
		var shapedInput = absx < linearThreshold ? absx : linearThreshold + kk * e4(absx - linearThreshold, 1.0 / kk);
		shapedInput *= sign;
		return shapedInput;
	};
	DistortionEffect.prototype.generateColortouchCurve = function (threshold, headroom)
	{
		var linearThreshold = dbToLinear_nocap(threshold);
		var linearHeadroom = dbToLinear_nocap(headroom);
		var n = 65536;
		var n2 = n / 2;
		var x = 0;
		for (var i = 0; i < n2; ++i) {
			x = i / n2;
			x = this.shape(x, linearThreshold, linearHeadroom);
			this.curve[n2 + i] = x;
			this.curve[n2 - i - 1] = -x;
		}
	};
	DistortionEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DistortionEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.preGain["disconnect"]();
		this.waveShaper["disconnect"]();
		this.postGain["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DistortionEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DistortionEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function CompressorEffect(threshold, knee, ratio, attack, release)
	{
		this.type = "compressor";
		this.params = [threshold, knee, ratio, attack, release];
		this.node = context["createDynamicsCompressor"]();
		try {
			this.node["threshold"]["value"] = threshold;
			this.node["knee"]["value"] = knee;
			this.node["ratio"]["value"] = ratio;
			this.node["attack"]["value"] = attack;
			this.node["release"]["value"] = release;
		}
		catch (e) {}
	};
	CompressorEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	CompressorEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	CompressorEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	CompressorEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function AnalyserEffect(fftSize, smoothing)
	{
		this.type = "analyser";
		this.params = [fftSize, smoothing];
		this.node = context["createAnalyser"]();
		this.node["fftSize"] = fftSize;
		this.node["smoothingTimeConstant"] = smoothing;
		this.freqBins = new Float32Array(this.node["frequencyBinCount"]);
		this.signal = new Uint8Array(fftSize);
		this.peak = 0;
		this.rms = 0;
	};
	AnalyserEffect.prototype.tick = function ()
	{
		this.node["getFloatFrequencyData"](this.freqBins);
		this.node["getByteTimeDomainData"](this.signal);
		var fftSize = this.node["fftSize"];
		var i = 0;
		this.peak = 0;
		var rmsSquaredSum = 0;
		var s = 0;
		for ( ; i < fftSize; i++)
		{
			s = (this.signal[i] - 128) / 128;
			if (s < 0)
				s = -s;
			if (this.peak < s)
				this.peak = s;
			rmsSquaredSum += s * s;
		}
		this.peak = linearToDb(this.peak);
		this.rms = linearToDb(Math.sqrt(rmsSquaredSum / fftSize));
	};
	AnalyserEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	AnalyserEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	AnalyserEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	AnalyserEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	var OT_POS_SAMPLES = 4;
	function ObjectTracker()
	{
		this.obj = null;
		this.loadUid = 0;
		this.speeds = [];
		this.lastX = 0;
		this.lastY = 0;
		this.moveAngle = 0;
	};
	ObjectTracker.prototype.setObject = function (obj_)
	{
		this.obj = obj_;
		if (this.obj)
		{
			this.lastX = this.obj.x;
			this.lastY = this.obj.y;
		}
		this.speeds.length = 0;
	};
	ObjectTracker.prototype.hasObject = function ()
	{
		return !!this.obj;
	};
	ObjectTracker.prototype.tick = function (dt)
	{
		if (!this.obj || dt === 0)
			return;
		this.moveAngle = cr.angleTo(this.lastX, this.lastY, this.obj.x, this.obj.y);
		var s = cr.distanceTo(this.lastX, this.lastY, this.obj.x, this.obj.y) / dt;
		if (this.speeds.length < OT_POS_SAMPLES)
			this.speeds.push(s);
		else
		{
			this.speeds.shift();
			this.speeds.push(s);
		}
		this.lastX = this.obj.x;
		this.lastY = this.obj.y;
	};
	ObjectTracker.prototype.getSpeed = function ()
	{
		if (!this.speeds.length)
			return 0;
		var i, len, sum = 0;
		for (i = 0, len = this.speeds.length; i < len; i++)
		{
			sum += this.speeds[i];
		}
		return sum / this.speeds.length;
	};
	ObjectTracker.prototype.getVelocityX = function ()
	{
		return Math.cos(this.moveAngle) * this.getSpeed();
	};
	ObjectTracker.prototype.getVelocityY = function ()
	{
		return Math.sin(this.moveAngle) * this.getSpeed();
	};
	var iOShadtouch = false;	// has had touch input on iOS to work around web audio API muting
	function C2AudioBuffer(src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		var self = this;
		this.outNode = null;
		this.mediaSourceNode = null;
		this.panWhenReady = [];		// for web audio API positioned sounds
		this.seekWhenReady = 0;
		this.pauseWhenReady = false;
		this.supportWebAudioAPI = false;
		if (api === API_WEBAUDIO && is_music)
		{
			this.myapi = API_HTML5;
			this.outNode = createGain();
		}
		this.bufferObject = null;			// actual audio object
		this.audioData = null;				// web audio api: ajax request result (compressed audio that needs decoding)
		var request;
		switch (this.myapi) {
		case API_HTML5:
			this.bufferObject = new Audio();
			if (api === API_WEBAUDIO && context["createMediaElementSource"] && !audRuntime.isFirefox && !/wiiu/i.test(navigator.userAgent))
			{
				this.supportWebAudioAPI = true;		// can be routed through web audio api
				this.bufferObject.addEventListener("canplay", function ()
				{
					if (!self.mediaSourceNode)		// protect against this event firing twice
					{
						self.mediaSourceNode = context["createMediaElementSource"](self.bufferObject);
						self.mediaSourceNode["connect"](self.outNode);
					}
				});
			}
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			request = new XMLHttpRequest();
			request.open("GET", src_, true);
			request.responseType = "arraybuffer";
			request.onload = function () {
				self.audioData = request.response;
				self.decodeAudioBuffer();
			};
			request.send();
			break;
		case API_PHONEGAP:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.decodeAudioBuffer = function ()
	{
		if (this.bufferObject || !this.audioData)
			return;		// audio already decoded or AJAX request not yet complete
		var self = this;
		if (context["decodeAudioData"])
		{
			context["decodeAudioData"](this.audioData, function (buffer) {
					self.bufferObject = buffer;
					var p, i, len, a;
					if (!cr.is_undefined(self.playTagWhenReady) && !silent)
					{
						if (self.panWhenReady.length)
						{
							for (i = 0, len = self.panWhenReady.length; i < len; i++)
							{
								p = self.panWhenReady[i];
								a = new C2AudioInstance(self, p.thistag);
								a.setPannerEnabled(true);
								if (typeof p.objUid !== "undefined")
								{
									p.obj = audRuntime.getObjectByUID(p.objUid);
									if (!p.obj)
										continue;
								}
								if (p.obj)
								{
									var px = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, true);
									var py = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, false);
									a.setPan(px, py, cr.to_degrees(p.obj.angle - p.obj.layer.getAngle()), p.ia, p.oa, p.og);
									a.setObject(p.obj);
								}
								else
								{
									a.setPan(p.x, p.y, p.a, p.ia, p.oa, p.og);
								}
								a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
								if (self.pauseWhenReady)
									a.pause();
								audioInstances.push(a);
							}
							self.panWhenReady.length = 0;
						}
						else
						{
							a = new C2AudioInstance(self, self.playTagWhenReady);
							a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
							if (self.pauseWhenReady)
								a.pause();
							audioInstances.push(a);
						}
					}
					else if (!cr.is_undefined(self.convolveWhenReady))
					{
						var convolveNode = self.convolveWhenReady.convolveNode;
						convolveNode["normalize"] = self.normalizeWhenReady;
						convolveNode["buffer"] = buffer;
					}
			});
		}
		else
		{
			this.bufferObject = context["createBuffer"](this.audioData, false);
			if (!cr.is_undefined(this.playTagWhenReady) && !silent)
			{
				var a = new C2AudioInstance(this, this.playTagWhenReady);
				a.play(this.loopWhenReady, this.volumeWhenReady, this.seekWhenReady);
				if (this.pauseWhenReady)
					a.pause();
				audioInstances.push(a);
			}
			else if (!cr.is_undefined(this.convolveWhenReady))
			{
				var convolveNode = this.convolveWhenReady.convolveNode;
				convolveNode["normalize"] = this.normalizeWhenReady;
				convolveNode["buffer"] = this.bufferObject;
			}
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.bufferObject["readyState"] >= 4;	// HAVE_ENOUGH_DATA
		case API_WEBAUDIO:
			return !!this.audioData;			// null until AJAX request completes
		case API_PHONEGAP:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	function C2AudioInstance(buffer_, tag_)
	{
		var self = this;
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = api;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.pgended = true;			// for PhoneGap only: ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.is_paused = false;
		this.resume_position = 0;		// for web audio api to resume from correct playback position
		this.looping = false;
		this.is_muted = false;
		this.is_silent = false;
		this.volume = 1;
		this.mutevol = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.gainNode = null;
		this.pannerNode = null;
		this.pannerEnabled = false;
		this.objectTracker = null;
		this.panX = 0;
		this.panY = 0;
		this.panAngle = 0;
		this.panConeInner = 0;
		this.panConeOuter = 0;
		this.panConeOuterGain = 0;
		this.instanceObject = null;
		var add_end_listener = false;
		if (this.myapi === API_WEBAUDIO && this.buffer.myapi === API_HTML5 && !this.buffer.supportWebAudioAPI)
			this.myapi = API_HTML5;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				});
			}
			break;
		case API_WEBAUDIO:
			this.gainNode = createGain();
			this.gainNode["connect"](getDestinationForTag(tag_));
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (buffer_.bufferObject)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = buffer_.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
			}
			else
			{
				this.instanceObject = this.buffer.bufferObject;		// reference the audio element
				this.buffer.outNode["connect"](this.gainNode);
			}
			break;
		case API_PHONEGAP:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.pgended = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
			});
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh && !this.stopped && this.instanceObject["loop"])
					return false;
				if (this.is_paused)
					return false;
				return (audRuntime.kahanTime.sum - this.startTime) > this.buffer.bufferObject["duration"];
			}
			else
				return this.instanceObject.ended;
		case API_PHONEGAP:
			return this.pgended;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.setPannerEnabled = function (enable_)
	{
		if (api !== API_WEBAUDIO)
			return;
		if (!this.pannerEnabled && enable_)
		{
			if (!this.gainNode)
				return;
			if (!this.pannerNode)
			{
				this.pannerNode = context["createPanner"]();
				if (typeof this.pannerNode["panningModel"] === "number")
					this.pannerNode["panningModel"] = panningModel;
				else
					this.pannerNode["panningModel"] = ["equalpower", "HRTF", "soundfield"][panningModel];
				if (typeof this.pannerNode["distanceModel"] === "number")
					this.pannerNode["distanceModel"] = distanceModel;
				else
					this.pannerNode["distanceModel"] = ["linear", "inverse", "exponential"][distanceModel];
				this.pannerNode["refDistance"] = refDistance;
				this.pannerNode["maxDistance"] = maxDistance;
				this.pannerNode["rolloffFactor"] = rolloffFactor;
			}
			this.gainNode["disconnect"]();
			this.gainNode["connect"](this.pannerNode);
			this.pannerNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = true;
		}
		else if (this.pannerEnabled && !enable_)
		{
			if (!this.gainNode)
				return;
			this.pannerNode["disconnect"]();
			this.gainNode["disconnect"]();
			this.gainNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = false;
		}
	};
	C2AudioInstance.prototype.setPan = function (x, y, angle, innerangle, outerangle, outergain)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		this.pannerNode["setPosition"](x, y, 0);
		this.pannerNode["setOrientation"](Math.cos(cr.to_radians(angle)), Math.sin(cr.to_radians(angle)), 0);
		this.pannerNode["coneInnerAngle"] = innerangle;
		this.pannerNode["coneOuterAngle"] = outerangle;
		this.pannerNode["coneOuterGain"] = outergain;
		this.panX = x;
		this.panY = y;
		this.panAngle = angle;
		this.panConeInner = innerangle;
		this.panConeOuter = outerangle;
		this.panConeOuterGain = outergain;
	};
	C2AudioInstance.prototype.setObject = function (o)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		if (!this.objectTracker)
			this.objectTracker = new ObjectTracker();
		this.objectTracker.setObject(o);
	};
	C2AudioInstance.prototype.tick = function (dt)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO || !this.objectTracker || !this.objectTracker.hasObject() || !this.isPlaying())
		{
			return;
		}
		this.objectTracker.tick(dt);
		var inst = this.objectTracker.obj;
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		this.pannerNode["setPosition"](px, py, 0);
		var a = 0;
		if (typeof this.objectTracker.obj.angle !== "undefined")
		{
			a = inst.angle - inst.layer.getAngle();
			this.pannerNode["setOrientation"](Math.cos(a), Math.sin(a), 0);
		}
		px = cr.rotatePtAround(this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), -inst.layer.getAngle(), 0, 0, true);
		py = cr.rotatePtAround(this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), -inst.layer.getAngle(), 0, 0, false);
		this.pannerNode["setVelocity"](px, py, 0);
	};
	C2AudioInstance.prototype.play = function (looping, vol, fromPosition)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		this.volume = vol;
		var seekPos = fromPosition || 0;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== vol * masterVolume)
				instobj.volume = vol * masterVolume;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (instobj.currentTime !== seekPos)
			{
				try {
					instobj.currentTime = seekPos;
				}
				catch (err)
				{
;
				}
			}
			if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
				musicPlayNextTouch.push(this);
			else
			{
				try {
					this.instanceObject.play();
				}
				catch (e) {}	// sometimes throws on WP8.1... try not to kill the app
			}
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.mutevol = 1;
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
				this.instanceObject.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (seekPos === 0)
					startSource(this.instanceObject);
				else
					startSourceAt(this.instanceObject, seekPos, this.getDuration());
			}
			else
			{
				if (instobj.playbackRate !== 1.0)
					instobj.playbackRate = 1.0;
				if (instobj.loop !== looping)
					instobj.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (instobj.currentTime !== seekPos)
				{
					try {
						instobj.currentTime = seekPos;
					}
					catch (err)
					{
;
					}
				}
				if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
					musicPlayNextTouch.push(this);
				else
					instobj.play();
			}
			break;
		case API_PHONEGAP:
			if ((!this.fresh && this.stopped) || seekPos !== 0)
				instobj["seekTo"](seekPos);
			instobj["play"]();
			this.pgended = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src, looping);
			else
				AppMobi["player"]["playSound"](this.src, looping);
			break;
		}
		this.playbackRate = 1;
		this.startTime = audRuntime.kahanTime.sum - seekPos;
		this.fresh = false;
		this.stopped = false;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
				stopSource(this.instanceObject);
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.stopped = true;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.pause = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.resume_position = this.getPlaybackTime();
				if (this.looping)
					this.resume_position = this.resume_position % this.getDuration();
				stopSource(this.instanceObject);
			}
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["pause"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.is_paused = true;
	};
	C2AudioInstance.prototype.resume = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || !this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](this.gainNode);
				this.instanceObject.loop = this.looping;
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
				this.startTime = audRuntime.kahanTime.sum - this.resume_position;
				startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
			}
			else
			{
				this.instanceObject.play();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["play"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["resumeSound"](this.src);
			break;
		}
		this.is_paused = false;
	};
	C2AudioInstance.prototype.seek = function (pos)
	{
		if (this.fresh || this.stopped || this.hasEnded())
			return;
		switch (this.myapi) {
		case API_HTML5:
			try {
				this.instanceObject.currentTime = pos;
			}
			catch (e) {}
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					this.resume_position = pos;
				else
				{
					this.pause();
					this.resume_position = pos;
					this.resume();
				}
			}
			else
			{
				try {
					this.instanceObject.currentTime = pos;
				}
				catch (e) {}
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["seekSound"](this.src, pos);
			break;
		}
	};
	C2AudioInstance.prototype.reconnect = function (toNode)
	{
		if (this.myapi !== API_WEBAUDIO)
			return;
		if (this.pannerEnabled)
		{
			this.pannerNode["disconnect"]();
			this.pannerNode["connect"](toNode);
		}
		else
		{
			this.gainNode["disconnect"]();
			this.gainNode["connect"](toNode);
		}
	};
	C2AudioInstance.prototype.getDuration = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.duration !== "undefined")
				return this.instanceObject.duration;
			else
				return 0;
		case API_WEBAUDIO:
			return this.buffer.bufferObject["duration"];
		case API_PHONEGAP:
			return this.instanceObject["getDuration"]();
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				return AppMobi["context"]["getDurationSound"](this.src);
			else
				return 0;
		}
		return 0;
	};
	C2AudioInstance.prototype.getPlaybackTime = function ()
	{
		var duration = this.getDuration();
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					return this.resume_position;
				else
					ret = audRuntime.kahanTime.sum - this.startTime;
			}
			else if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				ret = AppMobi["context"]["getPlaybackTimeSound"](this.src);
			break;
		}
		if (!this.looping && ret > duration)
			ret = duration;
		return ret;
	};
	C2AudioInstance.prototype.isPlaying = function ()
	{
		return !this.is_paused && !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		this.volume = v;
		this.updateVolume();
	};
	C2AudioInstance.prototype.updateVolume = function ()
	{
		var volToSet = this.volume * masterVolume;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.volume && this.instanceObject.volume !== volToSet)
				this.instanceObject.volume = volToSet;
			break;
		case API_WEBAUDIO:
			this.gainNode["gain"]["value"] = volToSet * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.getVolume = function ()
	{
		return this.volume;
	};
	C2AudioInstance.prototype.doSetMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			this.mutevol = (m ? 0 : 1);
			this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		this.is_muted = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setSilent = function (m)
	{
		this.is_silent = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["setLoopingSound"](this.src, l);
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.instanceObject["playbackRate"]["value"] !== r)
					this.instanceObject["playbackRate"]["value"] = r;
			}
			else
			{
				if (this.instanceObject.playbackRate !== r)
					this.instanceObject.playbackRate = r;
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (this.isPlaying())
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.resume_position = this.getPlaybackTime();
						if (this.looping)
							this.resume_position = this.resume_position % this.getDuration();
						stopSource(this.instanceObject);
					}
					else
						this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.instanceObject = context["createBufferSource"]();
						this.instanceObject["buffer"] = this.buffer.bufferObject;
						this.instanceObject["connect"](this.gainNode);
						this.instanceObject.loop = this.looping;
						this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
						this.startTime = audRuntime.kahanTime.sum - this.resume_position;
						startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
					}
					else
					{
						this.instanceObject["play"]();
					}
				}
			}
			break;
		case API_PHONEGAP:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		this.listenerTracker = null;
		this.listenerZ = -600;
		if ((this.runtime.isiOS || (this.runtime.isAndroid && (this.runtime.isChrome || this.runtime.isAndroidStockBrowser))) && !this.runtime.isCrosswalk && !this.runtime.isDomFree)
		{
			isMusicWorkaround = true;
		}
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if ((this.runtime.isiOS && api === API_WEBAUDIO) || isMusicWorkaround)
		{
			document.addEventListener("touchstart", function ()
			{
				var i, len, m;
				if (!iOShadtouch && context)
				{
					var buffer = context["createBuffer"](1, 1, 22050);
					var source = context["createBufferSource"]();
					source["buffer"] = buffer;
					source["connect"](context["destination"]);
					startSource(source);
					iOShadtouch = true;
				}
				if (isMusicWorkaround)
				{
					if (!silent)
					{
						for (i = 0, len = musicPlayNextTouch.length; i < len; ++i)
						{
							m = musicPlayNextTouch[i];
							if (!m.stopped && !m.is_paused)
								m.instanceObject.play();
						}
					}
					musicPlayNextTouch.length = 0;
				}
			}, true);
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isPhoneGap)
				api = API_PHONEGAP;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_PHONEGAP)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isSafari && this.runtime.isWindows && typeof Audio === "undefined")
		{
			alert("It looks like you're using Safari for Windows without Quicktime.  Audio cannot be played until Quicktime is installed.");
			this.runtime.DestroyInstance(this);
		}
		else
		{
			if (this.runtime.isDirectCanvas)
				useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
			else
			{
				try {
					useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
				}
				catch (e)
				{
					useOgg = false;
				}
			}
			switch (api) {
			case API_HTML5:
;
				break;
			case API_WEBAUDIO:
;
				break;
			case API_PHONEGAP:
;
				break;
			case API_APPMOBI:
;
				break;
			default:
;
			}
			this.runtime.tickMe(this);
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		this.saveload = this.properties[1];		// 0 = all, 1 = sounds only, 2 = music only, 3 = none
		panningModel = this.properties[2];		// 0 = equalpower, 1 = hrtf, 3 = soundfield
		distanceModel = this.properties[3];		// 0 = linear, 1 = inverse, 2 = exponential
		this.listenerZ = -this.properties[4];
		refDistance = this.properties[5];
		maxDistance = this.properties[6];
		rolloffFactor = this.properties[7];
		this.listenerTracker = new ObjectTracker();
		if (api === API_WEBAUDIO)
		{
			context["listener"]["speedOfSound"] = this.properties[8];
			context["listener"]["dopplerFactor"] = this.properties[9];
			context["listener"]["setPosition"](this.runtime.draw_width / 2, this.runtime.draw_height / 2, this.listenerZ);
			context["listener"]["setOrientation"](0, 0, 1, 0, -1, 0);
			window["c2OnAudioMicStream"] = function (localMediaStream, tag)
			{
				if (micSource)
					micSource["disconnect"]();
				micTag = tag.toLowerCase();
				micSource = context["createMediaStreamSource"](localMediaStream);
				micSource["connect"](getDestinationForTag(micTag));
			};
		}
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
		var self = this;
		this.runtime.addDestroyCallback(function (inst)
		{
			self.onInstanceDestroyed(inst);
		});
	};
	instanceProto.onInstanceDestroyed = function (inst)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.objectTracker)
			{
				if (a.objectTracker.obj === inst)
				{
					a.objectTracker.obj = null;
					if (a.pannerEnabled && a.isPlaying() && a.looping)
						a.stop();
				}
			}
		}
		if (this.listenerTracker.obj === inst)
			this.listenerTracker.obj = null;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"silent": silent,
			"masterVolume": masterVolume,
			"listenerZ": this.listenerZ,
			"listenerUid": this.listenerTracker.hasObject() ? this.listenerTracker.obj.uid : -1,
			"playing": [],
			"effects": {}
		};
		var playingarr = o["playing"];
		var i, len, a, d, p, panobj, playbackTime;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (!a.isPlaying())
				continue;				// no need to save stopped sounds
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			if (a.is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!a.is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			playbackTime = a.getPlaybackTime();
			if (a.looping)
				playbackTime = playbackTime % a.getDuration();
			d = {
				"tag": a.tag,
				"buffersrc": a.buffer.src,
				"is_music": a.is_music,
				"playbackTime": playbackTime,
				"volume": a.volume,
				"looping": a.looping,
				"muted": a.is_muted,
				"playbackRate": a.playbackRate,
				"paused": a.is_paused,
				"resume_position": a.resume_position
			};
			if (a.pannerEnabled)
			{
				d["pan"] = {};
				panobj = d["pan"];
				if (a.objectTracker && a.objectTracker.hasObject())
				{
					panobj["objUid"] = a.objectTracker.obj.uid;
				}
				else
				{
					panobj["x"] = a.panX;
					panobj["y"] = a.panY;
					panobj["a"] = a.panAngle;
				}
				panobj["ia"] = a.panConeInner;
				panobj["oa"] = a.panConeOuter;
				panobj["og"] = a.panConeOuterGain;
			}
			playingarr.push(d);
		}
		var fxobj = o["effects"];
		var fxarr;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				fxarr = [];
				for (i = 0, len = effects[p].length; i < len; i++)
				{
					fxarr.push({ "type": effects[p][i].type, "params": effects[p][i].params });
				}
				fxobj[p] = fxarr;
			}
		}
		return o;
	};
	var objectTrackerUidsToLoad = [];
	instanceProto.loadFromJSON = function (o)
	{
		var setSilent = o["silent"];
		masterVolume = o["masterVolume"];
		this.listenerZ = o["listenerZ"];
		this.listenerTracker.setObject(null);
		var listenerUid = o["listenerUid"];
		if (listenerUid !== -1)
		{
			this.listenerTracker.loadUid = listenerUid;
			objectTrackerUidsToLoad.push(this.listenerTracker);
		}
		var playingarr = o["playing"];
		var i, len, d, src, is_music, tag, playbackTime, looping, vol, b, a, p, pan, panObjUid;
		if (this.saveload !== 3)
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
			{
				a = audioInstances[i];
				if (a.is_music && this.saveload === 1)
					continue;		// only saving/loading sound: leave music playing
				if (!a.is_music && this.saveload === 2)
					continue;		// only saving/loading music: leave sound playing
				a.stop();
			}
		}
		var fxarr, fxtype, fxparams, fx;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				for (i = 0, len = effects[p].length; i < len; i++)
					effects[p][i].remove();
			}
		}
		cr.wipe(effects);
		for (p in o["effects"])
		{
			if (o["effects"].hasOwnProperty(p))
			{
				fxarr = o["effects"][p];
				for (i = 0, len = fxarr.length; i < len; i++)
				{
					fxtype = fxarr[i]["type"];
					fxparams = fxarr[i]["params"];
					switch (fxtype) {
					case "filter":
						addEffectForTag(p, new FilterEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "delay":
						addEffectForTag(p, new DelayEffect(fxparams[0], fxparams[1], fxparams[2]));
						break;
					case "convolve":
						src = fxparams[2];
						b = this.getAudioBuffer(src, false);
						if (b.bufferObject)
						{
							fx = new ConvolveEffect(b.bufferObject, fxparams[0], fxparams[1], src);
						}
						else
						{
							fx = new ConvolveEffect(null, fxparams[0], fxparams[1], src);
							b.normalizeWhenReady = fxparams[0];
							b.convolveWhenReady = fx;
						}
						addEffectForTag(p, fx);
						break;
					case "flanger":
						addEffectForTag(p, new FlangerEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "phaser":
						addEffectForTag(p, new PhaserEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "gain":
						addEffectForTag(p, new GainEffect(fxparams[0]));
						break;
					case "tremolo":
						addEffectForTag(p, new TremoloEffect(fxparams[0], fxparams[1]));
						break;
					case "ringmod":
						addEffectForTag(p, new RingModulatorEffect(fxparams[0], fxparams[1]));
						break;
					case "distortion":
						addEffectForTag(p, new DistortionEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "compressor":
						addEffectForTag(p, new CompressorEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "analyser":
						addEffectForTag(p, new AnalyserEffect(fxparams[0], fxparams[1]));
						break;
					}
				}
			}
		}
		for (i = 0, len = playingarr.length; i < len; i++)
		{
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			d = playingarr[i];
			src = d["buffersrc"];
			is_music = d["is_music"];
			tag = d["tag"];
			playbackTime = d["playbackTime"];
			looping = d["looping"];
			vol = d["volume"];
			pan = d["pan"];
			panObjUid = (pan && pan.hasOwnProperty("objUid")) ? pan["objUid"] : -1;
			if (is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			a = this.getAudioInstance(src, tag, is_music, looping, vol);
			if (!a)
			{
				b = this.getAudioBuffer(src, is_music);
				b.seekWhenReady = playbackTime;
				b.pauseWhenReady = d["paused"];
				if (pan)
				{
					if (panObjUid !== -1)
					{
						b.panWhenReady.push({ objUid: panObjUid, ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
					else
					{
						b.panWhenReady.push({ x: pan["x"], y: pan["y"], a: pan["a"], ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
				}
				continue;
			}
			a.resume_position = d["resume_position"];
			a.setPannerEnabled(!!pan);
			a.play(looping, vol, playbackTime);
			a.updatePlaybackRate();
			a.updateVolume();
			a.doSetMuted(a.is_muted || a.is_silent);
			if (d["paused"])
				a.pause();
			if (d["muted"])
				a.setMuted(true);
			a.doSetMuted(a.is_muted || a.is_silent);
			if (pan)
			{
				if (panObjUid !== -1)
				{
					a.objectTracker = a.objectTracker || new ObjectTracker();
					a.objectTracker.loadUid = panObjUid;
					objectTrackerUidsToLoad.push(a.objectTracker);
				}
				else
				{
					a.setPan(pan["x"], pan["y"], pan["a"], pan["ia"], pan["oa"], pan["og"]);
				}
			}
		}
		if (setSilent && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (!setSilent && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	instanceProto.afterLoad = function ()
	{
		var i, len, ot, inst;
		for (i = 0, len = objectTrackerUidsToLoad.length; i < len; i++)
		{
			ot = objectTrackerUidsToLoad[i];
			inst = this.runtime.getObjectByUID(ot.loadUid);
			ot.setObject(inst);
			ot.loadUid = -1;
			if (inst)
			{
				listenerX = inst.x;
				listenerY = inst.y;
			}
		}
		objectTrackerUidsToLoad.length = 0;
	};
	instanceProto.onSuspend = function (s)
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
	};
	instanceProto.tick = function ()
	{
		var dt = this.runtime.dt;
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			a.tick(dt);
			if (a.myapi !== API_HTML5 && a.myapi !== API_APPMOBI)
			{
				if (!a.fresh && !a.stopped && a.hasEnded())
				{
					a.stopped = true;
					audTag = a.tag;
					audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				}
			}
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
		var p, arr, f;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				arr = effects[p];
				for (i = 0, len = arr.length; i < len; i++)
				{
					f = arr[i];
					if (f.tick)
						f.tick();
				}
			}
		}
		if (api === API_WEBAUDIO && this.listenerTracker.hasObject())
		{
			this.listenerTracker.tick(dt);
			listenerX = this.listenerTracker.obj.x;
			listenerY = this.listenerTracker.obj.y;
			context["listener"]["setPosition"](this.listenerTracker.obj.x, this.listenerTracker.obj.y, this.listenerZ);
			context["listener"]["setVelocity"](this.listenerTracker.getVelocityX(), this.listenerTracker.getVelocityY(), 0);
		}
	};
	instanceProto.getAudioBuffer = function (src_, is_music)
	{
		var i, len, a, ret = null, j, k, lenj, ai;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
			{
				ret = a;
				break;
			}
		}
		if (!ret)
		{
			ret = new C2AudioBuffer(src_, is_music);
			audioBuffers.push(ret);
		}
		return ret;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping, vol)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && (a.canBeRecycled() || is_music))
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
				b.volumeWhenReady = vol;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	function getAudioByTag(tag)
	{
		taggedAudio.length = 0;
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				taggedAudio.length = 1;
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (cr.equals_nocase(tag, a.tag))
				taggedAudio.push(a);
		}
	};
	function reconnectEffects(tag)
	{
		var i, len, arr, n, toNode = context["destination"];
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				toNode = arr[0].getInputNode();
				for (i = 0, len = arr.length; i < len; i++)
				{
					n = arr[i];
					if (i + 1 === len)
						n.connectTo(context["destination"]);
					else
						n.connectTo(arr[i + 1].getInputNode());
				}
			}
		}
		getAudioByTag(tag);
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].reconnect(toNode);
		if (micSource && micTag === tag)
		{
			micSource["disconnect"]();
			micSource["connect"](toNode);
		}
	};
	function addEffectForTag(tag, fx)
	{
		if (!effects.hasOwnProperty(tag))
			effects[tag] = [fx];
		else
			effects[tag].push(fx);
		reconnectEffects(tag);
	};
	function Cnds() {};
	Cnds.prototype.OnEnded = function (t)
	{
		return cr.equals_nocase(audTag, t);
	};
	Cnds.prototype.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoaded())
				return false;
		}
		return true;
	};
	Cnds.prototype.AdvancedAudioSupported = function ()
	{
		return api === API_WEBAUDIO;
	};
	Cnds.prototype.IsSilent = function ()
	{
		return silent;
	};
	Cnds.prototype.IsAnyPlaying = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			if (audioInstances[i].isPlaying())
				return true;
		}
		return false;
	};
	Cnds.prototype.IsTagPlaying = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (taggedAudio[i].isPlaying())
				return true;
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Play = function (file, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPosition = function (file, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObject = function (file, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayByName = function (folder, filename, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPositionByName = function (folder, filename, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObjectByName = function (folder, filename, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.SetLooping = function (tag, looping)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	Acts.prototype.SetMuted = function (tag, muted)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	Acts.prototype.SetVolume = function (tag, vol)
	{
		getAudioByTag(tag);
		var v = dbToLinear(vol);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	Acts.prototype.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.SetPlaybackRate = function (tag, rate)
	{
		getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	Acts.prototype.Stop = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	Acts.prototype.StopAll = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].stop();
	};
	Acts.prototype.SetPaused = function (tag, state)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (state === 0)
				taggedAudio[i].pause();
			else
				taggedAudio[i].resume();
		}
	};
	Acts.prototype.Seek = function (tag, pos)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			taggedAudio[i].seek(pos);
		}
	};
	Acts.prototype.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	Acts.prototype.SetMasterVolume = function (vol)
	{
		masterVolume = dbToLinear(vol);
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].updateVolume();
	};
	Acts.prototype.AddFilterEffect = function (tag, type, freq, detune, q, gain, mix)
	{
		if (api !== API_WEBAUDIO || type < 0 || type >= filterTypes.length || !context["createBiquadFilter"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FilterEffect(type, freq, detune, q, gain, mix));
	};
	Acts.prototype.AddDelayEffect = function (tag, delay, gain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DelayEffect(delay, dbToLinear(gain), mix));
	};
	Acts.prototype.AddFlangerEffect = function (tag, delay, modulation, freq, feedback, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FlangerEffect(delay / 1000, modulation / 1000, freq, feedback / 100, mix));
	};
	Acts.prototype.AddPhaserEffect = function (tag, freq, detune, q, mod, modfreq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new PhaserEffect(freq, detune, q, mod, modfreq, mix));
	};
	Acts.prototype.AddConvolutionEffect = function (tag, file, norm, mix)
	{
		if (api !== API_WEBAUDIO || !context["createConvolver"])
			return;
		var doNormalize = (norm === 0);
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, false);
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		var fx;
		if (b.bufferObject)
		{
			fx = new ConvolveEffect(b.bufferObject, doNormalize, mix, src);
		}
		else
		{
			fx = new ConvolveEffect(null, doNormalize, mix, src);
			b.normalizeWhenReady = doNormalize;
			b.convolveWhenReady = fx;
		}
		addEffectForTag(tag, fx);
	};
	Acts.prototype.AddGainEffect = function (tag, g)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(dbToLinear(g)));
	};
	Acts.prototype.AddMuteEffect = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(0));	// re-use gain effect with 0 gain
	};
	Acts.prototype.AddTremoloEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new TremoloEffect(freq, mix));
	};
	Acts.prototype.AddRingModEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new RingModulatorEffect(freq, mix));
	};
	Acts.prototype.AddDistortionEffect = function (tag, threshold, headroom, drive, makeupgain, mix)
	{
		if (api !== API_WEBAUDIO || !context["createWaveShaper"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DistortionEffect(threshold, headroom, drive, makeupgain, mix));
	};
	Acts.prototype.AddCompressorEffect = function (tag, threshold, knee, ratio, attack, release)
	{
		if (api !== API_WEBAUDIO || !context["createDynamicsCompressor"])
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new CompressorEffect(threshold, knee, ratio, attack / 1000, release / 1000));
	};
	Acts.prototype.AddAnalyserEffect = function (tag, fftSize, smoothing)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new AnalyserEffect(fftSize, smoothing));
	};
	Acts.prototype.RemoveEffects = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		var i, len, arr;
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				for (i = 0, len = arr.length; i < len; i++)
					arr[i].remove();
				arr.length = 0;
				reconnectEffects(tag);
			}
		}
	};
	Acts.prototype.SetEffectParameter = function (tag, index, param, value, ramp, time)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var arr;
		if (!effects.hasOwnProperty(tag))
			return;
		arr = effects[tag];
		if (index < 0 || index >= arr.length)
			return;
		arr[index].setParam(param, value, ramp, time);
	};
	Acts.prototype.SetListenerObject = function (obj_)
	{
		if (!obj_ || api !== API_WEBAUDIO)
			return;
		var inst = obj_.getFirstPicked();
		if (!inst)
			return;
		this.listenerTracker.setObject(inst);
		listenerX = inst.x;
		listenerY = inst.y;
	};
	Acts.prototype.SetListenerZ = function (z)
	{
		this.listenerZ = z;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Duration = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getDuration());
		else
			ret.set_float(0);
	};
	Exps.prototype.PlaybackTime = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getPlaybackTime());
		else
			ret.set_float(0);
	};
	Exps.prototype.Volume = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
		{
			var v = taggedAudio[0].getVolume();
			ret.set_float(linearToDb(v));
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.MasterVolume = function (ret)
	{
		ret.set_float(masterVolume);
	};
	Exps.prototype.EffectCount = function (ret, tag)
	{
		tag = tag.toLowerCase();
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		ret.set_int(arr ? arr.length : 0);
	};
	function getAnalyser(tag, index)
	{
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		if (arr && index >= 0 && index < arr.length && arr[index].freqBins)
			return arr[index];
		else
			return null;
	};
	Exps.prototype.AnalyserFreqBinCount = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		ret.set_int(analyser ? analyser.node["frequencyBinCount"] : 0);
	};
	Exps.prototype.AnalyserFreqBinAt = function (ret, tag, index, bin)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		bin = Math.floor(bin);
		var analyser = getAnalyser(tag, index);
		if (!analyser)
			ret.set_float(0);
		else if (bin < 0 || bin >= analyser.node["frequencyBinCount"])
			ret.set_float(0);
		else
			ret.set_float(analyser.freqBins[bin]);
	};
	Exps.prototype.AnalyserPeakLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.peak);
		else
			ret.set_float(0);
	};
	Exps.prototype.AnalyserRMSLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.rms);
		else
			ret.set_float(0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Function = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Function.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var funcStack = [];
	var funcStackPtr = -1;
	var isInPreview = false;	// set in onCreate
	function FuncStackEntry()
	{
		this.name = "";
		this.retVal = 0;
		this.params = [];
	};
	function pushFuncStack()
	{
		funcStackPtr++;
		if (funcStackPtr === funcStack.length)
			funcStack.push(new FuncStackEntry());
		return funcStack[funcStackPtr];
	};
	function getCurrentFuncStack()
	{
		if (funcStackPtr < 0)
			return null;
		return funcStack[funcStackPtr];
	};
	function getOneAboveFuncStack()
	{
		if (!funcStack.length)
			return null;
		var i = funcStackPtr + 1;
		if (i >= funcStack.length)
			i = funcStack.length - 1;
		return funcStack[i];
	};
	function popFuncStack()
	{
;
		funcStackPtr--;
	};
	instanceProto.onCreate = function()
	{
		isInPreview = (typeof cr_is_preview !== "undefined");
	};
	function Cnds() {};
	Cnds.prototype.OnFunction = function (name_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		return cr.equals_nocase(name_, fs.name);
	};
	Cnds.prototype.CompareParam = function (index_, cmp_, value_)
	{
		var fs = getCurrentFuncStack();
		if (!fs)
			return false;
		index_ = cr.floor(index_);
		if (index_ < 0 || index_ >= fs.params.length)
			return false;
		return cr.do_cmp(fs.params[index_], cmp_, value_);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.CallFunction = function (name_, params_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		cr.shallowAssignArray(fs.params, params_);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
	};
	Acts.prototype.SetReturnValue = function (value_)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			fs.retVal = value_;
		else
;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ReturnValue = function (ret)
	{
		var fs = getOneAboveFuncStack();
		if (fs)
			ret.set_any(fs.retVal);
		else
			ret.set_int(0);
	};
	Exps.prototype.ParamCount = function (ret)
	{
		var fs = getCurrentFuncStack();
		if (fs)
			ret.set_int(fs.params.length);
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Param = function (ret, index_)
	{
		index_ = cr.floor(index_);
		var fs = getCurrentFuncStack();
		if (fs)
		{
			if (index_ >= 0 && index_ < fs.params.length)
			{
				ret.set_any(fs.params[index_]);
			}
			else
			{
;
				ret.set_int(0);
			}
		}
		else
		{
;
			ret.set_int(0);
		}
	};
	Exps.prototype.Call = function (ret, name_)
	{
		var fs = pushFuncStack();
		fs.name = name_.toLowerCase();
		fs.retVal = 0;
		fs.params.length = 0;
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
			fs.params.push(arguments[i]);
		var ran = this.runtime.trigger(cr.plugins_.Function.prototype.cnds.OnFunction, this, fs.name);
		if (isInPreview && !ran)
		{
;
		}
		popFuncStack();
		ret.set_any(fs.retVal);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				function(info) {
					self.onKeyDown(info);
				}
			);
			jQuery(document).keyup(
				function(info) {
					self.onKeyUp(info);
				}
			);
		}
	};
	var keysToBlockWhenFramed = [32, 33, 34, 35, 36, 37, 38, 39, 40, 44];
	instanceProto.onKeyDown = function (info)
	{
		var alreadyPreventedDefault = false;
		if (window != window.top && keysToBlockWhenFramed.indexOf(info.which) > -1)
		{
			info.preventDefault();
			alreadyPreventedDefault = true;
			info.stopPropagation();
		}
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which] && !alreadyPreventedDefault)
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCode, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2)
		{
			this.usedKeys[info.which] = true;
			if (!alreadyPreventedDefault)
				info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2 || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "triggerKey": this.triggerKey };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.triggerKey = o["triggerKey"];
	};
	function Cnds() {};
	Cnds.prototype.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	Cnds.prototype.OnKey = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnAnyKey = function(key)
	{
		return true;
	};
	Cnds.prototype.OnAnyKeyReleased = function(key)
	{
		return true;
	};
	Cnds.prototype.OnKeyReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.IsKeyCodeDown = function(key)
	{
		key = Math.floor(key);
		if (key < 0 || key >= this.keyMap.length)
			return false;
		return this.keyMap[key];
	};
	Cnds.prototype.OnKeyCode = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnKeyCodeReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastKeyCode = function (ret)
	{
		ret.set_int(this.triggerKey);
	};
	function fixedStringFromCharCode(kc)
	{
		kc = Math.floor(kc);
		switch (kc) {
		case 8:		return "backspace";
		case 9:		return "tab";
		case 13:	return "enter";
		case 16:	return "shift";
		case 17:	return "control";
		case 18:	return "alt";
		case 19:	return "pause";
		case 20:	return "capslock";
		case 27:	return "esc";
		case 33:	return "pageup";
		case 34:	return "pagedown";
		case 35:	return "end";
		case 36:	return "home";
		case 37:	return "←";
		case 38:	return "↑";
		case 39:	return "→";
		case 40:	return "↓";
		case 45:	return "insert";
		case 46:	return "del";
		case 91:	return "left window key";
		case 92:	return "right window key";
		case 93:	return "select";
		case 96:	return "numpad 0";
		case 97:	return "numpad 1";
		case 98:	return "numpad 2";
		case 99:	return "numpad 3";
		case 100:	return "numpad 4";
		case 101:	return "numpad 5";
		case 102:	return "numpad 6";
		case 103:	return "numpad 7";
		case 104:	return "numpad 8";
		case 105:	return "numpad 9";
		case 106:	return "numpad *";
		case 107:	return "numpad +";
		case 109:	return "numpad -";
		case 110:	return "numpad .";
		case 111:	return "numpad /";
		case 112:	return "F1";
		case 113:	return "F2";
		case 114:	return "F3";
		case 115:	return "F4";
		case 116:	return "F5";
		case 117:	return "F6";
		case 118:	return "F7";
		case 119:	return "F8";
		case 120:	return "F9";
		case 121:	return "F10";
		case 122:	return "F11";
		case 123:	return "F12";
		case 144:	return "numlock";
		case 145:	return "scroll lock";
		case 186:	return ";";
		case 187:	return "=";
		case 188:	return ",";
		case 189:	return "-";
		case 190:	return ".";
		case 191:	return "/";
		case 192:	return "'";
		case 219:	return "[";
		case 220:	return "\\";
		case 221:	return "]";
		case 222:	return "#";
		case 223:	return "`";
		default:	return String.fromCharCode(kc);
		}
	};
	Exps.prototype.StringFromKeyCode = function (ret, kc)
	{
		ret.set_string(fixedStringFromCharCode(kc));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
			jQuery(document).dblclick(
				function(info) {
					self.onDoubleClick(info);
				}
			);
			var wheelevent = function(info) {
								self.onWheel(info);
							};
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		if (this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.buttonMap[info.which] = true;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		this.buttonMap[info.which] = false;
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		this.runtime.isInUserInputEvent = false;
		if (this.handled)
			info.preventDefault();
	};
	function Cnds() {};
	Cnds.prototype.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	Cnds.prototype.OnAnyClick = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	Cnds.prototype.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	Cnds.prototype.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return cr.xor(this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.inverted), cnd.inverted);
	};
	Cnds.prototype.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	Cnds.prototype.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetCursor = function (c)
	{
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		if (this.runtime.canvas && this.runtime.canvas.style)
			this.runtime.canvas.style.cursor = cursor_style;
	};
	Acts.prototype.SetCursorSprite = function (obj)
	{
		if (this.runtime.isDomFree || this.runtime.isMobile || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst || !inst.curFrame)
			return;
		var frame = inst.curFrame;
		var datauri = frame.getDataUri();
		var cursor_style = "url(" + datauri + ") " + Math.round(frame.hotspotX * frame.width) + " " + Math.round(frame.hotspotY * frame.height) + ", auto";
		jQuery(this.runtime.canvas).css("cursor", cursor_style);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	function frame_getDataUri()
	{
		if (this.datauri.length === 0)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.width;
			tmpcanvas.height = this.height;
			var tmpctx = tmpcanvas.getContext("2d");
			if (this.spritesheeted)
			{
				tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
										 0, 0, this.width, this.height);
			}
			else
			{
				tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
			}
			this.datauri = tmpcanvas.toDataURL("image/png");
		}
		return this.datauri;
	};
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		this.all_frames = [];
		this.has_loaded_textures = false;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.sid = anim[6];
			animobj.frames = [];
			for (j = 0, lenj = anim[7].length; j < lenj; j++)
			{
				frame = anim[7][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.pixelformat = frame[11];
				frameobj.spritesheeted = (frameobj.width !== 0);
				frameobj.datauri = "";		// generated on demand and cached
				frameobj.getDataUri = frame_getDataUri;
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img["idtkLoadDisposed"] = true;
					frameobj.texture_img.src = frame[0];
					frameobj.texture_img.cr_src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.waitForImageLoad(frameobj.texture_img);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
				this.all_frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	typeProto.updateAllCurrentTexture = function ()
	{
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.curWebGLTexture = inst.curFrame.webGL_texture;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.texture_img.c2webGL_texture = null;
			frame.webGL_texture = null;
		}
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.updateAllCurrentTexture();
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.has_loaded_textures || !this.runtime.glwrap)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.has_loaded_textures = true;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.has_loaded_textures)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			this.runtime.glwrap.deleteTexture(frame.webGL_texture);
			frame.webGL_texture = null;
		}
		this.has_loaded_textures = false;
	};
	var already_drawn_images = [];
	typeProto.preloadCanvas2D = function (ctx)
	{
		var i, len, frameimg;
		already_drawn_images.length = 0;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frameimg = this.all_frames[i].texture_img;
			if (already_drawn_images.indexOf(frameimg) !== -1)
					continue;
			ctx.drawImage(frameimg, 0, 0);
			already_drawn_images.push(frameimg);
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		var poly_pts = this.type.animations[0].frames[0].poly_pts;
		if (this.recycled)
			this.collision_poly.set_pts(poly_pts);
		else
			this.collision_poly = new cr.CollisionPoly(poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.isTicking = false;
		this.inAnimTrigger = false;
		this.collisionsEnabled = (this.properties[3] !== 0);
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		this.cur_animation = this.getAnimationByName(this.properties[1]) || this.type.animations[0];
		this.cur_frame = this.properties[2];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		var curanimframe = this.cur_animation.frames[this.cur_frame];
		this.collision_poly.set_pts(curanimframe.poly_pts);
		this.hotspotX = curanimframe.hotspotX;
		this.hotspotY = curanimframe.hotspotY;
		this.cur_anim_speed = this.cur_animation.speed;
		if (this.recycled)
			this.animTimer.reset();
		else
			this.animTimer = new cr.KahanAdder();
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		this.type.loadTextures();
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"a": this.cur_animation.sid,
			"f": this.cur_frame,
			"cas": this.cur_anim_speed,
			"fs": this.frameStart,
			"ar": this.animRepeats,
			"at": this.animTimer.sum
		};
		if (!this.animPlaying)
			o["ap"] = this.animPlaying;
		if (!this.animForwards)
			o["af"] = this.animForwards;
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		var anim = this.getAnimationBySid(o["a"]);
		if (anim)
			this.cur_animation = anim;
		this.cur_frame = o["f"];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		this.cur_anim_speed = o["cas"];
		this.frameStart = o["fs"];
		this.animRepeats = o["ar"];
		this.animTimer.reset();
		this.animTimer.sum = o["at"];
		this.animPlaying = o.hasOwnProperty("ap") ? o["ap"] : true;
		this.animForwards = o.hasOwnProperty("af") ? o["af"] : true;
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
		this.collision_poly.set_pts(this.curFrame.poly_pts);
		this.hotspotX = this.curFrame.hotspotX;
		this.hotspotY = this.curFrame.hotspotY;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animPlaying = false;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return this.animTimer.sum;
	};
	instanceProto.tick = function()
	{
		this.animTimer.add(this.runtime.getDt(this));
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = cur_animation.repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = cur_animation.repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = cur_animation.repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = cur_animation.repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.getAnimationByName = function (name_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (cr.equals_nocase(a.name, name_))
				return a;
		}
		return null;
	};
	instanceProto.getAnimationBySid = function (sid_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.sid === sid_)
				return a;
		}
		return null;
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var anim = this.getAnimationByName(this.changeAnimName);
		this.changeAnimName = "";
		if (!anim)
			return;
		if (cr.equals_nocase(anim.name, this.cur_animation.name) && this.animPlaying)
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		var i, len, b;
		for (i = 0, len = this.behavior_insts.length; i < len; i++)
		{
			b = this.behavior_insts[i];
			if (b.onSpriteFrameChanged)
				b.onSpriteFrameChanged(prev_frame, next_frame);
		}
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (cr.equals_nocase(name_, cur_frame.image_points[i][0]))
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	function Cnds() {};
	var arrCache = [];
	function allocArr()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [0, 0, 0];
	};
	function freeArr(a)
	{
		a[0] = 0;
		a[1] = 0;
		a[2] = 0;
		arrCache.push(a);
	};
	function makeCollKey(a, b)
	{
		if (a < b)
			return "" + a + "," + b;
		else
			return "" + b + "," + a;
	};
	function collmemory_add(collmemory, a, b, tickcount)
	{
		var a_uid = a.uid;
		var b_uid = b.uid;
		var key = makeCollKey(a_uid, b_uid);
		if (collmemory.hasOwnProperty(key))
		{
			collmemory[key][2] = tickcount;
			return;
		}
		var arr = allocArr();
		arr[0] = a_uid;
		arr[1] = b_uid;
		arr[2] = tickcount;
		collmemory[key] = arr;
	};
	function collmemory_remove(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			freeArr(collmemory[key]);
			delete collmemory[key];
		}
	};
	function collmemory_removeInstance(collmemory, inst)
	{
		var uid = inst.uid;
		var p, entry;
		for (p in collmemory)
		{
			if (collmemory.hasOwnProperty(p))
			{
				entry = collmemory[p];
				if (entry[0] === uid || entry[1] === uid)
				{
					freeArr(collmemory[p]);
					delete collmemory[p];
				}
			}
		}
	};
	var last_coll_tickcount = -2;
	function collmemory_has(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			last_coll_tickcount = collmemory[key][2];
			return true;
		}
		else
		{
			last_coll_tickcount = -2;
			return false;
		}
	};
	var candidates1 = [];
	Cnds.prototype.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		if (!cnd.extra.collmemory)
		{
			cnd.extra.collmemory = {};
			runtime.addDestroyCallback((function (collmemory) {
				return function(inst) {
					collmemory_removeInstance(collmemory, inst);
				};
			})(cnd.extra.collmemory));
		}
		var collmemory = cnd.extra.collmemory;
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances;
		var l, linst, r, rinst;
		var curlsol, currsol;
		var tickcount = this.runtime.tickcount;
		var lasttickcount = tickcount - 1;
		var exists, run;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0; l < linstances.length; l++)
		{
			linst = linstances[l];
			if (rsol.select_all)
			{
				linst.update_bbox();
				this.runtime.getCollisionCandidates(linst.layer, rtype, linst.bbox, candidates1);
				rinstances = candidates1;
			}
			else
				rinstances = rsol.getObjects();
			for (r = 0; r < rinstances.length; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					exists = collmemory_has(collmemory, linst, rinst);
					run = (!exists || (last_coll_tickcount < lasttickcount));
					collmemory_add(collmemory, linst, rinst, tickcount);
					if (run)
					{
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
							ltype.applySolToContainer();
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
							ltype.applySolToContainer();
							rtype.applySolToContainer();
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(collmemory, linst, rinst);
				}
			}
			candidates1.length = 0;
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	var candidates2 = [];
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
		var rinstances;
		if (rsol.select_all)
		{
			this.update_bbox();
			this.runtime.getCollisionCandidates(this.layer, rtype, this.bbox, candidates2);
			rinstances = candidates2;
		}
		else if (orblock)
			rinstances = rsol.else_instances;
		else
			rinstances = rsol.instances;
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		candidates2.length = 0;
		return ret;
	};
	typeProto.finish = function (do_pick)
	{
		if (!needscollisionfinish)
			return;
		if (do_pick)
		{
			var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
			var sol = rpicktype.getCurrentSol();
			var topick = rtopick.valuesRef();
			var i, len, inst;
			if (sol.select_all)
			{
				sol.select_all = false;
				sol.instances.length = topick.length;
				for (i = 0, len = topick.length; i < len; i++)
				{
					sol.instances[i] = topick[i];
				}
				if (orblock)
				{
					sol.else_instances.length = 0;
					for (i = 0, len = rpicktype.instances.length; i < len; i++)
					{
						inst = rpicktype.instances[i];
						if (!rtopick.contains(inst))
							sol.else_instances.push(inst);
					}
				}
			}
			else
			{
				if (orblock)
				{
					var initsize = sol.instances.length;
					sol.instances.length = initsize + topick.length;
					for (i = 0, len = topick.length; i < len; i++)
					{
						sol.instances[initsize + i] = topick[i];
						cr.arrayFindRemove(sol.else_instances, topick[i]);
					}
				}
				else
				{
					cr.shallowAssignArray(sol.instances, topick);
				}
			}
			rpicktype.applySolToContainer();
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	Cnds.prototype.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	Cnds.prototype.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	Cnds.prototype.IsAnimPlaying = function (animname)
	{
		if (this.changeAnimName.length)
			return cr.equals_nocase(this.changeAnimName, animname);
		else
			return cr.equals_nocase(this.cur_animation.name, animname);
	};
	Cnds.prototype.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	Cnds.prototype.CompareAnimSpeed = function (cmp, x)
	{
		var s = (this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
		return cr.do_cmp(s, cmp, x);
	};
	Cnds.prototype.OnAnimFinished = function (animname)
	{
		return cr.equals_nocase(this.animTriggerName, animname);
	};
	Cnds.prototype.OnAnyAnimFinished = function ()
	{
		return true;
	};
	Cnds.prototype.OnFrameChanged = function ()
	{
		return true;
	};
	Cnds.prototype.IsMirrored = function ()
	{
		return this.width < 0;
	};
	Cnds.prototype.IsFlipped = function ()
	{
		return this.height < 0;
	};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.IsCollisionEnabled = function ()
	{
		return this.collisionsEnabled;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		if (typeof inst.angle !== "undefined")
		{
			inst.angle = this.angle;
			inst.set_bbox_changed();
		}
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra.Spawn_LastExec) || cur_act.extra.Spawn_LastExec < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra.Spawn_LastExec = this.runtime.execcount;
		}
		var sol;
		if (obj != this.type)
		{
			sol = obj.getCurrentSol();
			sol.select_all = false;
			if (reset_sol)
			{
				sol.instances.length = 1;
				sol.instances[0] = inst;
			}
			else
				sol.instances.push(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					s = inst.siblings[i];
					sol = s.type.getCurrentSol();
					sol.select_all = false;
					if (reset_sol)
					{
						sol.instances.length = 1;
						sol.instances[0] = s;
					}
					else
						sol.instances.push(s);
				}
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	Acts.prototype.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			this.changeAnimFrame = 0;
			if (!this.inAnimTrigger)
				this.doChangeAnimFrame();
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	Acts.prototype.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	Acts.prototype.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	Acts.prototype.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	Acts.prototype.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var mirror_factor = (this.width < 0 ? -1 : 1);
		var flip_factor = (this.height < 0 ? -1 : 1);
		var new_width = cur_frame.width * s * mirror_factor;
		var new_height = cur_frame.height * s * flip_factor;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	Acts.prototype.LoadURL = function (url_, resize_)
	{
		var img = new Image();
		var self = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			if (curFrame_.texture_img.src === img.src)
			{
				if (self.runtime.glwrap && self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.runtime.redraw = true;
				self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
				return;
			}
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			curFrame_.datauri = "";
			if (self.runtime.glwrap)
			{
				if (curFrame_.webGL_texture)
					self.runtime.glwrap.deleteTexture(curFrame_.webGL_texture);
				curFrame_.webGL_texture = self.runtime.glwrap.loadTexture(img, false, self.runtime.linearSampling);
				if (self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.type.updateAllCurrentTexture();
			}
			if (resize_ === 0)		// resize to image size
			{
				self.width = img.width;
				self.height = img.height;
				self.set_bbox_changed();
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	Acts.prototype.SetCollisions = function (set_)
	{
		if (this.collisionsEnabled === (set_ !== 0))
			return;		// no change
		this.collisionsEnabled = (set_ !== 0);
		if (this.collisionsEnabled)
			this.set_bbox_changed();		// needs to be added back to cells
		else
		{
			if (this.collcells.right >= this.collcells.left)
				this.type.collision_grid.update(this, this.collcells, null);
			this.collcells.set(0, 0, -1, -1);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	Exps.prototype.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	Exps.prototype.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	Exps.prototype.AnimationSpeed = function (ret)
	{
		ret.set_float(this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
	};
	Exps.prototype.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	Exps.prototype.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	Exps.prototype.ImagePointCount = function (ret)
	{
		ret.set_int(this.curFrame.image_points.length);
	};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Text = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Text.prototype;
	pluginProto.onCreate = function ()
	{
		pluginProto.acts.SetWidth = function (w)
		{
			if (this.width !== w)
			{
				this.width = w;
				this.text_changed = true;	// also recalculate text wrapping
				this.set_bbox_changed();
			}
		};
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.mycanvas = null;
			inst.myctx = null;
			inst.mytex = null;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		if (this.recycled)
			this.lines.length = 0;
		else
			this.lines = [];		// for word wrapping
		this.text_changed = true;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var requestedWebFonts = {};		// already requested web fonts have an entry here
	instanceProto.onCreate = function()
	{
		this.text = this.properties[0];
		this.visible = (this.properties[1] === 0);		// 0=visible, 1=invisible
		this.font = this.properties[2];
		this.color = this.properties[3];
		this.halign = this.properties[4];				// 0=left, 1=center, 2=right
		this.valign = this.properties[5];				// 0=top, 1=center, 2=bottom
		this.wrapbyword = (this.properties[7] === 0);	// 0=word, 1=character
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
		this.line_height_offset = this.properties[8];
		this.facename = "";
		this.fontstyle = "";
		this.ptSize = 0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.parseFont();
		this.mycanvas = null;
		this.myctx = null;
		this.mytex = null;
		this.need_text_redraw = false;
		this.last_render_tick = this.runtime.tickcount;
		if (this.recycled)
			this.rcTex.set(0, 0, 1, 1);
		else
			this.rcTex = new cr.rect(0, 0, 1, 1);
		if (this.runtime.glwrap)
			this.runtime.tickMe(this);
;
	};
	instanceProto.parseFont = function ()
	{
		var arr = this.font.split(" ");
		var i;
		for (i = 0; i < arr.length; i++)
		{
			if (arr[i].substr(arr[i].length - 2, 2) === "pt")
			{
				this.ptSize = parseInt(arr[i].substr(0, arr[i].length - 2));
				this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
				if (i > 0)
					this.fontstyle = arr[i - 1];
				this.facename = arr[i + 1];
				for (i = i + 2; i < arr.length; i++)
					this.facename += " " + arr[i];
				break;
			}
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"t": this.text,
			"f": this.font,
			"c": this.color,
			"ha": this.halign,
			"va": this.valign,
			"wr": this.wrapbyword,
			"lho": this.line_height_offset,
			"fn": this.facename,
			"fs": this.fontstyle,
			"ps": this.ptSize,
			"pxh": this.pxHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.font = o["f"];
		this.color = o["c"];
		this.halign = o["ha"];
		this.valign = o["va"];
		this.wrapbyword = o["wr"];
		this.line_height_offset = o["lho"];
		this.facename = o["fn"];
		this.fontstyle = o["fs"];
		this.ptSize = o["ps"];
		this.pxHeight = o["pxh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		this.text_changed = true;
		this.lastwidth = this.width;
		this.lastwrapwidth = this.width;
		this.lastheight = this.height;
	};
	instanceProto.tick = function ()
	{
		if (this.runtime.glwrap && this.mytex && (this.runtime.tickcount - this.last_render_tick >= 300))
		{
			var layer = this.layer;
            this.update_bbox();
            var bbox = this.bbox;
            if (bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom)
			{
				this.runtime.glwrap.deleteTexture(this.mytex);
				this.mytex = null;
				this.myctx = null;
				this.mycanvas = null;
			}
		}
	};
	instanceProto.onDestroy = function ()
	{
		this.myctx = null;
		this.mycanvas = null;
		if (this.runtime.glwrap && this.mytex)
			this.runtime.glwrap.deleteTexture(this.mytex);
		this.mytex = null;
	};
	instanceProto.updateFont = function ()
	{
		this.font = this.fontstyle + " " + this.ptSize.toString() + "pt " + this.facename;
		this.text_changed = true;
		this.runtime.redraw = true;
	};
	instanceProto.draw = function(ctx, glmode)
	{
		ctx.font = this.font;
		ctx.textBaseline = "top";
		ctx.fillStyle = this.color;
		ctx.globalAlpha = glmode ? 1 : this.opacity;
		var myscale = 1;
		if (glmode)
		{
			myscale = this.layer.getScale();
			ctx.save();
			ctx.scale(myscale, myscale);
		}
		if (this.text_changed || this.width !== this.lastwrapwidth)
		{
			this.type.plugin.WordWrap(this.text, this.lines, ctx, this.width, this.wrapbyword);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
		this.update_bbox();
		var penX = glmode ? 0 : this.bquad.tlx;
		var penY = glmode ? 0 : this.bquad.tly;
		if (this.runtime.pixel_rounding)
		{
			penX = (penX + 0.5) | 0;
			penY = (penY + 0.5) | 0;
		}
		if (this.angle !== 0 && !glmode)
		{
			ctx.save();
			ctx.translate(penX, penY);
			ctx.rotate(this.angle);
			penX = 0;
			penY = 0;
		}
		var endY = penY + this.height;
		var line_height = this.pxHeight;
		line_height += this.line_height_offset;
		var drawX;
		var i;
		if (this.valign === 1)		// center
			penY += Math.max(this.height / 2 - (this.lines.length * line_height) / 2, 0);
		else if (this.valign === 2)	// bottom
			penY += Math.max(this.height - (this.lines.length * line_height) - 2, 0);
		for (i = 0; i < this.lines.length; i++)
		{
			drawX = penX;
			if (this.halign === 1)		// center
				drawX = penX + (this.width - this.lines[i].width) / 2;
			else if (this.halign === 2)	// right
				drawX = penX + (this.width - this.lines[i].width);
			ctx.fillText(this.lines[i].text, drawX, penY);
			penY += line_height;
			if (penY >= endY - line_height)
				break;
		}
		if (this.angle !== 0 || glmode)
			ctx.restore();
		this.last_render_tick = this.runtime.tickcount;
	};
	instanceProto.drawGL = function(glw)
	{
		if (this.width < 1 || this.height < 1)
			return;
		var need_redraw = this.text_changed || this.need_text_redraw;
		this.need_text_redraw = false;
		var layer_scale = this.layer.getScale();
		var layer_angle = this.layer.getAngle();
		var rcTex = this.rcTex;
		var floatscaledwidth = layer_scale * this.width;
		var floatscaledheight = layer_scale * this.height;
		var scaledwidth = Math.ceil(floatscaledwidth);
		var scaledheight = Math.ceil(floatscaledheight);
		var halfw = this.runtime.draw_width / 2;
		var halfh = this.runtime.draw_height / 2;
		if (!this.myctx)
		{
			this.mycanvas = document.createElement("canvas");
			this.mycanvas.width = scaledwidth;
			this.mycanvas.height = scaledheight;
			this.lastwidth = scaledwidth;
			this.lastheight = scaledheight;
			need_redraw = true;
			this.myctx = this.mycanvas.getContext("2d");
		}
		if (scaledwidth !== this.lastwidth || scaledheight !== this.lastheight)
		{
			this.mycanvas.width = scaledwidth;
			this.mycanvas.height = scaledheight;
			if (this.mytex)
			{
				glw.deleteTexture(this.mytex);
				this.mytex = null;
			}
			need_redraw = true;
		}
		if (need_redraw)
		{
			this.myctx.clearRect(0, 0, scaledwidth, scaledheight);
			this.draw(this.myctx, true);
			if (!this.mytex)
				this.mytex = glw.createEmptyTexture(scaledwidth, scaledheight, this.runtime.linearSampling, this.runtime.isMobile);
			glw.videoToTexture(this.mycanvas, this.mytex, this.runtime.isMobile);
		}
		this.lastwidth = scaledwidth;
		this.lastheight = scaledheight;
		glw.setTexture(this.mytex);
		glw.setOpacity(this.opacity);
		glw.resetModelView();
		glw.translate(-halfw, -halfh);
		glw.updateModelView();
		var q = this.bquad;
		var tlx = this.layer.layerToCanvas(q.tlx, q.tly, true, true);
		var tly = this.layer.layerToCanvas(q.tlx, q.tly, false, true);
		var trx = this.layer.layerToCanvas(q.trx, q.try_, true, true);
		var try_ = this.layer.layerToCanvas(q.trx, q.try_, false, true);
		var brx = this.layer.layerToCanvas(q.brx, q.bry, true, true);
		var bry = this.layer.layerToCanvas(q.brx, q.bry, false, true);
		var blx = this.layer.layerToCanvas(q.blx, q.bly, true, true);
		var bly = this.layer.layerToCanvas(q.blx, q.bly, false, true);
		if (this.runtime.pixel_rounding || (this.angle === 0 && layer_angle === 0))
		{
			var ox = ((tlx + 0.5) | 0) - tlx;
			var oy = ((tly + 0.5) | 0) - tly
			tlx += ox;
			tly += oy;
			trx += ox;
			try_ += oy;
			brx += ox;
			bry += oy;
			blx += ox;
			bly += oy;
		}
		if (this.angle === 0 && layer_angle === 0)
		{
			trx = tlx + scaledwidth;
			try_ = tly;
			brx = trx;
			bry = tly + scaledheight;
			blx = tlx;
			bly = bry;
			rcTex.right = 1;
			rcTex.bottom = 1;
		}
		else
		{
			rcTex.right = floatscaledwidth / scaledwidth;
			rcTex.bottom = floatscaledheight / scaledheight;
		}
		glw.quadTex(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex);
		glw.resetModelView();
		glw.scale(layer_scale, layer_scale);
		glw.rotateZ(-this.layer.getAngle());
		glw.translate((this.layer.viewLeft + this.layer.viewRight) / -2, (this.layer.viewTop + this.layer.viewBottom) / -2);
		glw.updateModelView();
		this.last_render_tick = this.runtime.tickcount;
	};
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		wordsCache.length = 0;
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	var linesCache = [];
	function allocLine()
	{
		if (linesCache.length)
			return linesCache.pop();
		else
			return {};
	};
	function freeLine(l)
	{
		linesCache.push(l);
	};
	function freeAllLines(arr)
	{
		var i, len;
		for (i = 0, len = arr.length; i < len; i++)
		{
			freeLine(arr[i]);
		}
		arr.length = 0;
	};
	pluginProto.WordWrap = function (text, lines, ctx, width, wrapbyword)
	{
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		if (text.length <= 100 && text.indexOf("\n") === -1)
		{
			var all_width = ctx.measureText(text).width;
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				return;
			}
		}
		this.WrapText(text, lines, ctx, width, wrapbyword);
	};
	pluginProto.WrapText = function (text, lines, ctx, width, wrapbyword)
	{
		var wordArray;
		if (wrapbyword)
		{
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		}
		else
			wordArray = text;
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				line = lines[lineIndex];
				line.text = cur_line;
				line.width = ctx.measureText(cur_line).width;
				lineIndex++;
				cur_line = "";
				continue;
			}
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = ctx.measureText(cur_line).width;
			if (line_width >= width)
			{
				if (lineIndex >= lines.length)
					lines.push(allocLine());
				line = lines[lineIndex];
				line.text = prev_line;
				line.width = ctx.measureText(prev_line).width;
				lineIndex++;
				cur_line = wordArray[i];
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (cur_line.length)
		{
			if (lineIndex >= lines.length)
				lines.push(allocLine());
			line = lines[lineIndex];
			line.text = cur_line;
			line.width = ctx.measureText(cur_line).width;
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	function Cnds() {};
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetFontFace = function (face_, style_)
	{
		var newstyle = "";
		switch (style_) {
		case 1: newstyle = "bold"; break;
		case 2: newstyle = "italic"; break;
		case 3: newstyle = "bold italic"; break;
		}
		if (face_ === this.facename && newstyle === this.fontstyle)
			return;		// no change
		this.facename = face_;
		this.fontstyle = newstyle;
		this.updateFont();
	};
	Acts.prototype.SetFontSize = function (size_)
	{
		if (this.ptSize === size_)
			return;
		this.ptSize = size_;
		this.pxHeight = Math.ceil((this.ptSize / 72.0) * 96.0) + 4;	// assume 96dpi...
		this.updateFont();
	};
	Acts.prototype.SetFontColor = function (rgb)
	{
		var newcolor = "rgb(" + cr.GetRValue(rgb).toString() + "," + cr.GetGValue(rgb).toString() + "," + cr.GetBValue(rgb).toString() + ")";
		if (newcolor === this.color)
			return;
		this.color = newcolor;
		this.need_text_redraw = true;
		this.runtime.redraw = true;
	};
	Acts.prototype.SetWebFont = function (familyname_, cssurl_)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Text plugin: 'Set web font' not supported on this platform - the action has been ignored");
			return;		// DC todo
		}
		var self = this;
		var refreshFunc = (function () {
							self.runtime.redraw = true;
							self.text_changed = true;
						});
		if (requestedWebFonts.hasOwnProperty(cssurl_))
		{
			var newfacename = "'" + familyname_ + "'";
			if (this.facename === newfacename)
				return;	// no change
			this.facename = newfacename;
			this.updateFont();
			for (var i = 1; i < 10; i++)
			{
				setTimeout(refreshFunc, i * 100);
				setTimeout(refreshFunc, i * 1000);
			}
			return;
		}
		var wf = document.createElement("link");
		wf.href = cssurl_;
		wf.rel = "stylesheet";
		wf.type = "text/css";
		wf.onload = refreshFunc;
		document.getElementsByTagName('head')[0].appendChild(wf);
		requestedWebFonts[cssurl_] = true;
		this.facename = "'" + familyname_ + "'";
		this.updateFont();
		for (var i = 1; i < 10; i++)
		{
			setTimeout(refreshFunc, i * 100);
			setTimeout(refreshFunc, i * 1000);
		}
;
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.FaceName = function (ret)
	{
		ret.set_string(this.facename);
	};
	Exps.prototype.FaceSize = function (ret)
	{
		ret.set_int(this.ptSize);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		var w = 0;
		var i, len, x;
		for (i = 0, len = this.lines.length; i < len; i++)
		{
			x = this.lines[i].width;
			if (w < x)
				w = x;
		}
		ret.set_int(w);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		ret.set_int(this.lines.length * (this.pxHeight + this.line_height_offset) - this.line_height_offset);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TiledBg = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TiledBg.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.waitForImageLoad(this.texture_img);
		this.pattern = null;
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		this.has_own_texture = false;										// true if a texture loaded in from URL
		this.texture_img = this.type.texture_img;
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
			this.webGL_texture = this.type.webGL_texture;
		}
		else
		{
			if (!this.type.pattern)
				this.type.pattern = this.runtime.ctx.createPattern(this.type.texture_img, "repeat");
			this.pattern = this.type.pattern;
		}
	};
	instanceProto.afterLoad = function ()
	{
		this.has_own_texture = false;
		this.texture_img = this.type.texture_img;
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.glwrap && this.has_own_texture && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = this.pattern;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % this.texture_img.width;
		var offY = drawY % this.texture_img.height;
		if (offX < 0)
			offX += this.texture_img.width;
		if (offY < 0)
			offY += this.texture_img.height;
		ctx.translate(myx, myy);
		ctx.rotate(this.angle);
		ctx.translate(offX, offY);
		ctx.fillRect(drawX - offX,
					 drawY - offY,
					 this.width,
					 this.height);
		ctx.restore();
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		rcTex.right = this.width / this.texture_img.width;
		rcTex.bottom = this.height / this.texture_img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
			self.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.has_own_texture && self.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			else
			{
				self.pattern = self.runtime.ctx.createPattern(img, "repeat");
			}
			self.has_own_texture = true;
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.TiledBg.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.texture_img.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.texture_img.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Tilemap = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Tilemap.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		var i, len, p;
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.waitForImageLoad(this.texture_img);
		this.cut_tiles = [];
		this.cut_tiles_valid = false;
		this.tile_polys = [];
		this.tile_polys_cached = false;		// first instance will cache polys with the tile width/height
		if (this.tile_poly_data && this.tile_poly_data.length)
		{
			for (i = 0, len = this.tile_poly_data.length; i < len; ++i)
			{
				p = this.tile_poly_data[i];
				if (p)
				{
					this.tile_polys.push({
						poly: p,
						flipmap: [[[null, null], [null, null]], [[null, null], [null, null]]]
					});
				}
				else
					this.tile_polys.push(null);
			}
		}
	};
	typeProto.cacheTilePoly = function (tileid, tilewidth, tileheight, fliph, flipv, flipd)
	{
		if (tileid < 0 || tileid >= this.tile_polys.length)
			return;
		if (!this.tile_polys[tileid])
			return;		// no poly for this tile
		var poly = this.tile_polys[tileid].poly;
		var flipmap = this.tile_polys[tileid].flipmap;
		var cached_poly = new cr.CollisionPoly(poly);
		cached_poly.cache_poly(tilewidth, tileheight, 0);
		if (flipd)
			cached_poly.diag();
		if (fliph)
			cached_poly.mirror(tilewidth / 2);
		if (flipv)
			cached_poly.flip(tileheight / 2);
		flipmap[fliph?1:0][flipv?1:0][flipd?1:0] = cached_poly;
	};
	typeProto.getTilePoly = function (id)
	{
		if (id === -1)
			return null;
		var tileid = (id & TILE_ID_MASK);
		if (tileid < 0 || tileid >= this.tile_polys.length)
			return null;		// out of range
		if (!this.tile_polys[tileid])
			return null;		// no poly for this tile
		var fliph = (id & TILE_FLIPPED_HORIZONTAL) ? 1 : 0;
		var flipv = (id & TILE_FLIPPED_VERTICAL) ? 1 : 0;
		var flipd = (id & TILE_FLIPPED_DIAGONAL) ? 1 : 0;
		return this.tile_polys[tileid].flipmap[fliph][flipv][flipd];
	};
	typeProto.freeCutTiles = function ()
	{
		var i, len;
		var glwrap = this.runtime.glwrap;
		if (glwrap)
		{
			for (i = 0, len = this.cut_tiles.length; i < len; ++i)
				glwrap.deleteTexture(this.cut_tiles[i]);
		}
		this.cut_tiles.length = 0;
		this.cut_tiles_valid = false;
	}
	typeProto.maybeCutTiles = function (tw, th, offx, offy, sepx, sepy, seamless)
	{
		if (this.cut_tiles_valid)
			return;		// no changed
		if (tw <= 0 || th <= 0)
			return;
		this.freeCutTiles();
		var img_width = this.texture_img.width;
		var img_height = this.texture_img.height;
		var x, y;
		for (y = offy; y + th <= img_height; y += (th + sepy))
		{
			for (x = offx; x + tw <= img_width; x += (tw + sepx))
			{
				this.cut_tiles.push(this.CutTileImage(x, y, tw, th, seamless));
			}
		}
		this.cut_tiles_valid = true;
	};
	typeProto.CutTileImage = function(x, y, w, h, seamless)
	{
		if (this.runtime.glwrap)
		{
			return this.DoCutTileImage(x, y, w, h, false, false, false, seamless);
		}
		else
		{
			var flipmap = [[[null, null], [null, null]], [[null, null], [null, null]]];
			flipmap[0][0][0] = this.DoCutTileImage(x, y, w, h, false, false, false, seamless);
			return {
				flipmap: flipmap,
				x: x,
				y: y,
				w: w,
				h: h
			};
		}
	};
	typeProto.GetFlippedTileImage = function (tileid, fliph, flipv, flipd, seamless)
	{
		if (tileid < 0 || tileid >= this.cut_tiles.length)
			return null;
		var tile = this.cut_tiles[tileid];
		var flipmap = tile.flipmap;
		var hi = (fliph ? 1 : 0);
		var vi = (flipv ? 1 : 0);
		var di = (flipd ? 1 : 0);
		var ret = flipmap[hi][vi][di];
		if (ret)
		{
			return ret;
		}
		else
		{
			ret = this.DoCutTileImage(tile.x, tile.y, tile.w, tile.h, hi!==0, vi!==0, di!==0, seamless);
			flipmap[hi][vi][di] = ret;
			return ret;
		}
	};
	typeProto.DoCutTileImage = function(x, y, w, h, fliph, flipv, flipd, seamless)
	{
		var dw = w;
		var dh = h;
		if (this.runtime.glwrap)
		{
			if (!cr.isPOT(dw))
				dw = cr.nextHighestPowerOfTwo(dw);
			if (!cr.isPOT(dh))
				dh = cr.nextHighestPowerOfTwo(dh);
		}
		var tmpcanvas = document.createElement("canvas");
		tmpcanvas.width = dw;
		tmpcanvas.height = dh;
		var tmpctx = tmpcanvas.getContext("2d");
		if (this.runtime.ctx)
		{
			if (fliph)
			{
				if (flipv)
				{
					if (flipd)
					{
						tmpctx.rotate(Math.PI / 2);
						tmpctx.scale(-1, 1);
						tmpctx.translate(-dw, -dh);
					}
					else
					{
						tmpctx.scale(-1, -1);
						tmpctx.translate(-dw, -dh);
					}
				}
				else
				{
					if (flipd)
					{
						tmpctx.rotate(Math.PI / 2);
						tmpctx.translate(0, -dh);
					}
					else
					{
						tmpctx.scale(-1, 1);
						tmpctx.translate(-dw, 0);
					}
				}
			}
			else
			{
				if (flipv)
				{
					if (flipd)
					{
						tmpctx.rotate(-Math.PI / 2);
						tmpctx.translate(-dw, 0);
					}
					else
					{
						tmpctx.scale(1, -1);
						tmpctx.translate(0, -dh);
					}
				}
				else
				{
					if (flipd)
					{
						tmpctx.scale(-1, 1);
						tmpctx.rotate(Math.PI / 2);
					}
				}
			}
			tmpctx.drawImage(this.texture_img, x, y, w, h, 0, 0, dw, dh);
			if (seamless)
				return tmpcanvas;
			else
				return this.runtime.ctx.createPattern(tmpcanvas, "repeat");
		}
		else
		{
;
			tmpctx.drawImage(this.texture_img, x, y, w, h, 0, 0, dw, dh);
			var tex = this.runtime.glwrap.createEmptyTexture(dw, dh, this.runtime.linearSampling, false, !seamless);
			this.runtime.glwrap.videoToTexture(tmpcanvas, tex);
			return tex;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.freeCutTiles();
	};
	typeProto.onRestoreWebGLContext = function ()
	{
	};
	typeProto.loadTextures = function ()
	{
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length)
			return;
		this.freeCutTiles();
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var TILE_FLIPPED_HORIZONTAL = -0x80000000		// note: pretend is a signed int, so negate
	var TILE_FLIPPED_VERTICAL = 0x40000000
	var TILE_FLIPPED_DIAGONAL = 0x20000000
	var TILE_FLAGS_MASK = 0xE0000000
	var TILE_ID_MASK = 0x1FFFFFFF
	function TileQuad()
	{
		this.id = -1;
		this.tileid = -1;
		this.horiz_flip = false;
		this.vert_flip = false;
		this.diag_flip = false;
		this.any_flip = false;
		this.rc = new cr.rect(0, 0, 0, 0);
	};
	var tilequad_cache = [];
	function allocTileQuad()
	{
		if (tilequad_cache.length)
			return tilequad_cache.pop();
		else
			return new TileQuad();
	};
	function freeTileQuad(tq)
	{
		if (tilequad_cache.length < 10000)
			tilequad_cache.push(tq);
	};
	function TileCollisionRect()
	{
		this.id = -1;
		this.rc = new cr.rect(0, 0, 0, 0);
		this.poly = null;
	}
	var collrect_cache = [];
	function allocCollRect()
	{
		if (collrect_cache.length)
			return collrect_cache.pop();
		else
			return new TileCollisionRect();
	};
	function freeCollRect(r)
	{
		if (collrect_cache.length < 10000)
			collrect_cache.push(r);
	};
	var tile_cell_cache = [];
	function allocTileCell(inst_, x_, y_)
	{
		var ret;
		if (tile_cell_cache.length)
		{
			ret = tile_cell_cache.pop();
			ret.inst = inst_;
			ret.x = x_;
			ret.y = y_;
			ret.left = ret.x * ret.inst.cellwidth * ret.inst.tilewidth;
			ret.top = ret.y * ret.inst.cellheight * ret.inst.tileheight;
			ret.clear();
			ret.quadmap_valid = false;
			return ret;
		}
		else
			return new TileCell(inst_, x_, y_);
	};
	function freeTileCell(tc)
	{
		var i, len;
		for (i = 0, len = tc.quads.length; i < len; ++i)
			freeTileQuad(tc.quads[i]);
		tc.quads.length = 0;
		for (i = 0, len = tc.collision_rects.length; i < len; ++i)
			freeCollRect(tc.collision_rects[i]);
		tc.collision_rects.length = 0;
		if (tile_cell_cache.length < 1000)
			tile_cell_cache.push(tc);
	};
	function TileCell(inst_, x_, y_)
	{
		this.inst = inst_;
		this.x = x_;
		this.y = y_;
		this.left = this.x * this.inst.cellwidth * this.inst.tilewidth;
		this.top = this.y * this.inst.cellheight * this.inst.tileheight;
		this.tiles = [];
		this.quads = [];
		this.collision_rects = [];
		this.quadmap_valid = false;
		var i, len, j, lenj, arr;
		for (i = 0, len = this.inst.cellheight; i < len; ++i)
		{
			arr = [];
			for (j = 0, lenj = this.inst.cellwidth; j < lenj; ++j)
				arr.push(-1);
			this.tiles.push(arr);
		}
	};
	TileCell.prototype.clear = function ()
	{
		var i, len, j, lenj, arr;
		this.tiles.length = this.inst.cellheight;
		for (i = 0, len = this.tiles.length; i < len; ++i)
		{
			arr = this.tiles[i];
			if (!arr)
			{
				arr = [];
				this.tiles[i] = arr;
			}
			arr.length = this.inst.cellwidth;
			for (j = 0, lenj = arr.length; j < lenj; ++j)
				arr[j] = -1;
		}
	};
	TileCell.prototype.maybeBuildQuadMap = function ()
	{
		if (this.quadmap_valid)
			return;		// not changed
		var tilewidth = this.inst.tilewidth;
		var tileheight = this.inst.tileheight;
		if (tilewidth <= 0 || tileheight <= 0)
			return;
		var i, j, len, y, leny, x, lenx, arr, t, p, q;
		for (i = 0, len = this.quads.length; i < len; ++i)
			freeTileQuad(this.quads[i]);
		for (i = 0, len = this.collision_rects.length; i < len; ++i)
			freeCollRect(this.collision_rects[i]);
		this.quads.length = 0;
		this.collision_rects.length = 0;
		var extentwidth = Math.floor(this.inst.width / tilewidth);
		var extentheight = Math.floor(this.inst.height / tileheight);
		extentwidth -= this.left / tilewidth;
		extentheight -= this.top / tileheight;
		if (extentwidth > this.inst.cellwidth)
			extentwidth = this.inst.cellwidth;
		if (extentheight > this.inst.cellheight)
			extentheight = this.inst.cellheight;
		var seamless = this.inst.seamless;
		var cur_quad = null;
		for (y = 0, leny = extentheight; y < leny; ++y)
		{
			arr = this.tiles[y];
			for (x = 0, lenx = extentwidth; x < lenx; ++x)
			{
				t = arr[x];
				if (t === -1)
				{
					if (cur_quad)
					{
						this.quads.push(cur_quad);
						cur_quad = null;
					}
					continue;
				}
				if (seamless || !cur_quad || t !== cur_quad.id)
				{
					if (cur_quad)
						this.quads.push(cur_quad);
					cur_quad = allocTileQuad();
					cur_quad.id = t;
					cur_quad.tileid = (t & TILE_ID_MASK);
					cur_quad.horiz_flip = (t & TILE_FLIPPED_HORIZONTAL) !== 0;
					cur_quad.vert_flip = (t & TILE_FLIPPED_VERTICAL) !== 0;
					cur_quad.diag_flip = (t & TILE_FLIPPED_DIAGONAL) !== 0;
					cur_quad.any_flip = (cur_quad.horiz_flip || cur_quad.vert_flip || cur_quad.diag_flip);
					cur_quad.rc.left = x * tilewidth + this.left;
					cur_quad.rc.top = y * tileheight + this.top;
					cur_quad.rc.right = cur_quad.rc.left + tilewidth;
					cur_quad.rc.bottom = cur_quad.rc.top + tileheight;
				}
				else
				{
					cur_quad.rc.right += tilewidth;
				}
			}
			if (cur_quad)
			{
				this.quads.push(cur_quad);
				cur_quad = null;
			}
		}
		var cur_rect = null;
		var tileid, tilepoly;
		var cur_has_poly = false;
		var rc;
		for (y = 0, leny = extentheight; y < leny; ++y)
		{
			arr = this.tiles[y];
			for (x = 0, lenx = extentwidth; x < lenx; ++x)
			{
				t = arr[x];
				if (t === -1)
				{
					if (cur_rect)
					{
						this.collision_rects.push(cur_rect);
						cur_rect = null;
						cur_has_poly = false;
					}
					continue;
				}
				tileid = (t & TILE_ID_MASK);
				tilepoly = this.inst.type.getTilePoly(t);
				if (!cur_rect || tilepoly || cur_has_poly)
				{
					if (cur_rect)
					{
						this.collision_rects.push(cur_rect);
						cur_rect = null;
					}
;
					cur_rect = allocCollRect();
					cur_rect.id = t;
					cur_rect.poly = tilepoly ? tilepoly : null;
					rc = cur_rect.rc;
					rc.left = x * tilewidth + this.left;
					rc.top = y * tileheight + this.top;
					rc.right = rc.left + tilewidth;
					rc.bottom = rc.top + tileheight;
					cur_has_poly = !!tilepoly;
				}
				else
				{
					cur_rect.rc.right += tilewidth;
				}
			}
			if (cur_rect)
			{
				this.collision_rects.push(cur_rect);
				cur_rect = null;
				cur_has_poly = false;
			}
		}
		if (!seamless)
		{
			len = this.quads.length;
			for (i = 0; i < len; ++i)
			{
				q = this.quads[i];
				for (j = i + 1; j < len; ++j)
				{
					p = this.quads[j];
					if (p.rc.top < q.rc.bottom)
						continue;
					if (p.rc.top > q.rc.bottom)
						break;
					if (p.rc.right > q.rc.right || p.rc.left > q.rc.left)
						break;
					if (p.id === q.id && p.rc.left === q.rc.left && p.rc.right === q.rc.right)
					{
						freeTileQuad(this.quads[j]);
						this.quads.splice(j, 1);
						--len;
						q.rc.bottom += tileheight;
						--j;		// look at same j index again
					}
				}
			}
		}
		len = this.collision_rects.length;
		var prc, qrc;
		for (i = 0; i < len; ++i)
		{
			q = this.collision_rects[i];
			if (q.poly)
				continue;
			qrc = q.rc;
			for (j = i + 1; j < len; ++j)
			{
				p = this.collision_rects[j];
				prc = p.rc;
				if (prc.top < qrc.bottom)
					continue;
				if (prc.top > qrc.bottom)
					break;
				if (prc.right > qrc.right || prc.left > qrc.left)
					break;
				if (p.poly)
					continue;
				if (prc.left === qrc.left && prc.right === qrc.right)
				{
					freeCollRect(this.collision_rects[j]);
					this.collision_rects.splice(j, 1);
					--len;
					qrc.bottom += tileheight;
					--j;		// look at same j index again
				}
			}
		}
		this.quadmap_valid = true;
	};
	TileCell.prototype.setTileAt = function (x_, y_, t_)
	{
		if (this.tiles[y_][x_] !== t_)
		{
			this.tiles[y_][x_] = t_;
			this.quadmap_valid = false;
			this.inst.any_quadmap_changed = true;
			this.inst.physics_changed = true;
			this.inst.runtime.redraw = true;
		}
	};
	instanceProto.onCreate = function()
	{
;
		var i, len, p;
		this.visible = (this.properties[0] === 0);
		this.tilewidth = this.properties[1];
		this.tileheight = this.properties[2];
		this.tilexoffset = this.properties[3];
		this.tileyoffset = this.properties[4];
		this.tilexspacing = this.properties[5];
		this.tileyspacing = this.properties[6];
		this.seamless = (this.properties[7] !== 0);
		this.mapwidth = this.tilemap_width;
		this.mapheight = this.tilemap_height;
		this.lastwidth = this.width;
		this.lastheight = this.height;
		var tw = this.tilewidth;
		var th = this.tileheight;
		if (tw === 0)
			tw = 1;
		if (th === 0)
			th = 1;
		this.cellwidth = Math.ceil(this.runtime.original_width / tw);
		this.cellheight = Math.ceil(this.runtime.original_height / th);
		if (!this.type.tile_polys_cached)
		{
			this.type.tile_polys_cached = true;
			for (i = 0, len = this.type.tile_polys.length; i < len; ++i)
			{
				p = this.type.tile_polys[i];
				if (!p)
					continue;
				this.type.cacheTilePoly(i, tw, th, false, false, false);
				this.type.cacheTilePoly(i, tw, th, false, false, true);
				this.type.cacheTilePoly(i, tw, th, false, true, false);
				this.type.cacheTilePoly(i, tw, th, false, true, true);
				this.type.cacheTilePoly(i, tw, th, true, false, false);
				this.type.cacheTilePoly(i, tw, th, true, false, true);
				this.type.cacheTilePoly(i, tw, th, true, true, false);
				this.type.cacheTilePoly(i, tw, th, true, true, true);
			}
		}
		if (!this.recycled)
			this.tilecells = [];
		this.maybeResizeTilemap(true);
		this.setTilesFromRLECSV(this.tilemap_data);
		this.type.maybeCutTiles(this.tilewidth, this.tileheight, this.tilexoffset, this.tileyoffset, this.tilexspacing, this.tileyspacing, this.seamless);
		this.physics_changed = false;		// to indicate to physics behavior to recreate body
		this.any_quadmap_changed = true;
		this.maybeBuildAllQuadMap();
	};
	instanceProto.maybeBuildAllQuadMap = function ()
	{
		if (!this.any_quadmap_changed)
			return;		// no change
		var i, len, j, lenj, arr;
		for (i = 0, len = this.tilecells.length; i < len; ++i)
		{
			arr = this.tilecells[i];
			for (j = 0, lenj = arr.length; j < lenj; ++j)
			{
				arr[j].maybeBuildQuadMap();
			}
		}
		this.any_quadmap_changed = false;
	};
	instanceProto.setAllQuadMapChanged = function ()
	{
		var i, len, j, lenj, arr;
		for (i = 0, len = this.tilecells.length; i < len; ++i)
		{
			arr = this.tilecells[i];
			for (j = 0, lenj = arr.length; j < lenj; ++j)
			{
				arr[j].quadmap_valid = false;
			}
		}
		this.any_quadmap_changed = true;
	};
	function RunLengthDecode(str)
	{
		var ret = [];
		var parts = str.split(",");
		var i, len, p, x, n, t, part;
		for (i = 0, len = parts.length; i < len; ++i)
		{
			p = parts[i];
			x = p.indexOf("x");
			if (x > -1)
			{
				n = parseInt(p.substring(0, x), 10);
				part = p.substring(x + 1);
				t = parseInt(part, 10);
				if (part.indexOf("h") > -1)
					t = t | TILE_FLIPPED_HORIZONTAL;
				if (part.indexOf("v") > -1)
					t = t | TILE_FLIPPED_VERTICAL;
				if (part.indexOf("d") > -1)
					t = t | TILE_FLIPPED_DIAGONAL;
				for ( ; n > 0; --n)
					ret.push(t);
			}
			else
			{
				t = parseInt(p, 10);
				if (p.indexOf("h") > -1)
					t = t | TILE_FLIPPED_HORIZONTAL;
				if (p.indexOf("v") > -1)
					t = t | TILE_FLIPPED_VERTICAL;
				if (p.indexOf("d") > -1)
					t = t | TILE_FLIPPED_DIAGONAL;
				ret.push(t);
			}
		}
		return ret;
	};
	instanceProto.maybeResizeTilemap = function (force)
	{
		var curwidth = cr.floor(this.width / this.tilewidth);
		var curheight = cr.floor(this.height / this.tileheight);
		if (curwidth <= this.mapwidth && curheight <= this.mapheight && !force)
			return;
		var vcells, hcells;
		if (force)
		{
			vcells = Math.ceil(this.mapheight / this.cellheight);
			hcells = Math.ceil(this.mapwidth / this.cellwidth);
		}
		else
		{
			vcells = this.tilecells.length;
			hcells = Math.ceil(this.mapwidth / this.cellwidth);
			if (curheight > this.mapheight)
			{
				this.mapheight = curheight;
				vcells = Math.ceil(this.mapheight / this.cellheight);
			}
			if (curwidth > this.mapwidth)
			{
				this.mapwidth = curwidth;
				hcells = Math.ceil(this.mapwidth / this.cellwidth);
			}
			this.setAllQuadMapChanged();
			this.physics_changed = true;
			this.runtime.redraw = true;
		}
		var y, x, arr;
		for (y = 0; y < vcells; ++y)
		{
			arr = this.tilecells[y];
			if (!arr)
			{
				arr = [];
				for (x = 0; x < hcells; ++x)
					arr.push(allocTileCell(this, x, y));
				this.tilecells[y] = arr;
			}
			else
			{
				for (x = arr.length; x < hcells; ++x)
					arr.push(allocTileCell(this, x, y));
			}
		}
	};
	instanceProto.cellAt = function (tx, ty)
	{
		if (tx < 0 || ty < 0)
			return null;
		var cy = cr.floor(ty / this.cellheight);
		if (cy >= this.tilecells.length)
			return null;
		var row = this.tilecells[cy];
		var cx = cr.floor(tx / this.cellwidth);
		if (cx >= row.length)
			return null;
		return row[cx];
	};
	instanceProto.cellAtIndex = function (cx, cy)
	{
		if (cx < 0 || cy < 0 || cy >= this.tilecells.length)
			return null;
		var row = this.tilecells[cy];
		if (cx >= row.length)
			return null;
		return row[cx];
	};
	instanceProto.setTilesFromRLECSV = function (str)
	{
		var tilestream = RunLengthDecode(str);
		var next = 0;
		var y, x, arr, tile, cell;
		for (y = 0; y < this.mapheight; ++y)
		{
			for (x = 0; x < this.mapwidth; ++x)
			{
				tile = tilestream[next++];
				cell = this.cellAt(x, y);
				if (cell)
					cell.setTileAt(x % this.cellwidth, y % this.cellheight, tile);
			}
		}
	};
	instanceProto.getTilesAsRLECSV = function ()
	{
		var ret = "";
		if (this.mapwidth <= 0 || this.mapheight <= 0)
			return ret;
		var run_count = 1;
		var run_number = this.getTileAt(0, 0);
		var y, leny = this.mapheight, x, lenx = this.mapwidth, t;
		var tileid, horiz_flip, vert_flip, diag_flip;
		for (y = 0; y < leny; ++y)
		{
			for (x = (y === 0 ? 1 : 0) ; x < lenx; ++x)
			{
				t = this.getTileAt(x, y);
				if (t === run_number)
					++run_count;
				else
				{
					if (run_number === -1)
					{
						tileid = -1;
						horiz_flip = false;
						vert_flip = false;
						diag_flip = false;
					}
					else
					{
						tileid = (run_number & TILE_ID_MASK);
						horiz_flip = (run_number & TILE_FLIPPED_HORIZONTAL) !== 0;
						vert_flip = (run_number & TILE_FLIPPED_VERTICAL) !== 0;
						diag_flip = (run_number & TILE_FLIPPED_DIAGONAL) !== 0;
					}
					if (run_count === 1)
						ret += "" + tileid;
					else
						ret += "" + run_count + "x" + tileid;
					if (horiz_flip)
						ret += "h";
					if (vert_flip)
						ret += "v";
					if (diag_flip)
						ret += "d";
					ret += ",";
					run_count = 1;
					run_number = t;
				}
			}
		}
		if (run_number === -1)
		{
			tileid = -1;
			horiz_flip = false;
			vert_flip = false;
			diag_flip = false;
		}
		else
		{
			tileid = (run_number & TILE_ID_MASK);
			horiz_flip = (run_number & TILE_FLIPPED_HORIZONTAL) !== 0;
			vert_flip = (run_number & TILE_FLIPPED_VERTICAL) !== 0;
			diag_flip = (run_number & TILE_FLIPPED_DIAGONAL) !== 0;
		}
		if (run_count === 1)
			ret += "" + tileid;
		else
			ret += "" + run_count + "x" + tileid;
		if (horiz_flip)
			ret += "h";
		if (vert_flip)
			ret += "v";
		if (diag_flip)
			ret += "d";
		return ret;
	};
	instanceProto.getTileAt = function (x_, y_)
	{
		x_ = Math.floor(x_);
		y_ = Math.floor(y_);
		if (x_ < 0 || y_ < 0 || x_ >= this.mapwidth || y_ >= this.mapheight)
			return -1;
		var cell = this.cellAt(x_, y_);
		if (!cell)
			return -1;
		return cell.tiles[y_ % this.cellheight][x_ % this.cellwidth];
	};
	instanceProto.setTileAt = function (x_, y_, t_)
	{
		x_ = Math.floor(x_);
		y_ = Math.floor(y_);
		if (x_ < 0 || y_ < 0 || x_ >= this.mapwidth || y_ >= this.mapheight)
			return -1;
		var cell = this.cellAt(x_, y_);
		if (!cell)
			return -1;
		cell.setTileAt(x_ % this.cellwidth, y_ % this.cellheight, t_);
	};
	instanceProto.worldToCellX = function (x)
	{
		return Math.floor((x - this.x) / (this.cellwidth * this.tilewidth));
	};
	instanceProto.worldToCellY = function (y)
	{
		return Math.floor((y - this.y) / (this.cellheight * this.tileheight));
	};
	instanceProto.getCollisionRectCandidates = function (bbox, candidates)
	{
		var firstCellX = this.worldToCellX(bbox.left);
		var firstCellY = this.worldToCellY(bbox.top);
		var lastCellX = this.worldToCellX(bbox.right);
		var lastCellY = this.worldToCellY(bbox.bottom);
		var cx, cy, cell;
		for (cx = firstCellX; cx <= lastCellX; ++cx)
		{
			for (cy = firstCellY; cy <= lastCellY; ++cy)
			{
				cell = this.cellAtIndex(cx, cy);
				if (!cell)
					continue;
				cell.maybeBuildQuadMap();
				cr.appendArray(candidates, cell.collision_rects);
			}
		}
	};
	instanceProto.getAllCollisionRects = function (candidates)
	{
		var i, len, j, lenj, row, cell;
		for (i = 0, len = this.tilecells.length; i < len; ++i)
		{
			row = this.tilecells[i];
			for (j = 0, lenj = row.length; j < lenj; ++j)
			{
				cell = row[j];
				cell.maybeBuildQuadMap();
				cr.appendArray(candidates, cell.collision_rects);
			}
		}
	};
	instanceProto.onDestroy = function ()
	{
		var i, len, j, lenj, arr;
		for (i = 0, len = this.tilecells.length; i < len; ++i)
		{
			arr = this.tilecells[i];
			for (j = 0, lenj = arr.length; j < lenj; ++j)
			{
				freeTileCell(arr[j]);
			}
			arr.length = 0;
		}
		this.tilecells.length = 0;
	};
	instanceProto.saveToJSON = function ()
	{
		return {
			"w": this.mapwidth,
			"h": this.mapheight,
			"d": this.getTilesAsRLECSV()
		};
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.mapwidth = o["w"];
		this.mapheight = o["h"];
		this.setTilesFromRLECSV(o["d"]);
		this.physics_changed = true;
		this.setAllQuadMapChanged();
	};
	instanceProto.draw = function(ctx)
	{
		if (this.tilewidth <= 0 || this.tileheight <= 0)
			return;
		this.type.maybeCutTiles(this.tilewidth, this.tileheight, this.tilexoffset, this.tileyoffset, this.tilexspacing, this.tileyspacing, this.seamless);
		if (this.width !== this.lastwidth || this.height !== this.lastheight)
		{
			this.physics_changed = true;
			this.setAllQuadMapChanged();
			this.maybeBuildAllQuadMap();
			this.lastwidth = this.width;
			this.lastheight = this.height;
		}
		ctx.globalAlpha = this.opacity;
		var layer = this.layer;
		var viewLeft = layer.viewLeft;
		var viewTop = layer.viewTop;
		var viewRight = layer.viewRight;
		var viewBottom = layer.viewBottom;
		var myx = this.x;
		var myy = this.y;
		var seamless = this.seamless;
		var qrc;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var cellWidthPx = this.cellwidth * this.tilewidth;
		var cellHeightPx = this.cellheight * this.tileheight;
		var firstCellX = Math.floor((viewLeft - myx) / cellWidthPx);
		var lastCellX = Math.floor((viewRight - myx) / cellWidthPx);
		var firstCellY = Math.floor((viewTop - myy) / cellHeightPx);
		var lastCellY = Math.floor((viewBottom - myy) / cellHeightPx);
		var offx = myx % this.tilewidth;
		var offy = myy % this.tileheight;
		if (this.seamless)
		{
			offx = 0;
			offy = 0;
		}
		if (offx !== 0 || offy !== 0)
		{
			ctx.save();
			ctx.translate(offx, offy);
			myx -= offx;
			myy -= offy;
			viewLeft -= offx;
			viewTop -= offy;
			viewRight -= offx;
			viewBottom -= offy;
		}
		var cx, cy, cell, i, len, q, qleft, qtop, qright, qbottom, img;
		for (cx = firstCellX; cx <= lastCellX; ++cx)
		{
			for (cy = firstCellY; cy <= lastCellY; ++cy)
			{
				cell = this.cellAtIndex(cx, cy);
				if (!cell)
					continue;
				cell.maybeBuildQuadMap();
				for (i = 0, len = cell.quads.length; i < len; ++i)
				{
					q = cell.quads[i];
					if (q.id === -1)
						continue;
					qrc = q.rc;
					qleft = qrc.left + myx;
					qtop = qrc.top + myy;
					qright = qrc.right + myx;
					qbottom = qrc.bottom + myy;
					if (qleft > viewRight || qright < viewLeft || qtop > viewBottom || qbottom < viewTop)
						continue;
					img = this.type.GetFlippedTileImage(q.tileid, q.horiz_flip, q.vert_flip, q.diag_flip, this.seamless);
					if (seamless)
					{
						ctx.drawImage(img, qleft, qtop);
					}
					else
					{
						ctx.fillStyle = this.type.GetFlippedTileImage(q.tileid, q.horiz_flip, q.vert_flip, q.diag_flip, this.seamless);
						ctx.fillRect(qleft, qtop, qright - qleft, qbottom - qtop);
					}
				}
				/*
				for (i = 0, len = cell.collision_rects.length; i < len; ++i)
				{
					qrc = cell.collision_rects[i].rc;
					qleft = qrc.left + myx;
					qtop = qrc.top + myy;
					qright = qrc.right + myx;
					qbottom = qrc.bottom + myy;
					ctx.strokeRect(qleft, qtop, qright - qleft, qbottom - qtop);
				}
				*/
			}
		}
		if (offx !== 0 || offy !== 0)
			ctx.restore();
	};
	var tmp_rect = new cr.rect(0, 0, 1, 1);
	instanceProto.drawGL = function (glw)
	{
		if (this.tilewidth <= 0 || this.tileheight <= 0)
			return;
		this.type.maybeCutTiles(this.tilewidth, this.tileheight, this.tilexoffset, this.tileyoffset, this.tilexspacing, this.tileyspacing, this.seamless);
		if (this.width !== this.lastwidth || this.height !== this.lastheight)
		{
			this.physics_changed = true;
			this.setAllQuadMapChanged();
			this.maybeBuildAllQuadMap();
			this.lastwidth = this.width;
			this.lastheight = this.height;
		}
		glw.setOpacity(this.opacity);
		var cut_tiles = this.type.cut_tiles;
		var layer = this.layer;
		var viewLeft = layer.viewLeft;
		var viewTop = layer.viewTop;
		var viewRight = layer.viewRight;
		var viewBottom = layer.viewBottom;
		var myx = this.x;
		var myy = this.y;
		var qrc;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var cellWidthPx = this.cellwidth * this.tilewidth;
		var cellHeightPx = this.cellheight * this.tileheight;
		var firstCellX = Math.floor((viewLeft - myx) / cellWidthPx);
		var lastCellX = Math.floor((viewRight - myx) / cellWidthPx);
		var firstCellY = Math.floor((viewTop - myy) / cellHeightPx);
		var lastCellY = Math.floor((viewBottom - myy) / cellHeightPx);
		var i, len, q, qleft, qtop, qright, qbottom;
		var qtlx, qtly, qtrx, qtry, qbrx, qbry, qblx, qbly, temp;
		var cx, cy, cell;
		for (cx = firstCellX; cx <= lastCellX; ++cx)
		{
			for (cy = firstCellY; cy <= lastCellY; ++cy)
			{
				cell = this.cellAtIndex(cx, cy);
				if (!cell)
					continue;
				cell.maybeBuildQuadMap();
				for (i = 0, len = cell.quads.length; i < len; ++i)
				{
					q = cell.quads[i];
					if (q.id === -1)
						continue;
					qrc = q.rc;
					qleft = qrc.left + myx;
					qtop = qrc.top + myy;
					qright = qrc.right + myx;
					qbottom = qrc.bottom + myy;
					if (qleft > viewRight || qright < viewLeft || qtop > viewBottom || qbottom < viewTop)
						continue;
					glw.setTexture(cut_tiles[q.tileid]);
					tmp_rect.right = (qright - qleft) / this.tilewidth;
					tmp_rect.bottom = (qbottom - qtop) / this.tileheight;
					if (q.any_flip)
					{
						if (q.diag_flip)
						{
							temp = tmp_rect.right;
							tmp_rect.right = tmp_rect.bottom;
							tmp_rect.bottom = temp;
						}
						qtlx = 0;
						qtly = 0;
						qtrx = tmp_rect.right;
						qtry = 0;
						qbrx = tmp_rect.right;
						qbry = tmp_rect.bottom;
						qblx = 0;
						qbly = tmp_rect.bottom;
						if (q.diag_flip)
						{
							temp = qblx;		qblx = qtrx;		qtrx = temp;
							temp = qbly;		qbly = qtry;		qtry = temp;
						}
						if (q.horiz_flip)
						{
							temp = qtlx;		qtlx = qtrx;		qtrx = temp;
							temp = qtly;		qtly = qtry;		qtry = temp;
							temp = qblx;		qblx = qbrx;		qbrx = temp;
							temp = qbly;		qbly = qbry;		qbry = temp;
						}
						if (q.vert_flip)
						{
							temp = qtlx;		qtlx = qblx;		qblx = temp;
							temp = qtly;		qtly = qbly;		qbly = temp;
							temp = qtrx;		qtrx = qbrx;		qbrx = temp;
							temp = qtry;		qtry = qbry;		qbry = temp;
						}
						glw.quadTexUV(qleft, qtop, qright, qtop, qright, qbottom, qleft, qbottom, qtlx, qtly, qtrx, qtry, qbrx, qbry, qblx, qbly);
					}
					else
					{
						glw.quadTex(qleft, qtop, qright, qtop, qright, qbottom, qleft, qbottom, tmp_rect);
					}
				}
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.CompareTileAt = function (tx, ty, cmp, t)
	{
		var tile = this.getTileAt(tx, ty);
		if (tile !== -1)
			tile = (tile & TILE_ID_MASK);
		return cr.do_cmp(tile, cmp, t);
	};
	function StateComboToFlags(state)
	{
		switch (state) {
		case 0:		// normal
			return 0;
		case 1:		// flipped horizontal
			return TILE_FLIPPED_HORIZONTAL;
		case 2:		// flipped vertical
			return TILE_FLIPPED_VERTICAL;
		case 3:		// rotated 90
			return TILE_FLIPPED_HORIZONTAL | TILE_FLIPPED_DIAGONAL;
		case 4:		// rotated 180
			return TILE_FLIPPED_HORIZONTAL | TILE_FLIPPED_VERTICAL;
		case 5:		// rotated 270
			return TILE_FLIPPED_VERTICAL | TILE_FLIPPED_DIAGONAL;
		case 6:		// rotated 90, flipped vertical
			return TILE_FLIPPED_HORIZONTAL | TILE_FLIPPED_VERTICAL | TILE_FLIPPED_DIAGONAL;
		case 7:		// rotated 270, flipped vertical
			return TILE_FLIPPED_DIAGONAL;
		default:
			return 0;
		}
	};
	Cnds.prototype.CompareTileStateAt = function (tx, ty, state)
	{
		var tile = this.getTileAt(tx, ty);
		var flags = 0;
		if (tile !== -1)
			flags = (tile & TILE_FLAGS_MASK);
		return flags === StateComboToFlags(state);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.EraseTile = function (tx, ty)
	{
		this.maybeResizeTilemap();
		this.setTileAt(tx, ty, -1);
	};
	Acts.prototype.SetTile = function (tx, ty, t, state)
	{
		this.maybeResizeTilemap();
		this.setTileAt(tx, ty, (t & TILE_ID_MASK) | StateComboToFlags(state));
	};
	Acts.prototype.SetTileState = function (tx, ty, state)
	{
		var t = this.getTileAt(tx, ty);
		if (t !== -1)
		{
			this.maybeResizeTilemap();
			this.setTileAt(tx, ty, (t & TILE_ID_MASK) | StateComboToFlags(state));
		}
	};
	Acts.prototype.EraseTileRange = function (tx, ty, tw, th)
	{
		var fromx = Math.floor(cr.max(tx, 0));
		var fromy = Math.floor(cr.max(ty, 0));
		var tox = Math.floor(cr.min(tx + tw, this.mapwidth));
		var toy = Math.floor(cr.min(ty + th, this.mapheight));
		var x, y;
		for (y = fromy; y < toy; ++y)
		{
			for (x = fromx; x < tox; ++x)
			{
				this.setTileAt(x, y, -1);
			}
		}
	};
	Acts.prototype.SetTileRange = function (tx, ty, tw, th, t, state)
	{
		this.maybeResizeTilemap();
		var fromx = Math.floor(cr.max(tx, 0));
		var fromy = Math.floor(cr.max(ty, 0));
		var tox = Math.floor(cr.min(tx + tw, this.mapwidth));
		var toy = Math.floor(cr.min(ty + th, this.mapheight));
		var settile = (t & TILE_ID_MASK) | StateComboToFlags(state);
		var x, y;
		for (y = fromy; y < toy; ++y)
		{
			for (x = fromx; x < tox; ++x)
			{
				this.setTileAt(x, y, settile);
			}
		}
	};
	Acts.prototype.SetTileStateRange = function (tx, ty, tw, th, state)
	{
		this.maybeResizeTilemap();
		var fromx = Math.floor(cr.max(tx, 0));
		var fromy = Math.floor(cr.max(ty, 0));
		var tox = Math.floor(cr.min(tx + tw, this.mapwidth));
		var toy = Math.floor(cr.min(ty + th, this.mapheight));
		var setstate = StateComboToFlags(state);
		var x, y, t;
		for (y = fromy; y < toy; ++y)
		{
			for (x = fromx; x < tox; ++x)
			{
				t = this.getTileAt(x, y);
				if (t !== -1)
					this.setTileAt(x, y, (t & TILE_ID_MASK) | setstate);
			}
		}
	};
	Acts.prototype.LoadFromJSON = function (str)
	{
		var o;
		try {
			o = JSON.parse(str);
		}
		catch (e) {
			return;
		}
		if (!o["c2tilemap"])
			return;		// not a known tilemap data format
		this.mapwidth = o["width"];
		this.mapheight = o["height"];
		this.setTilesFromRLECSV(o["data"]);
		this.setAllQuadMapChanged();
		this.physics_changed = true;
	};
	Acts.prototype.JSONDownload = function (filename)
	{
		var a = document.createElement("a");
		var o = {
			"c2tilemap": true,
			"width": this.mapwidth,
			"height": this.mapheight,
			"data": this.getTilesAsRLECSV()
		};
		if (typeof a.download === "undefined")
		{
			var str = 'data:text/html,' + encodeURIComponent("<p><a download='data.json' href=\"data:application/json,"
				+ encodeURIComponent(JSON.stringify(o))
				+ "\">Download link</a></p>");
			window.open(str);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename;
			a.href = "data:application/json," + encodeURIComponent(JSON.stringify(o));
			a.download = filename;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.TileAt = function (ret, tx, ty)
	{
		var tile = this.getTileAt(tx, ty);
		ret.set_int(tile === -1 ? -1 : (tile & TILE_ID_MASK));
	};
	Exps.prototype.PositionToTileX = function (ret, x_)
	{
		ret.set_float(Math.floor((x_ - this.x) / this.tilewidth));
	};
	Exps.prototype.PositionToTileY = function (ret, y_)
	{
		ret.set_float(Math.floor((y_ - this.y) / this.tileheight));
	};
	Exps.prototype.TileToPositionX = function (ret, x_)
	{
		ret.set_float((x_ * this.tilewidth) + this.x + (this.tilewidth / 2));
	};
	Exps.prototype.TileToPositionY = function (ret, y_)
	{
		ret.set_float((y_ * this.tileheight) + this.y + (this.tileheight / 2));
	};
	Exps.prototype.SnapX = function (ret, x_)
	{
		ret.set_float((Math.floor((x_ - this.x) / this.tilewidth) * this.tilewidth) + this.x + (this.tilewidth / 2));
	};
	Exps.prototype.SnapY = function (ret, y_)
	{
		ret.set_float((Math.floor((y_ - this.y) / this.tileheight) * this.tileheight) + this.y + (this.tileheight / 2));
	};
	Exps.prototype.TilesJSON = function (ret)
	{
		ret.set_string(JSON.stringify({
			"c2tilemap": true,
			"width": this.mapwidth,
			"height": this.mapheight,
			"data": this.getTilesAsRLECSV()
		}));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Touch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Touch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var dummyoffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (window.navigator["pointerEnabled"])
		{
			elem.addEventListener("pointerdown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("pointermove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("pointerup",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("pointercancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				this.runtime.canvas.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"] || 0;
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"] || 0;
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"] || 0;
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"] || 0;
					self.acc_y = eventData["acceleration"]["y"] || 0;
					self.acc_z = eventData["acceleration"]["z"] || 0;
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
		}
		if (this.runtime.isAppMobi && !this.runtime.isDirectCanvas)
		{
			AppMobi["accelerometer"]["watchAcceleration"](AppMobiGetAcceleration, { "frequency": 40, "adjustForRotation": true });
		}
		if (this.runtime.isPhoneGap && navigator["accelerometer"] && navigator["accelerometer"]["watchAcceleration"])
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
	};
	instanceProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		if (i >= 0)
		{
			var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.lasttime = t.time;
			t.lastx = t.x;
			t.lasty = t.y;
			t.time = nowtime;
			t.x = info.pageX - offset.left;
			t.y = info.pageY - offset.top;
		}
	};
	instanceProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push({ time: nowtime,
							x: touchx,
							y: touchy,
							lasttime: nowtime,
							lastx: touchx,
							lasty: touchy,
							"id": info["pointerId"],
							startindex: this.trigger_index
						});
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onPointerEnd = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
		this.runtime.isInUserInputEvent = false;
		if (i >= 0)
		{
			this.touches.splice(i, 1);
		}
	};
	instanceProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				u.lasttime = u.time;
				u.lastx = u.x;
				u.lasty = u.y;
				u.time = nowtime;
				u.x = t.pageX - offset.left;
				u.y = t.pageY - offset.top;
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var nowtime = cr.performance_now();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push({ time: nowtime,
								x: touchx,
								y: touchy,
								lasttime: nowtime,
								lastx: touchx,
								lasty: touchy,
								"id": t["identifier"],
								startindex: this.trigger_index
							});
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchEnd = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
				this.touches.splice(j, 1);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isAppMobi && this.orient_alpha === 0 && appmobi_accz !== 0)
			return appmobi_accz * 90;
		else if (this.runtime.isPhoneGap  && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isAppMobi && this.orient_beta === 0 && appmobi_accy !== 0)
			return appmobi_accy * -90;
		else if (this.runtime.isPhoneGap  && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * -90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isAppMobi && this.orient_gamma === 0 && appmobi_accx !== 0)
			return appmobi_accx * 90;
		else if (this.runtime.isPhoneGap  && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
	instanceProto.onMouseDown = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
		this.mouseDown = true;
	};
	instanceProto.onMouseMove = function(info)
	{
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
		this.mouseDown = false;
	};
	instanceProto.tick2 = function()
	{
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.touches.length;
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.IsTouchingObject = function (type)
	{
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var touching = [];
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			sol.instances = touching;
			type.applySolToContainer();
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	pluginProto.cnds = new Cnds();
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxX = layer.parallaxX;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxX = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxX = oldParallaxX;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxY = layer.parallaxY;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxY = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxY = oldParallaxY;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.behaviors.Bullet = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Bullet.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		var speed = this.properties[0];
		this.acc = this.properties[1];
		this.g = this.properties[2];
		this.bounceOffSolid = (this.properties[3] !== 0);
		this.setAngle = (this.properties[4] !== 0);
		this.dx = Math.cos(this.inst.angle) * speed;
		this.dy = Math.sin(this.inst.angle) * speed;
		this.lastx = this.inst.x;
		this.lasty = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.travelled = 0;
		this.enabled = (this.properties[5] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"acc": this.acc,
			"g": this.g,
			"dx": this.dx,
			"dy": this.dy,
			"lx": this.lastx,
			"ly": this.lasty,
			"lka": this.lastKnownAngle,
			"t": this.travelled,
			"e": this.enabled
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.acc = o["acc"];
		this.g = o["g"];
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.lastx = o["lx"];
		this.lasty = o["ly"];
		this.lastKnownAngle = o["lka"];
		this.travelled = o["t"];
		this.enabled = o["e"];
	};
	behinstProto.tick = function ()
	{
		if (!this.enabled)
			return;
		var dt = this.runtime.getDt(this.inst);
		var s, a;
		var bounceSolid, bounceAngle;
		if (this.inst.angle !== this.lastKnownAngle)
		{
			if (this.setAngle)
			{
				s = cr.distanceTo(0, 0, this.dx, this.dy);
				this.dx = Math.cos(this.inst.angle) * s;
				this.dy = Math.sin(this.inst.angle) * s;
			}
			this.lastKnownAngle = this.inst.angle;
		}
		if (this.acc !== 0)
		{
			s = cr.distanceTo(0, 0, this.dx, this.dy);
			if (this.dx === 0 && this.dy === 0)
				a = this.inst.angle;
			else
				a = cr.angleTo(0, 0, this.dx, this.dy);
			s += this.acc * dt;
			if (s < 0)
				s = 0;
			this.dx = Math.cos(a) * s;
			this.dy = Math.sin(a) * s;
		}
		if (this.g !== 0)
			this.dy += this.g * dt;
		this.lastx = this.inst.x;
		this.lasty = this.inst.y;
		if (this.dx !== 0 || this.dy !== 0)
		{
			this.inst.x += this.dx * dt;
			this.inst.y += this.dy * dt;
			this.travelled += cr.distanceTo(0, 0, this.dx * dt, this.dy * dt)
			if (this.setAngle)
			{
				this.inst.angle = cr.angleTo(0, 0, this.dx, this.dy);
				this.inst.set_bbox_changed();
				this.lastKnownAngle = this.inst.angle;
			}
			this.inst.set_bbox_changed();
			if (this.bounceOffSolid)
			{
				bounceSolid = this.runtime.testOverlapSolid(this.inst);
				if (bounceSolid)
				{
					this.runtime.registerCollision(this.inst, bounceSolid);
					s = cr.distanceTo(0, 0, this.dx, this.dy);
					bounceAngle = this.runtime.calculateSolidBounceAngle(this.inst, this.lastx, this.lasty);
					this.dx = Math.cos(bounceAngle) * s;
					this.dy = Math.sin(bounceAngle) * s;
					this.inst.x += this.dx * dt;			// move out for one tick since the object can't have spent a tick in the solid
					this.inst.y += this.dy * dt;
					this.inst.set_bbox_changed();
					if (this.setAngle)
					{
						this.inst.angle = bounceAngle;
						this.lastKnownAngle = bounceAngle;
						this.inst.set_bbox_changed();
					}
					if (!this.runtime.pushOutSolid(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30)))
						this.runtime.pushOutSolidNearest(this.inst, 100);
				}
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		return cr.do_cmp(cr.distanceTo(0, 0, this.dx, this.dy), cmp, s);
	};
	Cnds.prototype.CompareTravelled = function (cmp, d)
	{
		return cr.do_cmp(this.travelled, cmp, d);
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpeed = function (s)
	{
		var a = cr.angleTo(0, 0, this.dx, this.dy);
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.SetAcceleration = function (a)
	{
		this.acc = a;
	};
	Acts.prototype.SetGravity = function (g)
	{
		this.g = g;
	};
	Acts.prototype.SetAngleOfMotion = function (a)
	{
		a = cr.to_radians(a);
		var s = cr.distanceTo(0, 0, this.dx, this.dy)
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.Bounce = function (objtype)
	{
		if (!objtype)
			return;
		var otherinst = objtype.getFirstPicked(this.inst);
		if (!otherinst)
			return;
		var dt = this.runtime.getDt(this.inst);
		var s = cr.distanceTo(0, 0, this.dx, this.dy);
		var bounceAngle = this.runtime.calculateSolidBounceAngle(this.inst, this.lastx, this.lasty, otherinst);
		this.dx = Math.cos(bounceAngle) * s;
		this.dy = Math.sin(bounceAngle) * s;
		this.inst.x += this.dx * dt;			// move out for one tick since the object can't have spent a tick in the solid
		this.inst.y += this.dy * dt;
		this.inst.set_bbox_changed();
		if (this.setAngle)
		{
			this.inst.angle = bounceAngle;
			this.lastKnownAngle = bounceAngle;
			this.inst.set_bbox_changed();
		}
		if (this.bounceOffSolid)
		{
			if (!this.runtime.pushOutSolid(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30)))
				this.runtime.pushOutSolidNearest(this.inst, 100);
		}
		else
		{
			this.runtime.pushOut(this.inst, this.dx / s, this.dy / s, Math.max(s * 2.5 * dt, 30), otherinst)
		}
	};
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		var s = cr.distanceTo(0, 0, this.dx, this.dy);
		s = cr.round6dp(s);
		ret.set_float(s);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.AngleOfMotion = function (ret)
	{
		ret.set_float(cr.to_degrees(cr.angleTo(0, 0, this.dx, this.dy)));
	};
	Exps.prototype.DistanceTravelled = function (ret)
	{
		ret.set_float(this.travelled);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Fade = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Fade.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		var active_at_start = this.properties[0] === 1;
		this.fadeInTime = this.properties[1];
		this.waitTime = this.properties[2];
		this.fadeOutTime = this.properties[3];
		this.destroy = this.properties[4];			// 0 = no, 1 = after fade out
		this.stage = active_at_start ? 0 : 3;		// 0 = fade in, 1 = wait, 2 = fade out, 3 = done
		if (this.recycled)
			this.stageTime.reset();
		else
			this.stageTime = new cr.KahanAdder();
		this.maxOpacity = (this.inst.opacity ? this.inst.opacity : 1.0);
		if (active_at_start)
		{
			if (this.fadeInTime === 0)
			{
				this.stage = 1;
				if (this.waitTime === 0)
					this.stage = 2;
			}
			else
			{
				this.inst.opacity = 0;
				this.runtime.redraw = true;
			}
		}
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"fit": this.fadeInTime,
			"wt": this.waitTime,
			"fot": this.fadeOutTime,
			"s": this.stage,
			"st": this.stageTime.sum,
			"mo": this.maxOpacity,
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.fadeInTime = o["fit"];
		this.waitTime = o["wt"];
		this.fadeOutTime = o["fot"];
		this.stage = o["s"];
		this.stageTime.reset();
		this.stageTime.sum = o["st"];
		this.maxOpacity = o["mo"];
	};
	behinstProto.tick = function ()
	{
		this.stageTime.add(this.runtime.getDt(this.inst));
		if (this.stage === 0)
		{
			this.inst.opacity = (this.stageTime.sum / this.fadeInTime) * this.maxOpacity;
			this.runtime.redraw = true;
			if (this.inst.opacity >= this.maxOpacity)
			{
				this.inst.opacity = this.maxOpacity;
				this.stage = 1;	// wait stage
				this.stageTime.reset();
			}
		}
		if (this.stage === 1)
		{
			if (this.stageTime.sum >= this.waitTime)
			{
				this.stage = 2;	// fade out stage
				this.stageTime.reset();
			}
		}
		if (this.stage === 2)
		{
			if (this.fadeOutTime !== 0)
			{
				this.inst.opacity = this.maxOpacity - ((this.stageTime.sum / this.fadeOutTime) * this.maxOpacity);
				this.runtime.redraw = true;
				if (this.inst.opacity < 0)
				{
					this.inst.opacity = 0;
					this.stage = 3;	// done
					this.stageTime.reset();
					this.runtime.trigger(cr.behaviors.Fade.prototype.cnds.OnFadeOutEnd, this.inst);
					if (this.destroy === 1)
						this.runtime.DestroyInstance(this.inst);
				}
			}
		}
	};
	behinstProto.doStart = function ()
	{
		this.stage = 0;
		this.stageTime.reset();
		if (this.fadeInTime === 0)
		{
			this.stage = 1;
			if (this.waitTime === 0)
				this.stage = 2;
		}
		else
		{
			this.inst.opacity = 0;
			this.runtime.redraw = true;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnFadeOutEnd = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.StartFade = function ()
	{
		if (this.stage === 3)
			this.doStart();
	};
	Acts.prototype.RestartFade = function ()
	{
		this.doStart();
	};
	behaviorProto.acts = new Acts();
}());
;
;
cr.behaviors.Flash = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Flash.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.ontime = 0;
		this.offtime = 0;
		this.stage = 0;			// 0 = on, 1 = off
		this.stagetimeleft = 0;
		this.timeleft = 0;
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ontime": this.ontime,
			"offtime": this.offtime,
			"stage": this.stage,
			"stagetimeleft": this.stagetimeleft,
			"timeleft": this.timeleft
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ontime = o["ontime"];
		this.offtime = o["offtime"];
		this.stage = o["stage"];
		this.stagetimeleft = o["stagetimeleft"];
		this.timeleft = o["timeleft"];
	};
	behinstProto.tick = function ()
	{
		if (this.timeleft <= 0)
			return;		// not flashing
		var dt = this.runtime.getDt(this.inst);
		this.timeleft -= dt;
		if (this.timeleft <= 0)
		{
			this.timeleft = 0;
			this.inst.visible = true;
			this.runtime.redraw = true;
			this.runtime.trigger(cr.behaviors.Flash.prototype.cnds.OnFlashEnded, this.inst);
			return;
		}
		this.stagetimeleft -= dt;
		if (this.stagetimeleft <= 0)
		{
			if (this.stage === 0)
			{
				this.inst.visible = false;
				this.stage = 1;
				this.stagetimeleft += this.offtime;
			}
			else
			{
				this.inst.visible = true;
				this.stage = 0;
				this.stagetimeleft += this.ontime;
			}
			this.runtime.redraw = true;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsFlashing = function ()
	{
		return this.timeleft > 0;
	};
	Cnds.prototype.OnFlashEnded = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Flash = function (on_, off_, dur_)
	{
		this.ontime = on_;
		this.offtime = off_;
		this.stage = 1;		// always start off
		this.stagetimeleft = off_;
		this.timeleft = dur_;
		this.inst.visible = false;
		this.runtime.redraw = true;
	};
	Acts.prototype.StopFlashing = function ()
	{
		this.timeleft = 0;
		this.inst.visible = true;
		this.runtime.redraw = true;
		return;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
var Box2D = {};
Box2D.Dynamics         = {};
Box2D.Dynamics.Joints  = {};
Box2D.Common           = {};
Box2D.Common.Math      = {};
Box2D.Collision        = {};
Box2D.Collision.Shapes = {};
function c2inherit(derived, base)
{
	for (var i in base.prototype)
	{
		if (base.prototype.hasOwnProperty(i))
			derived.prototype[i] = base.prototype[i];
	}
};
if (navigator["isCocoonJS"] && typeof window["cr_cjs_accelerated_physics"] !== "undefined")
{
	cr.logexport("Using CocoonJS native physics");
	if ( !window.ext || typeof window.ext.IDTK_SRV_BOX2D === 'undefined' ){
		console.log("The CocoonJS binding for Box2D has been ignored because ext.IDTK_SRV_BOX2D is not available");
	}else
	{
	(function (){
		var B2Vec2 = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			this.x = x_;
			this.y = y_;
		};
		Box2D.Common.Math.b2Vec2 = B2Vec2;
		B2Vec2._freeCache = [];
		B2Vec2.Get = function(x, y) {
			if (Box2D.Common.Math.b2Vec2._freeCache.length > 0) {
				var vec = Box2D.Common.Math.b2Vec2._freeCache.pop();
				vec.Set(x, y);
				return vec;
			}
			return new Box2D.Common.Math.b2Vec2(x, y);
		};
		B2Vec2.Free = function(vec) {
			if (Box2D.Common.Math.b2Vec2._freeCache.length < 10000)
				Box2D.Common.Math.b2Vec2._freeCache.push(vec);
		}
		B2Vec2.prototype.SetZero = function () {
			this.x = 0.0;
			this.y = 0.0;
		};
		B2Vec2.prototype.Set = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			this.x = x_;
			this.y = y_;
		};
		B2Vec2.prototype.SetV = function (v) {
			this.x = v.x;
			this.y = v.y;
		};
		B2Vec2.Make = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			return B2Vec2.Get(x_, y_);
		};
		B2Vec2.prototype.Copy = function () {
			return B2Vec2.Get(this.x, this.y);
		};
		B2Vec2.prototype.Add = function (v) {
			this.x += v.x;
			this.y += v.y;
		};
		B2Vec2.prototype.Subtract = function (v) {
			this.x -= v.x;
			this.y -= v.y;
		};
		B2Vec2.prototype.Multiply = function (a) {
			if (a === undefined){
				a = 0;
			}
			this.x *= a;
			this.y *= a;
		};
		B2Vec2.prototype.Length = function () {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		};
		B2Vec2.prototype.LengthSquared = function () {
			return (this.x * this.x + this.y * this.y);
		};
		B2Vec2.prototype.Normalize = function () {
			var length = Math.sqrt(this.x * this.x + this.y * this.y);
			if (length < Number.MIN_VALUE) {
				return 0.0;
			}
			var invLength = 1.0 / length;
			this.x *= invLength;
			this.y *= invLength;
			return length;
		};
		B2Vec2.prototype.NegativeSelf = function () {
			this.x = (-this.x);
			this.y = (-this.y);
		};
		var B2Mat22 = function () {
			this.col1 = B2Vec2.Get(0,0);
			this.col2 = B2Vec2.Get(0,0);
			this.SetIdentity();
		};
		Box2D.Common.Math.b2Mat22 = B2Mat22 ;
		B2Mat22.FromAngle = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			var mat = new B2Mat22();
			mat.Set(angle);
			return mat;
		};
		B2Mat22.FromVV = function (c1, c2) {
			var mat = new B2Mat22();
			mat.SetVV(c1, c2);
			return mat;
		};
		B2Mat22.prototype.Set = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			this.col1.x = c;
			this.col2.x = (-s);
			this.col1.y = s;
			this.col2.y = c;
		};
		B2Mat22.prototype.SetVV = function (c1, c2) {
			this.col1.SetV(c1);
			this.col2.SetV(c2);
		};
		B2Mat22.prototype.Copy = function () {
			var mat = new B2Mat22();
			mat.SetM(this);
			return mat;
		};
		B2Mat22.prototype.SetM = function (m) {
			this.col1.SetV(m.col1);
			this.col2.SetV(m.col2);
		};
		B2Mat22.prototype.AddM = function (m) {
			this.col1.x += m.col1.x;
			this.col1.y += m.col1.y;
			this.col2.x += m.col2.x;
			this.col2.y += m.col2.y;
		};
		B2Mat22.prototype.SetIdentity = function () {
			this.col1.x = 1.0;
			this.col2.x = 0.0;
			this.col1.y = 0.0;
			this.col2.y = 1.0;
		};
		B2Mat22.prototype.SetZero = function () {
			this.col1.x = 0.0;
			this.col2.x = 0.0;
			this.col1.y = 0.0;
			this.col2.y = 0.0;
		};
		B2Mat22.prototype.GetAngle = function () {
			return Math.atan2(this.col1.y, this.col1.x);
		};
		B2Mat22.prototype.GetInverse = function (out) {
			var a = this.col1.x;
			var b = this.col2.x;
			var c = this.col1.y;
			var d = this.col2.y;
			var det = a * d - b * c;
			if (det !== 0.0) {
				det = 1.0 / det;
			}
			out.col1.x = det * d;
			out.col2.x = (-det * b);
			out.col1.y = (-det * c);
			out.col2.y = det * a;
			return out;
		};
		B2Mat22.prototype.Solve = function (out, bX, bY) {
			if (bX === undefined){bX = 0;}
			if (bY === undefined){bY = 0;}
			var a11 = this.col1.x;
			var a12 = this.col2.x;
			var a21 = this.col1.y;
			var a22 = this.col2.y;
			var det = a11 * a22 - a12 * a21;
			if (det !== 0.0) {
				det = 1.0 / det;
			}
			out.x = det * (a22 * bX - a12 * bY);
			out.y = det * (a11 * bY - a21 * bX);
			return out;
		};
		B2Mat22.prototype.Abs = function () {
			this.col1.Abs();
			this.col2.Abs();
		};
		var B2Transform = function (pos, r) {
			this.position = B2Vec2.Get(0,0);
			this.R = new B2Mat22();
			if (pos === undefined){pos = null;}
			if (r === undefined){r = null;}
			if (pos) {
				this.position.SetV(pos);
				this.R.SetM(r);
			}
		};
		Box2D.Common.Math.b2Transform = B2Transform ;
		B2Transform.prototype.Initialize = function (pos, r) {
			this.position.SetV(pos);
			this.R.SetM(r);
		};
		B2Transform.prototype.SetIdentity = function () {
			this.position.SetZero();
			this.R.SetIdentity();
		};
		B2Transform.prototype.Set = function (x) {
			this.position.SetV(x.position);
			this.R.SetM(x.R);
		};
		B2Transform.prototype.SetAngle = function () {
			return Math.atan2(this.R.col1.y, this.R.col1.x);
		};
		var b2Math = function () {};
		Box2D.Common.Math.b2Math = b2Math ;
		b2Math.IsValid = function (x) {
			if (x === undefined){
				x = 0;
			}
			return isFinite(x);
		};
		b2Math.Dot = function (a, b) {
			return a.x * b.x + a.y * b.y;
		};
		b2Math.CrossVV = function (a, b) {
			return a.x * b.y - a.y * b.x;
		};
		b2Math.CrossVF = function (a, s) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get(s * a.y, (-s * a.x));
			return v;
		};
		b2Math.CrossFV = function (s, a) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get((-s * a.y), s * a.x);
			return v;
		};
		b2Math.MulMV = function (A, v) {
			var u = B2Vec2.Get(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
			return u;
		};
		b2Math.MulTMV = function (A, v) {
			var u = B2Vec2.Get(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));
			return u;
		};
		b2Math.MulX = function (T, v) {
			var a = b2Math.MulMV(T.R, v);
			a.x += T.position.x;
			a.y += T.position.y;
			return a;
		};
		b2Math.MulXT = function (T, v) {
			var a = b2Math.SubtractVV(v, T.position);
			var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
			a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
			a.x = tX;
			return a;
		};
		b2Math.AddVV = function (a, b) {
			var v = B2Vec2.Get(a.x + b.x, a.y + b.y);
			return v;
		};
		b2Math.SubtractVV = function (a, b) {
			var v = B2Vec2.Get(a.x - b.x, a.y - b.y);
			return v;
		};
		b2Math.Distance = function (a, b) {
			var cX = a.x - b.x;
			var cY = a.y - b.y;
			return Math.sqrt(cX * cX + cY * cY);
		};
		b2Math.DistanceSquared = function (a, b) {
			var cX = a.x - b.x;
			var cY = a.y - b.y;
			return (cX * cX + cY * cY);
		};
		b2Math.MulFV = function (s, a) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get(s * a.x, s * a.y);
			return v;
		};
		b2Math.AddMM = function (A, B) {
			var C = B2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));
			return C;
		};
		b2Math.MulMM = function (A, B) {
			var C = B2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));
			return C;
		};
		b2Math.MulTMM = function (A, B) {
			var c1 = B2Vec2.Get(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));
			var c2 = B2Vec2.Get(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));
			var C = B2Mat22.FromVV(c1, c2);
			return C;
		};
		b2Math.Abs = function (a) {
			if (a === undefined){
				a = 0;
			}
			return a > 0.0 ? a : (-a);
		};
		b2Math.AbsV = function (a) {
			var b = B2Vec2.Get(b2Math.Abs(a.x), b2Math.Abs(a.y));
			return b;
		};
		b2Math.AbsM = function (A) {
			var B = B2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));
			return B;
		};
		b2Math.Min = function (a, b) {
			if (a === undefined){a = 0;}
			if (b === undefined){b = 0;}
			return a < b ? a : b;
		};
		b2Math.MinV = function (a, b) {
			var c = B2Vec2.Get(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));
			return c;
		};
		b2Math.Max = function (a, b) {
			if (a === undefined){a = 0;}
			if (b === undefined){b = 0;}
			return a > b ? a : b;
		};
		b2Math.MaxV = function (a, b) {
			var c = B2Vec2.Get(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));
			return c;
		};
		b2Math.Clamp = function (a, low, high) {
			if (a === undefined){a = 0;}
			if (low === undefined){low = 0;}
			if (high === undefined){high = 0;}
			return a < low ? low : a > high ? high : a;
		};
		b2Math.ClampV = function (a, low, high) {
			return b2Math.MaxV(low, b2Math.MinV(a, high));
		};
		b2Math.Swap = function (a, b) {
			var tmp = a[0];
			a[0] = b[0];
			b[0] = tmp;
		};
		b2Math.Random = function () {
			return Math.random() * 2 - 1;
		};
		b2Math.RandomRange = function (lo, hi) {
			if (lo === undefined){lo = 0;}
			if (hi === undefined){hi = 0;}
			var r = Math.random();
			r = (hi - lo) * r + lo;
			return r;
		};
		/* jshint -W016 */
		b2Math.NextPowerOfTwo = function (x) {
			if (x === undefined){x = 0;}
			x |= (x >> 1) & 0x7FFFFFFF;
			x |= (x >> 2) & 0x3FFFFFFF;
			x |= (x >> 4) & 0x0FFFFFFF;
			x |= (x >> 8) & 0x00FFFFFF;
			x |= (x >> 16) & 0x0000FFFF;
			return x + 1;
		};
		b2Math.IsPowerOfTwo = function (x) {
			if (x === undefined){x = 0;}
			var result = x > 0 && (x & (x - 1)) === 0;
			return result;
		};
		/* jshint +W016 */
		b2Math.b2Vec2_zero = new B2Vec2(0.0, 0.0);
		b2Math.b2Mat22_identity = B2Mat22.FromVV(new B2Vec2(1.0, 0.0), new B2Vec2(0.0, 1.0));
		b2Math.b2Transform_identity = new B2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);
		var B2DebugDraw = function(){
			this.e_aabbBit = 0x0004;
			this.e_centerOfMassBit = 0x0010;
			this.e_controllerBit = 0x0020;
			this.e_jointBit = 0x0002;
			this.e_pairBit  = 0x0008;
			this.e_shapeBit = 0x000;
		};
		Box2D.Dynamics.b2DebugDraw = B2DebugDraw ;
		B2DebugDraw.prototype.AppendFlags      = function(){};
		B2DebugDraw.prototype.ClearFlags       = function(){};
		B2DebugDraw.prototype.DrawCircle       = function(){};
		B2DebugDraw.prototype.DrawPolygon      = function(){};
		B2DebugDraw.prototype.DrawSegment      = function(){};
		B2DebugDraw.prototype.DrawSolidCircle  = function(){};
		B2DebugDraw.prototype.DrawSolidPolygon = function(){};
		B2DebugDraw.prototype.DrawTransform    = function(){};
		B2DebugDraw.prototype.GetAlpha         = function(){};
		B2DebugDraw.prototype.GetDrawScale     = function(){};
		B2DebugDraw.prototype.GetFillAlpha     = function(){};
		B2DebugDraw.prototype.GetFlags         = function(){};
		B2DebugDraw.prototype.GetLineThickness = function(){};
		B2DebugDraw.prototype.GetSprite        = function(){};
		B2DebugDraw.prototype.GetXFormScale    = function(){};
		B2DebugDraw.prototype.SetAlpha         = function(){};
		B2DebugDraw.prototype.SetDrawScale     = function(){};
		B2DebugDraw.prototype.SetFillAlpha     = function(){};
		B2DebugDraw.prototype.SetFlags         = function(){};
		B2DebugDraw.prototype.SetLineThickness = function(){};
		B2DebugDraw.prototype.SetSprite        = function(){};
		B2DebugDraw.prototype.SetXFormScale    = function(){};
		var B2BodyDef  = function () {
			this.position = B2Vec2.Get(0,0);
			this.linearVelocity = B2Vec2.Get(0,0);
			this.userData = null;
			this.angle = 0.0;
			this.linearVelocity.Set(0, 0);
			this.angularVelocity = 0.0;
			this.linearDamping = 0.0;
			this.angularDamping = 0.0;
			this.allowSleep = true;
			this.awake = true;
			this.fixedRotation = false;
			this.bullet = false;
			this.type = B2Body.b2_staticBody;
			this.active = true;
			this.inertiaScale = 1.0;
		};
		Box2D.Dynamics.b2BodyDef = B2BodyDef;
		var B2Fixture = function(body,userData, fixtureID, def ) {
			this.m_body = body ;
			this.m_userData = userData ;
			this.m_fixtureID = fixtureID ;
			this.m_shape = {} ;
			this.m_shape.m_centroid = B2Vec2.Get(0,0) ;
			this.m_isSensor = false ;
			this.m_density  = def.density ;
			this.m_friction = def.friction ;
			this.m_restitution = def.restitution ;
			this.m_isSensor = def.isSensor ;
		};
		Box2D.Dynamics.b2Fixture = B2Fixture ;
		B2Fixture.prototype.GetBody = function(){ return this.m_body ; } ;
		B2Fixture.prototype.GetShape = function() {
			console.log( "fixture.GetShape not yet supported in CocoonJS Box2D binding" ) ;
			return null ;
		} ;
		B2Fixture.prototype.GetUserData = function() { return this.m_userData ; } ;
		B2Fixture.prototype.SetSensor = function(isSensor) {
			this.m_isSensor = isSensor;
			window.ext.IDTK_SRV_BOX2D.makeCall( "setSensor" , this.m_body.m_world.m_worldID , this.m_fixtureID , this.m_isSensor) ;
		};
		B2Fixture.prototype.IsSensor = function() { return this.m_isSensor ; } ;
		B2Fixture.prototype.SetDensity     = function( density     ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setDensity"     , this.m_body.m_world.m_worldID , this.m_fixtureID , density     ) ; this.m_density = density         ; } ;
		B2Fixture.prototype.SetFriction    = function( friction    ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setFriction"    , this.m_body.m_world.m_worldID , this.m_fixtureID , friction    ) ; this.m_friction = friction       ; } ;
		B2Fixture.prototype.SetRestitution = function( restitution ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setRestitution" , this.m_body.m_world.m_worldID , this.m_fixtureID , restitution ) ; this.m_restitution = restitution ; } ;
		B2Fixture.prototype.GetDensity     = function() { return this.m_density     ; } ;
		B2Fixture.prototype.GetFriction    = function() { return this.m_friction    ; } ;
		B2Fixture.prototype.GetRestitution = function() { return this.m_restitution ; } ;
		var B2Body = function (bd, world) {
			var userData = bd.userData ;
			bd.userData = null;
			this.m_world    = world;
			this.m_xf       = new B2Transform( bd.position , B2Mat22.FromAngle(bd.angle));
			this.m_fixtures = [] ;
			this.m_active   = bd.active ;
			if( bd.type === B2Body.b2_staticBody ){
				bd.density = 0;
			}
			this.m_bodyID = window.ext.IDTK_SRV_BOX2D.makeCall( "createBody" , world.m_worldID , bd ) ;
			this.m_userData = userData;
			bd.userData = userData ;
		};
		Box2D.Dynamics.b2Body = B2Body ;
		B2Body.prototype.CreateFixture = function (def) {
			var userData = def.userData;
			def.userData = null ;
			var fixtureID = window.ext.IDTK_SRV_BOX2D.makeCall( "createFixture" , this.m_world.m_worldID , this.m_bodyID , def ) ;
			def.userData = userData;
			var fixture = new B2Fixture( this , userData , fixtureID , def ) ;
			this.m_world.m_fixturesList[fixtureID] = fixture ;
			this.m_fixtures.push( fixture ) ;
			return fixture;
		};
		B2Body.prototype.GetFixtureList = function(){
			if( this.m_fixtures.length === 0 ){
				return null ;
			}
			return this.m_fixtures[0] ;
		};
		B2Body.prototype.DestroyFixture = function( fixture ){
			window.ext.IDTK_SRV_BOX2D.makeCall( "deleteFixture" , this.m_world.m_worldID , fixture.m_fixtureID ) ;
			delete this.m_world.m_fixturesList[fixture.m_fixtureID] ;
		};
		B2Body.prototype.SetPositionAndAngle = function (position, angle) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "setBodyTransform" , this.m_world.m_worldID , this.m_bodyID , position.x , position.y , angle ) ;
			this.m_xf.R.Set(angle) ;
			this.m_xf.position.SetV(position) ;
		};
		B2Body.prototype.GetPosition = function () { return this.m_xf.position ; } ;
		B2Body.prototype.SetPosition = function (position) { this.SetPositionAndAngle(position, this.GetAngle()) ; } ;
		B2Body.prototype.GetLinearVelocity  = function(){
			var v = window.ext.IDTK_SRV_BOX2D.makeCall( "getLinearVelocity" , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(v[0],v[1]);
		};
		B2Body.prototype.GetWorldCenter = function(){
			var p = window.ext.IDTK_SRV_BOX2D.makeCall( "getWorldCenter"  , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(p[0],p[1]);
		};
		B2Body.prototype.GetLocalCenter = function(){
			var p = window.ext.IDTK_SRV_BOX2D.makeCall( "getLocalCenter"  , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(p[0],p[1]);
		};
		B2Body.prototype.GetLocalPoint = function (worldPoint) {
			return b2Math.MulXT(this.m_xf, worldPoint);
		};
		B2Body.prototype.ApplyImpulse = function( impulse , point , wake ) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "applyImpulse" , this.m_world.m_worldID , this.m_bodyID , impulse.x , impulse.y , point.x , point.y , wake ) ;
		};
		B2Body.prototype.GetMass			= function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "getMass" , this.m_world.m_worldID , this.m_bodyID ) ; }
		B2Body.prototype.IsAwake			= function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "isAwake"			, this.m_world.m_worldID , this.m_bodyID ) ; } ;
		B2Body.prototype.GetAngularVelocity = function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "getAngularVelocity" , this.m_world.m_worldID , this.m_bodyID ) ; } ;
		B2Body.prototype.SetFixedRotation   = function( fixed )				{ window.ext.IDTK_SRV_BOX2D.makeCall( "setFixedRotation"   , this.m_world.m_worldID , this.m_bodyID , fixed   ) ; } ;
		B2Body.prototype.SetAwake		   = function( state )				{ window.ext.IDTK_SRV_BOX2D.makeCall( "setAwake"		   , this.m_world.m_worldID , this.m_bodyID , state   ) ; } ;
		B2Body.prototype.SetLinearVelocity  = function( vel   )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setLinearVelocity"  , this.m_world.m_worldID , this.m_bodyID , vel.x   , vel.y ) ; } ;
		B2Body.prototype.ApplyForceToCenter = function( force , wake )         { window.ext.IDTK_SRV_BOX2D.makeCall( "applyForceToCenter" , this.m_world.m_worldID , this.m_bodyID , force.x , force.y , wake ) ; } ;
		B2Body.prototype.ApplyForce         = function( force , point , wake ) { window.ext.IDTK_SRV_BOX2D.makeCall( "applyForce"         , this.m_world.m_worldID , this.m_bodyID , force.x , force.y , point.x , point.y , wake ) ; } ;
		B2Body.prototype.ApplyTorque        = function( torque, wake )         { window.ext.IDTK_SRV_BOX2D.makeCall( "applyTorque"        , this.m_world.m_worldID , this.m_bodyID , torque , wake ) ; } ;
		B2Body.prototype.SetLinearDamping   = function( damp  )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setLinearDamping"   , this.m_world.m_worldID , this.m_bodyID , damp    ) ; } ;
		B2Body.prototype.SetAngularVelocity = function( angvel)                { window.ext.IDTK_SRV_BOX2D.makeCall( "setAngularVelocity" , this.m_world.m_worldID , this.m_bodyID , angvel  ) ; } ;
		B2Body.prototype.SetType            = function( type  )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setType"            , this.m_world.m_worldID , this.m_bodyID , type    ) } ;
		B2Body.prototype.SetActive          = function( state )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setActive"          , this.m_world.m_worldID , this.m_bodyID , state   ) ; this.m_active = state ; } ;
		B2Body.prototype.IsActive           = function( ) { return this.m_active ; } ;
		B2Body.prototype.GetAngle = function () { return this.m_xf.R.GetAngle() ; } ;
		B2Body.prototype.SetAngle = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			this.SetPositionAndAngle(this.GetPosition(), angle);
		};
		B2Body.prototype.GetContactList = function () {
			var contacts = window.ext.IDTK_SRV_BOX2D.makeCall( "getObjectContacts" , this.m_world.m_worldID , this.m_bodyID ) ;
			var result = [];
			for(var i = 0 ; i < contacts.length ; i++){
				result.push(this.m_world.m_bodyList[contacts[i]]);
			}
			return result;
		};
		B2Body.prototype.SetUserData = function (data) { this.m_userData = data ; } ;
		B2Body.prototype.GetUserData = function () { return this.m_userData ; } ;
		B2Body.prototype.GetWorld    = function () { return this.m_world ; } ;
		Box2D.Dynamics.b2Body.b2_staticBody    = 0;
		Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
		Box2D.Dynamics.b2Body.b2_dynamicBody   = 2;
		var B2Contact = function (fixtureA , fixtureB , touching ) {
			this.m_fixtureA = fixtureA ;
			this.m_fixtureB = fixtureB ;
			this.m_touching = touching ;
		};
		Box2D.Dynamics.b2Contact = B2Contact ;
		B2Contact.prototype.GetFixtureA = function(){ return this.m_fixtureA ; } ;
		B2Contact.prototype.GetFixtureB = function(){ return this.m_fixtureB ; } ;
		B2Contact.prototype.IsTouching  = function(){ return this.m_touching ; } ;
		var B2ContactListener = function () {};
		Box2D.Dynamics.b2ContactListener = B2ContactListener ;
		B2ContactListener.prototype.BeginContact = function (/*contact*/) {} ;// NOTE: Only this one is called at the moment
		B2ContactListener.prototype.EndContact   = function (/*contact*/) {} ;
		B2ContactListener.prototype.PreSolve     = function (/*contact, oldManifold*/) {} ;
		B2ContactListener.prototype.PostSolve    = function (/*contact, impulse*/) {} ;
		Box2D.Dynamics.b2ContactListener.b2_defaultListener = new B2ContactListener();
		var B2ContactFilter = function() {} ;
		Box2D.Dynamics.b2ContactFilter = B2ContactFilter ;
		var B2World = function (gravity, doSleep) {
			this.m_bodyList = [];
			this.m_jointList = [];
			this.m_fixturesList = [];
			this.m_contactListener = null ;
			this.m_jointsList = [] ;
			this.m_worldID = window.ext.IDTK_SRV_BOX2D.makeCall( "createWorld" , gravity.x , gravity.y , doSleep );
		};
		Box2D.Dynamics.b2World = B2World;
		B2World.prototype.SetContactListener = function (listener) { this.m_contactListener = listener ; } ;
		B2World.prototype.SetContactFilter = function(filter){
			var _filter = filter ;
			var world = this ;
			var callbackFunc = function(a , b){
				var fa = world.m_fixturesList[a];
				var fb = world.m_fixturesList[b];
				return _filter.ShouldCollide(fa,fb);
			}
			window.ext.IDTK_SRV_BOX2D.makeCall("setContactFilter", this.m_worldID, callbackFunc ) ;
		};
		B2World.prototype.CreateBody = function (def) {
			var b = new B2Body(def, this);
			this.m_bodyList[b.m_bodyID] = b;
			return b;
		};
		B2World.prototype.DestroyBody = function (b) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "deleteBody" , this.m_worldID , b.m_bodyID ) ;
			delete this.m_bodyList[b.m_bodyID];
			for( var i =0 ; i < b.m_fixtures.length ; ++i ){
				delete this.m_fixturesList[b.m_fixtures[i].m_fixtureID] ;
			}
		};
		B2World.prototype.CreateJoint = function (def) {
			if( def.bodyA.m_bodyID === def.bodyB.m_bodyID ){
				return ;
			}
			var bodyA = def.bodyA ;
			var bodyB = def.bodyB ;
			def.bodyA = bodyA.m_bodyID ;
			def.bodyB = bodyB.m_bodyID ;
			var jointFunc = "createDistanceJoint" ;
			if( def.type === B2Joint.e_revoluteJoint ) {
				jointFunc = "createRevoluteJoint" ;
			}
			var joint = new B2Joint(def) ;
			joint.m_jointID = window.ext.IDTK_SRV_BOX2D.makeCall( jointFunc , this.m_worldID , def ) ;
			def.bodyA = bodyA ;
			def.bodyB = bodyB ;
			this.m_jointsList.push( joint ) ;
			return joint ;
		};
		B2World.prototype.DestroyJoint = function (joint) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "destroyJoint" , this.m_worldID , joint.m_jointID ) ;
		};
		B2World.prototype.GetJointList = function () {
			if( this.m_jointsList.length === 0 ){
				return null ;
			}
			for( var i = 0 ; i < this.m_jointsList.length - 1 ; ++i ){
				this.m_jointsList[i].next = this.m_jointsList[i+1] ;
			}
			this.m_jointsList[this.m_jointsList.length-1].next = null ;
			return this.m_jointsList[0];
		};
		B2World.prototype.SetContinuousPhysics = function (continuous) { window.ext.IDTK_SRV_BOX2D.makeCall( "setContinuous" , this.m_worldID, continuous ) ; } ;
		B2World.prototype.SetGravity           = function (gravity) { window.ext.IDTK_SRV_BOX2D.makeCall( "setGravity" , this.m_worldID, gravity.x , gravity.y ) ; } ;
		B2World.prototype.Step = function (dt, velocityIterations, positionIterations) {
			var i;
			var transforms = window.ext.IDTK_SRV_BOX2D.makeCall( "step" , this.m_worldID, dt , velocityIterations , positionIterations );
			var count = transforms[0]; // Array returns [ <number of elements> , elem1.bodyID , elem1.posX , elem1.posY , elem1.angle, elem2.bodyID , ....]
			for( i = 1; i <= count * 4 ; i+=4 ){
				var body = this.m_bodyList[ transforms[i+0] ];
				if( body === null ){ // end of the transforms array
					break ;
				}
				body.m_xf.position.Set(transforms[i+1] ,transforms[i+2] ) ;
				body.m_xf.R.Set(transforms[i+3]);
			}
			if( this.m_contactListener !== null ){
				var contacts = window.ext.IDTK_SRV_BOX2D.makeCall( "getLastContacts" , this.m_worldID );
				count = contacts[0];
				for( i = 1 ; i<= count*3 ; i+=3 ){
					var f1 = contacts[i+0];
					var f2 = contacts[i+1];
					var touching = contacts[i+2];
					var fix1 = this.m_fixturesList[f1];
					var fix2 = this.m_fixturesList[f2];
					if( (typeof(fix1) === 'undefined' ) || (typeof(fix2) === 'undefined' ) ){
						console.log("One of the fixtures in a contact DOESN'T EXIST!!");
						continue ;
					}
					this.m_contactListener.BeginContact( new B2Contact(fix1,fix2,touching) ) ;
				}
			}
		};
		B2World.prototype.ClearForces = function () {
			window.ext.IDTK_SRV_BOX2D.makeCall( "clearForces" , this.m_worldID );
		};
		B2World.prototype.SetDebugDraw = function(/*d*/){} ;
		B2World.prototype.DrawDebugData = function(){};
		Box2D.Collision.Shapes.b2CircleShape = function (radius)
		{
			this.radius = radius ;
			this.type = "circle";
		};
		Box2D.Collision.Shapes.b2PolygonShape = function ()
		{
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsBox = function (width,height)
		{
			this.type = "box";
			this.width  = width  ;
			this.height = height ;
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsEdge = function (v1, v2)
		{
			this.type = "edge";
			this.p1x = v1.x;
			this.p1y = v1.y;
			this.p2x = v2.x;
			this.p2y = v2.y;
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsArray = function ( vec , length )
		{
			this.type = "polygon";
			this.vertices = [] ;
			for( var i = 0; i < length ; i++ )
			{
				this.vertices.push( vec[i].x );
				this.vertices.push( vec[i].y );
			}
		};
		var b2FixtureDef = function () {
			this.shape = null;
			this.userData = null;
			this.friction = 0.2;
			this.restitution = 0.0;
			this.density = 0.0;
			this.isSensor = false;
			this.filter = {
				categoryBits : 1 ,
				maskBits : 0xFFFF ,
				groupIndex : 0
			} ;
		};
		Box2D.Dynamics.b2FixtureDef = b2FixtureDef ;
		var B2Joint = function( def ) {
			this.bodyA = def.bodyA;
			this.bodyB = def.bodyB;
			this.userData = def.userData ;
			this.type = def.type ;
			this.next = null ;
		};
		Box2D.Dynamics.Joints.b2Joint = B2Joint ;
		B2Joint.prototype.GetBodyA    = function() { return this.bodyA    ; } ;
		B2Joint.prototype.GetBodyB    = function() { return this.bodyB    ; } ;
		B2Joint.prototype.GetUserData = function() { return this.userData ; } ;
		B2Joint.prototype.GetType     = function() { return this.type     ; } ;
		B2Joint.prototype.GetNext     = function() { return this.next     ; } ;
		B2Joint.e_distanceJoint = 0 ;
		B2Joint.e_revoluteJoint = 1 ;
		var B2DistanceJointDef = function( bA , bB , anchorA , anchorB ) {
			this.type = B2Joint.e_distanceJoint ;
			this.localAnchorA = B2Vec2.Get(0,0) ;
			this.localAnchorB = B2Vec2.Get(0,0) ;
			this.userData = null ;
			if( bA !== undefined ){this.bodyA = bA ;}
			if( bB !== undefined ){this.bodyB = bB ;}
			if( anchorA !== undefined ){this.localAnchorA.SetV(anchorA) ;}
			if( anchorB !== undefined ){this.localAnchorB.SetV(anchorB) ;}
			if( anchorA !== undefined && anchorB !== undefined ){
				var dX = anchorB.x - anchorA.x ;
				var dY = anchorB.y - anchorA.y ;
				this.length = Math.sqrt(dX * dX + dY * dY) ;
			}
			this.frequencyHz  = 0.0 ;
			this.dampingRatio = 0.0 ;
		};
		Box2D.Dynamics.Joints.b2DistanceJointDef = B2DistanceJointDef ;
		var B2RevoluteJointDef = function( bA , bB , anchorA , anchorB ) {
			this.type = B2Joint.e_revoluteJoint ;
			this.localAnchorA = new B2Vec2() ;
			this.localAnchorB = new B2Vec2() ;
			this.userData = null ;
			if( bA !== undefined ){this.bodyA = bA ;}
			if( bB !== undefined ){this.bodyB = bB ;}
			if( anchorA !== undefined ){this.localAnchorA.SetV(anchorA) ;}
			if( anchorB !== undefined ){this.localAnchorB.SetV(anchorB) ;}
			this.referenceAngle = 0.0;
			this.lowerAngle = 0.0;
			this.upperAngle = 0.0;
			this.maxMotorTorque = 0.0;
			this.motorSpeed = 0.0;
			this.enableLimit = false;
			this.enableMotor = false;
		};
		B2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {
			this.bodyA = bA;
			this.bodyB = bB;
			this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
			this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
			this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
		};
		Box2D.Dynamics.Joints.b2RevoluteJointDef = B2RevoluteJointDef ;
	})();
	}
}
else
{
	Box2D.Collision.b2Collision = {};
	Box2D.Collision.b2Distance = {};
	Box2D.Common.b2Settings = {};
	Box2D.Common.Math.b2Math = {};
	Box2D.Consts = {};
	Box2D.Dynamics.Contacts = {};
	Box2D.Dynamics.Controllers = {};
	/**
	 * Creates a callback function
	 * @param {!Object} context The context ('this' variable) of the callback function
	 * @param {function(...[*])} fn The function to execute with the given context for the returned callback
	 * @return {function()} The callback function
	 */
	Box2D.generateCallback = function(context, fn) {
		return function() {
			fn.apply(context, arguments);
		};
	};
	/**
	 * @type {number}
	 * @const
	 */
	Box2D.Consts.MIN_VALUE_SQUARED = Number.MIN_VALUE * Number.MIN_VALUE;
	/**
	 * @param {number} friction1
	 * @param {number} friction2
	 */
	Box2D.Common.b2Settings.b2MixFriction = function (friction1, friction2) {
		return Math.sqrt(friction1 * friction2);
	};
	/**
	 * @param {number} restitution1
	 * @param {number} restitution2
	 */
	Box2D.Common.b2Settings.b2MixRestitution = function (restitution1, restitution2) {
		return restitution1 > restitution2 ? restitution1 : restitution2;
	};
	Box2D.Common.b2Settings.VERSION = "2.1alpha-illandril";
	Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;
	Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
	Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
	Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;
	Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * Box2D.Common.b2Settings.b2_linearSlop;
	Box2D.Common.b2Settings.b2_linearSlop = 0.005;
	Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_toiSlop = 8.0 * Box2D.Common.b2Settings.b2_linearSlop;
	Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
	Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
	Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;
	Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
	Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_maxTranslation = 2.0;
	Box2D.Common.b2Settings.b2_maxTranslationSquared = Box2D.Common.b2Settings.b2_maxTranslation * Box2D.Common.b2Settings.b2_maxTranslation;
	Box2D.Common.b2Settings.b2_maxRotation = 0.5 * Math.PI;
	Box2D.Common.b2Settings.b2_maxRotationSquared = Box2D.Common.b2Settings.b2_maxRotation * Box2D.Common.b2Settings.b2_maxRotation;
	Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
	Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
	Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
	Box2D.Common.b2Settings.b2_linearSleepToleranceSquared = Box2D.Common.b2Settings.b2_linearSleepTolerance * Box2D.Common.b2Settings.b2_linearSleepTolerance;
	Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_angularSleepToleranceSquared = Box2D.Common.b2Settings.b2_angularSleepTolerance * Box2D.Common.b2Settings.b2_angularSleepTolerance;
	Box2D.Common.b2Settings.MIN_VALUE_SQUARED = Number.MIN_VALUE * Number.MIN_VALUE;
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Dot = function (a, b) {
	  return a.x * b.x + a.y * b.y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.CrossVV = function (a, b) {
	  return a.x * b.y - a.y * b.x;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {number} s
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.CrossVF = function (a, s) {
	  return Box2D.Common.Math.b2Vec2.Get(s * a.y, (-s * a.x));
	};
	/**
	 * @param {number} s
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.CrossFV = function (s, a) {
	  return Box2D.Common.Math.b2Vec2.Get((-s * a.y), s * a.x);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulMV = function (A, v) {
	  return Box2D.Common.Math.b2Vec2.Get(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulTMV = function (A, v) {
	  return Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(v, A.col1), Box2D.Common.Math.b2Math.Dot(v, A.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} T
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulX = function (T, v) {
	  var a = Box2D.Common.Math.b2Math.MulMV(T.R, v);
	  a.x += T.position.x;
	  a.y += T.position.y;
	  return a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} T
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulXT = function (T, v) {
	  var a = Box2D.Common.Math.b2Math.SubtractVV(v, T.position);
	  var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
	  a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
	  a.x = tX;
	  return a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.AddVV = function (a, b) {
	  return Box2D.Common.Math.b2Vec2.Get(a.x + b.x, a.y + b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.SubtractVV = function (a, b) {
	  return Box2D.Common.Math.b2Vec2.Get(a.x - b.x, a.y - b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Distance = function (a, b) {
	  var cX = a.x - b.x;
	  var cY = a.y - b.y;
	  return Math.sqrt(Box2D.Common.Math.b2Math.DistanceSquared(a,b));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.DistanceSquared = function (a, b) {
	  var cX = a.x - b.x;
	  var cY = a.y - b.y;
	  return (cX * cX + cY * cY);
	};
	/**
	 * @param {number} s
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulFV = function (s, a) {
	  return Box2D.Common.Math.b2Vec2.Get(s * a.x, s * a.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.AddMM = function (A, B) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AddVV(A.col1, B.col1), Box2D.Common.Math.b2Math.AddVV(A.col2, B.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.MulMM = function (A, B) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.MulMV(A, B.col1), Box2D.Common.Math.b2Math.MulMV(A, B.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.MulTMM = function (A, B) {
	  var c1 = Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(A.col1, B.col1), Box2D.Common.Math.b2Math.Dot(A.col2, B.col1));
	  var c2 = Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(A.col1, B.col2), Box2D.Common.Math.b2Math.Dot(A.col2, B.col2));
	  return Box2D.Common.Math.b2Mat22.FromVV(c1, c2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.AbsV = function (a) {
	  return Box2D.Common.Math.b2Vec2.Get(Math.abs(a.x), Math.abs(a.y));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.AbsM = function (A) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AbsV(A.col1), Box2D.Common.Math.b2Math.AbsV(A.col2));
	};
	/**
	 * @param {number} a
	 * @param {number} low
	 * @param {number} high
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Clamp = function (a, low, high) {
	  return a < low ? low : a > high ? high : a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} low
	 * @param {!Box2D.Common.Math.b2Vec2} high
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.ClampV = function (a, low, high) {
		var x = Box2D.Common.Math.b2Math.Clamp(a.x, low.x, high.x);
		var y = Box2D.Common.Math.b2Math.Clamp(a.y, low.y, high.y);
	  return Box2D.Common.Math.b2Vec2.Get(x, y);
	};
	/**
	 * @constructor
	 */
	Box2D.Common.Math.b2Mat22 = function() {
		this.col1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.col2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.SetIdentity();
	};
	/**
	 * @param {number} angle
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.FromAngle = function(angle) {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.Set(angle);
		return mat;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} c1
	 * @param {!Box2D.Common.Math.b2Vec2} c2
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.FromVV = function(c1, c2) {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.SetVV(c1, c2);
		return mat;
	};
	/**
	 * @param {number} angle
	 */
	Box2D.Common.Math.b2Mat22.prototype.Set = function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		this.col1.Set(c, s);
		this.col2.Set(-s, c);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} c1
	 * @param {!Box2D.Common.Math.b2Vec2} c2
	 */
	Box2D.Common.Math.b2Mat22.prototype.SetVV = function(c1, c2) {
		this.col1.SetV(c1);
		this.col2.SetV(c2);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.prototype.Copy = function() {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.SetM(this);
		return mat;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} m
	 */
	Box2D.Common.Math.b2Mat22.prototype.SetM = function(m) {
		this.col1.SetV(m.col1);
		this.col2.SetV(m.col2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} m
	 */
	Box2D.Common.Math.b2Mat22.prototype.AddM = function(m) {
		this.col1.Add(m.col1);
		this.col2.Add(m.col2);
	};
	Box2D.Common.Math.b2Mat22.prototype.SetIdentity = function() {
		this.col1.Set(1, 0);
		this.col2.Set(0, 1);
	};
	Box2D.Common.Math.b2Mat22.prototype.SetZero = function() {
		this.col1.Set(0, 0);
		this.col2.Set(0, 0);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Mat22.prototype.GetAngle = function() {
		return Math.atan2(this.col1.y, this.col1.x);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} out
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.prototype.GetInverse = function(out) {
		var det = this.col1.x * this.col2.y - this.col2.x * this.col1.y;
		if (det !== 0) {
			det = 1 / det;
		}
		out.col1.x = det * this.col2.y;
		out.col2.x = -det * this.col2.x;
		out.col1.y = -det * this.col1.y;
		out.col2.y = det * this.col1.x;
		return out;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} out
	 * @param {number} bX
	 * @param {number} bY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Mat22.prototype.Solve = function(out, bX, bY) {
		var det = this.col1.x * this.col2.y - this.col2.x * this.col1.y;
		if (det !== 0) {
			det = 1 / det;
		}
		out.x = det * (this.col2.y * bX - this.col2.x * bY);
		out.y = det * (this.col1.x * bY - this.col1.y * bX);
		return out;
	};
	Box2D.Common.Math.b2Mat22.prototype.Abs = function() {
		this.col1.Abs();
		this.col2.Abs();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3=} c1
	 * @param {!Box2D.Common.Math.b2Vec3=} c2
	 * @param {!Box2D.Common.Math.b2Vec3=} c3
	 * @constructor
	 */
	Box2D.Common.Math.b2Mat33 = function(c1, c2, c3) {
		this.col1 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.col2 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.col3 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		if (c1) {
			this.col1.SetV(c1);
		}
		if (c2) {
			this.col2.SetV(c2);
		}
		if (c3) {
			this.col3.SetV(c3);
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} c1
	 * @param {!Box2D.Common.Math.b2Vec3} c2
	 * @param {!Box2D.Common.Math.b2Vec3} c3
	 */
	Box2D.Common.Math.b2Mat33.prototype.SetVVV = function(c1, c2, c3) {
		this.col1.SetV(c1);
		this.col2.SetV(c2);
		this.col3.SetV(c3);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Mat33}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Copy = function() {
		return new Box2D.Common.Math.b2Mat33(this.col1, this.col2, this.col3);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat33} m
	 */
	Box2D.Common.Math.b2Mat33.prototype.SetM = function(m) {
		this.col1.SetV(m.col1);
		this.col2.SetV(m.col2);
		this.col3.SetV(m.col3);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat33} m
	 */
	Box2D.Common.Math.b2Mat33.prototype.AddM = function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col1.z += m.col1.z;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
		this.col2.z += m.col2.z;
		this.col3.x += m.col3.x;
		this.col3.y += m.col3.y;
		this.col3.z += m.col3.z;
	};
	Box2D.Common.Math.b2Mat33.prototype.SetIdentity = function() {
		this.col1.Set(1,0,0);
		this.col2.Set(0,1,0);
		this.col3.Set(0,0,1);
	};
	Box2D.Common.Math.b2Mat33.prototype.SetZero = function() {
		this.col1.Set(0,0,0);
		this.col2.Set(0,0,0);
		this.col3.Set(0,0,0);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} out
	 * @param {number} bX
	 * @param {number} bY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Solve22 = function(out, bX, bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if (det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} out
	 * @param {number} bX
	 * @param {number} bY
	 * @param {number} bZ
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Solve33 = function(out, bX, bY, bZ) {
		var a11 = this.col1.x;
		var a21 = this.col1.y;
		var a31 = this.col1.z;
		var a12 = this.col2.x;
		var a22 = this.col2.y;
		var a32 = this.col2.z;
		var a13 = this.col3.x;
		var a23 = this.col3.y;
		var a33 = this.col3.z;
		var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
		if (det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
		out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
		out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
		return out;
	}
	/**
	 * @constructor
	 */
	Box2D.Common.Math.b2Sweep = function() {
		this.localCenter = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.c0 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.c = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Common.Math.b2Sweep.prototype.Set = function(other) {
		this.localCenter.SetV(other.localCenter);
		this.c0.SetV(other.c0);
		this.c.SetV(other.c);
		this.a0 = other.a0;
		this.a = other.a;
		this.t0 = other.t0;
	};
	Box2D.Common.Math.b2Sweep.prototype.Copy = function() {
		var copy = new Box2D.Common.Math.b2Sweep();
		copy.localCenter.SetV(this.localCenter);
		copy.c0.SetV(this.c0);
		copy.c.SetV(this.c);
		copy.a0 = this.a0;
		copy.a = this.a;
		copy.t0 = this.t0;
		return copy;
	};
	Box2D.Common.Math.b2Sweep.prototype.GetTransform = function(xf, alpha) {
		if (alpha === undefined) alpha = 0;
		xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
		xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
		var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
		xf.R.Set(angle);
		var tMat = xf.R;
		xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);
		xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);
	};
	Box2D.Common.Math.b2Sweep.prototype.Advance = function(t) {
		if (t === undefined) t = 0;
		if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
			var alpha = (t - this.t0) / (1.0 - this.t0);
			this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
			this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
			this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
			this.t0 = t;
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2=} pos
	 * @param {!Box2D.Common.Math.b2Mat22=} r
	 * @constructor
	 */
	Box2D.Common.Math.b2Transform = function(pos, r) {
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.R = new Box2D.Common.Math.b2Mat22();
		if (pos) {
			this.position.SetV(pos);
		}
		if (r) {
			this.R.SetM(r);
		}
	};
	Box2D.Common.Math.b2Transform.prototype.Initialize = function(pos, r) {
		this.position.SetV(pos);
		this.R.SetM(r);
	};
	Box2D.Common.Math.b2Transform.prototype.SetIdentity = function() {
		this.position.SetZero();
		this.R.SetIdentity();
	};
	Box2D.Common.Math.b2Transform.prototype.Set = function(x) {
		this.position.SetV(x.position);
		this.R.SetM(x.R);
	};
	Box2D.Common.Math.b2Transform.prototype.GetAngle = function() {
		return Math.atan2(this.R.col1.y, this.R.col1.x);
	};
	/**
	 * @private
	 * @param {number} x
	 * @param {number} y
	 * @constructor
	 */
	Box2D.Common.Math.b2Vec2 = function(x, y) {
		this.x = x;
		this.y = y;
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Common.Math.b2Vec2._freeCache = [];
	/**
	 * @param {number} x
	 * @param {number} y
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.Get = function(x, y) {
		if (Box2D.Common.Math.b2Vec2._freeCache.length > 0) {
			var vec = Box2D.Common.Math.b2Vec2._freeCache.pop();
			vec.Set(x, y);
			return vec;
		}
		return new Box2D.Common.Math.b2Vec2(x, y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} vec
	 */
	Box2D.Common.Math.b2Vec2.Free = function(vec) {
		Box2D.Common.Math.b2Vec2._freeCache.push(vec);
	};
	Box2D.Common.Math.b2Vec2.prototype.SetZero = function() {
		this.x = 0.0;
		this.y = 0.0;
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 */
	Box2D.Common.Math.b2Vec2.prototype.Set = function(x, y) {
		this.x = x;
		this.y = y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.SetV = function(v) {
		this.x = v.x;
		this.y = v.y;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.prototype.GetNegative = function() {
		return Box2D.Common.Math.b2Vec2.Get((-this.x), (-this.y));
	};
	Box2D.Common.Math.b2Vec2.prototype.NegativeSelf = function() {
		this.x = (-this.x);
		this.y = (-this.y);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Copy = function() {
		return Box2D.Common.Math.b2Vec2.Get(this.x, this.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.Add = function(v) {
		this.x += v.x;
		this.y += v.y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.Subtract = function(v) {
		this.x -= v.x;
		this.y -= v.y;
	};
	/**
	 * @param {number} a
	 */
	Box2D.Common.Math.b2Vec2.prototype.Multiply = function(a) {
		this.x *= a;
		this.y *= a;
	};
	/**
	 * @param {Box2D.Common.Math.b2Mat22} A
	 */
	Box2D.Common.Math.b2Vec2.prototype.MulM = function(A) {
		var tX = this.x;
		this.x = A.col1.x * tX + A.col2.x * this.y;
		this.y = A.col1.y * tX + A.col2.y * this.y;
	};
	/**
	 * @param {Box2D.Common.Math.b2Mat22} A
	 */
	Box2D.Common.Math.b2Vec2.prototype.MulTM = function(A) {
		var tX = this.x * A.col1.x + this.y * A.col1.y;
		this.y = this.x * A.col2.x + this.y * A.col2.y;
		this.x = tX;
	};
	/**
	 * @param {number} s
	 */
	Box2D.Common.Math.b2Vec2.prototype.CrossVF = function(s) {
		var tX = this.x;
		this.x = s * this.y;
		this.y = (-s * tX);
	};
	/**
	 * @param {number} s
	 */
	Box2D.Common.Math.b2Vec2.prototype.CrossFV = function(s) {
		var tX = this.x;
		this.x = (-s * this.y);
		this.y = s * tX;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 */
	Box2D.Common.Math.b2Vec2.prototype.MinV = function(b) {
		this.x = Math.min(this.x, b.x);
		this.y = Math.min(this.y, b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 */
	Box2D.Common.Math.b2Vec2.prototype.MaxV = function(b) {
		this.x = Math.max(this.x, b.x);
		this.y = Math.max(this.y, b.y);
	};
	Box2D.Common.Math.b2Vec2.prototype.Abs = function() {
		this.x = Math.abs(this.x);
		this.y = Math.abs(this.y);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Length = function() {
		return Math.sqrt(this.LengthSquared());
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.LengthSquared = function() {
		return (this.x * this.x + this.y * this.y);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Normalize = function() {
		var length = this.Length();
		if (length < Number.MIN_VALUE) {
			return 0.0;
		}
		var invLength = 1.0 / length;
		this.x *= invLength;
		this.y *= invLength;
		return length;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Common.Math.b2Vec2.prototype.IsValid = function () {
	  return isFinite(this.x) && isFinite(this.y);
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 * @param {number} z
	 * @constructor
	 */
	Box2D.Common.Math.b2Vec3 = function(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
	};
	Box2D.Common.Math.b2Vec3.prototype.SetZero = function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 * @param {number} z
	 */
	Box2D.Common.Math.b2Vec3.prototype.Set = function(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.SetV = function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Vec3.prototype.GetNegative = function() {
		return new Box2D.Common.Math.b2Vec3((-this.x), (-this.y), (-this.z));
	};
	Box2D.Common.Math.b2Vec3.prototype.NegativeSelf = function() {
		this.x = (-this.x);
		this.y = (-this.y);
		this.z = (-this.z);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Vec3.prototype.Copy = function() {
		return new Box2D.Common.Math.b2Vec3(this.x, this.y, this.z);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.Add = function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.Subtract = function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
	};
	/**
	 * @param {number} a
	 */
	Box2D.Common.Math.b2Vec3.prototype.Multiply = function(a) {
		this.x *= a;
		this.y *= a;
		this.z *= a;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2Shape = function() {
		this.m_radius = Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.GetTypeName = function(){};
	/**
	 * @return {!Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.Copy = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.Set = function(other) {
		this.m_radius = other.m_radius;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.TestPoint = function(){};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.RayCast = function(){};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeAABB = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeMass = function(){};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeSubmergedArea = function(){};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.SetDistanceProxy = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} shape1
	 * @param {!Box2D.Common.Math.b2Transform} transform1
	 * @param {!Box2D.Collision.Shapes.b2Shape} shape2
	 * @param {!Box2D.Common.Math.b2Transform} transform2
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.TestOverlap = function(shape1, transform1, shape2, transform2) {
		var input = new Box2D.Collision.b2DistanceInput();
		input.proxyA = new Box2D.Collision.b2DistanceProxy();
		input.proxyA.Set(shape1);
		input.proxyB = new Box2D.Collision.b2DistanceProxy();
		input.proxyB.Set(shape2);
		input.transformA = transform1;
		input.transformB = transform2;
		input.useRadii = true;
		var simplexCache = new Box2D.Collision.b2SimplexCache();
		simplexCache.count = 0;
		var output = new Box2D.Collision.b2DistanceOutput();
		Box2D.Collision.b2Distance.Distance(output, simplexCache, input);
		return output.distance < 10.0 * Number.MIN_VALUE;
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = -1;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
	/**
	 * @param {number} radius
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2CircleShape = function(radius) {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {number} */
		this.m_radius = radius;
		/** @type {number} */
		this.m_radiusSquared = radius * radius;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_p = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Collision.Shapes.b2CircleShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2CircleShape.NAME;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2CircleShape}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.Copy = function() {
		var s = new Box2D.Collision.Shapes.b2CircleShape(this.m_radius);
		s.Set(this);
		return s;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.Set = function(other) {
		Box2D.Collision.Shapes.b2Shape.prototype.Set.call(this, other);
		if (other instanceof Box2D.Collision.Shapes.b2CircleShape) {
			this.m_p.SetV(other.m_p);
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.TestPoint = function(transform, p) {
		var tMat = transform.R;
		var dX = p.x - (transform.position.x + (transform.R.col1.x * this.m_p.x + transform.R.col2.x * this.m_p.y));
		var dY = p.y - (transform.position.y + (transform.R.col1.y * this.m_p.x + transform.R.col2.y * this.m_p.y));
		return (dX * dX + dY * dY) <= this.m_radiusSquared;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.RayCast = function(output, input, transform) {
		var tMat = transform.R;
		var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		var sX = input.p1.x - positionX;
		var sY = input.p1.y - positionY;
		var b = (sX * sX + sY * sY) - this.m_radiusSquared;
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var c = (sX * rX + sY * rY);
		var rr = (rX * rX + rY * rY);
		var sigma = c * c - rr * b;
		if (sigma < 0.0 || rr < Number.MIN_VALUE) {
			return false;
		}
		var a = (-(c + Math.sqrt(sigma)));
		if (0.0 <= a && a <= input.maxFraction * rr) {
			a /= rr;
			output.fraction = a;
			output.normal.x = sX + a * rX;
			output.normal.y = sY + a * rY;
			output.normal.Normalize();
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeAABB = function(aabb, transform) {
		var tMat = transform.R;
		var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		aabb.lowerBound_.Set(pX - this.m_radius, pY - this.m_radius);
		aabb.upperBound_.Set(pX + this.m_radius, pY + this.m_radius);
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeMass = function(massData, density) {
		massData.mass = density * Math.PI * this.m_radiusSquared;
		massData.center.SetV(this.m_p);
		massData.I = massData.mass * (0.5 * this.m_radiusSquared + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		var p = Box2D.Common.Math.b2Math.MulX(xf, this.m_p);
		var l = (-(Box2D.Common.Math.b2Math.Dot(normal, p) - offset));
		if (l < (-this.m_radius) + Number.MIN_VALUE) {
			return 0;
		}
		if (l > this.m_radius) {
			c.SetV(p);
			return Math.PI * this.m_radiusSquared;
		}
		var l2 = l * l;
		var area = this.m_radiusSquared * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(this.m_radiusSquared - l2);
		var com = (-2 / 3 * Math.pow(this.m_radiusSquared - l2, 1.5) / area);
		c.x = p.x + normal.x * com;
		c.y = p.y + normal.y * com;
		return area;
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetDistanceProxy = function(proxy) {
		proxy.m_vertices = [this.m_p];
		proxy.m_count = 1;
		proxy.m_radius = this.m_radius;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetLocalPosition = function() {
		return this.m_p;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetLocalPosition = function(position) {
		this.m_p.SetV(position);
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetRadius = function() {
		return this.m_radius;
	};
	/**
	 * @param {number} radius
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetRadius = function(radius) {
		this.m_radius = radius;
		this.m_radiusSquared = radius * radius;
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2CircleShape.NAME = 'b2CircleShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2EdgeChainDef = function() {
		/** @type {number} */
		this.vertexCount = 0;
		/** @type {boolean} */
		this.isALoop = true;
		/** @type {Array.<Box2D.Common.Math.b2Vec2} */
		this.vertices = [];
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape = function(v1, v2) {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {Box2D.Collision.Shapes.b2EdgeShape} */
		this.m_prevEdge = null;
		/** @type {Box2D.Collision.Shapes.b2EdgeShape} */
		this.m_nextEdge = null;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_v1 = v1;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_v2 = v2;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_direction = Box2D.Common.Math.b2Vec2.Get(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
		/** @type {number} */
		this.m_length = this.m_direction.Normalize();
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(this.m_direction.y, -this.m_direction.x);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_coreV1 = Box2D.Common.Math.b2Vec2.Get((-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_coreV2 = Box2D.Common.Math.b2Vec2.Get((-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_cornerDir1 = this.m_normal;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_cornerDir2 = Box2D.Common.Math.b2Vec2.Get(-this.m_normal.x, -this.m_normal.y);
		/** @type {boolean} */
		this.m_cornerConvex1 = false;
		/** @type {boolean} */
		this.m_cornerConvex2 = false;
	};
	c2inherit(Box2D.Collision.Shapes.b2EdgeShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2EdgeShape.NAME;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.TestPoint = function(transform, p) {
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.RayCast = function(output, input, transform) {
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
		var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = (-(rX * nX + rY * nY));
		if (denom > k_slop) {
			var bX = input.p1.x - v1X;
			var bY = input.p1.y - v1Y;
			var a = (bX * nX + bY * nY);
			if (0.0 <= a && a <= input.maxFraction * denom) {
				var mu2 = (-rX * bY) + rY * bX;
				if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					output.fraction = a;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					output.normal.x = nX / nLen;
					output.normal.y = nY / nLen;
					return true;
				}
			}
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeAABB = function(aabb, transform) {
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
		var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
		if (v1X < v2X) {
			aabb.lowerBound_.x = v1X;
			aabb.upperBound_.x = v2X;
		} else {
			aabb.lowerBound_.x = v2X;
			aabb.upperBound_.x = v1X;
		}
		if (v1Y < v2Y) {
			aabb.lowerBound_.y = v1Y;
			aabb.upperBound_.y = v2Y;
		} else {
			aabb.lowerBound_.y = v2Y;
			aabb.upperBound_.y = v1Y;
		}
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeMass = function(massData, density) {
		massData.mass = 0;
		massData.center.SetV(this.m_v1);
		massData.I = 0;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		if (offset === undefined) offset = 0;
		var v0 = Box2D.Common.Math.b2Vec2.Get(normal.x * offset, normal.y * offset);
		var v1 = Box2D.Common.Math.b2Math.MulX(xf, this.m_v1);
		var v2 = Box2D.Common.Math.b2Math.MulX(xf, this.m_v2);
		var d1 = Box2D.Common.Math.b2Math.Dot(normal, v1) - offset;
		var d2 = Box2D.Common.Math.b2Math.Dot(normal, v2) - offset;
		if (d1 > 0) {
			if (d2 > 0) {
				return 0;
			} else {
				v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
				v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
			}
		} else {
			if (d2 > 0) {
				v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
				v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
			}
		}
		c.x = (v0.x + v1.x + v2.x) / 3;
		c.y = (v0.y + v1.y + v2.y) / 3;
		return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetLength = function() {
		return this.m_length;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetVertex1 = function() {
		return this.m_v1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetVertex2 = function() {
		return this.m_v2;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCoreVertex1 = function() {
		return this.m_coreV1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCoreVertex2 = function() {
		return this.m_coreV2;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetNormalVector = function() {
		return this.m_normal;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetDirectionVector = function() {
		return this.m_direction;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCorner1Vector = function() {
		return this.m_cornerDir1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCorner2Vector = function() {
		return this.m_cornerDir2;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Corner1IsConvex = function() {
		return this.m_cornerConvex1;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Corner2IsConvex = function() {
		return this.m_cornerConvex2;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetFirstVertex = function(xf) {
		var tMat = xf.R;
		return Box2D.Common.Math.b2Vec2.Get(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
	};
	/**
	 * @return {Box2D.Collision.Shapes.b2EdgeShape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetNextEdge = function() {
		return this.m_nextEdge;
	};
	/**
	 * @return {Box2D.Collision.Shapes.b2EdgeShape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetPrevEdge = function() {
		return this.m_prevEdge;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {number} dX
	 * @param {number} dY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Support = function(xf, dX, dY) {
		var tMat = xf.R;
		var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
		var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
		var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
		var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
		if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {
			return Box2D.Common.Math.b2Vec2.Get(v1X, v1Y);
		} else {
			return Box2D.Common.Math.b2Vec2.Get(v2X, v2Y);
		}
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2EdgeShape} edge
	 * @param {!Box2D.Common.Math.b2Vec2} core
	 * @param {!Box2D.Common.Math.b2Vec2} cornerDir
	 * @param {boolean} convex
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.SetPrevEdge = function(edge, core, cornerDir, convex) {
		this.m_prevEdge = edge;
		this.m_coreV1 = core;
		this.m_cornerDir1 = cornerDir;
		this.m_cornerConvex1 = convex;
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2EdgeShape} edge
	 * @param {!Box2D.Common.Math.b2Vec2} core
	 * @param {!Box2D.Common.Math.b2Vec2} cornerDir
	 * @param {boolean} convex
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.SetNextEdge = function(edge, core, cornerDir, convex) {
		this.m_nextEdge = edge;
		this.m_coreV2 = core;
		this.m_cornerDir2 = cornerDir;
		this.m_cornerConvex2 = convex;
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.NAME = 'b2EdgeShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2MassData = function() {
		/** @type {number} */
		this.mass = 0;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.I = 0;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape = function() {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_centroid = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_vertices = [];
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_normals = [];
	};
	c2inherit(Box2D.Collision.Shapes.b2PolygonShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2PolygonShape.NAME;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Copy = function() {
		var s = new Box2D.Collision.Shapes.b2PolygonShape();
		s.Set(this);
		return s;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Set = function(other) {
		Box2D.Collision.Shapes.b2Shape.prototype.Set.call(this, other);
		if (other instanceof Box2D.Collision.Shapes.b2PolygonShape) {
			this.m_centroid.SetV(other.m_centroid);
			this.m_vertexCount = other.m_vertexCount;
			this.Reserve(this.m_vertexCount);
			for (var i = 0; i < this.m_vertexCount; i++) {
				this.m_vertices[i].SetV(other.m_vertices[i]);
				this.m_normals[i].SetV(other.m_normals[i]);
			}
		}
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsArray = function(vertices) {
		this.SetAsVector(vertices);
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsArray = function(vertices) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsArray(vertices);
		return polygonShape;
	};
	/**
	 * @param {Array.<!Box2D.Common.Math.b2Vec2>} vertices
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsVector = function(vertices) {
		var vertexCount = vertices.length;
;
		this.m_vertexCount = vertexCount;
		this.Reserve(vertexCount);
		var i = 0;
		for (i = 0; i < this.m_vertexCount; i++) {
			this.m_vertices[i].SetV(vertices[i]);
		}
		for (i = 0; i < this.m_vertexCount; ++i) {
			var i1 = i;
			var i2 = i + 1 < this.m_vertexCount ? i + 1 : 0;
			var edge = Box2D.Common.Math.b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);
;
			this.m_normals[i].SetV(Box2D.Common.Math.b2Math.CrossVF(edge, 1.0));
			this.m_normals[i].Normalize();
		}
		this.m_centroid = Box2D.Collision.Shapes.b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsVector = function(vertices) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsVector(vertices);
		return polygonShape;
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsBox = function(hx, hy) {
		this.m_vertexCount = 4;
		this.Reserve(4);
		this.m_vertices[0].Set((-hx), (-hy));
		this.m_vertices[1].Set(hx, (-hy));
		this.m_vertices[2].Set(hx, hy);
		this.m_vertices[3].Set((-hx), hy);
		this.m_normals[0].Set(0.0, (-1.0));
		this.m_normals[1].Set(1.0, 0.0);
		this.m_normals[2].Set(0.0, 1.0);
		this.m_normals[3].Set((-1.0), 0.0);
		this.m_centroid.SetZero();
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsBox = function(hx, hy) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsBox(hx, hy);
		return polygonShape;
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @param {!Box2D.Common.Math.b2Vec2} center
	 * @param {number} angle
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsOrientedBox = function(hx, hy, center, angle) {
		this.m_vertexCount = 4;
		this.Reserve(4);
		this.m_vertices[0].Set((-hx), (-hy));
		this.m_vertices[1].Set(hx, (-hy));
		this.m_vertices[2].Set(hx, hy);
		this.m_vertices[3].Set((-hx), hy);
		this.m_normals[0].Set(0.0, (-1.0));
		this.m_normals[1].Set(1.0, 0.0);
		this.m_normals[2].Set(0.0, 1.0);
		this.m_normals[3].Set((-1.0), 0.0);
		this.m_centroid = center;
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.Set(angle);
		var xf = new Box2D.Common.Math.b2Transform(center, mat);
		for (var i = 0; i < this.m_vertexCount; ++i) {
			this.m_vertices[i] = Box2D.Common.Math.b2Math.MulX(xf, this.m_vertices[i]);
			this.m_normals[i] = Box2D.Common.Math.b2Math.MulMV(xf.R, this.m_normals[i]);
		}
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @param {!Box2D.Common.Math.b2Vec2} center
	 * @param {number} angle
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsOrientedBox = function(hx, hy, center, angle) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsOrientedBox(hx, hy, center, angle);
		return polygonShape;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsEdge = function(v1, v2) {
		this.m_vertexCount = 2;
		this.Reserve(2);
		this.m_vertices[0].SetV(v1);
		this.m_vertices[1].SetV(v2);
		this.m_centroid.x = 0.5 * (v1.x + v2.x);
		this.m_centroid.y = 0.5 * (v1.y + v2.y);
		this.m_normals[0] = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(v2, v1), 1.0);
		this.m_normals[0].Normalize();
		this.m_normals[1].x = (-this.m_normals[0].x);
		this.m_normals[1].y = (-this.m_normals[0].y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsEdge = function(v1, v2) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsEdge(v1, v2);
		return polygonShape;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.TestPoint = function(xf, p) {
		var tVec;
		var tMat = xf.R;
		var tX = p.x - xf.position.x;
		var tY = p.y - xf.position.y;
		var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);
		var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);
		for (var i = 0; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			tX = pLocalX - tVec.x;
			tY = pLocalY - tVec.y;
			tVec = this.m_normals[i];
			var dot = (tVec.x * tX + tVec.y * tY);
			if (dot > 0.0) {
				return false;
			}
		}
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.RayCast = function(output, input, transform) {
		var lower = 0.0;
		var upper = input.maxFraction;
		var tX = 0;
		var tY = 0;
		var tMat;
		var tVec;
		tX = input.p1.x - transform.position.x;
		tY = input.p1.y - transform.position.y;
		tMat = transform.R;
		var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);
		var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);
		tX = input.p2.x - transform.position.x;
		tY = input.p2.y - transform.position.y;
		tMat = transform.R;
		var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);
		var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var index = -1;
		for (var i = 0; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			tX = tVec.x - p1X;
			tY = tVec.y - p1Y;
			tVec = this.m_normals[i];
			var numerator = (tVec.x * tX + tVec.y * tY);
			var denominator = (tVec.x * dX + tVec.y * dY);
			if (denominator == 0.0) {
				if (numerator < 0.0) {
					return false;
				}
			} else {
				if (denominator < 0.0 && numerator < lower * denominator) {
					lower = numerator / denominator;
					index = i;
				} else if (denominator > 0.0 && numerator < upper * denominator) {
					upper = numerator / denominator;
				}
			}
			if (upper < lower - Number.MIN_VALUE) {
				return false;
			}
		}
		if (index >= 0) {
			output.fraction = lower;
			tMat = transform.R;
			tVec = this.m_normals[index];
			output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeAABB = function(aabb, xf) {
		var tMat = xf.R;
		var tVec = this.m_vertices[0];
		var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var upperX = lowerX;
		var upperY = lowerY;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			lowerX = lowerX < vX ? lowerX : vX;
			lowerY = lowerY < vY ? lowerY : vY;
			upperX = upperX > vX ? upperX : vX;
			upperY = upperY > vY ? upperY : vY;
		}
		aabb.lowerBound_.x = lowerX - this.m_radius;
		aabb.lowerBound_.y = lowerY - this.m_radius;
		aabb.upperBound_.x = upperX + this.m_radius;
		aabb.upperBound_.y = upperY + this.m_radius;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeMass = function(massData, density) {
		if (this.m_vertexCount == 2) {
			massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
			massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
			massData.mass = 0.0;
			massData.I = 0.0;
			return;
		}
		var centerX = 0.0;
		var centerY = 0.0;
		var area = 0.0;
		var I = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var k_inv3 = 1.0 / 3.0;
		for (var i = 0; i < this.m_vertexCount; ++i) {
			var p2 = this.m_vertices[i];
			var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[i + 1] : this.m_vertices[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = e1X * e2Y - e1Y * e2X;
			var triangleArea = 0.5 * D;
			area += triangleArea;
			centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
			centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
			var px = p1X;
			var py = p1Y;
			var ex1 = e1X;
			var ey1 = e1Y;
			var ex2 = e2X;
			var ey2 = e2Y;
			var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
			var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;
			I += D * (intx2 + inty2);
		}
		massData.mass = density * area;
		centerX *= 1.0 / area;
		centerY *= 1.0 / area;
		massData.center.Set(centerX, centerY);
		massData.I = density * I;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		var normalL = Box2D.Common.Math.b2Math.MulTMV(xf.R, normal);
		var offsetL = offset - Box2D.Common.Math.b2Math.Dot(normal, xf.position);
		var depths = [];
		var diveCount = 0;
		var intoIndex = -1;
		var outoIndex = -1;
		var lastSubmerged = false;
		var i = 0;
		for (i = 0; i < this.m_vertexCount; ++i) {
			depths[i] = Box2D.Common.Math.b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;
			var isSubmerged = depths[i] < (-Number.MIN_VALUE);
			if (i > 0) {
				if (isSubmerged) {
					if (!lastSubmerged) {
						intoIndex = i - 1;
						diveCount++;
					}
				} else {
					if (lastSubmerged) {
						outoIndex = i - 1;
						diveCount++;
					}
				}
			}
			lastSubmerged = isSubmerged;
		}
		switch (diveCount) {
		case 0:
			if (lastSubmerged) {
				var md = new Box2D.Collision.Shapes.b2MassData();
				this.ComputeMass(md, 1);
				c.SetV(Box2D.Common.Math.b2Math.MulX(xf, md.center));
				return md.mass;
			} else {
				return 0;
			}
			break;
		case 1:
			if (intoIndex == (-1)) {
				intoIndex = this.m_vertexCount - 1;
			} else {
				outoIndex = this.m_vertexCount - 1;
			}
			break;
		}
		var intoIndex2 = ((intoIndex + 1) % this.m_vertexCount);
		var outoIndex2 = ((outoIndex + 1) % this.m_vertexCount);
		var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
		var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
		var intoVec = Box2D.Common.Math.b2Vec2.Get(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
		var outoVec = Box2D.Common.Math.b2Vec2.Get(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
		var area = 0;
		var center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var p2 = this.m_vertices[intoIndex2];
		var p3;
		i = intoIndex2;
		while (i != outoIndex2) {
			i = (i + 1) % this.m_vertexCount;
			if (i == outoIndex2) p3 = outoVec;
			else p3 = this.m_vertices[i];
			var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
			area += triangleArea;
			center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
			center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
			p2 = p3;
		}
		center.Multiply(1 / area);
		c.SetV(Box2D.Common.Math.b2Math.MulX(xf, center));
		return area;
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetDistanceProxy = function(proxy) {
		proxy.m_vertices = this.m_vertices;
		proxy.m_count = this.m_vertexCount;
		proxy.m_radius = this.m_radius;
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetVertexCount = function() {
		return this.m_vertexCount;
	};
	/**
	 * @return {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetVertices = function() {
		return this.m_vertices;
	};
	/**
	 * @return {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetNormals = function() {
		return this.m_normals;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} d
	 * return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetSupport = function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} d
	 * return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetSupportVertex = function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	};
	/**
	 * @param {number} count
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Reserve = function(count) {
		this.m_vertices = [];
		this.m_normals = [];
		for (var i = this.m_vertices.length; i < count; i++) {
			this.m_vertices[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
			this.m_normals[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {Array.<!Box2D.Common.Math.b2Vec2>} vs
	 * @param {number} count
	 * return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.ComputeCentroid = function(vs, count) {
		var c = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var area = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var inv3 = 1.0 / 3.0;
		for (var i = 0; i < count; ++i) {
			var p2 = vs[i];
			var p3 = i + 1 < count ? vs[i + 1] : vs[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = (e1X * e2Y - e1Y * e2X);
			var triangleArea = 0.5 * D;
			area += triangleArea;
			c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
			c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
		}
		c.x *= 1.0 / area;
		c.y *= 1.0 / area;
		return c;
	};
	/** @type {!Box2D.Common.Math.b2Mat22} */
	Box2D.Collision.Shapes.b2PolygonShape.s_mat = new Box2D.Common.Math.b2Mat22();
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.NAME = 'b2PolygonShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ContactID = function() {
		/** @type {number} */
		this._key = 0;
		/** @type {number} */
		this._referenceEdge = 0;
		/** @type {number} */
		this._incidentEdge = 0;
		/** @type {number} */
		this._incidentVertex = 0;
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.b2ContactID.prototype.GetKey = function () {
		return this._key;
	};
	/**
	 * @param {number} key
	 */
	Box2D.Collision.b2ContactID.prototype.SetKey = function (key) {
		this._key = key;
		this._referenceEdge = this._key & 0x000000ff;
		this._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;
		this._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;
		this._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;
	};
	/**
	 * @param {!Box2D.Collision.b2ContactID} id
	 */
	Box2D.Collision.b2ContactID.prototype.Set = function (id) {
		this.SetKey(id._key);
	};
	/**
	 * @param {number} edge
	 */
	Box2D.Collision.b2ContactID.prototype.SetReferenceEdge = function(edge) {
		this._referenceEdge = edge;
		this._key = (this._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);
	};
	/**
	 * @param {number} edge
	 */
	Box2D.Collision.b2ContactID.prototype.SetIncidentEdge = function(edge) {
		this._incidentEdge = edge;
		this._key = (this._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);
	};
	/**
	 * @param {number} vertex
	 */
	Box2D.Collision.b2ContactID.prototype.SetIncidentVertex = function(vertex) {
		this._incidentVertex = vertex;
		this._key = (this._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);
	};
	/**
	 * @param {number} flip
	 */
	Box2D.Collision.b2ContactID.prototype.SetFlip = function(flip) {
		this._flip = flip;
		this._key = (this._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);
	};
	Box2D.Collision.b2ContactID.prototype.Copy = function () {
	  var id = new Box2D.Collision.b2ContactID();
	  id.Set(this);
	  return id;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.ClipVertex = function() {
		this.v = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.id = new Box2D.Collision.b2ContactID();
	};
	Box2D.Collision.ClipVertex.prototype.Set = function(other) {
		this.v.SetV(other.v);
		this.id.Set(other.id);
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';
	/**
	 * @private
	 * @constructor
	 */
	Box2D.Collision.b2AABB = function() {
		this.lowerBound_ = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.upperBound_ = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Collision.b2AABB>}
	 */
	Box2D.Collision.b2AABB._freeCache = [];
	/**
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2AABB.Get = function() {
		if (Box2D.Collision.b2AABB._freeCache.length > 0) {
			var aabb = Box2D.Collision.b2AABB._freeCache.pop();
			aabb.SetZero();
			return aabb;
		}
		return new Box2D.Collision.b2AABB();
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2AABB.Free = function(aabb) {
		Box2D.Collision.b2AABB._freeCache.push(aabb);
	};
	Box2D.Collision.b2AABB.prototype.SetZero = function() {
		this.lowerBound_.Set(0, 0);
		this.upperBound_.Set(0, 0);
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.IsValid = function() {
		var dX = this.upperBound_.x - this.lowerBound_.x;
		if (dX < 0) {
			return false;
		}
		var dY = this.upperBound_.y - this.lowerBound_.y;
		if (dY < 0) {
			return false;
		}
		return this.lowerBound_.IsValid() && this.upperBound_.IsValid();
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.b2AABB.prototype.GetCenter = function() {
		return Box2D.Common.Math.b2Vec2.Get((this.lowerBound_.x + this.upperBound_.x) / 2, (this.lowerBound_.y + this.upperBound_.y) / 2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} newCenter
	 */
	Box2D.Collision.b2AABB.prototype.SetCenter = function(newCenter) {
		var oldCenter = this.GetCenter();
		this.lowerBound_.Subtract(oldCenter);
		this.upperBound_.Subtract(oldCenter);
		this.lowerBound_.Add(newCenter);
		this.upperBound_.Add(newCenter);
		Box2D.Common.Math.b2Vec2.Free(oldCenter);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.b2AABB.prototype.GetExtents = function() {
		return Box2D.Common.Math.b2Vec2.Get((this.upperBound_.x - this.lowerBound_.x) / 2, (this.upperBound_.y - this.lowerBound_.y) / 2);
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.Contains = function(aabb) {
		var result = true;
		result = result && this.lowerBound_.x <= aabb.lowerBound_.x;
		result = result && this.lowerBound_.y <= aabb.lowerBound_.y;
		result = result && aabb.upperBound_.x <= this.upperBound_.x;
		result = result && aabb.upperBound_.y <= this.upperBound_.y;
		return result;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.RayCast = function(output, input) {
		var tmin = (-Number.MAX_VALUE);
		var tmax = Number.MAX_VALUE;
		var dX = input.p2.x - input.p1.x;
		var absDX = Math.abs(dX);
		if (absDX < Number.MIN_VALUE) {
			if (input.p1.x < this.lowerBound_.x || this.upperBound_.x < input.p1.x) {
				return false;
			}
		} else {
			var inv_d = 1.0 / dX;
			var t1 = (this.lowerBound_.x - input.p1.x) * inv_d;
			var t2 = (this.upperBound_.x - input.p1.x) * inv_d;
			var s = (-1.0);
			if (t1 > t2) {
				var t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if (t1 > tmin) {
				output.normal.x = s;
				output.normal.y = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax, t2);
			if (tmin > tmax) return false;
		}
		var dY = input.p2.y - input.p1.y;
		var absDY = Math.abs(dY);
		if (absDY < Number.MIN_VALUE) {
			if (input.p1.y < this.lowerBound_.y || this.upperBound_.y < input.p1.y) {
				return false;
			}
		} else {
			var inv_d = 1.0 / dY;
			var t1 = (this.lowerBound_.y - input.p1.y) * inv_d;
			var t2 = (this.upperBound_.y - input.p1.y) * inv_d;
			var s = (-1.0);
			if (t1 > t2) {
				var t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if (t1 > tmin) {
				output.normal.y = s;
				output.normal.x = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax, t2);
			if (tmin > tmax) {
				return false;
			}
		}
		output.fraction = tmin;
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} other
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.TestOverlap = function(other) {
		if ( other.lowerBound_.x - this.upperBound_.x > 0 ) { return false; }
		if ( other.lowerBound_.y - this.upperBound_.y > 0 ) { return false; }
		if ( this.lowerBound_.x - other.upperBound_.x > 0 ) { return false; }
		if ( this.lowerBound_.y - other.upperBound_.y > 0 ) { return false; }
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb1
	 * @param {!Box2D.Collision.b2AABB} aabb2
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2AABB.Combine = function(aabb1, aabb2) {
		var aabb = Box2D.Collision.b2AABB.Get();
		aabb.Combine(aabb1, aabb2);
		return aabb;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb1
	 * @param {!Box2D.Collision.b2AABB} aabb2
	 */
	Box2D.Collision.b2AABB.prototype.Combine = function(aabb1, aabb2) {
		this.lowerBound_.x = Math.min(aabb1.lowerBound_.x, aabb2.lowerBound_.x);
		this.lowerBound_.y = Math.min(aabb1.lowerBound_.y, aabb2.lowerBound_.y);
		this.upperBound_.x = Math.max(aabb1.upperBound_.x, aabb2.upperBound_.x);
		this.upperBound_.y = Math.max(aabb1.upperBound_.y, aabb2.upperBound_.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} vOut
	 * @param {!Box2D.Common.Math.b2Vec2} vIn
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 */
	Box2D.Collision.b2Collision.ClipSegmentToLine = function(vOut, vIn, normal, offset) {
		var numOut = 0;
		var vIn0 = vIn[0].v;
		var vIn1 = vIn[1].v;
		var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
		var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
		if (distance0 <= 0.0) {
			vOut[numOut++].Set(vIn[0]);
		}
		if (distance1 <= 0.0) {
			vOut[numOut++].Set(vIn[1]);
		}
		if (distance0 * distance1 < 0.0) {
			var interp = distance0 / (distance0 - distance1);
			var tVec = vOut[numOut].v;
			tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
			tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
			if (distance0 > 0.0) {
				vOut[numOut].id = vIn[0].id;
			} else {
				vOut[numOut].id = vIn[1].id;
			}
			numOut++;
		}
		return numOut;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly1
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @param {number} edge1
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly2
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @return {number}
	 */
	Box2D.Collision.b2Collision.EdgeSeparation = function(poly1, xf1, edge1, poly2, xf2) {
		var normal1WorldX = (xf1.R.col1.x * poly1.m_normals[edge1].x + xf1.R.col2.x * poly1.m_normals[edge1].y);
		var normal1WorldY = (xf1.R.col1.y * poly1.m_normals[edge1].x + xf1.R.col2.y * poly1.m_normals[edge1].y);
		var normal1X = (xf2.R.col1.x * normal1WorldX + xf2.R.col1.y * normal1WorldY);
		var normal1Y = (xf2.R.col2.x * normal1WorldX + xf2.R.col2.y * normal1WorldY);
		var index = 0;
		var minDot = Number.MAX_VALUE;
		for (var i = 0; i < poly2.m_vertexCount; i++) {
			var dot = poly2.m_vertices[i].x * normal1X + poly2.m_vertices[i].y * normal1Y;
			if (dot < minDot) {
				minDot = dot;
				index = i;
			}
		}
		var v1X = xf1.position.x + (xf1.R.col1.x * poly1.m_vertices[edge1].x + xf1.R.col2.x * poly1.m_vertices[edge1].y);
		var v1Y = xf1.position.y + (xf1.R.col1.y * poly1.m_vertices[edge1].x + xf1.R.col2.y * poly1.m_vertices[edge1].y);
		var v2X = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[index].x + xf2.R.col2.x * poly2.m_vertices[index].y);
		var v2Y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[index].x + xf2.R.col2.y * poly2.m_vertices[index].y);
		var separation = (v2X - v1X) * normal1WorldX + (v2Y - v1Y) * normal1WorldY;
		return separation;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly1
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly2
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @return {{bestEdge: number, separation: number}}
	 */
	Box2D.Collision.b2Collision.FindMaxSeparation = function(poly1, xf1, poly2, xf2) {
		var dX = xf2.position.x + (xf2.R.col1.x * poly2.m_centroid.x + xf2.R.col2.x * poly2.m_centroid.y);
		var dY = xf2.position.y + (xf2.R.col1.y * poly2.m_centroid.x + xf2.R.col2.y * poly2.m_centroid.y);
		dX -= xf1.position.x + (xf1.R.col1.x * poly1.m_centroid.x + xf1.R.col2.x * poly1.m_centroid.y);
		dY -= xf1.position.y + (xf1.R.col1.y * poly1.m_centroid.x + xf1.R.col2.y * poly1.m_centroid.y);
		var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
		var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
		var edge = 0;
		var maxDot = (-Number.MAX_VALUE);
		for (var i = 0; i < poly1.m_vertexCount; ++i) {
			var dot = (poly1.m_normals[i].x * dLocal1X + poly1.m_normals[i].y * dLocal1Y);
			if (dot > maxDot) {
				maxDot = dot;
				edge = i;
			}
		}
		var s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
		var prevEdge = edge - 1;
		if (prevEdge < 0) {
			prevEdge = poly1.m_vertexCount - 1;
		}
		var sPrev = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
		var nextEdge = edge + 1;
		if (nextEdge >= poly1.m_vertexCount) {
			nextEdge = 0;
		}
		var sNext = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
		var bestEdge = 0;
		var bestSeparation = 0;
		if (sPrev > s && sPrev > sNext) {
			bestEdge = prevEdge;
			bestSeparation = sPrev;
			while (true) {
				edge = bestEdge - 1;
				if (edge < 0) {
					edge = poly1.m_vertexCount - 1;
				}
				s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
				if (s > bestSeparation) {
					bestEdge = edge;
					bestSeparation = s;
				} else {
					break;
				}
			}
		} else if (sNext > s) {
			bestEdge = nextEdge;
			bestSeparation = sNext;
			while (true) {
				edge = bestEdge + 1;
				if (edge >= poly1.m_vertexCount) {
					edge = 0;
				}
				s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
				if (s > bestSeparation) {
					bestEdge = edge;
					bestSeparation = s;
				} else {
					break;
				}
			}
		} else {
			bestEdge = edge;
			bestSeparation = s;
		}
		return {bestEdge: bestEdge, separation: bestSeparation};
	};
	Box2D.Collision.b2Collision.FindIncidentEdge = function(c, poly1, xf1, edge1, poly2, xf2) {
		if (edge1 === undefined) edge1 = 0;
		var normal1X = (xf1.R.col1.x * poly1.m_normals[edge1].x + xf1.R.col2.x * poly1.m_normals[edge1].y);
		var normal1Y = (xf1.R.col1.y * poly1.m_normals[edge1].x + xf1.R.col2.y * poly1.m_normals[edge1].y);
		var tX = (xf2.R.col1.x * normal1X + xf2.R.col1.y * normal1Y);
		normal1Y = (xf2.R.col2.x * normal1X + xf2.R.col2.y * normal1Y);
		normal1X = tX;
		var i1 = 0;
		var minDot = Number.MAX_VALUE;
		for (var i = 0; i < poly2.m_vertexCount; i++) {
			var dot = (normal1X * poly2.m_normals[i].x + normal1Y * poly2.m_normals[i].y);
			if (dot < minDot) {
				minDot = dot;
				i1 = i;
			}
		}
		var i2 = i1 + 1;
		if (i2 >= poly2.m_vertexCount) {
			i2 = 0;
		}
		c[0].v.x = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[i1].x + xf2.R.col2.x * poly2.m_vertices[i1].y);
		c[0].v.y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[i1].x + xf2.R.col2.y * poly2.m_vertices[i1].y);
		c[0].id.SetReferenceEdge(edge1);
		c[0].id.SetIncidentEdge(i1);
		c[0].id.SetIncidentVertex(0);
		c[1].v.x = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[i2].x + xf2.R.col2.x * poly2.m_vertices[i2].y);
		c[1].v.y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[i2].x + xf2.R.col2.y * poly2.m_vertices[i2].y);
		c[1].id.SetReferenceEdge(edge1);
		c[1].id.SetIncidentEdge(i2);
		c[1].id.SetIncidentVertex(1);
	};
	Box2D.Collision.b2Collision.MakeClipPointVector = function() {
		return [new Box2D.Collision.ClipVertex(), new Box2D.Collision.ClipVertex()];
	};
	Box2D.Collision.b2Collision.CollidePolygons = function(manifold, polyA, xfA, polyB, xfB) {
		manifold.m_pointCount = 0;
		var totalRadius = polyA.m_radius + polyB.m_radius;
		var separationEdgeA = Box2D.Collision.b2Collision.FindMaxSeparation(polyA, xfA, polyB, xfB);
		var edge1 = separationEdgeA.bestEdge;
		if (separationEdgeA.separation > totalRadius) {
			return;
		}
		var separationEdgeB = Box2D.Collision.b2Collision.FindMaxSeparation(polyB, xfB, polyA, xfA);
		if (separationEdgeB.separation > totalRadius) {
			return;
		}
		var poly1 = polyA;
		var poly2 = polyB;
		var xf1 = xfA;
		var xf2 = xfB;
		var flip = 0;
		manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
		if (separationEdgeB.separation > 0.98 /* k_relativeTol */ * separationEdgeA.separation + 0.001 /* k_absoluteTol */ ) {
			poly1 = polyB;
			poly2 = polyA;
			xf1 = xfB;
			xf2 = xfA;
			edge1 = separationEdgeB.bestEdge;
			manifold.m_type = Box2D.Collision.b2Manifold.e_faceB;
			flip = 1;
		}
		var incidentEdge = Box2D.Collision.b2Collision.s_incidentEdge;
		Box2D.Collision.b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
		var local_v11 = poly1.m_vertices[edge1];
		var local_v12;
		if (edge1 + 1 < poly1.m_vertexCount) {
			local_v12 = poly1.m_vertices[edge1 + 1];
		} else {
			local_v12 = poly1.m_vertices[0];
		}
		Box2D.Collision.b2Collision.s_localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);
		Box2D.Collision.b2Collision.s_localTangent.Normalize();
		Box2D.Collision.b2Collision.s_localNormal.x = Box2D.Collision.b2Collision.s_localTangent.y;
		Box2D.Collision.b2Collision.s_localNormal.y = (-Box2D.Collision.b2Collision.s_localTangent.x);
		Box2D.Collision.b2Collision.s_planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));
		Box2D.Collision.b2Collision.s_tangent.x = (xf1.R.col1.x * Box2D.Collision.b2Collision.s_localTangent.x + xf1.R.col2.x * Box2D.Collision.b2Collision.s_localTangent.y);
		Box2D.Collision.b2Collision.s_tangent.y = (xf1.R.col1.y * Box2D.Collision.b2Collision.s_localTangent.x + xf1.R.col2.y * Box2D.Collision.b2Collision.s_localTangent.y);
		Box2D.Collision.b2Collision.s_tangent2.x = (-Box2D.Collision.b2Collision.s_tangent.x);
		Box2D.Collision.b2Collision.s_tangent2.y = (-Box2D.Collision.b2Collision.s_tangent.y);
		Box2D.Collision.b2Collision.s_normal.x = Box2D.Collision.b2Collision.s_tangent.y;
		Box2D.Collision.b2Collision.s_normal.y = (-Box2D.Collision.b2Collision.s_tangent.x);
		Box2D.Collision.b2Collision.s_v11.x = xf1.position.x + (xf1.R.col1.x * local_v11.x + xf1.R.col2.x * local_v11.y);
		Box2D.Collision.b2Collision.s_v11.y = xf1.position.y + (xf1.R.col1.y * local_v11.x + xf1.R.col2.y * local_v11.y);
		Box2D.Collision.b2Collision.s_v12.x = xf1.position.x + (xf1.R.col1.x * local_v12.x + xf1.R.col2.x * local_v12.y);
		Box2D.Collision.b2Collision.s_v12.y = xf1.position.y + (xf1.R.col1.y * local_v12.x + xf1.R.col2.y * local_v12.y);
		var sideOffset1 = (-Box2D.Collision.b2Collision.s_tangent.x * Box2D.Collision.b2Collision.s_v11.x) - Box2D.Collision.b2Collision.s_tangent.y * Box2D.Collision.b2Collision.s_v11.y + totalRadius;
		if (Box2D.Collision.b2Collision.ClipSegmentToLine(Box2D.Collision.b2Collision.s_clipPoints1, incidentEdge, Box2D.Collision.b2Collision.s_tangent2, sideOffset1) < 2) {
			return;
		}
		var sideOffset2 = Box2D.Collision.b2Collision.s_tangent.x * Box2D.Collision.b2Collision.s_v12.x + Box2D.Collision.b2Collision.s_tangent.y * Box2D.Collision.b2Collision.s_v12.y + totalRadius;
		if (Box2D.Collision.b2Collision.ClipSegmentToLine(Box2D.Collision.b2Collision.s_clipPoints2, Box2D.Collision.b2Collision.s_clipPoints1, Box2D.Collision.b2Collision.s_tangent, sideOffset2) < 2) {
			return;
		}
		manifold.m_localPlaneNormal.SetV(Box2D.Collision.b2Collision.s_localNormal);
		manifold.m_localPoint.SetV(Box2D.Collision.b2Collision.s_planePoint);
		var frontOffset = Box2D.Collision.b2Collision.s_normal.x * Box2D.Collision.b2Collision.s_v11.x + Box2D.Collision.b2Collision.s_normal.y * Box2D.Collision.b2Collision.s_v11.y;
		var pointCount = 0;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; ++i) {
			var separation = Box2D.Collision.b2Collision.s_normal.x * Box2D.Collision.b2Collision.s_clipPoints2[i].v.x + Box2D.Collision.b2Collision.s_normal.y * Box2D.Collision.b2Collision.s_clipPoints2[i].v.y - frontOffset;
			if (separation <= totalRadius) {
				var tX = Box2D.Collision.b2Collision.s_clipPoints2[i].v.x - xf2.position.x;
				var tY = Box2D.Collision.b2Collision.s_clipPoints2[i].v.y - xf2.position.y;
				manifold.m_points[pointCount].m_localPoint.x = (tX * xf2.R.col1.x + tY * xf2.R.col1.y);
				manifold.m_points[pointCount].m_localPoint.y = (tX * xf2.R.col2.x + tY * xf2.R.col2.y);
				manifold.m_points[pointCount].m_id.Set(Box2D.Collision.b2Collision.s_clipPoints2[i].id);
				manifold.m_points[pointCount].m_id.SetFlip(flip);
				pointCount++;
			}
		}
		manifold.m_pointCount = pointCount;
	};
	Box2D.Collision.b2Collision.CollideCircles = function(manifold, circle1, xf1, circle2, xf2) {
		manifold.m_pointCount = 0;
		var p1X = xf1.position.x + (xf1.R.col1.x * circle1.m_p.x + xf1.R.col2.x * circle1.m_p.y);
		var p1Y = xf1.position.y + (xf1.R.col1.y * circle1.m_p.x + xf1.R.col2.y * circle1.m_p.y);
		var p2X = xf2.position.x + (xf2.R.col1.x * circle2.m_p.x + xf2.R.col2.x * circle2.m_p.y);
		var p2Y = xf2.position.y + (xf2.R.col1.y * circle2.m_p.x + xf2.R.col2.y * circle2.m_p.y);
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var distSqr = dX * dX + dY * dY;
		var radius = circle1.m_radius + circle2.m_radius;
		if (distSqr > radius * radius) {
			return;
		}
		manifold.m_type = Box2D.Collision.b2Manifold.e_circles;
		manifold.m_localPoint.SetV(circle1.m_p);
		manifold.m_localPlaneNormal.SetZero();
		manifold.m_pointCount = 1;
		manifold.m_points[0].m_localPoint.SetV(circle2.m_p);
		manifold.m_points[0].m_id.SetKey(0);
	};
	Box2D.Collision.b2Collision.CollidePolygonAndCircle = function(manifold, polygon, xf1, circle, xf2) {
		manifold.m_pointCount = 0;
		var dX = xf2.position.x + (xf2.R.col1.x * circle.m_p.x + xf2.R.col2.x * circle.m_p.y) - xf1.position.x;
		var dY = xf2.position.y + (xf2.R.col1.y * circle.m_p.x + xf2.R.col2.y * circle.m_p.y) - xf1.position.y;
		var cLocalX = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
		var cLocalY = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
		var normalIndex = 0;
		var separation = (-Number.MAX_VALUE);
		var radius = polygon.m_radius + circle.m_radius;
		for (var i = 0; i < polygon.m_vertexCount; ++i) {
			var s = polygon.m_normals[i].x * (cLocalX - polygon.m_vertices[i].x) + polygon.m_normals[i].y * (cLocalY - polygon.m_vertices[i].y);
			if (s > radius) {
				return;
			}
			if (s > separation) {
				separation = s;
				normalIndex = i;
			}
		}
		var vertIndex2 = normalIndex + 1;
		if (vertIndex2 >= polygon.m_vertexCount) {
			vertIndex2 = 0;
		}
		var v1 = polygon.m_vertices[normalIndex];
		var v2 = polygon.m_vertices[vertIndex2];
		if (separation < Number.MIN_VALUE) {
			manifold.m_pointCount = 1;
			manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
			manifold.m_localPlaneNormal.SetV(polygon.m_normals[normalIndex]);
			manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
			manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
			manifold.m_points[0].m_localPoint.SetV(circle.m_p);
			manifold.m_points[0].m_id.SetKey(0);
		} else {
			var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
			if (u1 <= 0.0) {
				if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
				manifold.m_pointCount = 1;
				manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
				manifold.m_localPlaneNormal.x = cLocalX - v1.x;
				manifold.m_localPlaneNormal.y = cLocalY - v1.y;
				manifold.m_localPlaneNormal.Normalize();
				manifold.m_localPoint.SetV(v1);
				manifold.m_points[0].m_localPoint.SetV(circle.m_p);
				manifold.m_points[0].m_id.SetKey(0);
			} else {
				var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
				if (u2 <= 0) {
					if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
					manifold.m_pointCount = 1;
					manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
					manifold.m_localPlaneNormal.x = cLocalX - v2.x;
					manifold.m_localPlaneNormal.y = cLocalY - v2.y;
					manifold.m_localPlaneNormal.Normalize();
					manifold.m_localPoint.SetV(v2);
					manifold.m_points[0].m_localPoint.SetV(circle.m_p);
					manifold.m_points[0].m_id.SetKey(0);
				} else {
					var faceCenterX = 0.5 * (v1.x + v2.x);
					var faceCenterY = 0.5 * (v1.y + v2.y);
					separation = (cLocalX - faceCenterX) * polygon.m_normals[normalIndex].x + (cLocalY - faceCenterY) * polygon.m_normals[normalIndex].y;
					if (separation > radius) return;
					manifold.m_pointCount = 1;
					manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
					manifold.m_localPlaneNormal.x = polygon.m_normals[normalIndex].x;
					manifold.m_localPlaneNormal.y = polygon.m_normals[normalIndex].y;
					manifold.m_localPlaneNormal.Normalize();
					manifold.m_localPoint.Set(faceCenterX, faceCenterY);
					manifold.m_points[0].m_localPoint.SetV(circle.m_p);
					manifold.m_points[0].m_id.SetKey(0);
				}
			}
		}
	};
	Box2D.Collision.b2Collision.TestOverlap = function(a, b) {
		if (b.lowerBound_.x - a.upperBound_.x > 0) {
			return false;
		}
		if (b.lowerBound_.y - a.upperBound_.y > 0) {
			return false;
		}
		if (a.lowerBound_.x - b.upperBound_.x > 0) {
			return false;
		}
		if (a.lowerBound_.y - b.upperBound_.y > 0) {
			return false;
		}
		return true;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ContactPoint = function() {
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.velocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.id = new Box2D.Collision.b2ContactID();
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceOutput} output
	 * @param {!Box2D.Collision.b2SimplexCache} cache
	 * @param {!Box2D.Collision.b2DistanceInput} input
	 */
	Box2D.Collision.b2Distance.Distance = function(output, cache, input) {
		var s_simplex = new Box2D.Collision.b2Simplex();
		s_simplex.ReadCache(cache, input.proxyA, input.transformA, input.proxyB, input.transformB);
		if (s_simplex.m_count < 1 || s_simplex.m_count > 3) {
;
		}
		var iter = 0;
		while (iter < 20) {
			var save = [];
			for (var i = 0; i < s_simplex.m_count; i++) {
				save[i] = {};
				save[i].indexA = s_simplex.m_vertices[i].indexA;
				save[i].indexB = s_simplex.m_vertices[i].indexB;
			}
			if (s_simplex.m_count == 2) {
				s_simplex.Solve2();
			} else if (s_simplex.m_count == 3) {
				s_simplex.Solve3();
			}
			if (s_simplex.m_count == 3) {
				break;
			}
			var d = s_simplex.GetSearchDirection();
			if (d.LengthSquared() < Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
				break;
			}
			var negD = d.GetNegative();
			s_simplex.m_vertices[s_simplex.m_count].indexA = input.proxyA.GetSupport(Box2D.Common.Math.b2Math.MulTMV(input.transformA.R, negD));
			s_simplex.m_vertices[s_simplex.m_count].wA = Box2D.Common.Math.b2Math.MulX(input.transformA, input.proxyA.GetVertex(s_simplex.m_vertices[s_simplex.m_count].indexA));
			s_simplex.m_vertices[s_simplex.m_count].indexB = input.proxyB.GetSupport(Box2D.Common.Math.b2Math.MulTMV(input.transformB.R, d));
			s_simplex.m_vertices[s_simplex.m_count].wB = Box2D.Common.Math.b2Math.MulX(input.transformB, input.proxyB.GetVertex(s_simplex.m_vertices[s_simplex.m_count].indexB));
			s_simplex.m_vertices[s_simplex.m_count].w = Box2D.Common.Math.b2Math.SubtractVV(s_simplex.m_vertices[s_simplex.m_count].wB, s_simplex.m_vertices[s_simplex.m_count].wA);
			Box2D.Common.Math.b2Vec2.Free(d);
			Box2D.Common.Math.b2Vec2.Free(negD);
			iter++;
			var duplicate = false;
			for (var i = 0; i < save.length; i++) {
				if (s_simplex.m_vertices[s_simplex.m_count].indexA == save[i].indexA && s_simplex.m_vertices[s_simplex.m_count].indexB == save[i].indexB) {
					duplicate = true;
					break;
				}
			}
			if (duplicate) {
				break;
			}
			s_simplex.m_count++;
		}
		s_simplex.GetWitnessPoints(output.pointA, output.pointB);
		output.distance = Box2D.Common.Math.b2Math.SubtractVV(output.pointA, output.pointB).Length();
		s_simplex.WriteCache(cache);
		if (input.useRadii) {
			var rA = input.proxyA.m_radius;
			var rB = input.proxyB.m_radius;
			if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
				output.distance -= rA + rB;
				var normal = Box2D.Common.Math.b2Math.SubtractVV(output.pointB, output.pointA);
				normal.Normalize();
				output.pointA.x += rA * normal.x;
				output.pointA.y += rA * normal.y;
				output.pointB.x -= rB * normal.x;
				output.pointB.y -= rB * normal.y;
				Box2D.Common.Math.b2Vec2.Free(normal);
			} else {
				var p = Box2D.Common.Math.b2Vec2.Get(0, 0);
				p.x = 0.5 * (output.pointA.x + output.pointB.x);
				p.y = 0.5 * (output.pointA.y + output.pointB.y);
				output.pointA.x = output.pointB.x = p.x;
				output.pointA.y = output.pointB.y = p.y;
				output.distance = 0.0;
				Box2D.Common.Math.b2Vec2.Free(p);
			}
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceInput = function () {};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceOutput = function () {
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.pointA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.pointB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.distance = 0;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceProxy = function() {};
	Box2D.Collision.b2DistanceProxy.prototype.Set = function (shape) {
		shape.SetDistanceProxy(this);
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetSupport = function (d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_count; i++) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetSupportVertex = function (d) {
		return this.m_vertices[this.GetSupport(d)];
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetVertexCount = function () {
		return this.m_count;
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetVertex = function (index) {
		if (index === undefined) index = 0;
;
		return this.m_vertices[index];
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTree = function() {
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.m_root = null;
		/** @type {number} */
		this.m_path = 0;
		/** @type {number} */
		this.m_insertionCount = 0;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {Box2D.Dynamics.b2Fixture} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTree.prototype.CreateProxy = function(aabb, fixture) {
		var node = Box2D.Collision.b2DynamicTreeNode.Get(fixture);
		var extendX = Box2D.Common.b2Settings.b2_aabbExtension;
		var extendY = Box2D.Common.b2Settings.b2_aabbExtension;
		node.aabb.lowerBound_.x = aabb.lowerBound_.x - extendX;
		node.aabb.lowerBound_.y = aabb.lowerBound_.y - extendY;
		node.aabb.upperBound_.x = aabb.upperBound_.x + extendX;
		node.aabb.upperBound_.y = aabb.upperBound_.y + extendY;
		this.InsertLeaf(node);
		return node;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 */
	Box2D.Collision.b2DynamicTree.prototype.DestroyProxy = function(proxy) {
		this.RemoveLeaf(proxy);
		proxy.Destroy();
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Vec2} displacement
	 * @return {boolean}
	 */
	Box2D.Collision.b2DynamicTree.prototype.MoveProxy = function(proxy, aabb, displacement) {
;
		if (proxy.aabb.Contains(aabb)) {
			return false;
		}
		this.RemoveLeaf(proxy);
		var extendX = Box2D.Common.b2Settings.b2_aabbExtension + Box2D.Common.b2Settings.b2_aabbMultiplier * Math.abs(displacement.x);
		var extendY = Box2D.Common.b2Settings.b2_aabbExtension + Box2D.Common.b2Settings.b2_aabbMultiplier * Math.abs(displacement.y);
		proxy.aabb.lowerBound_.x = aabb.lowerBound_.x - extendX;
		proxy.aabb.lowerBound_.y = aabb.lowerBound_.y - extendY;
		proxy.aabb.upperBound_.x = aabb.upperBound_.x + extendX;
		proxy.aabb.upperBound_.y = aabb.upperBound_.y + extendY;
		this.InsertLeaf(proxy);
		return true;
	};
	/**
	 * @param {number} iterations
	 */
	Box2D.Collision.b2DynamicTree.prototype.Rebalance = function(iterations) {
		if (this.m_root !== null) {
			for (var i = 0; i < iterations; i++) {
				var node = this.m_root;
				var bit = 0;
				while (!node.IsLeaf()) {
					node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;
					bit = (bit + 1) & 31;
				}
				this.m_path++;
				this.RemoveLeaf(node);
				this.InsertLeaf(node);
			}
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2DynamicTree.prototype.GetFatAABB = function(proxy) {
		return proxy.aabb;
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2DynamicTree.prototype.Query = function(callback, aabb) {
		if (this.m_root !== null) {
			var stack = [];
			stack.push(this.m_root);
			while (stack.length > 0) {
				var node = stack.pop();
				if (node.aabb.TestOverlap(aabb)) {
					if (node.IsLeaf()) {
						if (!callback(node.fixture)) {
							return;
						}
					} else {
						stack.push(node.child1);
						stack.push(node.child2);
					}
				}
			}
		}
	};
	/**
	 * @param {function(!Box2D.Collision.b2RayCastInput, !Box2D.Dynamics.b2Fixture): number} callback
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 */
	Box2D.Collision.b2DynamicTree.prototype.RayCast = function(callback, input) {
		if (this.m_root === null) {
			return;
		}
		var r = Box2D.Common.Math.b2Math.SubtractVV(input.p1, input.p2);
		r.Normalize();
		var v = Box2D.Common.Math.b2Math.CrossFV(1.0, r);
		var abs_v = Box2D.Common.Math.b2Math.AbsV(v);
		var maxFraction = input.maxFraction;
		var tX = input.p1.x + maxFraction * (input.p2.x - input.p1.x);
		var tY = input.p1.y + maxFraction * (input.p2.y - input.p1.y);
		var segmentAABB = Box2D.Collision.b2AABB.Get();
		segmentAABB.lowerBound_.x = Math.min(input.p1.x, tX);
		segmentAABB.lowerBound_.y = Math.min(input.p1.y, tY);
		segmentAABB.upperBound_.x = Math.max(input.p1.x, tX);
		segmentAABB.upperBound_.y = Math.max(input.p1.y, tY);
		var stack = [];
		stack.push(this.m_root);
		while (stack.length > 0) {
			var node = stack.pop();
			if (!node.aabb.TestOverlap(segmentAABB)) {
				continue;
			}
			var c = node.aabb.GetCenter();
			var h = node.aabb.GetExtents();
			var separation = Math.abs(v.x * (input.p1.x - c.x) + v.y * (input.p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
			if (separation > 0.0) {
				continue;
			}
			if (node.IsLeaf()) {
				var subInput = new Box2D.Collision.b2RayCastInput(input.p1, input.p2, input.maxFraction);
				maxFraction = callback(input, node.fixture);
				if (maxFraction == 0.0) {
					break;
				}
				if (maxFraction > 0.0) {
					tX = input.p1.x + maxFraction * (input.p2.x - input.p1.x);
					tY = input.p1.y + maxFraction * (input.p2.y - input.p1.y);
					segmentAABB.lowerBound_.x = Math.min(input.p1.x, tX);
					segmentAABB.lowerBound_.y = Math.min(input.p1.y, tY);
					segmentAABB.upperBound_.x = Math.max(input.p1.x, tX);
					segmentAABB.upperBound_.y = Math.max(input.p1.y, tY);
				}
			} else {
				stack.push(node.child1);
				stack.push(node.child2);
			}
		}
		Box2D.Collision.b2AABB.Free(segmentAABB);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 */
	Box2D.Collision.b2DynamicTree.prototype.InsertLeaf = function(leaf) {
		this.m_insertionCount++;
		if (this.m_root === null) {
			this.m_root = leaf;
			this.m_root.parent = null;
			return;
		}
		var sibling = this.GetBestSibling(leaf);
		var parent = sibling.parent;
		var node2 = Box2D.Collision.b2DynamicTreeNode.Get();
		node2.parent = parent;
		node2.aabb.Combine(leaf.aabb, sibling.aabb);
		if (parent) {
			if (sibling.parent.child1 == sibling) {
				parent.child1 = node2;
			} else {
				parent.child2 = node2;
			}
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			while (parent) {
				if (parent.aabb.Contains(node2.aabb)) {
					break;
				}
				parent.aabb.Combine(parent.child1.aabb, parent.child2.aabb);
				node2 = parent;
				parent = parent.parent;
			}
		} else {
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			this.m_root = node2;
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTree.prototype.GetBestSibling = function(leaf) {
		var center = leaf.aabb.GetCenter();
		var sibling = this.m_root;
		while(!sibling.IsLeaf()) {
			var child1 = sibling.child1;
			var child2 = sibling.child2;
			var norm1 = Math.abs((child1.aabb.lowerBound_.x + child1.aabb.upperBound_.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound_.y + child1.aabb.upperBound_.y) / 2 - center.y);
			var norm2 = Math.abs((child2.aabb.lowerBound_.x + child2.aabb.upperBound_.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound_.y + child2.aabb.upperBound_.y) / 2 - center.y);
			if (norm1 < norm2) {
				sibling = child1;
			} else {
				sibling = child2;
			}
		}
		Box2D.Common.Math.b2Vec2.Free(center);
		return sibling;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 */
	Box2D.Collision.b2DynamicTree.prototype.RemoveLeaf = function(leaf) {
		if (leaf == this.m_root) {
			this.m_root = null;
			return;
		}
		var node2 = leaf.parent;
		var node1 = node2.parent;
		var sibling;
		if (node2.child1 == leaf) {
			sibling = node2.child2;
		} else {
			sibling = node2.child1;
		}
		if (node1) {
			if (node1.child1 == node2) {
				node1.child1 = sibling;
			} else {
				node1.child2 = sibling;
			}
			sibling.parent = node1;
			while (node1) {
				var oldAABB = node1.aabb;
				node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);
				if (oldAABB.Contains(node1.aabb)) {
					break;
				}
				node1 = node1.parent;
			}
		} else {
			this.m_root = sibling;
			sibling.parent = null;
		}
		node2.Destroy();
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase = function() {
		/**
		 * @private
		 * @type {!Box2D.Collision.b2DynamicTree}
		 */
		this.m_tree = new Box2D.Collision.b2DynamicTree();
		/**
		 * @private
		 * @type {Array.<!Box2D.Collision.b2DynamicTreeNode>}
		 */
		this.m_moveBuffer = [];
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {Box2D.Dynamics.b2Fixture} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.CreateProxy = function(aabb, fixture) {
		var proxy = this.m_tree.CreateProxy(aabb, fixture);
		this.BufferMove(proxy);
		return proxy;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.DestroyProxy = function(proxy) {
		this.UnBufferMove(proxy);
		this.m_tree.DestroyProxy(proxy);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Vec2} displacement
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.MoveProxy = function(proxy, aabb, displacement) {
		var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
		if (buffer) {
			this.BufferMove(proxy);
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxyA
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxyB
	 * @return {boolean}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.TestOverlap = function(proxyA, proxyB) {
		var aabbA = this.m_tree.GetFatAABB(proxyA);
		var aabbB = this.m_tree.GetFatAABB(proxyB);
		return aabbA.TestOverlap(aabbB);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetFatAABB = function(proxy) {
		return this.m_tree.GetFatAABB(proxy);
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetProxyCount = function() {
		return this.m_tree.length;
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture, !Box2D.Dynamics.b2Fixture)} callback
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.UpdatePairs = function(callback) {
		var __this = this;
		var pairs = [];
		while (this.m_moveBuffer.length > 0) {
			var queryProxy = this.m_moveBuffer.pop();
			var QueryCallback = function(fixture) {
				if (fixture != queryProxy.fixture) {
					pairs.push(new Box2D.Collision.b2DynamicTreePair(queryProxy.fixture, fixture));
				}
				return true;
			};
			var fatAABB = this.m_tree.GetFatAABB(queryProxy);
			this.m_tree.Query(QueryCallback, fatAABB);
		}
		var i = 0;
		while(i < pairs.length) {
			var primaryPair = pairs[i];
			callback(primaryPair.fixtureA, primaryPair.fixtureB);
			i++;
			while(i < pairs.length) {
				var pair = pairs[i];
				if (!(pair.fixtureA == primaryPair.fixtureA && pair.fixtureB == primaryPair.fixtureB)
					&& !(pair.fixtureA == primaryPair.fixtureB && pair.fixtureB == primaryPair.fixtureA)) {
					break;
				}
				i++;
			}
		}
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Query = function(callback, aabb) {
		this.m_tree.Query(callback, aabb);
	};
	/**
	 * @param {function(!Box2D.Collision.b2RayCastInput, !Box2D.Dynamics.b2Fixture): number} callback
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.RayCast = function(callback, input) {
		this.m_tree.RayCast(callback, input);
	};
	/**
	 * @param {number} iterations
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Rebalance = function(iterations) {
		this.m_tree.Rebalance(iterations);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.BufferMove = function(proxy) {
		this.m_moveBuffer.push(proxy);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.UnBufferMove = function(proxy) {
		cr.arrayFindRemove(this.m_moveBuffer, proxy);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.__implements = {};
	Box2D.Collision.b2DynamicTreeBroadPhase.__implements[Box2D.Collision.IBroadPhase] = true;
	/**
	 * @private
	 * @param {Box2D.Dynamics.b2Fixture=} fixture
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreeNode = function(fixture) {
		/** @type {!Box2D.Collision.b2AABB} */
		this.aabb = Box2D.Collision.b2AABB.Get();
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.child1 = null;
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.child2 = null;
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.parent = null;
		/** @type {Box2D.Dynamics.b2Fixture} */
		this.fixture = null;
		if (typeof(fixture) != "undefined") {
			this.fixture = fixture;
		}
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Collision.b2DynamicTreeNode>}
	 */
	Box2D.Collision.b2DynamicTreeNode._freeCache = [];
	/**
	 * @param {Box2D.Dynamics.b2Fixture=} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTreeNode.Get = function(fixture) {
		if (Box2D.Collision.b2DynamicTreeNode._freeCache.length > 0) {
			var node = Box2D.Collision.b2DynamicTreeNode._freeCache.pop();
			if (typeof(fixture) != "undefined") {
				node.fixture = fixture;
			}
			node.aabb.SetZero();
			return node;
		}
		return new Box2D.Collision.b2DynamicTreeNode(fixture);
	};
	Box2D.Collision.b2DynamicTreeNode.prototype.Destroy = function() {
		this.child1 = null;
		this.child2 = null;
		this.parent = null;
		this.fixture = null;
		Box2D.Collision.b2DynamicTreeNode._freeCache.push(this);
	};
	/**
	 * @return boolean
	 */
	Box2D.Collision.b2DynamicTreeNode.prototype.IsLeaf = function () {
		return this.child1 === null;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreePair = function(fixtureA, fixtureB) {
		/** @type {!Box2D.Dynamics.b2Fixture} */
		this.fixtureA = fixtureA;
		/** @type {!Box2D.Dynamics.b2Fixture} */
		this.fixtureB = fixtureB;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Manifold = function() {
		this.m_pointCount = 0;
		this.m_type = 0;
		this.m_points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = new Box2D.Collision.b2ManifoldPoint();
		}
		this.m_localPlaneNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2Manifold.prototype.Reset = function() {
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i].Reset();
		}
		this.m_localPlaneNormal.SetZero();
		this.m_localPoint.SetZero();
		this.m_type = 0;
		this.m_pointCount = 0;
	};
	Box2D.Collision.b2Manifold.prototype.Set = function(m) {
		this.m_pointCount = m.m_pointCount;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i].Set(m.m_points[i]);
		}
		this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);
		this.m_localPoint.SetV(m.m_localPoint);
		this.m_type = m.m_type;
	};
	Box2D.Collision.b2Manifold.prototype.Copy = function() {
		var copy = new Box2D.Collision.b2Manifold();
		copy.Set(this);
		return copy;
	};
	Box2D.Collision.b2Manifold.e_circles = 0x0001;
	Box2D.Collision.b2Manifold.e_faceA = 0x0002;
	Box2D.Collision.b2Manifold.e_faceB = 0x0004;
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ManifoldPoint = function() {
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_id = new Box2D.Collision.b2ContactID();
		this.Reset();
	};
	Box2D.Collision.b2ManifoldPoint.prototype.Reset = function() {
		this.m_localPoint.SetZero();
		this.m_normalImpulse = 0.0;
		this.m_tangentImpulse = 0.0;
		this.m_id.SetKey(0);
	};
	Box2D.Collision.b2ManifoldPoint.prototype.Set = function(m) {
		this.m_localPoint.SetV(m.m_localPoint);
		this.m_normalImpulse = m.m_normalImpulse;
		this.m_tangentImpulse = m.m_tangentImpulse;
		this.m_id.Set(m.m_id);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} p1
	 * @param {!Box2D.Common.Math.b2Vec2} p2
	 * @param {number} maxFraction
	 * @constructor
	 */
	Box2D.Collision.b2RayCastInput = function(p1, p2, maxFraction) {
		  this.p1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.p2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  if (maxFraction === undefined) maxFraction = 1;
		  if (p1) this.p1.SetV(p1);
		  if (p2) this.p2.SetV(p2);
		  this.maxFraction = maxFraction;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2RayCastOutput = function() {
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Segment = function() {
		this.p1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.p2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2Segment.prototype.TestSegment = function(lambda, normal, segment, maxLambda) {
		if (maxLambda === undefined) maxLambda = 0;
		var s = segment.p1;
		var rX = segment.p2.x - s.x;
		var rY = segment.p2.y - s.y;
		var dX = this.p2.x - this.p1.x;
		var dY = this.p2.y - this.p1.y;
		var nX = dY;
		var nY = (-dX);
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = (-(rX * nX + rY * nY));
		if (denom > k_slop) {
			var bX = s.x - this.p1.x;
			var bY = s.y - this.p1.y;
			var a = (bX * nX + bY * nY);
			if (0.0 <= a && a <= maxLambda * denom) {
				var mu2 = (-rX * bY) + rY * bX;
				if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					nX /= nLen;
					nY /= nLen;
					lambda[0] = a;
					normal.Set(nX, nY);
					return true;
				}
			}
		}
		return false;
	};
	Box2D.Collision.b2Segment.prototype.Extend = function(aabb) {
		this.ExtendForward(aabb);
		this.ExtendBackward(aabb);
	};
	Box2D.Collision.b2Segment.prototype.ExtendForward = function(aabb) {
		var dX = this.p2.x - this.p1.x;
		var dY = this.p2.y - this.p1.y;
		var lambda = Math.min(dX > 0 ? (aabb.upperBound_.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound_.x - this.p1.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound_.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound_.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);
		this.p2.x = this.p1.x + dX * lambda;
		this.p2.y = this.p1.y + dY * lambda;
	};
	Box2D.Collision.b2Segment.prototype.ExtendBackward = function(aabb) {
		var dX = (-this.p2.x) + this.p1.x;
		var dY = (-this.p2.y) + this.p1.y;
		var lambda = Math.min(dX > 0 ? (aabb.upperBound_.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound_.x - this.p2.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound_.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound_.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);
		this.p1.x = this.p2.x + dX * lambda;
		this.p1.y = this.p2.y + dY * lambda;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SeparationFunction = function() {
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2SeparationFunction.prototype.Initialize = function(cache, proxyA, transformA, proxyB, transformB) {
		this.m_proxyA = proxyA;
		this.m_proxyB = proxyB;
		var count = cache.count;
;
		var localPointA;
		var localPointA1;
		var localPointA2;
		var localPointB;
		var localPointB1;
		var localPointB2;
		var pointAX = 0;
		var pointAY = 0;
		var pointBX = 0;
		var pointBY = 0;
		var normalX = 0;
		var normalY = 0;
		var tMat;
		var tVec;
		var s = 0;
		var sgn = 0;
		if (count == 1) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_points;
			localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			this.m_axis.x = pointBX - pointAX;
			this.m_axis.y = pointBY - pointAY;
			this.m_axis.Normalize();
		} else if (cache.indexB[0] == cache.indexB[1]) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_faceA;
			localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
			localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
			this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
			this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
			this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
			this.m_axis.Normalize();
			tVec = this.m_axis;
			tMat = transformA.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
			if (s < 0.0) {
				this.m_axis.NegativeSelf();
			}
		} else if (cache.indexA[0] == cache.indexA[0]) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_faceB;
			localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
			localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
			this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
			this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
			this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
			this.m_axis.Normalize();
			tVec = this.m_axis;
			tMat = transformB.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
			if (s < 0.0) {
				this.m_axis.NegativeSelf();
			}
		} else {
			localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
			localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
			var dA = Box2D.Common.Math.b2Math.MulMV(transformA.R, Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1));
			var dB = Box2D.Common.Math.b2Math.MulMV(transformB.R, Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1));
			var a = dA.x * dA.x + dA.y * dA.y;
			var e = dB.x * dB.x + dB.y * dB.y;
			var r = Box2D.Common.Math.b2Math.SubtractVV(dB, dA);
			var c = dA.x * r.x + dA.y * r.y;
			var f = dB.x * r.x + dB.y * r.y;
			var b = dA.x * dB.x + dA.y * dB.y;
			var denom = a * e - b * b;
			s = 0.0;
			if (denom != 0.0) {
				s = Box2D.Common.Math.b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);
			}
			var t = (b * s + f) / e;
			if (t < 0.0) {
				t = 0.0;
				s = Box2D.Common.Math.b2Math.Clamp((b - c) / a, 0.0, 1.0);
			}
			localPointA = Box2D.Common.Math.b2Vec2.Get(0, 0);
			localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
			localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
			localPointB = Box2D.Common.Math.b2Vec2.Get(0, 0);
			localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
			localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
			if (s == 0.0 || s == 1.0) {
				this.m_type = Box2D.Collision.b2SeparationFunction.e_faceB;
				this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
				this.m_axis.Normalize();
				this.m_localPoint = localPointB;
				tVec = this.m_axis;
				tMat = transformB.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointA;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
				if (s < 0.0) {
					this.m_axis.NegativeSelf();
				}
			} else {
				this.m_type = Box2D.Collision.b2SeparationFunction.e_faceA;
				this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
				this.m_localPoint = localPointA;
				tVec = this.m_axis;
				tMat = transformA.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointB;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
				if (s < 0.0) {
					this.m_axis.NegativeSelf();
				}
			}
		}
	};
	Box2D.Collision.b2SeparationFunction.prototype.Evaluate = function(transformA, transformB) {
		var axisA;
		var axisB;
		var localPointA;
		var localPointB;
		var pointA;
		var pointB;
		var seperation = 0;
		var normal;
		switch (this.m_type) {
		case Box2D.Collision.b2SeparationFunction.e_points:
			axisA = Box2D.Common.Math.b2Math.MulTMV(transformA.R, this.m_axis);
			axisB = Box2D.Common.Math.b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());
			localPointA = this.m_proxyA.GetSupportVertex(axisA);
			localPointB = this.m_proxyB.GetSupportVertex(axisB);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, localPointA);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, localPointB);
			seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
			break;
		case Box2D.Collision.b2SeparationFunction.e_faceA:
			normal = Box2D.Common.Math.b2Math.MulMV(transformA.R, this.m_axis);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, this.m_localPoint);
			axisB = Box2D.Common.Math.b2Math.MulTMV(transformB.R, normal.GetNegative());
			localPointB = this.m_proxyB.GetSupportVertex(axisB);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, localPointB);
			seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
			break;
		case Box2D.Collision.b2SeparationFunction.e_faceB:
			normal = Box2D.Common.Math.b2Math.MulMV(transformB.R, this.m_axis);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, this.m_localPoint);
			axisA = Box2D.Common.Math.b2Math.MulTMV(transformA.R, normal.GetNegative());
			localPointA = this.m_proxyA.GetSupportVertex(axisA);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, localPointA);
			seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
			break;
		default:
;
			break;
		}
		return seperation;
	};
	Box2D.Collision.b2SeparationFunction.e_points = 0x01;
	Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;
	Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Simplex = function() {
		this.m_v1 = new Box2D.Collision.b2SimplexVertex();
		this.m_v2 = new Box2D.Collision.b2SimplexVertex();
		this.m_v3 = new Box2D.Collision.b2SimplexVertex();
		this.m_vertices = [this.m_v1, this.m_v2, this.m_v3];
	};
	Box2D.Collision.b2Simplex.prototype.ReadCache = function(cache, proxyA, transformA, proxyB, transformB) {
;
		var wALocal;
		var wBLocal;
		this.m_count = cache.count;
		var vertices = this.m_vertices;
		for (var i = 0; i < this.m_count; i++) {
			var v = vertices[i];
			v.indexA = cache.indexA[i];
			v.indexB = cache.indexB[i];
			wALocal = proxyA.GetVertex(v.indexA);
			wBLocal = proxyB.GetVertex(v.indexB);
			v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
			v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
			v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
			v.a = 0;
		}
		if (this.m_count > 1) {
			var metric1 = cache.metric;
			var metric2 = this.GetMetric();
			if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
				this.m_count = 0;
			}
		}
		if (this.m_count == 0) {
			v = vertices[0];
			v.indexA = 0;
			v.indexB = 0;
			wALocal = proxyA.GetVertex(0);
			wBLocal = proxyB.GetVertex(0);
			v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
			v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
			v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
			this.m_count = 1;
		}
	};
	Box2D.Collision.b2Simplex.prototype.WriteCache = function(cache) {
		cache.metric = this.GetMetric();
		cache.count = this.m_count;
		var vertices = this.m_vertices;
		for (var i = 0; i < this.m_count; i++) {
			cache.indexA[i] = vertices[i].indexA;
			cache.indexB[i] = vertices[i].indexB;
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetSearchDirection = function() {
		if (this.m_count == 1) {
			return this.m_v1.w.GetNegative();
		} else if (this.m_count == 2) {
				var e12 = Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
				var sgn = Box2D.Common.Math.b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
				if (sgn > 0.0) {
					return Box2D.Common.Math.b2Math.CrossFV(1.0, e12);
				}
				else {
					return Box2D.Common.Math.b2Math.CrossVF(e12, 1.0);
				}
		} else {
;
			return Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetClosestPoint = function() {
		if (this.m_count == 1) {
			return this.m_v1.w;
		} else if (this.m_count == 2) {
			return Box2D.Common.Math.b2Vec2.Get(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
		} else {
;
			return Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetWitnessPoints = function(pA, pB) {
		if (this.m_count == 1) {
			pA.SetV(this.m_v1.wA);
			pB.SetV(this.m_v1.wB);
		} else if (this.m_count == 2) {
			pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
			pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
			pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
			pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
		} else if (this.m_count == 3) {
			pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
			pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
		} else {
;
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetMetric = function() {
		if (this.m_count == 1) {
			return 0.0;
		} else if (this.m_count == 2) {
			return Box2D.Common.Math.b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
		} else if (this.m_count == 3) {
			return Box2D.Common.Math.b2Math.CrossVV(Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), Box2D.Common.Math.b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
		} else {
;
			return 0.0;
		}
	};
	Box2D.Collision.b2Simplex.prototype.Solve2 = function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
		var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));
		if (d12_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		var d12_1 = (w2.x * e12.x + w2.y * e12.y);
		if (d12_1 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v2);
			return;
		}
		var inv_d12 = 1.0 / (d12_1 + d12_2);
		this.m_v1.a = d12_1 * inv_d12;
		this.m_v2.a = d12_2 * inv_d12;
		this.m_count = 2;
	};
	Box2D.Collision.b2Simplex.prototype.Solve3 = function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var w3 = this.m_v3.w;
		var e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
		var w1e12 = Box2D.Common.Math.b2Math.Dot(w1, e12);
		var w2e12 = Box2D.Common.Math.b2Math.Dot(w2, e12);
		var d12_1 = w2e12;
		var d12_2 = (-w1e12);
		var e13 = Box2D.Common.Math.b2Math.SubtractVV(w3, w1);
		var w1e13 = Box2D.Common.Math.b2Math.Dot(w1, e13);
		var w3e13 = Box2D.Common.Math.b2Math.Dot(w3, e13);
		var d13_1 = w3e13;
		var d13_2 = (-w1e13);
		var e23 = Box2D.Common.Math.b2Math.SubtractVV(w3, w2);
		var w2e23 = Box2D.Common.Math.b2Math.Dot(w2, e23);
		var w3e23 = Box2D.Common.Math.b2Math.Dot(w3, e23);
		var d23_1 = w3e23;
		var d23_2 = (-w2e23);
		var n123 = Box2D.Common.Math.b2Math.CrossVV(e12, e13);
		var d123_1 = n123 * Box2D.Common.Math.b2Math.CrossVV(w2, w3);
		var d123_2 = n123 * Box2D.Common.Math.b2Math.CrossVV(w3, w1);
		var d123_3 = n123 * Box2D.Common.Math.b2Math.CrossVV(w1, w2);
		if (d12_2 <= 0.0 && d13_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
			var inv_d12 = 1.0 / (d12_1 + d12_2);
			this.m_v1.a = d12_1 * inv_d12;
			this.m_v2.a = d12_2 * inv_d12;
			this.m_count = 2;
			return;
		}
		if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
			var inv_d13 = 1.0 / (d13_1 + d13_2);
			this.m_v1.a = d13_1 * inv_d13;
			this.m_v3.a = d13_2 * inv_d13;
			this.m_count = 2;
			this.m_v2.Set(this.m_v3);
			return;
		}
		if (d12_1 <= 0.0 && d23_2 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v2);
			return;
		}
		if (d13_1 <= 0.0 && d23_1 <= 0.0) {
			this.m_v3.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v3);
			return;
		}
		if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
			var inv_d23 = 1.0 / (d23_1 + d23_2);
			this.m_v2.a = d23_1 * inv_d23;
			this.m_v3.a = d23_2 * inv_d23;
			this.m_count = 2;
			this.m_v1.Set(this.m_v3);
			return;
		}
		var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
		this.m_v1.a = d123_1 * inv_d123;
		this.m_v2.a = d123_2 * inv_d123;
		this.m_v3.a = d123_3 * inv_d123;
		this.m_count = 3;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SimplexCache = function() {
		this.indexA = [0, 0, 0];
		this.indexB = [0, 0, 0];
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SimplexVertex = function() {};
	Box2D.Collision.b2SimplexVertex.prototype.Set = function(other) {
		this.wA.SetV(other.wA);
		this.wB.SetV(other.wB);
		this.w.SetV(other.w);
		this.a = other.a;
		this.indexA = other.indexA;
		this.indexB = other.indexB;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2TOIInput = function() {
		this.proxyA = new Box2D.Collision.b2DistanceProxy();
		this.proxyB = new Box2D.Collision.b2DistanceProxy();
		this.sweepA = new Box2D.Common.Math.b2Sweep();
		this.sweepB = new Box2D.Common.Math.b2Sweep();
	};
	Box2D.Collision.b2TimeOfImpact = {};
	Box2D.Collision.b2TimeOfImpact.TimeOfImpact = function(input) {
		Box2D.Collision.b2TimeOfImpact.b2_toiCalls++;
		var proxyA = input.proxyA;
		var proxyB = input.proxyB;
		var sweepA = input.sweepA;
		var sweepB = input.sweepB;
;
;
		var radius = proxyA.m_radius + proxyB.m_radius;
		var tolerance = input.tolerance;
		var alpha = 0.0;
		var k_maxIterations = 1000;
		var iter = 0;
		var target = 0.0;
		Box2D.Collision.b2TimeOfImpact.s_cache.count = 0;
		Box2D.Collision.b2TimeOfImpact.s_distanceInput.useRadii = false;
		for (;;) {
			sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, alpha);
			sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, alpha);
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.proxyA = proxyA;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.proxyB = proxyB;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.transformA = Box2D.Collision.b2TimeOfImpact.s_xfA;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.transformB = Box2D.Collision.b2TimeOfImpact.s_xfB;
			Box2D.Collision.b2Distance.Distance(Box2D.Collision.b2TimeOfImpact.s_distanceOutput, Box2D.Collision.b2TimeOfImpact.s_cache, Box2D.Collision.b2TimeOfImpact.s_distanceInput);
			if (Box2D.Collision.b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
				alpha = 1.0;
				break;
			}
			Box2D.Collision.b2TimeOfImpact.s_fcn.Initialize(Box2D.Collision.b2TimeOfImpact.s_cache, proxyA, Box2D.Collision.b2TimeOfImpact.s_xfA, proxyB, Box2D.Collision.b2TimeOfImpact.s_xfB);
			var separation = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
			if (separation <= 0.0) {
				alpha = 1.0;
				break;
			}
			if (iter == 0) {
				if (separation > radius) {
					target = Math.max(radius - tolerance, 0.75 * radius);
				} else {
					target = Math.max(separation - tolerance, 0.02 * radius);
				}
			}
			if (separation - target < 0.5 * tolerance) {
				if (iter == 0) {
					alpha = 1.0;
					break;
				}
				break;
			}
			var newAlpha = alpha; {
				var x1 = alpha;
				var x2 = 1.0;
				var f1 = separation;
				sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, x2);
				sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, x2);
				var f2 = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
				if (f2 >= target) {
					alpha = 1.0;
					break;
				}
				var rootIterCount = 0;
				for (;;) {
					var x = 0;
					if (rootIterCount & 1) {
						x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
					} else {
						x = 0.5 * (x1 + x2);
					}
					sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, x);
					sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, x);
					var f = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
					if (Math.abs(f - target) < 0.025 * tolerance) {
						newAlpha = x;
						break;
					}
					if (f > target) {
						x1 = x;
						f1 = f;
					} else {
						x2 = x;
						f2 = f;
					}
					rootIterCount++;
					Box2D.Collision.b2TimeOfImpact.b2_toiRootIters++;
					if (rootIterCount == 50) {
						break;
					}
				}
				Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = Math.max(Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);
			}
			if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
				break;
			}
			alpha = newAlpha;
			iter++;
			Box2D.Collision.b2TimeOfImpact.b2_toiIters++;
			if (iter == k_maxIterations) {
				break;
			}
		}
		Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = Math.max(Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters, iter);
		return alpha;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2WorldManifold = function() {
		/** @type  {!Box2D.Common.Math.b2Vec2} */
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_points = [];
		/** @type {number} */
		this.m_pointCount = 0;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {!Box2D.Collision.b2Manifold} manifold
	 * @param {!Box2D.Common.Math.b2Transform} xfA
	 * @param {number} radiusA
	 * @param {!Box2D.Common.Math.b2Transform} xfB
	 * @param {number} radiusB
	 */
	Box2D.Collision.b2WorldManifold.prototype.Initialize = function(manifold, xfA, radiusA, xfB, radiusB) {
		if (manifold.m_pointCount == 0) {
			return;
		}
		var i = 0;
		var tVec;
		var tMat;
		var normalX = 0;
		var normalY = 0;
		var planePointX = 0;
		var planePointY = 0;
		var clipPointX = 0;
		var clipPointY = 0;
		switch (manifold.m_type) {
			case Box2D.Collision.b2Manifold.e_circles:
				tMat = xfA.R;
				tVec = manifold.m_localPoint;
				var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfB.R;
				tVec = manifold.m_points[0].m_localPoint;
				var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				var dX = pointBX - pointAX;
				var dY = pointBY - pointAY;
				var d2 = dX * dX + dY * dY;
				if (d2 > Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
					var d = Math.sqrt(d2);
					this.m_normal.x = dX / d;
					this.m_normal.y = dY / d;
				} else {
					this.m_normal.x = 1;
					this.m_normal.y = 0;
				}
				var cAX = pointAX + radiusA * this.m_normal.x;
				var cAY = pointAY + radiusA * this.m_normal.y;
				var cBX = pointBX - radiusB * this.m_normal.x;
				var cBY = pointBY - radiusB * this.m_normal.y;
				this.m_points[0].x = 0.5 * (cAX + cBX);
				this.m_points[0].y = 0.5 * (cAY + cBY);
				break;
			case Box2D.Collision.b2Manifold.e_faceA:
				tMat = xfA.R;
				tVec = manifold.m_localPlaneNormal;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfA.R;
				tVec = manifold.m_localPoint;
				planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_normal.x = normalX;
				this.m_normal.y = normalY;
				for (i = 0; i < manifold.m_pointCount; i++) {
					tMat = xfB.R;
					tVec = manifold.m_points[i].m_localPoint;
					clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
					clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
					this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
					this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
				}
				break;
			case Box2D.Collision.b2Manifold.e_faceB:
				tMat = xfB.R;
				tVec = manifold.m_localPlaneNormal;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfB.R;
				tVec = manifold.m_localPoint;
				planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_normal.x = (-normalX);
				this.m_normal.y = (-normalY);
				for (i = 0; i < manifold.m_pointCount; i++) {
					tMat = xfA.R;
					tVec = manifold.m_points[i].m_localPoint;
					clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
					clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
					this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
					this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
				}
				break;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2BodyDef} bd
	 * @param {!Box2D.Dynamics.b2World} world
	 * @constructor
	 */
	Box2D.Dynamics.b2Body = function(bd, world) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Body" + Box2D.Dynamics.b2Body.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Transform}
		 */
		this.m_xf = new Box2D.Common.Math.b2Transform();
		this.m_xf.position.SetV(bd.position);
		this.m_xf.R.Set(bd.angle);
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Sweep}
		 */
		this.m_sweep = new Box2D.Common.Math.b2Sweep();
		this.m_sweep.localCenter.SetZero();
		this.m_sweep.t0 = 1.0;
		this.m_sweep.a0 = this.m_sweep.a = bd.angle;
		this.m_sweep.c.x = (this.m_xf.R.col1.x * this.m_sweep.localCenter.x + this.m_xf.R.col2.x * this.m_sweep.localCenter.y);
		this.m_sweep.c.y = (this.m_xf.R.col1.y * this.m_sweep.localCenter.x + this.m_xf.R.col2.y * this.m_sweep.localCenter.y);
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.SetV(this.m_sweep.c);
		/**
		  * @private
		  * @type {!Box2D.Common.Math.b2Vec2}
		  */
		this.m_linearVelocity = bd.linearVelocity.Copy();
		/**
		  * @private
		  * @type {!Box2D.Common.Math.b2Vec2}
		  */
		this.m_force = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_bullet = bd.bullet;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_fixedRotation = bd.fixedRotation;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_allowSleep = bd.allowSleep;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_awake = bd.awake;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_active = bd.active;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2World}
		 */
		this.m_world = world;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Joints.b2Joint}
		 */
		this.m_jointList = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		 this.contactList = new Box2D.Dynamics.Contacts.b2ContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Controllers.b2ControllerList}
		 */
		this.controllerList = new Box2D.Dynamics.Controllers.b2ControllerList();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_controllerCount = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_angularVelocity = bd.angularVelocity;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_linearDamping = bd.linearDamping;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_angularDamping = bd.angularDamping;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_torque = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_sleepTime = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_type = bd.type;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_mass = this.m_type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody ? 1 : 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_invMass = this.m_type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody ? 1 : 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_I = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_invI = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_inertiaScale = bd.inertiaScale;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2FixtureList}
		 */
		this.fixtureList = new Box2D.Dynamics.b2FixtureList();
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2BodyList>}
		 */
		 this.m_lists = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2FixtureDef} def
	 */
	Box2D.Dynamics.b2Body.prototype.CreateFixture = function(def) {
;
		var fixture = new Box2D.Dynamics.b2Fixture(this, this.m_xf, def);
		if (this.m_active) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.CreateProxy(broadPhase, this.m_xf);
		}
		this.fixtureList.AddFixture(fixture);
		fixture.m_body = this;
		if (fixture.m_density > 0.0) {
			this.ResetMassData();
		}
		this.m_world.m_newFixture = true;
		return fixture;
	};
	Box2D.Dynamics.b2Body.prototype.CreateFixture2 = function(shape, density) {
		if (density === undefined) density = 0.0;
		var def = new Box2D.Dynamics.b2FixtureDef();
		def.shape = shape;
		def.density = density;
		return this.CreateFixture(def);
	};
	Box2D.Dynamics.b2Body.prototype.Destroy = function() {
		Box2D.Common.Math.b2Vec2.Free(this.m_linearVelocity);
		Box2D.Common.Math.b2Vec2.Free(this.m_force);
	};
	Box2D.Dynamics.b2Body.prototype.DestroyFixture = function(fixture) {
;
		this.fixtureList.RemoveFixture(fixture);
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			if (fixture == contactNode.contact.m_fixtureA || fixture == contactNode.contact.m_fixtureB) {
				this.m_world.m_contactManager.Destroy(contactNode.contact);
			}
		}
		if (this.m_active) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.DestroyProxy(broadPhase);
		}
		fixture.Destroy();
		fixture.m_body = null;
		this.ResetMassData();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 * @param {number} angle
	 */
	Box2D.Dynamics.b2Body.prototype.SetPositionAndAngle = function(position, angle) {
;
		this.m_xf.R.Set(angle);
		this.m_xf.position.SetV(position);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.SetV(this.m_sweep.c);
		this.m_sweep.a0 = this.m_sweep.a = angle;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			node.fixture.Synchronize(broadPhase, this.m_xf, this.m_xf);
		}
		this.m_world.m_contactManager.FindNewContacts();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Dynamics.b2Body.prototype.SetTransform = function(xf) {
		this.SetPositionAndAngle(xf.position, xf.GetAngle());
	};
	/**
	 * @return {!Box2D.Common.Math.b2Transform}
	 */
	Box2D.Dynamics.b2Body.prototype.GetTransform = function() {
		return this.m_xf;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.b2Body.prototype.GetPosition = function() {
		return this.m_xf.position;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 */
	Box2D.Dynamics.b2Body.prototype.SetPosition = function(position) {
		this.SetPositionAndAngle(position, this.GetAngle());
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetAngle = function() {
		return this.m_sweep.a;
	};
	/**
	 * @param {number} angle
	 */
	Box2D.Dynamics.b2Body.prototype.SetAngle = function(angle) {
		this.SetPositionAndAngle(this.GetPosition(), angle);
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldCenter = function() {
		return this.m_sweep.c;
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalCenter = function() {
		return this.m_sweep.localCenter;
	};
	Box2D.Dynamics.b2Body.prototype.SetLinearVelocity = function(v) {
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			return;
		}
		this.m_linearVelocity.SetV(v);
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocity = function() {
		return this.m_linearVelocity;
	};
	Box2D.Dynamics.b2Body.prototype.SetAngularVelocity = function(omega) {
		if (omega === undefined) omega = 0;
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			return;
		}
		this.m_angularVelocity = omega;
	};
	Box2D.Dynamics.b2Body.prototype.GetAngularVelocity = function() {
		return this.m_angularVelocity;
	};
	Box2D.Dynamics.b2Body.prototype.GetDefinition = function() {
		var bd = new Box2D.Dynamics.b2BodyDef();
		bd.type = this.GetType();
		bd.allowSleep = this.m_allowSleep;
		bd.angle = this.GetAngle();
		bd.angularDamping = this.m_angularDamping;
		bd.angularVelocity = this.m_angularVelocity;
		bd.fixedRotation = this.m_fixedRotation;
		bd.bullet = this.m_bullet;
		bd.active = this.m_active;
		bd.awake = this.m_awake;
		bd.linearDamping = this.m_linearDamping;
		bd.linearVelocity.SetV(this.GetLinearVelocity());
		bd.position = this.GetPosition();
		return bd;
	};
	Box2D.Dynamics.b2Body.prototype.ApplyForce = function(force, point) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_force.x += force.x;
		this.m_force.y += force.y;
		this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);
	};
	Box2D.Dynamics.b2Body.prototype.ApplyTorque = function(torque) {
		if (torque === undefined) torque = 0;
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_torque += torque;
	};
	Box2D.Dynamics.b2Body.prototype.ApplyImpulse = function(impulse, point) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_linearVelocity.x += this.m_invMass * impulse.x;
		this.m_linearVelocity.y += this.m_invMass * impulse.y;
		this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
	};
	Box2D.Dynamics.b2Body.prototype.Split = function(callback) {
		var linearVelocity = this.GetLinearVelocity().Copy();
		var angularVelocity = this.GetAngularVelocity();
		var center = this.GetWorldCenter();
		var body1 = this;
		var body2 = this.m_world.CreateBody(this.GetDefinition());
		var prev;
		for (var node = body1.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			var f = node.fixture;
			if (callback(f)) {
				body1.fixtureList.RemoveFixture(f);
				body2.fixtureList.AddFixture(f);
			}
		}
		body1.ResetMassData();
		body2.ResetMassData();
		var center1 = body1.GetWorldCenter();
		var center2 = body2.GetWorldCenter();
		var velocity1 = Box2D.Common.Math.b2Math.AddVV(linearVelocity, Box2D.Common.Math.b2Math.CrossFV(angularVelocity, Box2D.Common.Math.b2Math.SubtractVV(center1, center)));
		var velocity2 = Box2D.Common.Math.b2Math.AddVV(linearVelocity, Box2D.Common.Math.b2Math.CrossFV(angularVelocity, Box2D.Common.Math.b2Math.SubtractVV(center2, center)));
		body1.SetLinearVelocity(velocity1);
		body2.SetLinearVelocity(velocity2);
		body1.SetAngularVelocity(angularVelocity);
		body2.SetAngularVelocity(angularVelocity);
		body1.SynchronizeFixtures();
		body2.SynchronizeFixtures();
		return body2;
	};
	Box2D.Dynamics.b2Body.prototype.Merge = function(other) {
		for (var node = other.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			this.fixtureList.AddFixture(node.fixture);
			other.fixtureList.RemoveFixture(node.fixture);
		}
		other.ResetMassData();
		this.ResetMassData();
		this.SynchronizeFixtures();
	};
	Box2D.Dynamics.b2Body.prototype.GetMass = function() {
		return this.m_mass;
	};
	Box2D.Dynamics.b2Body.prototype.GetInertia = function() {
		return this.m_I;
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2MassData=} massData
	 * @return {!Box2D.Collision.Shapes.b2MassData}
	 */
	Box2D.Dynamics.b2Body.prototype.GetMassData = function(massData) {
		if (!massData) {
			massData = new Box2D.Collision.Shapes.b2MassData();
		}
		massData.mass = this.m_mass;
		massData.I = this.m_I;
		massData.center.SetV(this.m_sweep.localCenter);
		return massData;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 */
	Box2D.Dynamics.b2Body.prototype.SetMassData = function(massData) {
;
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_mass = massData.mass;
		if (this.m_mass <= 0.0) {
			this.m_mass = 1.0;
		}
		this.m_invMass = 1.0 / this.m_mass;
		if (massData.I > 0.0 && !this.m_fixedRotation) {
			this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
			this.m_invI = 1.0 / this.m_I;
		}
		var oldCenter = this.m_sweep.c.Copy();
		this.m_sweep.localCenter.SetV(massData.center);
		this.m_sweep.c0.SetV(Box2D.Common.Math.b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
		this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
	};
	Box2D.Dynamics.b2Body.prototype.ResetMassData = function() {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_sweep.localCenter.SetZero();
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody || this.m_type == Box2D.Dynamics.b2BodyDef.b2_kinematicBody) {
			return;
		}
		var center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			var f = node.fixture;
			if (f.m_density == 0.0) {
				continue;
			}
			var massData = f.GetMassData();
			this.m_mass += massData.mass;
			center.x += massData.center.x * massData.mass;
			center.y += massData.center.y * massData.mass;
			this.m_I += massData.I;
		}
		if (this.m_mass > 0.0) {
			this.m_invMass = 1.0 / this.m_mass;
			center.x *= this.m_invMass;
			center.y *= this.m_invMass;
		} else {
			this.m_mass = 1.0;
			this.m_invMass = 1.0;
		}
		if (this.m_I > 0.0 && !this.m_fixedRotation) {
			this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
			this.m_I *= this.m_inertiaScale;
;
			this.m_invI = 1.0 / this.m_I;
		} else {
			this.m_I = 0.0;
			this.m_invI = 0.0;
		}
		var oldCenter = this.m_sweep.c.Copy();
		this.m_sweep.localCenter.SetV(center);
		this.m_sweep.c0.SetV(Box2D.Common.Math.b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
		this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
		Box2D.Common.Math.b2Vec2.Free(center);
		Box2D.Common.Math.b2Vec2.Free(oldCenter);
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldPoint = function(localPoint) {
		var A = this.m_xf.R;
		var u = Box2D.Common.Math.b2Vec2.Get(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		u.x += this.m_xf.position.x;
		u.y += this.m_xf.position.y;
		return u;
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldVector = function(localVector) {
		return Box2D.Common.Math.b2Math.MulMV(this.m_xf.R, localVector);
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalPoint = function(worldPoint) {
		return Box2D.Common.Math.b2Math.MulXT(this.m_xf, worldPoint);
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalVector = function(worldVector) {
		return Box2D.Common.Math.b2Math.MulTMV(this.m_xf.R, worldVector);
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocityFromWorldPoint = function(worldPoint) {
		return Box2D.Common.Math.b2Vec2.Get(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocityFromLocalPoint = function(localPoint) {
		var A = this.m_xf.R;
		var worldPoint = Box2D.Common.Math.b2Vec2.Get(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		worldPoint.x += this.m_xf.position.x;
		worldPoint.y += this.m_xf.position.y;
		var velocity = Box2D.Common.Math.b2Vec2.Get(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
		Box2D.Common.Math.b2Vec2.Free(worldPoint);
		return velocity;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetLinearDamping = function() {
		return this.m_linearDamping;
	};
	/**
	 * @param {number} linearDamping
	 */
	Box2D.Dynamics.b2Body.prototype.SetLinearDamping = function(linearDamping) {
		this.m_linearDamping = linearDamping;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetAngularDamping = function() {
		return this.m_angularDamping;
	};
	/**
	 * @param {number} angularDamping
	 */
	Box2D.Dynamics.b2Body.prototype.SetAngularDamping = function(angularDamping) {
		this.m_angularDamping = angularDamping;
	};
	/**
	 * @param {number} type
	 */
	Box2D.Dynamics.b2Body.prototype.SetType = function(type) {
		if (this.m_type == type) {
			return;
		}
		this.m_type = type;
		this.ResetMassData();
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.m_linearVelocity.SetZero();
			this.m_angularVelocity = 0.0;
		}
		this.SetAwake(true);
		this.m_force.SetZero();
		this.m_torque = 0.0;
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.FlagForFiltering();
		}
		for (var i = 0; i < this.m_lists.length; i++) {
			this.m_lists[i].UpdateBody(this);
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetType = function() {
		return this.m_type;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetBullet = function(flag) {
		this.m_bullet = flag;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsBullet = function() {
		return this.m_bullet;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetSleepingAllowed = function(flag) {
		this.m_allowSleep = flag;
		if (!flag) {
			this.SetAwake(true);
		}
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetAwake = function(flag) {
		if (this.m_awake != flag) {
			this.m_awake = flag;
			this.m_sleepTime = 0;
			if (!flag) {
				this.m_linearVelocity.SetZero();
				this.m_angularVelocity = 0.0;
				this.m_force.SetZero();
				this.m_torque = 0.0;
			}
			for (var i = 0; i < this.m_lists.length; i++) {
				this.m_lists[i].UpdateBody(this);
			}
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsAwake = function() {
		return this.m_awake;
	};
	/**
	 * @param {boolean} fixed
	 */
	Box2D.Dynamics.b2Body.prototype.SetFixedRotation = function(fixed) {
		this.m_fixedRotation = fixed;
		this.ResetMassData();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsFixedRotation = function() {
		return this.m_fixedRotation;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetActive = function(flag) {
		if (flag == this.m_active) {
			return;
		}
		if (flag) {
			this.m_active = true;
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
				node.fixture.CreateProxy(broadPhase, this.m_xf);
			}
		} else {
			this.m_active = false;
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
				node.fixture.DestroyProxy(broadPhase);
			}
			for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				this.m_world.m_contactManager.Destroy(contactNode.contact);
			}
		}
		for (var i = 0; i < this.m_lists.length; i++) {
			this.m_lists[i].UpdateBody(this);
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsActive = function() {
		return this.m_active;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsSleepingAllowed = function() {
		return this.m_allowSleep;
	};
	Box2D.Dynamics.b2Body.prototype.GetFixtureList = function() {
		return this.fixtureList;
	};
	Box2D.Dynamics.b2Body.prototype.GetJointList = function() {
		return this.m_jointList;
	};
	Box2D.Dynamics.b2Body.prototype.GetControllerList = function() {
		return this.controllerList;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2Body.prototype.AddController = function(controller) {
		this.controllerList.AddController(controller);
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2Body.prototype.RemoveController = function(controller) {
		this.controllerList.RemoveController(controller);
	};
	Box2D.Dynamics.b2Body.prototype.GetContactList = function() {
		return this.contactList;
	};
	Box2D.Dynamics.b2Body.prototype.GetWorld = function() {
		return this.m_world;
	};
	Box2D.Dynamics.b2Body.prototype.SynchronizeFixtures = function() {
		var xf1 = Box2D.Dynamics.b2Body.s_xf1;
		xf1.R.Set(this.m_sweep.a0);
		var tMat = xf1.R;
		var tVec = this.m_sweep.localCenter;
		xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var f;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			node.fixture.Synchronize(broadPhase, xf1, this.m_xf);
		}
	};
	Box2D.Dynamics.b2Body.prototype.SynchronizeTransform = function() {
		this.m_xf.R.Set(this.m_sweep.a);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	};
	Box2D.Dynamics.b2Body.prototype.ShouldCollide = function(other) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody && other.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return false;
		}
		for (var jn = this.m_jointList; jn; jn = jn.next) {
			if (jn.other == other) if (jn.joint.m_collideConnected == false) {
				return false;
			}
		}
		return true;
	};
	/**
	 * @param {number} t
	 */
	Box2D.Dynamics.b2Body.prototype.Advance = function(t) {
		this.m_sweep.Advance(t);
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_sweep.a = this.m_sweep.a0;
		this.SynchronizeTransform();
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.b2Body.NEXT_ID = 0;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyDef = function() {
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.linearVelocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.angle = 0.0;
		/** @type {number} */
		this.angularVelocity = 0.0;
		/** @type {number} */
		this.linearDamping = 0.0;
		/** @type {number} */
		this.angularDamping = 0.0;
		/** @type {boolean} */
		this.allowSleep = true;
		/** @type {boolean} */
		this.awake = true;
		/** @type {boolean} */
		this.fixedRotation = false;
		/** @type {boolean} */
		this.bullet = false;
		/** @type {number} */
		this.type = Box2D.Dynamics.b2BodyDef.b2_staticBody;
		/** @type {boolean} */
		this.active = true;
		/** @type {number} */
		this.inertiaScale = 1.0;
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_staticBody = 0;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_kinematicBody = 1;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_dynamicBody = 2;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyList = function() {
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.b2BodyListNode>}
		 */
		this.bodyFirstNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
			this.bodyFirstNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.b2BodyListNode>}
		 */
		this.bodyLastNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
			this.bodyLastNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Object.<Array.<Box2D.Dynamics.b2BodyListNode>>}
		 */
		this.bodyNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.bodyCount = 0;
	};
	/**
	 * @param {number} type
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyList.prototype.GetFirstNode = function(type) {
		return this.bodyFirstNodes[type];
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.AddBody = function(body) {
		var bodyID = body.ID;
		if (this.bodyNodeLookup[bodyID] == null) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.allBodies);
			this.UpdateBody(body);
			body.m_lists.push(this);
			this.bodyCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.UpdateBody = function(body) {
		var type = body.GetType();
		var bodyID = body.ID;
		var awake = body.IsAwake();
		var active = body.IsActive();
		if (type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies);
		}
		if (type != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticBodies);
		}
		if (type != Box2D.Dynamics.b2BodyDef.b2_staticBody && active && awake) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies);
		}
		if (awake) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.awakeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.awakeBodies);
		}
		if (active) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.activeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.activeBodies);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.RemoveBody = function(body) {
		var bodyID = body.ID;
		if (this.bodyNodeLookup[bodyID] != null) {
			cr.arrayFindRemove(body.m_lists, this);
			for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
				this.RemoveNode(bodyID, i);
			}
			delete this.bodyNodeLookup[bodyID];
			this.bodyCount--;
		}
	};
	/**
	 * @param {string} bodyID
	 * @param {number} type
	 */
	Box2D.Dynamics.b2BodyList.prototype.RemoveNode = function(bodyID, type) {
		var nodeList = this.bodyNodeLookup[bodyID];
		if (nodeList == null) {
			return;
		}
		var node = nodeList[type];
		if (node == null) {
			return;
		}
		nodeList[type] = null;
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.bodyFirstNodes[type] = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.bodyLastNodes[type] = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @param {string} bodyID
	 * @param {number} type
	 */
	Box2D.Dynamics.b2BodyList.prototype.CreateNode = function(body, bodyID, type) {
		var nodeList = this.bodyNodeLookup[bodyID];
		if (nodeList == null) {
			nodeList = [];
			for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
				nodeList[i] = null;
			}
			this.bodyNodeLookup[bodyID] = nodeList;
		}
		if (nodeList[type] == null) {
			nodeList[type] = new Box2D.Dynamics.b2BodyListNode(body);
			var prevNode = this.bodyLastNodes[type];
			if (prevNode != null) {
				prevNode.SetNextNode(nodeList[type]);
			} else {
				this.bodyFirstNodes[type] = nodeList[type];
			}
			nodeList[type].SetPreviousNode(prevNode);
			this.bodyLastNodes[type] = nodeList[type];
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2BodyList.prototype.GetBodyCount = function() {
		return this.bodyCount;
	};
	/**
	 * @enum {number}
	 */
	Box2D.Dynamics.b2BodyList.TYPES = {
		dynamicBodies: 0,
		nonStaticBodies: 1,
		activeBodies: 2,
		nonStaticActiveAwakeBodies: 3,
		awakeBodies: 4,
		allBodies: 5 // Assumed to be last by above code
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyListNode = function(body) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.body = body;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2BodyListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2BodyListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.b2BodyListNode} node
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.b2BodyListNode} node
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetBody = function() {
		return this.body;
	};
	/**
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactFilter = function() {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2ContactFilter.prototype.ShouldCollide = function(fixtureA, fixtureB) {
		var filter1 = fixtureA.GetFilterData();
		var filter2 = fixtureB.GetFilterData();
		if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
			return filter1.groupIndex > 0;
		}
		return (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
	};
	/** @type {!Box2D.Dynamics.b2ContactFilter} */
	Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new Box2D.Dynamics.b2ContactFilter();
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactImpulse = function () {
		this.normalImpulses = [];
		this.tangentImpulses = [];
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactListener = function () {};
	Box2D.Dynamics.b2ContactListener.prototype.BeginContact = function (contact) {};
	Box2D.Dynamics.b2ContactListener.prototype.EndContact = function (contact) {};
	Box2D.Dynamics.b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {};
	Box2D.Dynamics.b2ContactListener.prototype.PostSolve = function (contact, impulse) {};
	/**
	 * @param {!Box2D.Dynamics.b2World} world
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactManager = function(world) {
		/**
		 * @private
		 * @const
		 * @type {!Box2D.Dynamics.b2World}
		 */
		this.m_world = world;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactFilter}
		 */
		this.m_contactFilter = Box2D.Dynamics.b2ContactFilter.b2_defaultFilter;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactListener}
		 */
		this.m_contactListener = Box2D.Dynamics.b2ContactListener.b2_defaultListener;
		/**
		 * @private
		 * @const
		 * @type {!Box2D.Dynamics.Contacts.b2ContactFactory}
		 */
		this.m_contactFactory = new Box2D.Dynamics.Contacts.b2ContactFactory();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2DynamicTreeBroadPhase}
		 */
		this.m_broadPhase = new Box2D.Collision.b2DynamicTreeBroadPhase();
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.b2ContactManager.prototype.AddPair = function (fixtureA, fixtureB) {
	  var bodyA = fixtureA.GetBody();
	  var bodyB = fixtureB.GetBody();
	  if (bodyA == bodyB) {
		  return;
	  }
	  if (!bodyB.ShouldCollide(bodyA)) {
		 return;
	  }
	  if (!this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {
		 return;
	  }
	  for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
		var fA = contactNode.contact.m_fixtureA;
		if (fA == fixtureA) {
			var fB = contactNode.contact.m_fixtureB;
			if (fB == fixtureB) {
				return;
			}
		} else if (fA == fixtureB) {
			var fB = contactNode.contact.m_fixtureB;
			if (fB == fixtureA) {
				return;
			}
		}
	  }
	  var c = this.m_contactFactory.Create(fixtureA, fixtureB);
	};
	Box2D.Dynamics.b2ContactManager.prototype.FindNewContacts = function () {
		var self = this;
		/** @type {function(!Box2D.Dynamics.b2Fixture, !Box2D.Dynamics.b2Fixture)} */
		var addPairCallback = function(fixtureA, fixtureB) {
			self.AddPair(fixtureA, fixtureB)
		};
		this.m_broadPhase.UpdatePairs(addPairCallback);
	};
	Box2D.Dynamics.b2ContactManager.prototype.Destroy = function (c) {
		var fixtureA = c.m_fixtureA;
		var fixtureB = c.m_fixtureB;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		if (c.touching) {
			this.m_contactListener.EndContact(c);
		}
		if (c.m_manifold.m_pointCount > 0) {
			c.m_fixtureA.GetBody().SetAwake(true);
			c.m_fixtureB.GetBody().SetAwake(true);
		}
		c.RemoveFromLists();
		this.m_contactFactory.Destroy(c);
	};
	Box2D.Dynamics.b2ContactManager.prototype.Collide = function() {
		for (var contactNode = this.m_world.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var c = contactNode.contact;
			var fixtureA = c.m_fixtureA;
			var fixtureB = c.m_fixtureB;
			var bodyA = fixtureA.GetBody();
			var bodyB = fixtureB.GetBody();
			if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
				continue;
			}
			if (c.IsFiltering()) {
				if (bodyB.ShouldCollide(bodyA) == false) {
					this.Destroy(c);
					continue;
				}
				if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
					this.Destroy(c);
					continue;
				}
				c.ClearFiltering();
			}
			var proxyA = fixtureA.m_proxy;
			var proxyB = fixtureB.m_proxy;
			var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
			if (overlap == false) {
				this.Destroy(c);
				continue;
			}
			c.Update(this.m_contactListener);
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2DestructionListener = function () {};
	Box2D.Dynamics.b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {};
	Box2D.Dynamics.b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FilterData = function () {
	  this.categoryBits = 0x0001;
	  this.maskBits = 0xFFFF;
	  this.groupIndex = 0;
	};
	/**
	 * @return {!Box2D.Dynamics.b2FilterData}
	 */
	Box2D.Dynamics.b2FilterData.prototype.Copy = function () {
	  var copy = new Box2D.Dynamics.b2FilterData();
	  copy.categoryBits = this.categoryBits;
	  copy.maskBits = this.maskBits;
	  copy.groupIndex = this.groupIndex;
	  return copy;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Dynamics.b2FixtureDef} def
	 * @constructor
	 */
	Box2D.Dynamics.b2Fixture = function(body, xf, def) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Fixture" + Box2D.Dynamics.b2Fixture.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2FilterData}
		 */
		this.m_filter = def.filter.Copy();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2AABB}
		 */
		this.m_aabb = Box2D.Collision.b2AABB.Get();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.m_body = body;
		/**
		 * @private
		 * @type {!Box2D.Collision.Shapes.b2Shape}
		 */
		this.m_shape = def.shape.Copy();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_density = def.density;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_friction = def.friction;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_restitution = def.restitution;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_isSensor = def.isSensor;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetShape = function() {
		return this.m_shape;
	};
	/**
	 * @param {boolean} sensor
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetSensor = function(sensor) {
		if (this.m_isSensor == sensor) {
			return;
		}
		this.m_isSensor = sensor;
		if (this.m_body == null) {
			return;
		}
		for (var contactNode = this.m_body.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var fixtureA = contactNode.contact.m_fixtureA;
			var fixtureB = contactNode.contact.m_fixtureB;
			if (fixtureA == this || fixtureB == this) {
				contactNode.contact.SetSensor(fixtureA.sensor || fixtureB.sensor);
			}
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.IsSensor = function() {
		return this.m_isSensor;
	};
	/**
	 * @param {!Box2D.Dynamics.b2FilterData} filter
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetFilterData = function(filter) {
		this.m_filter = filter.Copy();
		if (this.m_body == null) {
			return;
		}
		for (var contactNode = this.m_body.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			if (contactNode.contact.m_fixtureA == this || contactNode.contact.m_fixtureB == this) {
				contactNode.contact.FlagForFiltering();
			}
		}
	};
	/**
	 * @return {!Box2D.Dynamics.b2FilterData}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetFilterData = function() {
		return this.m_filter.Copy();
	};
	/**
	 * @return {Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetBody = function() {
		return this.m_body;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.TestPoint = function(p) {
		return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.RayCast = function(output, input) {
		return this.m_shape.RayCast(output, input, this.m_body.GetTransform());
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2MassData=} massData
	 * @return {!Box2D.Collision.Shapes.b2MassData}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetMassData = function(massData) {
		if (!massData) {
			massData = new Box2D.Collision.Shapes.b2MassData();
		}
		this.m_shape.ComputeMass(massData, this.m_density);
		return massData;
	};
	/**
	 * @param {number} density
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetDensity = function(density) {
		this.m_density = density;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetDensity = function() {
		return this.m_density;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetFriction = function() {
		return this.m_friction;
	};
	/**
	 * @param {number} friction
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetFriction = function(friction) {
		this.m_friction = friction;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetRestitution = function() {
		return this.m_restitution;
	};
	/**
	 * @param {number} restitution
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetRestitution = function(restitution) {
		this.m_restitution = restitution;
	};
	/**
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetAABB = function() {
		return this.m_aabb;
	};
	Box2D.Dynamics.b2Fixture.prototype.Destroy = function() {
		Box2D.Collision.b2AABB.Free(this.m_aabb);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Dynamics.b2Fixture.prototype.CreateProxy = function(broadPhase, xf) {
		this.m_shape.ComputeAABB(this.m_aabb, xf);
		this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 */
	Box2D.Dynamics.b2Fixture.prototype.DestroyProxy = function(broadPhase) {
		if (this.m_proxy == null) {
			return;
		}
		broadPhase.DestroyProxy(this.m_proxy);
		this.m_proxy = null;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 * @param {!Box2D.Common.Math.b2Transform} transform1
	 * @param {!Box2D.Common.Math.b2Transform} transform2
	 */
	Box2D.Dynamics.b2Fixture.prototype.Synchronize = function(broadPhase, transform1, transform2) {
		if (!this.m_proxy) return;
		var aabb1 = Box2D.Collision.b2AABB.Get();
		var aabb2 = Box2D.Collision.b2AABB.Get();
		this.m_shape.ComputeAABB(aabb1, transform1);
		this.m_shape.ComputeAABB(aabb2, transform2);
		this.m_aabb.Combine(aabb1, aabb2);
		Box2D.Collision.b2AABB.Free(aabb1);
		Box2D.Collision.b2AABB.Free(aabb2);
		var displacement = Box2D.Common.Math.b2Math.SubtractVV(transform2.position, transform1.position);
		broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);
		Box2D.Common.Math.b2Vec2.Free(displacement);
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.b2Fixture.NEXT_ID = 0;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureDef = function () {
		/**
		 * @type {!Box2D.Dynamics.b2FilterData}
		 */
		this.filter = new Box2D.Dynamics.b2FilterData();
		this.filter.categoryBits = 0x0001;
		this.filter.maskBits = 0xFFFF;
		this.filter.groupIndex = 0;
		/**
		 * @type {Box2D.Collision.Shapes.b2Shape}
		 */
		this.shape = null;
		/**
		 * @type {number}
		 */
		this.friction = 0.2;
		/**
		 * @type {number}
		 */
		this.restitution = 0.0;
		/**
		 * @type {number}
		 */
		this.density = 0.0;
		/**
		 * @type {boolean}
		 */
		this.isSensor = false;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureList = function() {
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.fixtureFirstNode = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.fixtureLastNode = null;
		/**
		 * @private
		 * @type {Object.<Box2D.Dynamics.b2FixtureListNode>}
		 */
		this.fixtureNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.fixtureCount = 0;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureList.prototype.GetFirstNode = function() {
		return this.fixtureFirstNode;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 */
	Box2D.Dynamics.b2FixtureList.prototype.AddFixture = function(fixture) {
		var fixtureID = fixture.ID;
		if (this.fixtureNodeLookup[fixtureID] == null) {
			var node = new Box2D.Dynamics.b2FixtureListNode(fixture);
			var prevNode = this.fixtureLastNode;
			if (prevNode != null) {
				prevNode.SetNextNode(node);
			} else {
				this.fixtureFirstNode = node;
			}
			node.SetPreviousNode(prevNode);
			this.fixtureLastNode = node;
			this.fixtureNodeLookup[fixtureID] = node;
			this.fixtureCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 */
	Box2D.Dynamics.b2FixtureList.prototype.RemoveFixture = function(fixture) {
		var fixtureID = fixture.ID;
		var node = this.fixtureNodeLookup[fixtureID];
		if (node == null) {
			return;
		}
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.fixtureFirstNode = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.fixtureLastNode = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		delete this.fixtureNodeLookup[fixtureID];
		this.fixtureCount--;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2FixtureList.prototype.GetFixtureCount = function() {
		return this.fixtureCount;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureListNode = function(fixture) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.fixture = fixture;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.b2FixtureListNode} node
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.b2FixtureListNode} node
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactListener} listener
	 * @param {!Box2D.Dynamics.Contacts.b2ContactSolver} contactSolver
	 * @constructor
	 */
	Box2D.Dynamics.b2Island = function(listener, contactSolver) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactListener}
		 */
		this.m_listener = listener;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactSolver}
		 */
		this.m_contactSolver = contactSolver;
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_bodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_dynamicBodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_nonStaticBodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Contacts.b2Contact>}
		 */
		this.m_contacts = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Joints.b2Joint>}
		 */
		this.m_joints = [];
	};
	Box2D.Dynamics.b2Island.prototype.Clear = function() {
		this.m_bodies = [];
		this.m_dynamicBodies = [];
		this.m_nonStaticBodies = [];
		this.m_contacts = [];
		this.m_joints = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @param {boolean} allowSleep
	 */
	Box2D.Dynamics.b2Island.prototype.Solve = function(step, gravity, allowSleep) {
		this._InitializeVelocities(step, gravity);
		this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contacts.length);
		this._SolveVelocityConstraints(step);
		this._SolveBodies(step);
		this._SolvePositionConstraints(step);
		this.Report(this.m_contactSolver.m_constraints);
		if (allowSleep) {
			this._SleepIfTired(step);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._InitializeVelocities = function(step, gravity) {
		for (var i = 0; i < this.m_dynamicBodies.length; i++) {
			var b = this.m_dynamicBodies[i];
			b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
			b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
			b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
			b.m_linearVelocity.Multiply(Box2D.Common.Math.b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));
			b.m_angularVelocity *= Box2D.Common.Math.b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolveVelocityConstraints = function(step) {
		this.m_contactSolver.InitVelocityConstraints(step);
		for (var jointInitIdx = 0; jointInitIdx < this.m_joints.length; jointInitIdx++) {
			this.m_joints[jointInitIdx].InitVelocityConstraints(step);
		}
		for (var velocityIterationCnt = 0; velocityIterationCnt < step.velocityIterations; velocityIterationCnt++) {
			for (var jointSolveIdx = 0; jointSolveIdx < this.m_joints.length; jointSolveIdx++) {
				this.m_joints[jointSolveIdx].SolveVelocityConstraints(step);
			}
			this.m_contactSolver.SolveVelocityConstraints();
		}
		for (var jointFinalizeIdx = 0; jointFinalizeIdx < this.m_joints.length; jointFinalizeIdx++) {
			this.m_joints[jointFinalizeIdx].FinalizeVelocityConstraints();
		}
		this.m_contactSolver.FinalizeVelocityConstraints();
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolveBodies = function(step) {
		for (var i = 0; i < this.m_nonStaticBodies.length; ++i) {
			var b = this.m_nonStaticBodies[i];
			var translationX = step.dt * b.m_linearVelocity.x;
			var translationY = step.dt * b.m_linearVelocity.y;
			if ((translationX * translationX + translationY * translationY) > Box2D.Common.b2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.Normalize();
				b.m_linearVelocity.x *= Box2D.Common.b2Settings.b2_maxTranslation * step.inv_dt;
				b.m_linearVelocity.y *= Box2D.Common.b2Settings.b2_maxTranslation * step.inv_dt;
			}
			var rotation = step.dt * b.m_angularVelocity;
			if (rotation * rotation > Box2D.Common.b2Settings.b2_maxRotationSquared) {
				if (b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = -Box2D.Common.b2Settings.b2_maxRotation * step.inv_dt;
				} else {
					b.m_angularVelocity = Box2D.Common.b2Settings.b2_maxRotation * step.inv_dt;
				}
			}
			b.m_sweep.c0.SetV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
			b.m_sweep.a += step.dt * b.m_angularVelocity;
			b.SynchronizeTransform();
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolvePositionConstraints = function(step) {
		for (var i = 0; i < step.positionIterations; i++) {
			var contactsOkay = this.m_contactSolver.SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
			var jointsOkay = true;
			for (var j = 0; j < this.m_joints.length; j++) {
				var jointOkay = this.m_joints[j].SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if (contactsOkay && jointsOkay) {
				break;
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SleepIfTired = function(step) {
		var minSleepTime = Number.MAX_VALUE;
		for (var nonstaticBodyIdx = 0; nonstaticBodyIdx < this.m_nonStaticBodies.length; nonstaticBodyIdx++) {
			var b = this.m_nonStaticBodies[nonstaticBodyIdx];
			if (!b.m_allowSleep || Math.abs(b.m_angularVelocity) > Box2D.Common.b2Settings.b2_angularSleepTolerance || Box2D.Common.Math.b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > Box2D.Common.b2Settings.b2_linearSleepToleranceSquared) {
				b.m_sleepTime = 0.0;
				minSleepTime = 0.0;
			} else {
				b.m_sleepTime += step.dt;
				minSleepTime = Math.min(minSleepTime, b.m_sleepTime);
			}
		}
		if (minSleepTime >= Box2D.Common.b2Settings.b2_timeToSleep) {
			for (var bodyIdx = 0; bodyIdx < this.m_bodies.length; bodyIdx++) {
				this.m_bodies[bodyIdx].SetAwake(false);
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} subStep
	 */
	Box2D.Dynamics.b2Island.prototype.SolveTOI = function(subStep) {
		var i = 0;
		var j = 0;
		this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contacts.length);
		var contactSolver = this.m_contactSolver;
		for (i = 0; i < this.m_joints.length; ++i) {
			this.m_joints[i].InitVelocityConstraints(subStep);
		}
		for (i = 0; i < subStep.velocityIterations; ++i) {
			contactSolver.SolveVelocityConstraints();
			for (j = 0; j < this.m_joints.length; ++j) {
				this.m_joints[j].SolveVelocityConstraints(subStep);
			}
		}
		for (i = 0; i < this.m_nonStaticBodies.length; ++i) {
			var b = this.m_nonStaticBodies[i];
			var translationX = subStep.dt * b.m_linearVelocity.x;
			var translationY = subStep.dt * b.m_linearVelocity.y;
			if ((translationX * translationX + translationY * translationY) > Box2D.Common.b2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.Normalize();
				b.m_linearVelocity.x *= Box2D.Common.b2Settings.b2_maxTranslation * subStep.inv_dt;
				b.m_linearVelocity.y *= Box2D.Common.b2Settings.b2_maxTranslation * subStep.inv_dt;
			}
			var rotation = subStep.dt * b.m_angularVelocity;
			if (rotation * rotation > Box2D.Common.b2Settings.b2_maxRotationSquared) {
				if (b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = (-Box2D.Common.b2Settings.b2_maxRotation * subStep.inv_dt);
				} else {
					b.m_angularVelocity = Box2D.Common.b2Settings.b2_maxRotation * subStep.inv_dt;
				}
			}
			b.m_sweep.c0.SetV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
			b.m_sweep.a += subStep.dt * b.m_angularVelocity;
			b.SynchronizeTransform();
		}
		var k_toiBaumgarte = 0.75;
		for (i = 0; i < subStep.positionIterations; ++i) {
			var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
			var jointsOkay = true;
			for (j = 0; j < this.m_joints.length; ++j) {
				var jointOkay = this.m_joints[j].SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if (contactsOkay && jointsOkay) {
				break;
			}
		}
		this.Report(contactSolver.m_constraints);
	};
	/**
	 * @param {Array.<!Box2D.Dynamics.Contacts.b2ContactConstraint>} constraints
	 */
	Box2D.Dynamics.b2Island.prototype.Report = function(constraints) {
		if (this.m_listener == null) {
			return;
		}
		for (var i = 0; i < this.m_contacts.length; ++i) {
			var c = this.m_contacts[i];
			var cc = constraints[i];
			var impulse = new Box2D.Dynamics.b2ContactImpulse();
			for (var j = 0; j < cc.pointCount; ++j) {
				impulse.normalImpulses[j] = cc.points[j].normalImpulse;
				impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
			}
			this.m_listener.PostSolve(c, impulse);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2Island.prototype.AddBody = function(body) {
		this.m_bodies.push(body);
		if (body.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.m_nonStaticBodies.push(body);
			if (body.GetType() == Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
				this.m_dynamicBodies.push(body);
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.b2Island.prototype.AddContact = function(contact) {
		this.m_contacts.push(contact);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2Joint} joint
	 */
	Box2D.Dynamics.b2Island.prototype.AddJoint = function(joint) {
		this.m_joints.push(joint);
	};
	/**
	 * @param {number} dt
	 * @param {number} dtRatio
	 * @param {number} positionIterations
	 * @param {number} velocityIterations
	 * @param {boolean} warmStarting
	 * @constructor
	 */
	Box2D.Dynamics.b2TimeStep = function(dt, dtRatio, positionIterations, velocityIterations, warmStarting) {
		/**
		 * @const
		 * @type {number}
		 */
		this.dt = dt;
		var invDT = 0;
		if (dt > 0) {
			invDT = 1 / dt;
		}
		/**
		 * @const
		 * @type {number}
		 */
		this.inv_dt = invDT;
		/**
		 * @const
		 * @type {number}
		 */
		this.dtRatio = dtRatio;
		/**
		 * @const
		 * @type {number}
		 */
		this.positionIterations = positionIterations;
		/**
		 * @const
		 * @type {number}
		 */
		this.velocityIterations = velocityIterations;
		/**
		 * @const
		 * @type {boolean}
		 */
		this.warmStarting = warmStarting;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @param {boolean} doSleep
	 * @constructor
	 */
	Box2D.Dynamics.b2World = function(gravity, doSleep) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactManager}
		 */
		this.m_contactManager = new Box2D.Dynamics.b2ContactManager(this);
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactSolver}
		 */
		this.m_contactSolver = new Box2D.Dynamics.Contacts.b2ContactSolver();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_isLocked = false;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_newFixture = false;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2DestructionListener}
		 */
		this.m_destructionListener = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2BodyList}
		 */
		this.bodyList = new Box2D.Dynamics.b2BodyList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		 this.contactList = new Box2D.Dynamics.Contacts.b2ContactList();
		/**
		 * @private
		 * @type {Box2D.Dynamics.Joints.b2Joint}
		 */
		this.m_jointList = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Controllers.b2ControllerList}
		 */
		this.controllerList = new Box2D.Dynamics.Controllers.b2ControllerList();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_jointCount = 0;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_warmStarting = true;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_continuousPhysics = true;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_allowSleep = doSleep;
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Vec2}
		 */
		this.m_gravity = gravity;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_inv_dt0 = 0.0;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.m_groundBody = this.CreateBody(new Box2D.Dynamics.b2BodyDef());
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2World.MAX_TOI = 1.0 - 100.0 * Number.MIN_VALUE;
	/**
	 * @param {!Box2D.Dynamics.b2DestructionListener} listener
	 */
	Box2D.Dynamics.b2World.prototype.SetDestructionListener = function(listener) {
		this.m_destructionListener = listener;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactFilter} filter
	 */
	Box2D.Dynamics.b2World.prototype.SetContactFilter = function(filter) {
		this.m_contactManager.m_contactFilter = filter;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactListener} listener
	 */
	Box2D.Dynamics.b2World.prototype.SetContactListener = function(listener) {
		this.m_contactManager.m_contactListener = listener;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 */
	Box2D.Dynamics.b2World.prototype.SetBroadPhase = function(broadPhase) {
		var oldBroadPhase = this.m_contactManager.m_broadPhase;
		this.m_contactManager.m_broadPhase = broadPhase;
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); node; node = node.GetNextNode()) {
			for (var fixtureNode = node.body.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
				var f = fixtureNode.fixture;
				f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);
			}
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetProxyCount = function() {
		return this.m_contactManager.m_broadPhase.GetProxyCount();
	};
	/**
	 * @param {!Box2D.Dynamics.b2BodyDef} def
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2World.prototype.CreateBody = function(def) {
;
		var b = new Box2D.Dynamics.b2Body(def, this);
		this.bodyList.AddBody(b);
		return b;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} b
	 */
	Box2D.Dynamics.b2World.prototype.DestroyBody = function(b) {
;
		var jn = b.m_jointList;
		while (jn) {
			var jn0 = jn;
			jn = jn.next;
			if (this.m_destructionListener) {
				this.m_destructionListener.SayGoodbyeJoint(jn0.joint);
			}
			this.DestroyJoint(jn0.joint);
		}
		for (var node = b.GetControllerList().GetFirstNode(); node; node = node.GetNextNode()) {
			node.controller.RemoveBody(b);
		}
		for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			this.m_contactManager.Destroy(contactNode.contact);
		}
		for (var fixtureNode = b.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
			if (this.m_destructionListener) {
				this.m_destructionListener.SayGoodbyeFixture(fixtureNode.fixture);
			}
			b.DestroyFixture(fixtureNode.fixture);
		}
		b.Destroy();
		this.bodyList.RemoveBody(b);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2JointDef} def
	 * @return {!Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.b2World.prototype.CreateJoint = function(def) {
		var j = Box2D.Dynamics.Joints.b2Joint.Create(def);
		j.m_prev = null;
		j.m_next = this.m_jointList;
		if (this.m_jointList) {
			this.m_jointList.m_prev = j;
		}
		this.m_jointList = j;
		this.m_jointCount++;
		j.m_edgeA.joint = j;
		j.m_edgeA.other = j.m_bodyB;
		j.m_edgeA.prev = null;
		j.m_edgeA.next = j.m_bodyA.m_jointList;
		if (j.m_bodyA.m_jointList) {
			j.m_bodyA.m_jointList.prev = j.m_edgeA;
		}
		j.m_bodyA.m_jointList = j.m_edgeA;
		j.m_edgeB.joint = j;
		j.m_edgeB.other = j.m_bodyA;
		j.m_edgeB.prev = null;
		j.m_edgeB.next = j.m_bodyB.m_jointList;
		if (j.m_bodyB.m_jointList) {
			j.m_bodyB.m_jointList.prev = j.m_edgeB;
		}
		j.m_bodyB.m_jointList = j.m_edgeB;
		var bodyA = def.bodyA;
		var bodyB = def.bodyB;
		if (!def.collideConnected) {
			for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				if (contactNode.contact.GetOther(bodyB) == bodyA) {
					contactNode.contact.FlagForFiltering();
				}
			}
		}
		return j;
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2Joint} j
	 */
	Box2D.Dynamics.b2World.prototype.DestroyJoint = function(j) {
		var collideConnected = j.m_collideConnected;
		if (j.m_prev) {
			j.m_prev.m_next = j.m_next;
		}
		if (j.m_next) {
			j.m_next.m_prev = j.m_prev;
		}
		if (j == this.m_jointList) {
			this.m_jointList = j.m_next;
		}
		var bodyA = j.m_bodyA;
		var bodyB = j.m_bodyB;
		bodyA.SetAwake(true);
		bodyB.SetAwake(true);
		if (j.m_edgeA.prev) {
			j.m_edgeA.prev.next = j.m_edgeA.next;
		}
		if (j.m_edgeA.next) {
			j.m_edgeA.next.prev = j.m_edgeA.prev;
		}
		if (j.m_edgeA == bodyA.m_jointList) {
			bodyA.m_jointList = j.m_edgeA.next;
		}
		j.m_edgeA.prev = null;
		j.m_edgeA.next = null;
		if (j.m_edgeB.prev) {
			j.m_edgeB.prev.next = j.m_edgeB.next;
		}
		if (j.m_edgeB.next) {
			j.m_edgeB.next.prev = j.m_edgeB.prev;
		}
		if (j.m_edgeB == bodyB.m_jointList) {
			bodyB.m_jointList = j.m_edgeB.next;
		}
		j.m_edgeB.prev = null;
		j.m_edgeB.next = null;
		this.m_jointCount--;
		if (!collideConnected) {
			for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				if (contactNode.contact.GetOther(bodyB) == bodyA) {
					contactNode.contact.FlagForFiltering();
				}
			}
		}
	};
	/**
	 * @return {!Box2D.Dynamics.Controllers.b2ControllerList}
	 */
	Box2D.Dynamics.b2World.prototype.GetControllerList = function() {
		return this.controllerList;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} c
	 * @return {!Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.b2World.prototype.AddController = function(c) {
		if (c.m_world !== null && c.m_world != this) {
			throw new Error("Controller can only be a member of one world");
		}
		this.controllerList.AddController(c);
		c.m_world = this;
		return c;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} c
	 */
	Box2D.Dynamics.b2World.prototype.RemoveController = function(c) {
		this.controllerList.RemoveController(c);
		c.m_world = null;
		c.Clear();
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 * @return {!Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.b2World.prototype.CreateController = function(controller) {
		return this.AddController(controller);
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2World.prototype.DestroyController = function(controller) {
		this.RemoveController(controller);
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2World.prototype.SetWarmStarting = function(flag) {
		this.m_warmStarting = flag;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2World.prototype.SetContinuousPhysics = function(flag) {
		this.m_continuousPhysics = flag;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetBodyCount = function() {
		return this.bodyList.GetBodyCount();
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetJointCount = function() {
		return this.m_jointCount;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetContactCount = function() {
		return this.contactList.GetContactCount();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 */
	Box2D.Dynamics.b2World.prototype.SetGravity = function(gravity) {
		this.m_gravity = gravity;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.b2World.prototype.GetGravity = function() {
		return this.m_gravity;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2World.prototype.GetGroundBody = function() {
		return this.m_groundBody;
	};
	/**
	 * @param {number} dt
	 * @param {number} velocityIterations
	 * @param {number} positionIterations
	 */
	Box2D.Dynamics.b2World.prototype.Step = function(dt, velocityIterations, positionIterations) {
		if (this.m_newFixture) {
			this.m_contactManager.FindNewContacts();
			this.m_newFixture = false;
		}
		this.m_isLocked = true;
		var step = new Box2D.Dynamics.b2TimeStep(dt, this.m_inv_dt0 * dt /* dtRatio */, velocityIterations, positionIterations, this.m_warmStarting);
		this.m_contactManager.Collide();
		if (step.dt > 0.0) {
			this.Solve(step);
			if (this.m_continuousPhysics) {
				this.SolveTOI(step);
			}
			this.m_inv_dt0 = step.inv_dt;
		}
		this.m_isLocked = false;
	};
	Box2D.Dynamics.b2World.prototype.ClearForces = function() {
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies); node; node = node.GetNextNode()) {
			node.body.m_force.SetZero();
			node.body.m_torque = 0.0;
		}
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture):boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Dynamics.b2World.prototype.QueryAABB = function(callback, aabb) {
		this.m_contactManager.m_broadPhase.Query(callback, aabb);
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 */
	Box2D.Dynamics.b2World.prototype.QueryPoint = function(callback, p) {
		/** @type {function(!Box2D.Dynamics.b2Fixture): boolean} */
		var WorldQueryWrapper = function(fixture) {
			if (fixture.TestPoint(p)) {
				return callback(fixture);
			} else {
				return true;
			}
		};
		var aabb = Box2D.Collision.b2AABB.Get();
		aabb.lowerBound_.Set(p.x - Box2D.Common.b2Settings.b2_linearSlop, p.y - Box2D.Common.b2Settings.b2_linearSlop);
		aabb.upperBound_.Set(p.x + Box2D.Common.b2Settings.b2_linearSlop, p.y + Box2D.Common.b2Settings.b2_linearSlop);
		this.m_contactManager.m_broadPhase.Query(WorldQueryWrapper, aabb);
		Box2D.Collision.b2AABB.Free(aabb);
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture, !Box2D.Common.Math.b2Vec2, !Box2D.Common.Math.b2Vec2, number): number} callback
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 */
	Box2D.Dynamics.b2World.prototype.RayCast = function(callback, point1, point2) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var output = new Box2D.Collision.b2RayCastOutput();
		/**
		 * @param {!Box2D.Collision.b2RayCastInput} input
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 */
		var RayCastWrapper = function(input, fixture) {
				var hit = fixture.RayCast(output, input);
				if (hit) {
					var flipFrac = 1 - output.fraction;
					var point = Box2D.Common.Math.b2Vec2.Get(flipFrac * point1.x + output.fraction * point2.x, flipFrac * point1.y + output.fraction * point2.y);
					var retVal = callback(fixture, point, output.normal, output.fraction);
					Box2D.Common.Math.b2Vec2.Free(point);
					return retVal;
				} else {
					return input.maxFraction;
				}
			};
		var input = new Box2D.Collision.b2RayCastInput(point1, point2, 1 /* maxFraction */ );
		broadPhase.RayCast(RayCastWrapper, input);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 * @return {Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.b2World.prototype.RayCastOne = function(point1, point2) {
		var result = null;
		/**
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 * @param {!Box2D.Common.Math.b2Vec2} point
		 * @param {!Box2D.Common.Math.b2Vec2} normal
		 * @param {number} fraction
		 * @return {number}
		 */
		var RayCastOneWrapper = function(fixture, point, normal, fraction) {
			result = fixture;
			return fraction;
		};
		this.RayCast(RayCastOneWrapper, point1, point2);
		return result;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 * @return {Array.<Box2D.Dynamics.b2Fixture>}
	 */
	Box2D.Dynamics.b2World.prototype.RayCastAll = function(point1, point2) {
		var result = [];
		/**
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 * @param {!Box2D.Common.Math.b2Vec2} point
		 * @param {!Box2D.Common.Math.b2Vec2} normal
		 * @param {number} fraction
		 * @return {number}
		 */
		var RayCastAllWrapper = function(fixture, point, normal, fraction) {
			result.push(fixture);
			return 1;
		};
		this.RayCast(RayCastAllWrapper, point1, point2);
		return result;
	};
	/**
	 * @return {!Box2D.Dynamics.b2BodyList}
	 */
	Box2D.Dynamics.b2World.prototype.GetBodyList = function() {
		return this.bodyList;
	};
	/**
	 * @return {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.b2World.prototype.GetJointList = function() {
		return this.m_jointList;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.b2World.prototype.GetContactList = function() {
		return this.contactList;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2World.prototype.IsLocked = function() {
		return this.m_isLocked;
	};
	var b2solvearray = [];
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.b2World.prototype.Solve = function(step) {
		for (var controllerNode = this.controllerList.GetFirstNode(); controllerNode; controllerNode = controllerNode.GetNextNode()) {
			controllerNode.controller.Step(step);
		}
		var m_island = new Box2D.Dynamics.b2Island(this.m_contactManager.m_contactListener, this.m_contactSolver);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			bodyNode.body.m_islandFlag = false;
		}
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.m_islandFlag = false;
		}
		for (var j = this.m_jointList; j; j = j.m_next) {
			j.m_islandFlag = false;
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var seed = bodyNode.body;
			if (seed.m_islandFlag) {
				continue;
			}
			m_island.Clear();
			b2solvearray.length = 0;
			var stack = b2solvearray;
			stack.push(seed);
			seed.m_islandFlag = true;
			while (stack.length > 0) {
				var b = stack.pop();
				m_island.AddBody(b);
				if (!b.IsAwake()) {
					b.SetAwake(true);
				}
				if (b.GetType() == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
					continue;
				}
				for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					var contact = contactNode.contact;
					if (contact.m_islandFlag) {
						continue;
					}
					m_island.AddContact(contact);
					contact.m_islandFlag = true;
					var other = contact.GetOther(b);
					if (other.m_islandFlag) {
						continue;
					}
					stack.push(other);
					other.m_islandFlag = true;
				}
				for (var jn = b.m_jointList; jn; jn = jn.next) {
					if (jn.joint.m_islandFlag || !jn.other.IsActive()) {
						continue;
					}
					m_island.AddJoint(jn.joint);
					jn.joint.m_islandFlag = true;
					if (jn.other.m_islandFlag) {
						continue;
					}
					stack.push(jn.other);
					jn.other.m_islandFlag = true;
				}
			}
			m_island.Solve(step, this.m_gravity, this.m_allowSleep);
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			bodyNode.body.SynchronizeFixtures();
		}
		this.m_contactManager.FindNewContacts();
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.b2World.prototype.SolveTOI = function(step) {
		var m_island = new Box2D.Dynamics.b2Island(this.m_contactManager.m_contactListener, this.m_contactSolver);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var b = bodyNode.body;
			b.m_islandFlag = false;
			b.m_sweep.t0 = 0.0;
		}
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.m_islandFlag = false;
			contactNode.contact.m_toi = null;
		}
		for (var j = this.m_jointList; j; j = j.m_next) {
			j.m_islandFlag = false;
		}
		while (true) {
			var toi2 = this._SolveTOI2(step);
			var minContact = toi2.minContact;
			var minTOI = toi2.minTOI;
			if (minContact === null || Box2D.Dynamics.b2World.MAX_TOI < minTOI) {
				break;
			}
			var fixtureABody = minContact.m_fixtureA.GetBody();
			var fixtureBBody =  minContact.m_fixtureB.GetBody();
			Box2D.Dynamics.b2World.s_backupA.Set(fixtureABody.m_sweep);
			Box2D.Dynamics.b2World.s_backupB.Set(fixtureBBody.m_sweep);
			fixtureABody.Advance(minTOI);
			fixtureBBody.Advance(minTOI);
			minContact.Update(this.m_contactManager.m_contactListener);
			minContact.m_toi = null;
			if (minContact.sensor || !minContact.enabled) {
				fixtureABody.m_sweep.Set(Box2D.Dynamics.b2World.s_backupA);
				fixtureBBody.m_sweep.Set(Box2D.Dynamics.b2World.s_backupB);
				fixtureABody.SynchronizeTransform();
				fixtureBBody.SynchronizeTransform();
				continue;
			}
			if (!minContact.touching) {
				continue;
			}
			var seed = fixtureABody;
			if (seed.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
				seed = fixtureBBody;
			}
			m_island.Clear();
			b2solvearray.length = 0;
			var queue = b2solvearray;
			queue.push(seed);
			seed.m_islandFlag = true;
			while (queue.length > 0) {
				var b = queue.pop();
				m_island.AddBody(b);
				if (!b.IsAwake()) {
					b.SetAwake(true);
				}
				if (b.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
					continue;
				}
				for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					if (m_island.m_contactCount == Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland) {
						break;
					}
					var contact = contactNode.contact;
					if (contact.m_islandFlag) {
						continue;
					}
					m_island.AddContact(contact);
					contact.m_islandFlag = true;
					var other = contact.GetOther(b);
					if (other.m_islandFlag) {
						continue;
					}
					if (other.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
						other.Advance(minTOI);
						other.SetAwake(true);
						queue.push(other);
					}
					other.m_islandFlag = true;
				}
				for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {
					if (m_island.m_jointCount == Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland) {
						continue;
					}
					if (jEdge.joint.m_islandFlag || !jEdge.other.IsActive()) {
						continue;
					}
					m_island.AddJoint(jEdge.joint);
					jEdge.joint.m_islandFlag = true;
					if (jEdge.other.m_islandFlag) {
						continue;
					}
					if (jEdge.other.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
						jEdge.other.Advance(minTOI);
						jEdge.other.SetAwake(true);
						queue.push(jEdge.other);
					}
					jEdge.other.m_islandFlag = true;
				}
			}
			m_island.SolveTOI(new Box2D.Dynamics.b2TimeStep((1.0 - minTOI) * step.dt /* dt */, 0 /* dtRatio */, step.velocityIterations, step.positionIterations, false /* warmStarting */));
			for (var i = 0; i < m_island.m_bodies.length; i++) {
				m_island.m_bodies[i].m_islandFlag = false;
				if (!m_island.m_bodies[i].IsAwake() || m_island.m_bodies[i].GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
					continue;
				}
				m_island.m_bodies[i].SynchronizeFixtures();
				for (var contactNode = m_island.m_bodies[i].contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					contactNode.contact.m_toi = null;
				}
			}
			for (var i = 0; i < m_island.m_contactCount; i++) {
				m_island.m_contacts[i].m_islandFlag = false;
				m_island.m_contacts[i].m_toi = null;
			}
			for (var i = 0; i < m_island.m_jointCount; i++) {
				m_island.m_joints[i].m_islandFlag = false;
			}
			this.m_contactManager.FindNewContacts();
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @return {{minContact: Box2D.Dynamics.Contacts.b2Contact, minTOI: number}}
	 */
	Box2D.Dynamics.b2World.prototype._SolveTOI2 = function(step) {
		var minContact = null;
		var minTOI = 1.0;
		var contacts = 0;
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var c = contactNode.contact;
			if (this._SolveTOI2SkipContact(step, c)) {
				continue;
			}
			var toi = 1.0;
			if (c.m_toi != null) {
				toi = c.m_toi;
			} else if (c.touching) {
				toi = 1;
				c.m_toi = toi;
			} else {
				var fixtureABody = c.m_fixtureA.GetBody();
				var fixtureBBody = c.m_fixtureB.GetBody();
				var t0 = fixtureABody.m_sweep.t0;
				if (fixtureABody.m_sweep.t0 < fixtureBBody.m_sweep.t0) {
					t0 = fixtureBBody.m_sweep.t0;
					fixtureABody.m_sweep.Advance(t0);
				} else if (fixtureBBody.m_sweep.t0 < fixtureABody.m_sweep.t0) {
					t0 = fixtureABody.m_sweep.t0;
					fixtureBBody.m_sweep.Advance(t0);
				}
				toi = c.ComputeTOI(fixtureABody.m_sweep, fixtureBBody.m_sweep);
;
				if (toi > 0.0 && toi < 1.0) {
					toi = (1.0 - toi) * t0 + toi;
				}
				c.m_toi = toi;
			}
			if (Number.MIN_VALUE < toi && toi < minTOI) {
				minContact = c;
				minTOI = toi;
			}
		}
		return {
			minContact: minContact,
			minTOI: minTOI
		};
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} c
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2World.prototype._SolveTOI2SkipContact = function(step, c) {
		var fixtureABody = c.m_fixtureA.GetBody();
		var fixtureBBody = c.m_fixtureB.GetBody();
		if ((fixtureABody.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || !fixtureABody.IsAwake()) && (fixtureBBody.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || !fixtureBBody.IsAwake())) {
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2Contact = function(fixtureA, fixtureB) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Contact" + Box2D.Dynamics.Contacts.b2Contact.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Collision.b2Manifold}
		 */
		this.m_manifold = new Box2D.Collision.b2Manifold();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2Manifold}
		 */
		this.m_oldManifold = new Box2D.Collision.b2Manifold();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.touching = false;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.continuous = (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyA.IsBullet() ||
						  (bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyB.IsBullet();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.sensor = fixtureA.IsSensor() || fixtureB.IsSensor();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.filtering = false;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.m_fixtureA = fixtureA;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.m_fixtureB = fixtureB;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.enabled = true;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.bodyAList = bodyA.GetContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.bodyBList = bodyB.GetContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.worldList = bodyB.GetWorld().GetContactList();
		this.AddToLists();
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.Reset = function(fixtureA, fixtureB) {
		this.m_manifold.Reset();
		this.m_oldManifold.Reset();
		this.touching = false;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		this.continuous = (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyA.IsBullet() ||
						  (bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyB.IsBullet();
		this.sensor = fixtureA.IsSensor() || fixtureB.IsSensor();
		this.filtering = false;
		this.m_fixtureA = fixtureA;
		this.m_fixtureB = fixtureB;
		this.enabled = true;
		this.bodyAList = bodyA.GetContactList();
		this.bodyBList = bodyB.GetContactList();
		this.worldList = bodyB.GetWorld().GetContactList();
		this.AddToLists();
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.AddToLists = function () {
		this.bodyAList.AddContact(this);
		this.bodyBList.AddContact(this);
		this.worldList.AddContact(this);
		this.UpdateLists();
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.UpdateLists = function () {
		var nonSensorEnabledTouching = false;
		var nonSensorEnabledContinuous = false;
		if (!this.IsSensor() && this.IsEnabled()) {
			if (this.IsTouching()) {
				nonSensorEnabledTouching = true;
			}
			if (this.IsContinuous()) {
				nonSensorEnabledContinuous = true;
			}
		}
		this.bodyAList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
		this.bodyBList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
		this.worldList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.RemoveFromLists = function () {
		this.bodyAList.RemoveContact(this);
		this.bodyBList.RemoveContact(this);
		this.worldList.RemoveContact(this);
	};
	/**
	 * @return {!Box2D.Collision.b2Manifold}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetManifold = function () {
	  return this.m_manifold;
	};
	/**
	 * @param {!Box2D.Collision.b2WorldManifold} worldManifold
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetWorldManifold = function (worldManifold) {
		var bodyA = this.m_fixtureA.GetBody();
		var bodyB = this.m_fixtureB.GetBody();
		var shapeA = this.m_fixtureA.GetShape();
		var shapeB = this.m_fixtureB.GetShape();
		worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsTouching = function () {
	  return this.touching;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsContinuous = function () {
	  return this.continuous;
	};
	/**
	 * @param {boolean} sensor
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.SetSensor = function (sensor) {
	   this.sensor = sensor;
	   this.UpdateLists();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsSensor = function () {
	  return this.sensor;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.SetEnabled = function (flag) {
	   this.enabled = flag;
	   this.UpdateLists();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsEnabled = function () {
	   return this.enabled;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetNext = function () {
	  return this.m_next;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureA = function () {
	  return this.m_fixtureA;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureB = function () {
	  return this.m_fixtureB;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetOther = function (body) {
		var bodyA = this.m_fixtureA.GetBody();
		if (bodyA != body) {
			return bodyA;
		} else {
			return this.m_fixtureB.GetBody();
		}
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.FlagForFiltering = function () {
	   this.filtering = true;
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.ClearFiltering = function () {
	   this.filtering = false;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsFiltering = function () {
	   return this.filtering;
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.Update = function (listener) {
	  var tManifold = this.m_oldManifold;
	  this.m_oldManifold = this.m_manifold;
	  this.m_manifold = tManifold;
	  this.enabled = true;
	  var touching = false;
	  var wasTouching = this.IsTouching();
	  var bodyA = this.m_fixtureA.GetBody();
	  var bodyB = this.m_fixtureB.GetBody();
	  var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
	  if (this.sensor) {
		 if (aabbOverlap) {
			touching = Box2D.Collision.Shapes.b2Shape.TestOverlap(this.m_fixtureA.GetShape(), bodyA.GetTransform(), this.m_fixtureB.GetShape(), bodyB.GetTransform());
		 }
		 this.m_manifold.m_pointCount = 0;
	  } else {
		 if (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || bodyB.IsBullet()) {
			this.continuous = true;
		 } else {
			this.continuous = false;
		 }
		 if (aabbOverlap) {
			this.Evaluate();
			touching = this.m_manifold.m_pointCount > 0;
			for (var i = 0; i < this.m_manifold.m_pointCount; i++) {
			   var mp2 = this.m_manifold.m_points[i];
			   mp2.m_normalImpulse = 0.0;
			   mp2.m_tangentImpulse = 0.0;
			   for (var j = 0; j < this.m_oldManifold.m_pointCount; j++) {
				  var mp1 = this.m_oldManifold.m_points[j];
				  if (mp1.m_id.GetKey() == mp2.m_id.GetKey()) {
					 mp2.m_normalImpulse = mp1.m_normalImpulse;
					 mp2.m_tangentImpulse = mp1.m_tangentImpulse;
					 break;
				  }
			   }
			}
		 } else {
			this.m_manifold.m_pointCount = 0;
		 }
		 if (touching != wasTouching) {
			bodyA.SetAwake(true);
			bodyB.SetAwake(true);
		 }
	  }
	  this.touching = touching;
	  if (touching != wasTouching) {
		 this.UpdateLists();
	  }
	  if (!wasTouching && touching) {
		 listener.BeginContact(this);
	  }
	  if (wasTouching && !touching) {
		 listener.EndContact(this);
	  }
	  if (!this.sensor) {
		 listener.PreSolve(this, this.m_oldManifold);
	  }
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.Evaluate = function () {};
	Box2D.Dynamics.Contacts.b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {
	  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
	  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
	  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepA = sweepA;
	  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepB = sweepB;
	  Box2D.Dynamics.Contacts.b2Contact.s_input.tolerance = Box2D.Common.b2Settings.b2_linearSlop;
	  return Box2D.Collision.b2TimeOfImpact.TimeOfImpact(Box2D.Dynamics.Contacts.b2Contact.s_input);
	};
	Box2D.Dynamics.Contacts.b2Contact.s_input = new Box2D.Collision.b2TOIInput();
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.Contacts.b2Contact.NEXT_ID = 0;
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2CircleContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2CircleContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2CircleContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollideCircles(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactConstraint = function() {
		this.localPlaneNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normalMass = new Box2D.Common.Math.b2Mat22();
		this.K = new Box2D.Common.Math.b2Mat22();
		this.points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.points[i] = new Box2D.Dynamics.Contacts.b2ContactConstraintPoint();
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactConstraintPoint = function() {
		  this.localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.rA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.rB = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Dynamics.Contacts.b2ContactConstraintPoint.prototype.Reset = function() {
		this.localPoint.Set(0, 0);
		this.rA.Set(0, 0);
		this.rB.Set(0, 0);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactFactory = function() {
		/**
		 * @private
		 */
		this.m_registers = {};
		/**
		 * @private
		 * @type {Object.<Object.<Array.<!Box2D.Dynamics.b2Contact>>>}
		 */
		this.m_freeContacts = {};
		this.AddType(Box2D.Dynamics.Contacts.b2CircleContact, Box2D.Collision.Shapes.b2CircleShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolyAndCircleContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolygonContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2PolygonShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2EdgeAndCircleContact, Box2D.Collision.Shapes.b2EdgeShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolyAndEdgeContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2EdgeShape.NAME);
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.AddType = function(ctor, type1, type2) {
		this.m_freeContacts[type1] = this.m_freeContacts[type1] || {};
		this.m_freeContacts[type1][type2] = this.m_freeContacts[type1][type2] || [];
		this.m_registers[type1] = this.m_registers[type1] || {};
		this.m_registers[type1][type2] = new Box2D.Dynamics.Contacts.b2ContactRegister();
		this.m_registers[type1][type2].ctor = ctor;
		this.m_registers[type1][type2].primary = true;
		if (type1 != type2) {
			this.m_registers[type2] = this.m_registers[type2] || {};
			this.m_registers[type2][type1] = new Box2D.Dynamics.Contacts.b2ContactRegister();
			this.m_registers[type2][type1].ctor = ctor;
			this.m_registers[type2][type1].primary = false;
		}
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.Create = function(fixtureA, fixtureB) {
		var type1 = fixtureA.GetShape().GetTypeName();
		var type2 = fixtureB.GetShape().GetTypeName();
		var reg = this.m_registers[type1][type2];
		var ctor = reg.ctor;
		if (ctor != null) {
			if (reg.primary) {
				if (this.m_freeContacts[type1][type2].length > 0) {
					var c = this.m_freeContacts[type1][type2].pop();
					c.Reset(fixtureA, fixtureB);
					return c;
				}
				return new ctor(fixtureA, fixtureB);
			} else {
				if (this.m_freeContacts[type2][type1].length > 0) {
					var c = this.m_freeContacts[type2][type1].pop();
					c.Reset(fixtureB, fixtureA);
					return c;
				}
				return new ctor(fixtureB, fixtureA);
			}
		} else {
			return null;
		}
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.Destroy = function(contact) {
		var type1 = contact.m_fixtureA.GetShape().GetTypeName();
		var type2 = contact.m_fixtureB.GetShape().GetTypeName();
		this.m_freeContacts[type1][type2].push(contact);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactList = function() {
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.Contacts.b2ContactListNode>}
		 */
		this.contactFirstNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
			this.contactFirstNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.Contacts.b2ContactListNode>}
		 */
		this.contactLastNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
			this.contactLastNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Object.<Array.<Box2D.Dynamics.Contacts.b2ContactListNode>>}
		 */
		this.contactNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.contactCount = 0;
	};
	/**
	 * @param {number} type
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.GetFirstNode = function(type) {
		return this.contactFirstNodes[type];
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.AddContact = function(contact) {
		var contactID = contact.ID;
		if (this.contactNodeLookup[contactID] == null) {
			this.contactNodeLookup[contactID] = [];
			for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
				this.contactNodeLookup[contactID][i] = null;
			}
			this.CreateNode(contact, contactID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts);
			this.contactCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.UpdateContact = function(contact, nonSensorEnabledTouching, nonSensorEnabledContinuous) {
		if (nonSensorEnabledTouching) {
			this.CreateNode(contact, contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts);
		} else {
			this.RemoveNode(contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts);
		}
		if (nonSensorEnabledContinuous) {
			this.CreateNode(contact, contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts);
		} else {
			this.RemoveNode(contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.RemoveContact = function(contact) {
		var contactID = contact.ID;
		if (this.contactNodeLookup[contactID] != null) {
			for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
				this.RemoveNode(contactID, i);
			}
			delete this.contactNodeLookup[contactID];
			this.contactCount--;
		}
	};
	/**
	 * @param {string} contactID
	 * @param {number} type
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.RemoveNode = function(contactID, type) {
		var nodeList = this.contactNodeLookup[contactID];
		if (nodeList == null) {
			return;
		}
		var node = nodeList[type];
		if (node == null) {
			return;
		}
		nodeList[type] = null;
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.contactFirstNodes[type] = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.contactLastNodes[type] = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		Box2D.Dynamics.Contacts.b2ContactListNode.FreeNode(node);
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @param {string} contactID
	 * @param {number} type
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.CreateNode = function(contact, contactID, type) {
		var nodeList = this.contactNodeLookup[contactID];
		if (nodeList[type] == null) {
			nodeList[type] = Box2D.Dynamics.Contacts.b2ContactListNode.GetNode(contact);
			var prevNode = this.contactLastNodes[type];
			if (prevNode != null) {
				prevNode.SetNextNode(nodeList[type]);
				nodeList[type].SetPreviousNode(prevNode);
			} else {
				this.contactFirstNodes[type] = nodeList[type];
			}
			this.contactLastNodes[type] = nodeList[type];
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.GetContactCount = function() {
		return this.contactCount;
	};
	/**
	 * @enum {number}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.TYPES = {
		nonSensorEnabledTouchingContacts: 0,
		nonSensorEnabledContinuousContacts: 1,
		allContacts: 2 // Assumed to be last by above code
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode = function(contact) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2Contact}
		 */
		this.contact = contact;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Contacts.b2ContactListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Contacts.b2ContactListNode}
		 */
		this.previous = null;
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Dynamics.Contacts.b2ContactListNode>
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes = [];
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @return {!Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.GetNode = function(contact) {
		if (Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.length > 0) {
			var node = Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.pop();
			node.next = null;
			node.previous = null;
			node.contact = contact;
			return node;
		} else {
			return new Box2D.Dynamics.Contacts.b2ContactListNode(contact);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.FreeNode = function(node) {
		Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.push(node);
	};
	/**
	 * @param {Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {!Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetContact = function() {
		return this.contact;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactRegister = function () {
		this.pool = null;
		this.poolCount = 0;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold = function() {
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_separations = [];
		this.m_points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype.Initialize = function(cc) {
;
		switch (cc.type) {
			case Box2D.Collision.b2Manifold.e_circles:
				this._InitializeCircles(cc);
				break;
			case Box2D.Collision.b2Manifold.e_faceA:
				this._InitializeFaceA(cc);
				break;
			case Box2D.Collision.b2Manifold.e_faceB:
				this._InitializeFaceB(cc);
				break;
		}
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeCircles = function(cc) {
		var tMat = cc.bodyA.m_xf.R;
		var tVec = cc.localPoint;
		var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		tMat = cc.bodyB.m_xf.R;
		tVec = cc.points[0].localPoint;
		var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var dX = pointBX - pointAX;
		var dY = pointBY - pointAY;
		var d2 = dX * dX + dY * dY;
		if (d2 > Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
			var d = Math.sqrt(d2);
			this.m_normal.x = dX / d;
			this.m_normal.y = dY / d;
		} else {
			this.m_normal.x = 1.0;
			this.m_normal.y = 0.0;
		}
		this.m_points[0].x = 0.5 * (pointAX + pointBX);
		this.m_points[0].y = 0.5 * (pointAY + pointBY);
		this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeFaceA = function(cc) {
		this.m_normal.x = cc.bodyA.m_xf.R.col1.x * cc.localPlaneNormal.x + cc.bodyA.m_xf.R.col2.x * cc.localPlaneNormal.y;
		this.m_normal.y = cc.bodyA.m_xf.R.col1.y * cc.localPlaneNormal.x + cc.bodyA.m_xf.R.col2.y * cc.localPlaneNormal.y;
		var planePointX = cc.bodyA.m_xf.position.x + (cc.bodyA.m_xf.R.col1.x * cc.localPoint.x + cc.bodyA.m_xf.R.col2.x * cc.localPoint.y);
		var planePointY = cc.bodyA.m_xf.position.y + (cc.bodyA.m_xf.R.col1.y * cc.localPoint.x + cc.bodyA.m_xf.R.col2.y * cc.localPoint.y);
		for (var i = 0; i < cc.pointCount; i++) {
			var clipPointX = cc.bodyB.m_xf.position.x + (cc.bodyB.m_xf.R.col1.x * cc.points[i].localPoint.x + cc.bodyB.m_xf.R.col2.x * cc.points[i].localPoint.y);
			var clipPointY = cc.bodyB.m_xf.position.y + (cc.bodyB.m_xf.R.col1.y * cc.points[i].localPoint.x + cc.bodyB.m_xf.R.col2.y * cc.points[i].localPoint.y);
			this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
			this.m_points[i].x = clipPointX;
			this.m_points[i].y = clipPointY;
		}
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeFaceB = function(cc) {
		this.m_normal.x = cc.bodyB.m_xf.R.col1.x * cc.localPlaneNormal.x + cc.bodyB.m_xf.R.col2.x * cc.localPlaneNormal.y;
		this.m_normal.y = cc.bodyB.m_xf.R.col1.y * cc.localPlaneNormal.x + cc.bodyB.m_xf.R.col2.y * cc.localPlaneNormal.y;
		var planePointX = cc.bodyB.m_xf.position.x + (cc.bodyB.m_xf.R.col1.x * cc.localPoint.x + cc.bodyB.m_xf.R.col2.x * cc.localPoint.y);
		var planePointY = cc.bodyB.m_xf.position.y + (cc.bodyB.m_xf.R.col1.y * cc.localPoint.x + cc.bodyB.m_xf.R.col2.y * cc.localPoint.y);
		for (var i = 0; i < cc.pointCount; i++) {
			var clipPointX = cc.bodyA.m_xf.position.x + (cc.bodyA.m_xf.R.col1.x * cc.points[i].localPoint.x + cc.bodyA.m_xf.R.col2.x * cc.points[i].localPoint.y);
			var clipPointY = cc.bodyA.m_xf.position.y + (cc.bodyA.m_xf.R.col1.y * cc.points[i].localPoint.x + cc.bodyA.m_xf.R.col2.y * cc.points[i].localPoint.y);
			this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
			this.m_points[i].Set(clipPointX, clipPointY);
		}
		this.m_normal.x *= -1;
		this.m_normal.y *= -1;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver = function() {
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Contacts.b2ContactConstraint>}
		 */
		this.m_constraints = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {Array.<!Box2D.Dynamics.Contacts.b2Contact>} contacts
	 * @param {number} contactCount
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.Initialize = function(step, contacts, contactCount) {
		this.m_constraintCount = contactCount;
		while (this.m_constraints.length < this.m_constraintCount) {
			this.m_constraints[this.m_constraints.length] = new Box2D.Dynamics.Contacts.b2ContactConstraint();
		}
		for (var i = 0; i < contactCount; i++) {
			var contact = contacts[i];
			var fixtureA = contact.m_fixtureA;
			var fixtureB = contact.m_fixtureB;
			var shapeA = fixtureA.m_shape;
			var shapeB = fixtureB.m_shape;
			var radiusA = shapeA.m_radius;
			var radiusB = shapeB.m_radius;
			var bodyA = fixtureA.GetBody();
			var bodyB = fixtureB.GetBody();
			var manifold = contact.GetManifold();
			var friction = Box2D.Common.b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());
			var restitution = Box2D.Common.b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());
			var vAX = bodyA.m_linearVelocity.x;
			var vAY = bodyA.m_linearVelocity.y;
			var vBX = bodyB.m_linearVelocity.x;
			var vBY = bodyB.m_linearVelocity.y;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);
			var normalX = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_normal.x;
			var normalY = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_normal.y;
			var cc = this.m_constraints[i];
			cc.bodyA = bodyA;
			cc.bodyB = bodyB;
			cc.manifold = manifold;
			cc.normal.x = normalX;
			cc.normal.y = normalY;
			cc.pointCount = manifold.m_pointCount;
			cc.friction = friction;
			cc.restitution = restitution;
			cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
			cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
			cc.localPoint.x = manifold.m_localPoint.x;
			cc.localPoint.y = manifold.m_localPoint.y;
			cc.radius = radiusA + radiusB;
			cc.type = manifold.m_type;
			for (var k = 0; k < cc.pointCount; ++k) {
				var cp = manifold.m_points[k];
				var ccp = cc.points[k];
				ccp.normalImpulse = cp.m_normalImpulse;
				ccp.tangentImpulse = cp.m_tangentImpulse;
				ccp.localPoint.SetV(cp.m_localPoint);
				var rAX = ccp.rA.x = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
				var rAY = ccp.rA.y = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
				var rBX = ccp.rB.x = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
				var rBY = ccp.rB.y = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
				var rnA = rAX * normalY - rAY * normalX;
				var rnB = rBX * normalY - rBY * normalX;
				rnA *= rnA;
				rnB *= rnB;
				var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
				ccp.normalMass = 1.0 / kNormal;
				var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
				kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
				ccp.equalizedMass = 1.0 / kEqualized;
				var tangentX = normalY;
				var tangentY = (-normalX);
				var rtA = rAX * tangentY - rAY * tangentX;
				var rtB = rBX * tangentY - rBY * tangentX;
				rtA *= rtA;
				rtB *= rtB;
				var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
				ccp.tangentMass = 1.0 / kTangent;
				ccp.velocityBias = 0.0;
				var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));
				var tY = vBY + (wB * rBX) - vAY - (wA * rAX);
				var vRel = cc.normal.x * tX + cc.normal.y * tY;
				if (vRel < (-Box2D.Common.b2Settings.b2_velocityThreshold)) {
					ccp.velocityBias += (-cc.restitution * vRel);
				}
			}
			if (cc.pointCount == 2) {
				var ccp1 = cc.points[0];
				var ccp2 = cc.points[1];
				var invMassA = bodyA.m_invMass;
				var invIA = bodyA.m_invI;
				var invMassB = bodyB.m_invMass;
				var invIB = bodyB.m_invI;
				var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
				var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
				var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
				var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
				var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
				var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
				var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
				var k_maxConditionNumber = 100.0;
				if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
					cc.K.col1.Set(k11, k12);
					cc.K.col2.Set(k12, k22);
					cc.K.GetInverse(cc.normalMass);
				} else {
					cc.pointCount = 1;
				}
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.InitVelocityConstraints = function(step) {
		for (var i = 0; i < this.m_constraintCount; ++i) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = (-normalX);
			var tX = 0;
			var j = 0;
			var tCount = 0;
			if (step.warmStarting) {
				tCount = c.pointCount;
				for (j = 0; j < tCount; ++j) {
					var ccp = c.points[j];
					ccp.normalImpulse *= step.dtRatio;
					ccp.tangentImpulse *= step.dtRatio;
					var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
					var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
					bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
					bodyA.m_linearVelocity.x -= invMassA * PX;
					bodyA.m_linearVelocity.y -= invMassA * PY;
					bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
					bodyB.m_linearVelocity.x += invMassB * PX;
					bodyB.m_linearVelocity.y += invMassB * PY;
				}
			} else {
				tCount = c.pointCount;
				for (j = 0; j < tCount; ++j) {
					var ccp2 = c.points[j];
					ccp2.normalImpulse = 0.0;
					ccp2.tangentImpulse = 0.0;
				}
			}
		}
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints = function() {
		for (var i = 0; i < this.m_constraintCount; i++) {
			this.SolveVelocityConstraints_Constraint(this.m_constraints[i]);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_Constraint = function(c) {
		var normalX = c.normal.x;
		var normalY = c.normal.y;
		for (var j = 0; j < c.pointCount; j++) {
			Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPoint(c, c.points[j]);
		}
		if (c.pointCount == 1) {
			var ccp = c.points[0];
			var dvX = c.bodyB.m_linearVelocity.x - (c.bodyB.m_angularVelocity * ccp.rB.y) - c.bodyA.m_linearVelocity.x + (c.bodyA.m_angularVelocity * ccp.rA.y);
			var dvY = c.bodyB.m_linearVelocity.y + (c.bodyB.m_angularVelocity * ccp.rB.x) - c.bodyA.m_linearVelocity.y - (c.bodyA.m_angularVelocity * ccp.rA.x);
			var vn = dvX * normalX + dvY * normalY;
			var newImpulse = ccp.normalImpulse - (ccp.normalMass * (vn - ccp.velocityBias));
			newImpulse = newImpulse > 0 ? newImpulse : 0.0;
			var impulseLambda = newImpulse - ccp.normalImpulse;
			var PX = impulseLambda * normalX;
			var PY = impulseLambda * normalY;
			c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * PX;
			c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * PY;
			c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (ccp.rA.x * PY - ccp.rA.y * PX);
			c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * PX;
			c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * PY;
			c.bodyB.m_angularVelocity += c.bodyB.m_invI * (ccp.rB.x * PY - ccp.rB.y * PX);
			ccp.normalImpulse = newImpulse;
		} else {
			var cp1 = c.points[0];
			var cp2 = c.points[1];
			var aX = cp1.normalImpulse;
			var aY = cp2.normalImpulse;
			var dv1X = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * cp1.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * cp1.rA.y;
			var dv1Y = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * cp1.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * cp1.rA.x;
			var dv2X = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * cp2.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * cp2.rA.y;
			var dv2Y = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * cp2.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * cp2.rA.x;
			var bX = (dv1X * normalX + dv1Y * normalY) - cp1.velocityBias;
			var bY = (dv2X * normalX + dv2Y * normalY) - cp2.velocityBias;
			bX -= c.K.col1.x * aX + c.K.col2.x * aY;
			bY -= c.K.col1.y * aX + c.K.col2.y * aY;
			for (;;) {
				var firstX = (-(c.normalMass.col1.x * bX + c.normalMass.col2.x * bY));
				if (firstX >= 0) {
					var firstY = (-(c.normalMass.col1.y * bX + c.normalMass.col2.y * bY));
					if(firstY >= 0) {
						var dX = firstX - aX;
						var dY = firstY - aY;
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, firstX - aX, firstY - aY);
						cp1.normalImpulse = firstX;
						cp2.normalImpulse = firstY;
						break;
					}
				}
				var secondX = (-cp1.normalMass * bX);
				if (secondX >= 0) {
					if ((c.K.col1.y * secondX + bY) >= 0) {
						var dX = secondX - aX;
						var dY = -aY;
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, secondX - aX, -aY);
						cp1.normalImpulse = secondX;
						cp2.normalImpulse = 0;
						break;
					}
				}
				var secondY = (-cp2.normalMass * bY);
				if (secondY >= 0) {
					if ((c.K.col2.x * secondY + bX) >= 0) {
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, -aX, secondY - aY);
						cp1.normalImpulse = 0;
						cp2.normalImpulse = secondY;
						break;
					}
				}
				if (bX >= 0 && bY >= 0) {
					this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, -aX, -aY);
					cp1.normalImpulse = 0;
					cp2.normalImpulse = 0;
					break;
				}
				break;
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} ccp
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPoint = function(c, ccp) {
		var tangentX = c.normal.y;
		var tangentY = -c.normal.x;
		var dvX = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * ccp.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * ccp.rA.y;
		var dvY = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * ccp.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * ccp.rA.x;
		var vt = dvX * tangentX + dvY * tangentY;
		var maxFriction = c.friction * ccp.normalImpulse;
		var newImpulse = Box2D.Common.Math.b2Math.Clamp(ccp.tangentImpulse - ccp.tangentMass * vt, -maxFriction, maxFriction);
		var impulseLambda = newImpulse - ccp.tangentImpulse;
		var PX = impulseLambda * tangentX;
		var PY = impulseLambda * tangentY;
		c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * PX;
		c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * PY;
		c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (ccp.rA.x * PY - ccp.rA.y * PX);
		c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * PX;
		c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * PY;
		c.bodyB.m_angularVelocity += c.bodyB.m_invI * (ccp.rB.x * PY - ccp.rB.y * PX);
		ccp.tangentImpulse = newImpulse;
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} cp1
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} cp2
	 * @param {number} dX
	 * @param {number} dY
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPointUpdate = function(c, cp1, cp2, dX, dY) {
		var P1X = dX * c.normal.x;
		var P1Y = dX * c.normal.y;
		var P2X = dY * c.normal.x;
		var P2Y = dY * c.normal.y;
		c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * (P1X + P2X);
		c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * (P1Y + P2Y);
		c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
		c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * (P1X + P2X);
		c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * (P1Y + P2Y);
		c.bodyB.m_angularVelocity += c.bodyB.m_invI * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
		cp1.normalImpulse = 0;
		cp2.normalImpulse = 0;
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.FinalizeVelocityConstraints = function() {
		for (var i = 0; i < this.m_constraintCount; ++i) {
			var c = this.m_constraints[i];
			var m = c.manifold;
			for (var j = 0; j < c.pointCount; ++j) {
				var point1 = m.m_points[j];
				var point2 = c.points[j];
				point1.m_normalImpulse = point2.normalImpulse;
				point1.m_tangentImpulse = point2.tangentImpulse;
			}
		}
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var minSeparation = 0.0;
		for (var i = 0; i < this.m_constraintCount; i++) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.Initialize(c);
			var normal = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_normal;
			for (var j = 0; j < c.pointCount; j++) {
				var ccp = c.points[j];
				var point = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_points[j];
				var separation = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				minSeparation = minSeparation < separation ? minSeparation : separation;
				var C = Box2D.Common.Math.b2Math.Clamp(baumgarte * (separation + Box2D.Common.b2Settings.b2_linearSlop), (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				var impulse = (-ccp.equalizedMass * C);
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.SynchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.SynchronizeTransform();
			}
		}
		return minSeparation > (-1.5 * Box2D.Common.b2Settings.b2_linearSlop);
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolvePositionConstraints_NEW = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var minSeparation = 0.0;
		for (var i = 0; i < this.m_constraintCount; i++) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.Initialize(c);
			var normal = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_normal;
			for (var j = 0; j < c.pointCount; j++) {
				var ccp = c.points[j];
				var point = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_points[j];
				var separation = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				if (separation < minSeparation) {
					minSeparation = separation;
				}
				var C = 0;
				if (baumgarte != 0) {
					Box2D.Common.Math.b2Math.Clamp(baumgarte * (separation + Box2D.Common.b2Settings.b2_linearSlop), (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				}
				var impulse = (-ccp.equalizedMass * C);
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.SynchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.SynchronizeTransform();
			}
		}
		return minSeparation > (-1.5 * Box2D.Common.b2Settings.b2_linearSlop);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.Evaluate = function() {
		var bA = this.m_fixtureA.GetBody();
		var bB = this.m_fixtureB.GetBody();
		this.b2CollideEdgeAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function(manifold, edge, xf1, circle, xf2) {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Reset = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.Reset = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.Evaluate = function() {
		this.b2CollidePolyAndEdge(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolygonContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolygonContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolygonContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollidePolygons(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2Controller = function() {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Controller" + Box2D.Dynamics.Controllers.b2Controller.NEXT_ID++;
		/**
		 * @type {Box2D.Dynamics.b2World}
		 */
		this.m_world = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2BodyList}
		 */
		this.bodyList = new Box2D.Dynamics.b2BodyList();
	};
	Box2D.Dynamics.Controllers.b2Controller.prototype.Step = function(step) {};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.AddBody = function(body) {
		this.bodyList.AddBody(body);
		body.AddController(this);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.RemoveBody = function(body) {
		this.bodyList.RemoveBody(body);
		body.RemoveController(this);
	};
	Box2D.Dynamics.Controllers.b2Controller.prototype.Clear = function() {
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); node; node = node.GetNextNode()) {
			this.RemoveBody(node.body);
		}
	};
	/**
	 * @return {!Box2D.Dynamics.b2BodyList}
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.GetBodyList = function() {
		return this.bodyList;
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.Controllers.b2Controller.NEXT_ID = 0;
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2BuoyancyController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, -1);
		this.offset = 0;
		this.density = 0;
		this.velocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.linearDrag = 2;
		this.angularDrag = 1;
		this.useDensity = false;
		this.useWorldGravity = true;
		this.gravity = null;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2BuoyancyController.prototype.Step = function(step) {
		if (this.useWorldGravity) {
			this.gravity = this.m_world.GetGravity().Copy();
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var areac = Box2D.Common.Math.b2Vec2.Get(0, 0);
			var massc = Box2D.Common.Math.b2Vec2.Get(0, 0);
			var area = 0.0;
			var mass = 0.0;
			for (var fixtureNode = body.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
				var sc = Box2D.Common.Math.b2Vec2.Get(0, 0);
				var sarea = fixtureNode.fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
				area += sarea;
				areac.x += sarea * sc.x;
				areac.y += sarea * sc.y;
				var shapeDensity = 0;
				if (this.useDensity) {
					shapeDensity = 1;
				} else {
					shapeDensity = 1;
				}
				mass += sarea * shapeDensity;
				massc.x += sarea * sc.x * shapeDensity;
				massc.y += sarea * sc.y * shapeDensity;
			}
			if (area < Number.MIN_VALUE) {
				continue;
			}
			areac.x /= area;
			areac.y /= area;
			massc.x /= mass;
			massc.y /= mass;
			var buoyancyForce = this.gravity.GetNegative();
			buoyancyForce.Multiply(this.density * area);
			body.ApplyForce(buoyancyForce, massc);
			var dragForce = body.GetLinearVelocityFromWorldPoint(areac);
			dragForce.Subtract(this.velocity);
			dragForce.Multiply((-this.linearDrag * area));
			body.ApplyForce(dragForce, areac);
			body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));
			Box2D.Common.Math.b2Vec2.Free(areac);
			Box2D.Common.Math.b2Vec2.Free(massc);
		}
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2ConstantAccelController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.A = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Dynamics.Controllers.b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2ConstantAccelController.prototype.Step = function(step) {
		var smallA = Box2D.Common.Math.b2Vec2.Get(this.A.x * step.dt, this.A.y * step.dt);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var oldVelocity = body.GetLinearVelocity();
			body.SetLinearVelocity(Box2D.Common.Math.b2Vec2.Get(oldVelocity.x + smallA.x, oldVelocity.y + smallA.y));
		}
		Box2D.Common.Math.b2Vec2.Free(smallA);
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2ConstantForceController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.F = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Dynamics.Controllers.b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2ConstantForceController.prototype.Step = function(step) {
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			body.ApplyForce(this.F, body.GetWorldCenter());
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2ControllerList = function() {
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.controllerFirstNode = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.controllerLastNode = null;
		/**
		 * @private
		 * @type {Object.<Box2D.Dynamics.Controllers.b2ControllerListNode>}
		 */
		this.controllerNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.controllerCount = 0;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.GetFirstNode = function() {
		return this.controllerFirstNode;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.AddController = function(controller) {
		var controllerID = controller.ID;
		if (this.controllerNodeLookup[controllerID] == null) {
			var node = new Box2D.Dynamics.Controllers.b2ControllerListNode(controller);
			var prevNode = this.controllerLastNode;
			if (prevNode != null) {
				prevNode.SetNextNode(node);
			} else {
				this.controllerFirstNode = node;
			}
			node.SetPreviousNode(prevNode);
			this.controllerLastNode = node;
			this.controllerNodeLookup[controllerID] = node;
			this.controllerCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.RemoveController = function(controller) {
		var controllerID = controller.ID;
		var node = this.controllerNodeLookup[controllerID];
		if (node == null) {
			return;
		}
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.controllerFirstNode = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.controllerLastNode = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		delete this.controllerNodeLookup[controllerID];
		this.controllerCount--;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.GetControllerCount = function() {
		return this.controllerCount;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode = function(controller) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.Controllers.b2Controller}
		 */
		this.controller = controller;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.Controllers.b2ControllerListNode} node
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.Controllers.b2ControllerListNode} node
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2GravityController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.G = 1;
		this.invSqr = true;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2GravityController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2GravityController.prototype.Step = function(step) {
		var i = null;
		var body1 = null;
		var p1 = null;
		var mass1 = 0;
		var j = null;
		var body2 = null;
		var p2 = null;
		var dx = 0;
		var dy = 0;
		var r2 = 0;
		var f = null;
		if (this.invSqr) {
			for (var body1Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body1Node; body1Node = body1Node.GetNextNode()) {
				var body1 = body1Node.body;
				var p1 = body1.GetWorldCenter();
				var mass1 = body1.GetMass();
				for (var body2Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body2Node; body2Node = body2Node.GetNextNode()) {
					var body2 = body2Node.body;
					if ( !body1.IsAwake() && !body2.IsAwake() ) {
						continue;
					}
					var p2 = body2.GetWorldCenter();
					var dx = p2.x - p1.x;
					var dy = p2.y - p1.y;
					var r2 = dx * dx + dy * dy;
					if (r2 < Number.MIN_VALUE) {
						continue;
					}
					var f = Box2D.Common.Math.b2Vec2.Get(dx, dy);
					f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());
					if (body1.IsAwake()) {
						body1.ApplyForce(f, p1);
					}
					f.Multiply(-1);
					if (body2.IsAwake()) {
						body2.ApplyForce(f, p2);
					}
					Box2D.Common.Math.b2Vec2.Free(f);
				}
			}
		} else {
			for (var body1Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body1Node; body1Node = body1Node.GetNextNode()) {
				var body1 = bodyNode.body;
				var p1 = body1.GetWorldCenter();
				var mass1 = body1.GetMass();
				for (var body2Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body2Node; body2Node = body2Node.GetNextNode()) {
					var body2 = bodyNode.body;
					if ( !body1.IsAwake() && !body2.IsAwake() ) {
						continue;
					}
					var p2 = body2.GetWorldCenter();
					var dx = p2.x - p1.x;
					var dy = p2.y - p1.y;
					var r2 = dx * dx + dy * dy;
					if (r2 < Number.MIN_VALUE) {
						continue;
					}
					var f = Box2D.Common.Math.b2Vec2.Get(dx, dy);
					f.Multiply(this.G / r2 * mass1 * body2.GetMass());
					if (body1.IsAwake()) {
						body1.ApplyForce(f, p1);
					}
					f.Multiply(-1);
					if (body2.IsAwake()) {
						body2.ApplyForce(f, p2);
					}
					Box2D.Common.Math.b2Vec2.Free(f);
				}
			}
		}
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2TensorDampingController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.T = new Box2D.Common.Math.b2Mat22();
		this.maxTimestep = 0;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);
	/**
	 * @param {number} xDamping
	 * @param {number} yDamping
	 */
	Box2D.Dynamics.Controllers.b2TensorDampingController.prototype.SetAxisAligned = function(xDamping, yDamping) {
		this.T.col1.x = (-xDamping);
		this.T.col1.y = 0;
		this.T.col2.x = 0;
		this.T.col2.y = (-yDamping);
		if (xDamping > 0 || yDamping > 0) {
			this.maxTimestep = 1 / Math.max(xDamping, yDamping);
		} else {
			this.maxTimestep = 0;
		}
	};
	Box2D.Dynamics.Controllers.b2TensorDampingController.prototype.Step = function(step) {
		var timestep = step.dt;
		if (timestep <= Number.MIN_VALUE) return;
		if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var damping = body.GetWorldVector(Box2D.Common.Math.b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));
			body.SetLinearVelocity(Box2D.Common.Math.b2Vec2.Get(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2JointDef} def
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2Joint = function(def) {
		this.m_edgeA = new Box2D.Dynamics.Joints.b2JointEdge();
		this.m_edgeB = new Box2D.Dynamics.Joints.b2JointEdge();
		this.m_localCenterA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localCenterB = Box2D.Common.Math.b2Vec2.Get(0, 0);
;
		this.m_type = def.type;
		this.m_prev = null;
		this.m_next = null;
		this.m_bodyA = def.bodyA;
		this.m_bodyB = def.bodyB;
		this.m_collideConnected = def.collideConnected;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetType = function() {
		return this.m_type;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorA = function() {
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorB = function() {
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyA = function() {
		return this.m_bodyA;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyB = function() {
		return this.m_bodyB;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetNext = function() {
		return this.m_next;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.IsActive = function() {
		return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
	};
	Box2D.Dynamics.Joints.b2Joint.Create = function(def) {
		return def.Create();
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.InitVelocityConstraints = function(step) {};
	Box2D.Dynamics.Joints.b2Joint.prototype.SolveVelocityConstraints = function(step) {};
	Box2D.Dynamics.Joints.b2Joint.prototype.FinalizeVelocityConstraints = function() {};
	Box2D.Dynamics.Joints.b2Joint.prototype.SolvePositionConstraints = function(baumgarte) {
		return false;
	};
	Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
	Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
	Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
	Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
	Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
	Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
	Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
	Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
	Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
	Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
	Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
	Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
	Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
	Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2JointDef = function () {
		this.type = Box2D.Dynamics.Joints.b2Joint.e_unknownJoint;
		this.bodyA = null;
		this.bodyB = null;
		this.collideConnected = false;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2JointEdge = function () {};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2DistanceJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_length = def.length;
		this.m_frequencyHz = def.frequencyHz;
		this.m_dampingRatio = def.dampingRatio;
		this.m_impulse = 0.0;
		this.m_gamma = 0.0;
		this.m_bias = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	/**
	 * @param {number} inv_dt
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetReactionForce = function(inv_dt) {
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);
	};
	/**
	 * @param {number} inv_dt
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetReactionTorque = function(inv_dt) {
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetLength = function() {
		return this.m_length;
	};
	/**
	 * @param {number} length
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetLength = function(length) {
		this.m_length = length;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetFrequency = function() {
		return this.m_frequencyHz;
	};
	/**
	 * @param {number} hz
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetFrequency = function(hz) {
		this.m_frequencyHz = hz;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetDampingRatio = function() {
		return this.m_dampingRatio;
	};
	/**
	 * @param {number} ratio
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetDampingRatio = function(ratio) {
		this.m_dampingRatio = ratio;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
		if (length > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u.Multiply(1.0 / length);
		} else {
			this.m_u.SetZero();
		}
		var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);
		var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);
		var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
		this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
		if (this.m_frequencyHz > 0.0) {
			var C = length - this.m_length;
			var omega = 2.0 * Math.PI * this.m_frequencyHz;
			var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
			var k = this.m_mass * omega * omega;
			this.m_gamma = step.dt * (d + step.dt * k);
			this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
			this.m_bias = C * step.dt * k * this.m_gamma;
			this.m_mass = invMass + this.m_gamma;
			this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			var PX = this.m_impulse * this.m_u.x;
			var PY = this.m_impulse * this.m_u.y;
			bA.m_linearVelocity.x -= bA.m_invMass * PX;
			bA.m_linearVelocity.y -= bA.m_invMass * PY;
			bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
			bB.m_linearVelocity.x += bB.m_invMass * PX;
			bB.m_linearVelocity.y += bB.m_invMass * PY;
			bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
		} else {
			this.m_impulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SolveVelocityConstraints = function(step) {
		var r1X = this.m_localAnchor1.x - this.m_bodyA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - this.m_bodyA.m_sweep.localCenter.y;
		var tX = (this.m_bodyA.m_xf.R.col1.x * r1X + this.m_bodyA.m_xf.R.col2.x * r1Y);
		r1Y = (this.m_bodyA.m_xf.R.col1.y * r1X + this.m_bodyA.m_xf.R.col2.y * r1Y);
		r1X = tX;
		var r2X = this.m_localAnchor2.x - this.m_bodyB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - this.m_bodyB.m_sweep.localCenter.y;
		tX = (this.m_bodyB.m_xf.R.col1.x * r2X + this.m_bodyB.m_xf.R.col2.x * r2Y);
		r2Y = (this.m_bodyB.m_xf.R.col1.y * r2X + this.m_bodyB.m_xf.R.col2.y * r2Y);
		r2X = tX;
		var v1X = this.m_bodyA.m_linearVelocity.x - this.m_bodyA.m_angularVelocity * r1Y;
		var v1Y = this.m_bodyA.m_linearVelocity.y + this.m_bodyA.m_angularVelocity * r1X;
		var v2X = this.m_bodyB.m_linearVelocity.x - this.m_bodyB.m_angularVelocity * r2Y;
		var v2Y = this.m_bodyB.m_linearVelocity.y + this.m_bodyB.m_angularVelocity * r2X;
		var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));
		var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);
		this.m_impulse += impulse;
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		this.m_bodyA.m_linearVelocity.x -= this.m_bodyA.m_invMass * PX;
		this.m_bodyA.m_linearVelocity.y -= this.m_bodyA.m_invMass * PY;
		this.m_bodyA.m_angularVelocity -= this.m_bodyA.m_invI * (r1X * PY - r1Y * PX);
		this.m_bodyB.m_linearVelocity.x += this.m_bodyB.m_invMass * PX;
		this.m_bodyB.m_linearVelocity.y += this.m_bodyB.m_invMass * PY;
		this.m_bodyB.m_angularVelocity += this.m_bodyB.m_invI * (r2X * PY - r2Y * PX);
	};
	/**
	 * @param {number} baumgarte
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (this.m_frequencyHz > 0.0) {
			return true;
		}
		var r1X = this.m_localAnchor1.x - this.m_bodyA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - this.m_bodyA.m_sweep.localCenter.y;
		var tX = (this.m_bodyA.m_xf.R.col1.x * r1X + this.m_bodyA.m_xf.R.col2.x * r1Y);
		r1Y = (this.m_bodyA.m_xf.R.col1.y * r1X + this.m_bodyA.m_xf.R.col2.y * r1Y);
		r1X = tX;
		var r2X = this.m_localAnchor2.x - this.m_bodyB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - this.m_bodyB.m_sweep.localCenter.y;
		tX = (this.m_bodyB.m_xf.R.col1.x * r2X + this.m_bodyB.m_xf.R.col2.x * r2Y);
		r2Y = (this.m_bodyB.m_xf.R.col1.y * r2X + this.m_bodyB.m_xf.R.col2.y * r2Y);
		r2X = tX;
		var dX = this.m_bodyB.m_sweep.c.x + r2X - this.m_bodyA.m_sweep.c.x - r1X;
		var dY = this.m_bodyB.m_sweep.c.y + r2Y - this.m_bodyA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(dX * dX + dY * dY);
		dX /= length;
		dY /= length;
		var C = Box2D.Common.Math.b2Math.Clamp(length - this.m_length, -Box2D.Common.b2Settings.b2_maxLinearCorrection, Box2D.Common.b2Settings.b2_maxLinearCorrection);
		var impulse = -this.m_mass * C;
		this.m_u.Set(dX, dY);
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		this.m_bodyA.m_sweep.c.x -= this.m_bodyA.m_invMass * PX;
		this.m_bodyA.m_sweep.c.y -= this.m_bodyA.m_invMass * PY;
		this.m_bodyA.m_sweep.a -= this.m_bodyA.m_invI * (r1X * PY - r1Y * PX);
		this.m_bodyB.m_sweep.c.x += this.m_bodyB.m_invMass * PX;
		this.m_bodyB.m_sweep.c.y += this.m_bodyB.m_invMass * PY;
		this.m_bodyB.m_sweep.a += this.m_bodyB.m_invI * (r2X * PY - r2Y * PX);
		this.m_bodyA.SynchronizeTransform();
		this.m_bodyB.SynchronizeTransform();
		return Math.abs(C) < Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2DistanceJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_distanceJoint;
		this.length = 1.0;
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2DistanceJointDef.prototype.Initialize = function(bA, bB, anchorA, anchorB) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));
		var dX = anchorB.x - anchorA.x;
		var dY = anchorB.y - anchorA.y;
		this.length = Math.sqrt(dX * dX + dY * dY);
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	};
	Box2D.Dynamics.Joints.b2DistanceJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2DistanceJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2FrictionJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2FrictionJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_linearMass = new Box2D.Common.Math.b2Mat22();
		this.m_linearImpulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorA.SetV(def.localAnchorA);
		this.m_localAnchorB.SetV(def.localAnchorB);
		this.m_linearMass.SetZero();
		this.m_angularMass = 0.0;
		this.m_linearImpulse.SetZero();
		this.m_angularImpulse = 0.0;
		this.m_maxForce = def.maxForce;
		this.m_maxTorque = def.maxTorque;
	};
	c2inherit(Box2D.Dynamics.Joints.b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_angularImpulse;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxForce = function(force) {
		if (force === undefined) force = 0;
		this.m_maxForce = force;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxForce = function() {
		return this.m_maxForce;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxTorque = function(torque) {
		if (torque === undefined) torque = 0;
		this.m_maxTorque = torque;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxTorque = function() {
		return this.m_maxTorque;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var K = new Box2D.Common.Math.b2Mat22();
		K.col1.x = mA + mB;
		K.col2.x = 0.0;
		K.col1.y = 0.0;
		K.col2.y = mA + mB;
		K.col1.x += iA * rAY * rAY;
		K.col2.x += (-iA * rAX * rAY);
		K.col1.y += (-iA * rAX * rAY);
		K.col2.y += iA * rAX * rAX;
		K.col1.x += iB * rBY * rBY;
		K.col2.x += (-iB * rBX * rBY);
		K.col1.y += (-iB * rBX * rBY);
		K.col2.y += iB * rBX * rBX;
		K.GetInverse(this.m_linearMass);
		this.m_angularMass = iA + iB;
		if (this.m_angularMass > 0.0) {
			this.m_angularMass = 1.0 / this.m_angularMass;
		}
		if (step.warmStarting) {
			this.m_linearImpulse.x *= step.dtRatio;
			this.m_linearImpulse.y *= step.dtRatio;
			this.m_angularImpulse *= step.dtRatio;
			var P = this.m_linearImpulse;
			bA.m_linearVelocity.x -= mA * P.x;
			bA.m_linearVelocity.y -= mA * P.y;
			bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
			bB.m_linearVelocity.x += mB * P.x;
			bB.m_linearVelocity.y += mB * P.y;
			bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
		} else {
			this.m_linearImpulse.SetZero();
			this.m_angularImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolveVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var maxImpulse = 0;
		var Cdot = wB - wA;
		var impulse = (-this.m_angularMass * Cdot);
		var oldImpulse = this.m_angularImpulse;
		maxImpulse = step.dt * this.m_maxTorque;
		this.m_angularImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);
		impulse = this.m_angularImpulse - oldImpulse;
		wA -= iA * impulse;
		wB += iB * impulse;
		var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
		var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
		var impulseV = Box2D.Common.Math.b2Math.MulMV(this.m_linearMass, Box2D.Common.Math.b2Vec2.Get((-CdotX), (-CdotY)));
		var oldImpulseV = this.m_linearImpulse.Copy();
		this.m_linearImpulse.Add(impulseV);
		maxImpulse = step.dt * this.m_maxForce;
		if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
			this.m_linearImpulse.Normalize();
			this.m_linearImpulse.Multiply(maxImpulse);
		}
		impulseV = Box2D.Common.Math.b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);
		vA.x -= mA * impulseV.x;
		vA.y -= mA * impulseV.y;
		wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
		vB.x += mB * impulseV.x;
		vB.y += mB * impulseV.y;
		wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		return true;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2FrictionJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_frictionJoint;
		this.maxForce = 0.0;
		this.maxTorque = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
	};
	Box2D.Dynamics.Joints.b2FrictionJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2FrictionJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2GearJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2GearJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_groundAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_groundAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_J = new Box2D.Dynamics.Joints.b2Jacobian();
		var type1 = def.joint1.m_type;
		var type2 = def.joint2.m_type;
		this.m_revolute1 = null;
		this.m_prismatic1 = null;
		this.m_revolute2 = null;
		this.m_prismatic2 = null;
		var coordinate1 = 0;
		var coordinate2 = 0;
		this.m_ground1 = def.joint1.GetBodyA();
		this.m_bodyA = def.joint1.GetBodyB();
		if (type1 == Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint) {
			this.m_revolute1 = def.joint1;
			this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
			this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
			coordinate1 = this.m_revolute1.GetJointAngle();
		} else {
			this.m_prismatic1 = def.joint1;
			this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
			this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
			coordinate1 = this.m_prismatic1.GetJointTranslation();
		}
		this.m_ground2 = def.joint2.GetBodyA();
		this.m_bodyB = def.joint2.GetBodyB();
		if (type2 == Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint) {
			this.m_revolute2 = def.joint2;
			this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
			this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
			coordinate2 = this.m_revolute2.GetJointAngle();
		} else {
			this.m_prismatic2 = def.joint2;
			this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
			this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
			coordinate2 = this.m_prismatic2.GetJointTranslation();
		}
		this.m_ratio = def.ratio;
		this.m_constant = coordinate1 + this.m_ratio * coordinate2;
		this.m_impulse = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2GearJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		var tMat = this.m_bodyB.m_xf.R;
		var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
		var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var PX = this.m_impulse * this.m_J.linearB.x;
		var PY = this.m_impulse * this.m_J.linearB.y;
		return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetRatio = function() {
		return this.m_ratio;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SetRatio = function(ratio) {
		if (ratio === undefined) ratio = 0;
		this.m_ratio = ratio;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.InitVelocityConstraints = function(step) {
		var g1 = this.m_ground1;
		var g2 = this.m_ground2;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var ugX = 0;
		var ugY = 0;
		var rX = 0;
		var rY = 0;
		var tMat;
		var tVec;
		var crug = 0;
		var tX = 0;
		var K = 0.0;
		this.m_J.SetZero();
		if (this.m_revolute1) {
			this.m_J.angularA = (-1.0);
			K += bA.m_invI;
		} else {
			tMat = g1.m_xf.R;
			tVec = this.m_prismatic1.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bA.m_xf.R;
			rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearA.Set((-ugX), (-ugY));
			this.m_J.angularA = (-crug);
			K += bA.m_invMass + bA.m_invI * crug * crug;
		}
		if (this.m_revolute2) {
			this.m_J.angularB = (-this.m_ratio);
			K += this.m_ratio * this.m_ratio * bB.m_invI;
		} else {
			tMat = g2.m_xf.R;
			tVec = this.m_prismatic2.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bB.m_xf.R;
			rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));
			this.m_J.angularB = (-this.m_ratio * crug);
			K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
		}
		this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
		if (step.warmStarting) {
			bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
			bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
			bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
			bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
			bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
			bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
		} else {
			this.m_impulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);
		var impulse = (-this.m_mass * Cdot);
		this.m_impulse += impulse;
		bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var linearError = 0.0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var coordinate1 = 0;
		var coordinate2 = 0;
		if (this.m_revolute1) {
			coordinate1 = this.m_revolute1.GetJointAngle();
		} else {
			coordinate1 = this.m_prismatic1.GetJointTranslation();
		}
		if (this.m_revolute2) {
			coordinate2 = this.m_revolute2.GetJointAngle();
		} else {
			coordinate2 = this.m_prismatic2.GetJointTranslation();
		}
		var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
		var impulse = (-this.m_mass * C);
		bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError < Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	 Box2D.Dynamics.Joints.b2GearJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_gearJoint;
		this.joint1 = null;
		this.joint2 = null;
		this.ratio = 1.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2GearJointDef.prototype.Initialize = function(joint1, joint2, ratio) {
		this.joint1 = joint1;
		this.bodyA = joint1.GetBodyA();
		this.joint2 = joint2;
		this.bodyB = joint2.GetBodyA();
		this.ratio = ratio;
	};
	Box2D.Dynamics.Joints.b2GearJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2GearJoint(this);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2Jacobian = function() {
		this.linearA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.linearB = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.SetZero = function() {
		this.linearA.SetZero();
		this.angularA = 0.0;
		this.linearB.SetZero();
		this.angularB = 0.0;
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.Set = function(x1, a1, x2, a2) {
		if (a1 === undefined) a1 = 0;
		if (a2 === undefined) a2 = 0;
		this.linearA.SetV(x1);
		this.angularA = a1;
		this.linearB.SetV(x2);
		this.angularB = a2;
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.Compute = function(x1, a1, x2, a2) {
		if (a1 === undefined) a1 = 0;
		if (a2 === undefined) a2 = 0;
		return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2LineJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2LineJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localXAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localYAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_perp = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_K = new Box2D.Common.Math.b2Mat22();
		this.m_impulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var tMat;
		var tX = 0;
		var tY = 0;
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_localXAxis1.SetV(def.localAxisA);
		this.m_localYAxis1.x = (-this.m_localXAxis1.y);
		this.m_localYAxis1.y = this.m_localXAxis1.x;
		this.m_impulse.SetZero();
		this.m_motorMass = 0.0;
		this.m_motorImpulse = 0.0;
		this.m_lowerTranslation = def.lowerTranslation;
		this.m_upperTranslation = def.upperTranslation;
		this.m_maxMotorForce = def.maxMotorForce;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		this.m_axis.SetZero();
		this.m_perp.SetZero();
	};
	c2inherit(Box2D.Dynamics.Joints.b2LineJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.y;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetJointTranslation = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.GetWorldPoint(this.m_localAnchor1);
		var p2 = bB.GetWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetJointSpeed = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
		return speed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.EnableLimit = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerTranslation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetUpperLimit = function() {
		return this.m_upperTranslation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.IsMotorEnabled = function() {
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.EnableMotor = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetMaxMotorForce = function(force) {
		if (force === undefined) force = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_maxMotorForce = force;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMaxMotorForce = function() {
		return this.m_maxMotorForce;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMotorForce = function() {
		return this.m_motorImpulse;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		this.m_localCenterA.SetV(bA.GetLocalCenter());
		this.m_localCenterB.SetV(bB.GetLocalCenter());
		var xf1 = bA.GetTransform();
		var xf2 = bB.GetTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
		this.m_perp.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if (this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointTransition <= this.m_lowerTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
					this.m_impulse.y = 0.0;
				}
			} else if (jointTransition >= this.m_upperTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
					this.m_impulse.y = 0.0;
				}
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.y = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX = 0;
		var PY = 0;
		var L1 = 0;
		var L2 = 0;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.Copy();
			var df = this.m_K.Solve(Box2D.Common.Math.b2Vec2.Get(0, 0), (-Cdot1), (-Cdot2));
			this.m_impulse.Add(df);
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				this.m_impulse.y = Math.max(this.m_impulse.y, 0.0);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				this.m_impulse.y = Math.min(this.m_impulse.y, 0.0);
			}
			var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
			var f2r = 0;
			if (this.m_K.col1.x != 0.0) {
				f2r = b / this.m_K.col1.x + f1.x;
			} else {
				f2r = f1.x;
			}
			this.m_impulse.x = f2r;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y * this.m_a1;
			L2 = df.x * this.m_s2 + df.y * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = 0;
			if (this.m_K.col1.x != 0.0) {
				df2 = ((-Cdot1)) / this.m_K.col1.x;
			} else {
				df2 = 0.0;
			}
			this.m_impulse.x += df2;
			PX = df2 * this.m_perp.x;
			PY = df2 * this.m_perp.y;
			L1 = df2 * this.m_s1;
			L2 = df2 * this.m_s2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var limitC = 0;
		var oldLimitImpulse = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX = 0;
		var m1 = 0;
		var m2 = 0;
		var i1 = 0;
		var i2 = 0;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = Box2D.Common.Math.b2Mat22.FromAngle(a1);
		var R2 = Box2D.Common.Math.b2Mat22.FromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if (this.m_enableLimit) {
			this.m_axis = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = Math.abs(translation);
				active = true;
			} else if (translation <= this.m_lowerTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_lowerTranslation + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if (translation >= this.m_upperTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_upperTranslation + Box2D.Common.b2Settings.b2_linearSlop, 0.0, Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
		linearError = Math.max(linearError, Math.abs(C1));
		angularError = 0.0;
		if (active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.Solve(impulse, (-C1), (-C2));
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var impulse1 = 0;
			if (k11 != 0.0) {
				impulse1 = ((-C1)) / k11;
			} else {
				impulse1 = 0.0;
			}
			impulse.x = impulse1;
			impulse.y = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2LineJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAxisA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_lineJoint;
		this.localAxisA.Set(1.0, 0.0);
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2LineJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.localAxisA = this.bodyA.GetLocalVector(axis);
	};
	Box2D.Dynamics.Joints.b2LineJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2LineJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2PrismaticJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2PrismaticJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localXAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localYAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_perp = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_K = new Box2D.Common.Math.b2Mat33();
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_localXAxis1.SetV(def.localAxisA);
		this.m_localYAxis1.x = (-this.m_localXAxis1.y);
		this.m_localYAxis1.y = this.m_localXAxis1.x;
		this.m_refAngle = def.referenceAngle;
		this.m_impulse.SetZero();
		this.m_motorMass = 0.0;
		this.m_motorImpulse = 0.0;
		this.m_lowerTranslation = def.lowerTranslation;
		this.m_upperTranslation = def.upperTranslation;
		this.m_maxMotorForce = def.maxMotorForce;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		this.m_axis.SetZero();
		this.m_perp.SetZero();
	};
	c2inherit(Box2D.Dynamics.Joints.b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.y;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetJointTranslation = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.GetWorldPoint(this.m_localAnchor1);
		var p2 = bB.GetWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetJointSpeed = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
		return speed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.EnableLimit = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerTranslation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetUpperLimit = function() {
		return this.m_upperTranslation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.IsMotorEnabled = function() {
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.EnableMotor = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetMaxMotorForce = function(force) {
		if (force === undefined) force = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_maxMotorForce = force;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetMotorForce = function() {
		return this.m_motorImpulse;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		this.m_localCenterA.SetV(bA.GetLocalCenter());
		this.m_localCenterB.SetV(bB.GetLocalCenter());
		var xf1 = bA.GetTransform();
		var xf2 = bB.GetTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
		this.m_perp.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
		this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = i1 + i2;
		this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
		this.m_K.col3.x = this.m_K.col1.z;
		this.m_K.col3.y = this.m_K.col2.z;
		this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if (this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointTransition <= this.m_lowerTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
					this.m_impulse.z = 0.0;
				}
			} else if (jointTransition >= this.m_upperTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
					this.m_impulse.z = 0.0;
				}
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX = 0;
		var PY = 0;
		var L1 = 0;
		var L2 = 0;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		var Cdot1Y = w2 - w1;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.Copy();
			var df = this.m_K.Solve33(new Box2D.Common.Math.b2Vec3(0, 0, 0), (-Cdot1X), (-Cdot1Y), (-Cdot2));
			this.m_impulse.Add(df);
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);
			}
			var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
			var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
			var f2r = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), bX, bY);
			f2r.x += f1.x;
			f2r.y += f1.y;
			this.m_impulse.x = f2r.x;
			this.m_impulse.y = f2r.y;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			df.z = this.m_impulse.z - f1.z;
			PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
			L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), (-Cdot1X), (-Cdot1Y));
			this.m_impulse.x += df2.x;
			this.m_impulse.y += df2.y;
			PX = df2.x * this.m_perp.x;
			PY = df2.x * this.m_perp.y;
			L1 = df2.x * this.m_s1 + df2.y;
			L2 = df2.x * this.m_s2 + df2.y;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var limitC = 0;
		var oldLimitImpulse = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX = 0;
		var m1 = 0;
		var m2 = 0;
		var i1 = 0;
		var i2 = 0;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = Box2D.Common.Math.b2Mat22.FromAngle(a1);
		var R2 = Box2D.Common.Math.b2Mat22.FromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if (this.m_enableLimit) {
			this.m_axis = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = Math.abs(translation);
				active = true;
			} else if (translation <= this.m_lowerTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_lowerTranslation + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if (translation >= this.m_upperTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_upperTranslation + Box2D.Common.b2Settings.b2_linearSlop, 0.0, Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
		var C1Y = a2 - a1 - this.m_refAngle;
		linearError = Math.max(linearError, Math.abs(C1X));
		angularError = Math.abs(C1Y);
		if (active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
			this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = i1 + i2;
			this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
			this.m_K.col3.x = this.m_K.col1.z;
			this.m_K.col3.y = this.m_K.col2.z;
			this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var k12 = i1 * this.m_s1 + i2 * this.m_s2;
			var k22 = i1 + i2;
			this.m_K.col1.Set(k11, k12, 0.0);
			this.m_K.col2.Set(k12, k22, 0.0);
			var impulse1 = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), (-C1X), (-C1Y));
			impulse.x = impulse1.x;
			impulse.y = impulse1.y;
			impulse.z = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2PrismaticJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAxisA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint;
		this.localAxisA.Set(1.0, 0.0);
		this.referenceAngle = 0.0;
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2PrismaticJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.localAxisA = this.bodyA.GetLocalVector(axis);
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2PrismaticJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2PrismaticJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2PulleyJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2PulleyJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_groundAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_groundAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_ground = this.m_bodyA.m_world.m_groundBody;
		this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
		this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
		this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
		this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_ratio = def.ratio;
		this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
		this.m_maxLength1 = Math.min(def.maxLengthA, this.m_constant - this.m_ratio * Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength);
		this.m_maxLength2 = Math.min(def.maxLengthB, (this.m_constant - Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
		this.m_impulse = 0.0;
		this.m_limitImpulse1 = 0.0;
		this.m_limitImpulse2 = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetGroundAnchorA = function() {
		var a = this.m_ground.m_xf.position.Copy();
		a.Add(this.m_groundAnchor1);
		return a;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetGroundAnchorB = function() {
		var a = this.m_ground.m_xf.position.Copy();
		a.Add(this.m_groundAnchor2);
		return a;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetLength1 = function() {
		var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetLength2 = function() {
		var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetRatio = function() {
		return this.m_ratio;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		this.m_u1.Set(p1X - s1X, p1Y - s1Y);
		this.m_u2.Set(p2X - s2X, p2Y - s2Y);
		var length1 = this.m_u1.Length();
		var length2 = this.m_u2.Length();
		if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u1.Multiply(1.0 / length1);
		} else {
			this.m_u1.SetZero();
		}
		if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u2.Multiply(1.0 / length2);
		} else {
			this.m_u2.SetZero();
		}
		var C = this.m_constant - length1 - this.m_ratio * length2;
		if (C > 0.0) {
			this.m_state = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_impulse = 0.0;
		} else {
			this.m_state = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		if (length1 < this.m_maxLength1) {
			this.m_limitState1 = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_limitImpulse1 = 0.0;
		} else {
			this.m_limitState1 = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		if (length2 < this.m_maxLength2) {
			this.m_limitState2 = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_limitImpulse2 = 0.0;
		} else {
			this.m_limitState2 = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
		var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
		this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
		this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
		this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
		this.m_limitMass1 = 1.0 / this.m_limitMass1;
		this.m_limitMass2 = 1.0 / this.m_limitMass2;
		this.m_pulleyMass = 1.0 / this.m_pulleyMass;
		if (step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			this.m_limitImpulse1 *= step.dtRatio;
			this.m_limitImpulse2 *= step.dtRatio;
			var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;
			var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;
			var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;
			var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		} else {
			this.m_impulse = 0.0;
			this.m_limitImpulse1 = 0.0;
			this.m_limitImpulse2 = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var v1X = 0;
		var v1Y = 0;
		var v2X = 0;
		var v2Y = 0;
		var P1X = 0;
		var P1Y = 0;
		var P2X = 0;
		var P2Y = 0;
		var Cdot = 0;
		var impulse = 0;
		var oldImpulse = 0;
		if (this.m_state == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
			v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
			v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
			v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
			Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = this.m_pulleyMass * ((-Cdot));
			oldImpulse = this.m_impulse;
			this.m_impulse = Math.max(0.0, this.m_impulse + impulse);
			impulse = this.m_impulse - oldImpulse;
			P1X = (-impulse * this.m_u1.x);
			P1Y = (-impulse * this.m_u1.y);
			P2X = (-this.m_ratio * impulse * this.m_u2.x);
			P2Y = (-this.m_ratio * impulse * this.m_u2.y);
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
		if (this.m_limitState1 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
			v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
			Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));
			impulse = (-this.m_limitMass1 * Cdot);
			oldImpulse = this.m_limitImpulse1;
			this.m_limitImpulse1 = Math.max(0.0, this.m_limitImpulse1 + impulse);
			impulse = this.m_limitImpulse1 - oldImpulse;
			P1X = (-impulse * this.m_u1.x);
			P1Y = (-impulse * this.m_u1.y);
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
		}
		if (this.m_limitState2 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
			v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
			Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));
			impulse = (-this.m_limitMass2 * Cdot);
			oldImpulse = this.m_limitImpulse2;
			this.m_limitImpulse2 = Math.max(0.0, this.m_limitImpulse2 + impulse);
			impulse = this.m_limitImpulse2 - oldImpulse;
			P2X = (-impulse * this.m_u2.x);
			P2Y = (-impulse * this.m_u2.y);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var r1X = 0;
		var r1Y = 0;
		var r2X = 0;
		var r2Y = 0;
		var p1X = 0;
		var p1Y = 0;
		var p2X = 0;
		var p2Y = 0;
		var length1 = 0;
		var length2 = 0;
		var C = 0;
		var impulse = 0;
		var oldImpulse = 0;
		var oldLimitPositionImpulse = 0;
		var tX = 0;
		var linearError = 0.0;
		if (this.m_state == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u1.Set(p1X - s1X, p1Y - s1Y);
			this.m_u2.Set(p2X - s2X, p2Y - s2Y);
			length1 = this.m_u1.Length();
			length2 = this.m_u2.Length();
			if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u1.Multiply(1.0 / length1);
			} else {
				this.m_u1.SetZero();
			}
			if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u2.Multiply(1.0 / length2);
			} else {
				this.m_u2.SetZero();
			}
			C = this.m_constant - length1 - this.m_ratio * length2;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_pulleyMass * C);
			p1X = (-impulse * this.m_u1.x);
			p1Y = (-impulse * this.m_u1.y);
			p2X = (-this.m_ratio * impulse * this.m_u2.x);
			p2Y = (-this.m_ratio * impulse * this.m_u2.y);
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bA.SynchronizeTransform();
			bB.SynchronizeTransform();
		}
		if (this.m_limitState1 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			this.m_u1.Set(p1X - s1X, p1Y - s1Y);
			length1 = this.m_u1.Length();
			if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u1.x *= 1.0 / length1;
				this.m_u1.y *= 1.0 / length1;
			} else {
				this.m_u1.SetZero();
			}
			C = this.m_maxLength1 - length1;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_limitMass1 * C);
			p1X = (-impulse * this.m_u1.x);
			p1Y = (-impulse * this.m_u1.y);
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bA.SynchronizeTransform();
		}
		if (this.m_limitState2 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u2.Set(p2X - s2X, p2Y - s2Y);
			length2 = this.m_u2.Length();
			if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u2.x *= 1.0 / length2;
				this.m_u2.y *= 1.0 / length2;
			}
			else {
				this.m_u2.SetZero();
			}
			C = this.m_maxLength2 - length2;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_limitMass2 * C);
			p2X = (-impulse * this.m_u2.x);
			p2Y = (-impulse * this.m_u2.y);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bB.SynchronizeTransform();
		}
		return linearError < Box2D.Common.b2Settings.b2_linearSlop;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 1.0;
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2PulleyJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.groundAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.groundAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint;
		this.groundAnchorA.Set((-1.0), 1.0);
		this.groundAnchorB.Set(1.0, 1.0);
		this.localAnchorA.Set((-1.0), 0.0);
		this.localAnchorB.Set(1.0, 0.0);
		this.lengthA = 0.0;
		this.maxLengthA = 0.0;
		this.lengthB = 0.0;
		this.maxLengthB = 0.0;
		this.ratio = 1.0;
		this.collideConnected = true;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2PulleyJointDef.prototype.Initialize = function(bA, bB, gaA, gaB, anchorA, anchorB, r) {
		if (r === undefined) r = 0;
		this.bodyA = bA;
		this.bodyB = bB;
		this.groundAnchorA.SetV(gaA);
		this.groundAnchorB.SetV(gaB);
		this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);
		var d1X = anchorA.x - gaA.x;
		var d1Y = anchorA.y - gaA.y;
		this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
		var d2X = anchorB.x - gaB.x;
		var d2Y = anchorB.y - gaB.y;
		this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
		this.ratio = r;
		var C = this.lengthA + this.ratio * this.lengthB;
		this.maxLengthA = C - this.ratio * Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength;
		this.maxLengthB = (C - Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength) / this.ratio;
	};
	Box2D.Dynamics.Joints.b2PulleyJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2PulleyJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2RevoluteJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2RevoluteJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.K = new Box2D.Common.Math.b2Mat22();
		this.K1 = new Box2D.Common.Math.b2Mat22();
		this.K2 = new Box2D.Common.Math.b2Mat22();
		this.K3 = new Box2D.Common.Math.b2Mat22();
		this.impulse3 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.impulse2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.reduced = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass = new Box2D.Common.Math.b2Mat33();
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_referenceAngle = def.referenceAngle;
		this.m_impulse.SetZero();
		this.m_motorImpulse = 0.0;
		this.m_lowerAngle = def.lowerAngle;
		this.m_upperAngle = def.upperAngle;
		this.m_maxMotorTorque = def.maxMotorTorque;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
	};
	c2inherit(Box2D.Dynamics.Joints.b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.z;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointAngle = function() {
		return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointSpeed = function() {
		return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableLimit = function(flag) {
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetUpperLimit = function() {
		return this.m_upperAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_lowerAngle = lower;
		this.m_upperAngle = upper;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsMotorEnabled = function() {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableMotor = function(flag) {
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMaxMotorTorque = function(torque) {
		if (torque === undefined) torque = 0;
		this.m_maxMotorTorque = torque;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorTorque = function() {
		return this.m_maxMotorTorque;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
		this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;
		this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
		this.m_mass.col3.y = r1X * i1 + r2X * i2;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = i1 + i2;
		this.m_motorMass = 1.0 / (i1 + i2);
		if (!this.m_enableMotor) {
			this.m_motorImpulse = 0.0;
		}
		if (this.m_enableLimit) {
			var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Box2D.Common.b2Settings.b2_angularSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointAngle <= this.m_lowerAngle) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
			} else if (jointAngle >= this.m_upperAngle) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x;
			var PY = this.m_impulse.y;
			bA.m_linearVelocity.x -= m1 * PX;
			bA.m_linearVelocity.y -= m1 * PY;
			bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);
			bB.m_linearVelocity.x += m2 * PX;
			bB.m_linearVelocity.y += m2 * PY;
			bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		var newImpulse = 0;
		var r1X = 0;
		var r1Y = 0;
		var r2X = 0;
		var r2Y = 0;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = w2 - w1 - this.m_motorSpeed;
			var impulse = this.m_motorMass * ((-Cdot));
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorTorque;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			w1 -= i1 * impulse;
			w2 += i2 * impulse;
		}
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
			var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
			var Cdot2 = w2 - w1;
			this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
				this.m_impulse.Add(this.impulse3);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if (newImpulse < 0.0) {
					this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = (-this.m_impulse.z);
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if (newImpulse > 0.0) {
					this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = (-this.m_impulse.z);
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			}
			v1.x -= m1 * this.impulse3.x;
			v1.y -= m1 * this.impulse3.y;
			w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
			v2.x += m2 * this.impulse3.x;
			v2.y += m2 * this.impulse3.y;
			w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
		} else {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
			var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
			this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));
			this.m_impulse.x += this.impulse2.x;
			this.m_impulse.y += this.impulse2.y;
			v1.x -= m1 * this.impulse2.x;
			v1.y -= m1 * this.impulse2.y;
			w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
			v2.x += m2 * this.impulse2.x;
			v2.y += m2 * this.impulse2.y;
			w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var oldLimitImpulse = 0;
		var C = 0;
		var tMat;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var angularError = 0.0;
		var positionError = 0.0;
		var tX = 0;
		var impulseX = 0;
		var impulseY = 0;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			var limitImpulse = 0.0;
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
				C = Box2D.Common.Math.b2Math.Clamp(angle - this.m_lowerAngle, (-Box2D.Common.b2Settings.b2_maxAngularCorrection), Box2D.Common.b2Settings.b2_maxAngularCorrection);
				limitImpulse = (-this.m_motorMass * C);
				angularError = Math.abs(C);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				C = angle - this.m_lowerAngle;
				angularError = (-C);
				C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_angularSlop, (-Box2D.Common.b2Settings.b2_maxAngularCorrection), 0.0);
				limitImpulse = (-this.m_motorMass * C);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				C = angle - this.m_upperAngle;
				angularError = C;
				C = Box2D.Common.Math.b2Math.Clamp(C - Box2D.Common.b2Settings.b2_angularSlop, 0.0, Box2D.Common.b2Settings.b2_maxAngularCorrection);
				limitImpulse = (-this.m_motorMass * C);
			}
			bA.m_sweep.a -= bA.m_invI * limitImpulse;
			bB.m_sweep.a += bB.m_invI * limitImpulse;
			bA.SynchronizeTransform();
			bB.SynchronizeTransform();
		}
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var CLengthSquared = CX * CX + CY * CY;
		var CLength = Math.sqrt(CLengthSquared);
		positionError = CLength;
		var invMass1 = bA.m_invMass;
		var invMass2 = bB.m_invMass;
		var invI1 = bA.m_invI;
		var invI2 = bB.m_invI;
		var k_allowedStretch = 10.0 * Box2D.Common.b2Settings.b2_linearSlop;
		if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
			var uX = CX / CLength;
			var uY = CY / CLength;
			var k = invMass1 + invMass2;
			var m = 1.0 / k;
			impulseX = m * ((-CX));
			impulseY = m * ((-CY));
			var k_beta = 0.5;
			bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
			bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
			bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
			bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
			CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
			CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		}
		this.K1.col1.x = invMass1 + invMass2;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass1 + invMass2;
		this.K2.col1.x = invI1 * r1Y * r1Y;
		this.K2.col2.x = (-invI1 * r1X * r1Y);
		this.K2.col1.y = (-invI1 * r1X * r1Y);
		this.K2.col2.y = invI1 * r1X * r1X;
		this.K3.col1.x = invI2 * r2Y * r2Y;
		this.K3.col2.x = (-invI2 * r2X * r2Y);
		this.K3.col1.y = (-invI2 * r2X * r2Y);
		this.K3.col2.y = invI2 * r2X * r2X;
		this.K.SetM(this.K1);
		this.K.AddM(this.K2);
		this.K.AddM(this.K3);
		this.K.Solve(Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse, (-CX), (-CY));
		impulseX = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.x;
		impulseY = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.y;
		bA.m_sweep.c.x -= bA.m_invMass * impulseX;
		bA.m_sweep.c.y -= bA.m_invMass * impulseY;
		bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
		bB.m_sweep.c.x += bB.m_invMass * impulseX;
		bB.m_sweep.c.y += bB.m_invMass * impulseY;
		bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return positionError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2RevoluteJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint;
		this.localAnchorA.SetZero();
		this.localAnchorB.SetZero();
		this.referenceAngle = 0.0;
		this.lowerAngle = 0.0;
		this.upperAngle = 0.0;
		this.maxMotorTorque = 0.0;
		this.motorSpeed = 0.0;
		this.enableLimit = false;
		this.enableMotor = false;
	};
	c2inherit(Box2D.Dynamics.Joints.b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2RevoluteJointDef.prototype.Initialize = function(bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2RevoluteJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2RevoluteJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2WeldJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass = new Box2D.Common.Math.b2Mat33();
		this.m_localAnchorA.SetV(def.localAnchorA);
		this.m_localAnchorB.SetV(def.localAnchorB);
		this.m_referenceAngle = def.referenceAngle;
	};
	c2inherit(Box2D.Dynamics.Joints.b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
	};
	/**
	 * @param {number} inv_dt
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetReactionForce = function(inv_dt) {
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
	};
	/**
	 * @param {number} inv_dt
	 * @return {number}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetReactionTorque = function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
		this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_impulse.z *= step.dtRatio;
			bA.m_linearVelocity.x -= mA * this.m_impulse.x;
			bA.m_linearVelocity.y -= mA * this.m_impulse.y;
			bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
			bB.m_linearVelocity.x += mB * this.m_impulse.x;
			bB.m_linearVelocity.y += mB * this.m_impulse.y;
			bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
		} else {
			this.m_impulse.SetZero();
		}
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.SolveVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
		var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
		var Cdot2 = wB - wA;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));
		this.m_impulse.Add(impulse);
		vA.x -= mA * impulse.x;
		vA.y -= mA * impulse.y;
		wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		vB.x += mB * impulse.x;
		vB.y += mB * impulse.y;
		wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
		var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
		var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
		var k_allowedStretch = 10.0 * Box2D.Common.b2Settings.b2_linearSlop;
		var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
		var angularError = Math.abs(C2);
		if (positionError > k_allowedStretch) {
			iA *= 1.0;
			iB *= 1.0;
		}
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
		this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));
		bA.m_sweep.c.x -= mA * impulse.x;
		bA.m_sweep.c.y -= mA * impulse.y;
		bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		bB.m_sweep.c.x += mB * impulse.x;
		bB.m_sweep.c.y += mB * impulse.y;
		bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return positionError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2WeldJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_weldJoint;
		this.referenceAngle = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2WeldJointDef.prototype.Initialize = function(bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2WeldJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2WeldJoint(this);
	};
	Box2D.Collision.b2Collision.s_incidentEdge = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_clipPoints1 = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_clipPoints2 = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_localTangent = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_localNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_planePoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_tangent = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_tangent2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_v11 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_v12 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
	Box2D.Collision.b2TimeOfImpact.s_cache = new Box2D.Collision.b2SimplexCache();
	Box2D.Collision.b2TimeOfImpact.s_distanceInput = new Box2D.Collision.b2DistanceInput();
	Box2D.Collision.b2TimeOfImpact.s_xfA = new Box2D.Common.Math.b2Transform();
	Box2D.Collision.b2TimeOfImpact.s_xfB = new Box2D.Common.Math.b2Transform();
	Box2D.Collision.b2TimeOfImpact.s_fcn = new Box2D.Collision.b2SeparationFunction();
	Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new Box2D.Collision.b2DistanceOutput();
	/** @type {!Box2D.Common.Math.b2Transform} */
	Box2D.Dynamics.b2Body.s_xf1 = new Box2D.Common.Math.b2Transform();
	Box2D.Dynamics.b2ContactListener.b2_defaultListener = new Box2D.Dynamics.b2ContactListener();
	Box2D.Dynamics.b2ContactManager.s_evalCP = new Box2D.Collision.b2ContactPoint();
	/** @type {!Box2D.Common.Math.b2Transform} */
	Box2D.Dynamics.b2World.s_xf = new Box2D.Common.Math.b2Transform();
	/** @type {!Box2D.Common.Math.b2Sweep} */
	Box2D.Dynamics.b2World.s_backupA = new Box2D.Common.Math.b2Sweep();
	/** @type {!Box2D.Common.Math.b2Sweep} */
	Box2D.Dynamics.b2World.s_backupB = new Box2D.Common.Math.b2Sweep();
	Box2D.Dynamics.Contacts.b2Contact.s_input = new Box2D.Collision.b2TOIInput();
	Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new Box2D.Collision.b2WorldManifold();
	Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new Box2D.Dynamics.Contacts.b2PositionSolverManifold();
}
/*
* Convex Separator for Box2D Flash
*
* This class has been written by Antoan Angelov.
* It is designed to work with Erin Catto's Box2D physics library.
*
* Everybody can use this software for any purpose, under two restrictions:
* 1. You cannot claim that you wrote this software.
* 2. You can not remove or alter this notice.
*
*/
cr.b2Separator = function() {};
cr.b2Separator.det = function(x1, y1, x2, y2, x3, y3)
{
	return x1*y2 + x2*y3 + x3*y1 - y1*x2 - y2*x3 - y3*x1;
};
cr.b2Separator.hitRay = function(x1, y1, x2, y2, x3, y3, x4, y4)
{
	var t1 = x3-x1, t2 = y3-y1, t3 = x2-x1, t4 = y2-y1, t5 = x4-x3, t6 = y4-y3, t7 = t4*t5 - t3*t6;
	var a = (t5*t2 - t6*t1) / t7;
	var px = x1 + a*t3, py = y1 + a*t4;
	var b1 = cr.b2Separator.isOnSegment(x2, y2, x1, y1, px, py);
	var b2 = cr.b2Separator.isOnSegment(px, py, x3, y3, x4, y4);
	if (b1 && b2)
		return Box2D.Common.Math.b2Vec2.Get(px, py);
	else
		return null;
};
cr.b2Separator.isOnSegment = function(px, py, x1, y1, x2, y2)
{
	var b1 = (x1+0.1 >= px && px >= x2-0.1) || (x1-0.1 <= px && px <= x2+0.1);
	var b2 = (y1+0.1 >= py && py >= y2-0.1) || (y1-0.1 <= py && py <= y2+0.1);
	return (b1 && b2) && cr.b2Separator.isOnLine(px, py, x1, y1, x2, y2);
};
cr.b2Separator.isOnLine = function(px, py, x1, y1, x2, y2)
{
	if (Math.abs(x2-x1) > 0.1)
	{
		var a = (y2-y1) / (x2-x1);
		var possibleY = a * (px-x1)+y1;
		var diff = Math.abs(possibleY-py);
		return diff < 0.1;
	}
	return Math.abs(px-x1) < 0.1;
};
cr.b2Separator.pointsMatch = function(x1, y1, x2, y2)
{
	return Math.abs(x2-x1) < 0.1 && Math.abs(y2-y1) < 0.1;
};
cr.b2Separator.Separate = function(verticesVec /*array of b2Vec2*/, objarea)
{
	var b2Vec2 = Box2D.Common.Math.b2Vec2;
	var calced = cr.b2Separator.calcShapes(verticesVec);
	var ret = [];
	var poly, a, b, c;
	var i, len, j, lenj;
	var areasum;
	for (i = 0, len = calced.length; i < len; i++)
	{
		a = calced[i];
		poly = [];
		poly.length = a.length;
		areasum = 0;
		for (j = 0, lenj = a.length; j < lenj; j++)
		{
			b = a[j];
			c = a[(j + 1) % lenj];
			areasum += (b.x * c.y - b.y * c.x);
			poly[j] = b2Vec2.Get(b.x, b.y);
		}
		areasum = Math.abs(areasum / 2);
		if (areasum >= objarea * 0.001)
			ret.push(poly);
	}
;
	return ret;
};
cr.b2Separator.calcShapes = function(verticesVec /*array of b2Vec2*/)
{
	var vec = [];										// array of b2Vec2
	var i = 0, n = 0, j = 0;							// ints
	var d = 0, t = 0, dx = 0, dy = 0, minLen = 0;		// numbers
	var i1 = 0, i2 = 0, i3 = 0;							// ints
	var p1, p2, p3, v1, v2, v, hitV;					// b2Vec2s
	var j1 = 0, j2 = 0, k = 0, h = 0;					// ints
	var vec1 = [], vec2 = [];							// array of b2Vec2
	var isConvex = false;								// boolean
	var figsVec = [], queue = [];						// Arrays
	queue.push(verticesVec);
	while (queue.length)
	{
		vec = queue[0];
		n = vec.length;
		isConvex = true;
		for (i = 0; i < n; i++)
		{
			i1 = i;
			i2 = (i < n-1) ? i+1 : i+1-n;
			i3 = (i < n-2) ? i+2 : i+2-n;
			p1 = vec[i1];
			p2 = vec[i2];
			p3 = vec[i3];
			d = cr.b2Separator.det(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
			if (d < 0)
			{
				isConvex = false;
				minLen = 1e9;
				for (j = 0; j < n; j++)
				{
					if ((j !== i1) && (j !== i2))
					{
						j1 = j;
						j2 = (j<n - 1) ? j+1 : 0;
						v1 = vec[j1];
						v2 = vec[j2];
						v = cr.b2Separator.hitRay(p1.x, p1.y, p2.x, p2.y, v1.x, v1.y, v2.x, v2.y);
						if (v)
						{
							dx = p2.x - v.x;
							dy = p2.y - v.y;
							t = dx*dx + dy*dy;
							if (t < minLen)
							{
								h = j1;
								k = j2;
								hitV = v;
								minLen = t;
							}
						}
					}
				}
				if (minLen === 1e9)
					return [];
				vec1 = [];
				vec2 = [];
				j1 = h;
				j2 = k;
				v1 = vec[j1];
				v2 = vec[j2];
				if (!cr.b2Separator.pointsMatch(hitV.x, hitV.y, v2.x, v2.y))
					vec1.push(hitV);
				if (!cr.b2Separator.pointsMatch(hitV.x, hitV.y, v1.x, v1.y))
					vec2.push(hitV);
				h = -1;
				k = i1;
				while (true)
				{
					if (k !== j2)
						vec1.push(vec[k]);
					else
					{
						if (h < 0 || h >= n)
							return [];
						if (!cr.b2Separator.isOnSegment(v2.x, v2.y, vec[h].x, vec[h].y, p1.x, p1.y))
							vec1.push(vec[k]);
						break;
					}
					h = k;
					if (k-1 < 0)
						k = n-1;
					else
						k--;
				}
				vec1.reverse();
				h = -1;
				k = i2;
				while (true)
				{
					if (k !== j1)
						vec2.push(vec[k]);
					else
					{
						if (h < 0 || h >= n)
							return [];
						if (k === j1 && !cr.b2Separator.isOnSegment(v1.x, v1.y, vec[h].x, vec[h].y, p2.x, p2.y))
							vec2.push(vec[k]);
						break;
					}
					h = k;
					if (k+1 > n-1)
						k = 0;
					else
						k++;
				}
				queue.push(vec1, vec2);
				queue.shift();
				break;
			}
		}
		if (isConvex)
			figsVec.push(queue.shift());
	}
	return figsVec;
};
;
;
cr.behaviors.Physics = function(runtime)
{
	for (var i = 0; i < 4000; i++)
		Box2D.Common.Math.b2Vec2._freeCache.push(new Box2D.Common.Math.b2Vec2(0, 0));
	this.runtime = runtime;
	this.world = new Box2D.Dynamics.b2World(
								Box2D.Common.Math.b2Vec2.Get(0, 10),	// gravity
								true);									// allow sleep
	this.worldG = 10;
	this.lastUpdateTick = -1;
	var listener = new Box2D.Dynamics.b2ContactListener;
	listener.behavior = this;
	listener.BeginContact = function(contact)
	{
		var behA = contact.m_fixtureA.GetBody().c2userdata;
		var behB = contact.m_fixtureB.GetBody().c2userdata;
		this.behavior.runtime.registerCollision(behA.inst, behB.inst);
	};
	this.world.SetContactListener(listener);
	var filter = new Box2D.Dynamics.b2ContactFilter;
	filter.behavior = this;
	filter.ShouldCollide = function (fixtureA, fixtureB)
	{
		if (this.behavior.allCollisionsEnabled)
			return true;
		var typeA = fixtureA.GetBody().c2userdata.inst.type;
		var typeB = fixtureB.GetBody().c2userdata.inst.type;
		var s = typeA.extra.Physics_DisabledCollisions;
		if (s && s.contains(typeB))
			return false;
		s = typeB.extra.Physics_DisabledCollisions;
		if (s && s.contains(typeA))
			return false;
		return true;
	};
	this.world.SetContactFilter(filter);
	this.steppingMode = 0;		// fixed
	this.velocityIterations = 8;
	this.positionIterations = 3;
	this.allCollisionsEnabled = true;
};
(function ()
{
	var b2Vec2 = Box2D.Common.Math.b2Vec2,
		b2BodyDef = Box2D.Dynamics.b2BodyDef,
		b2Body = Box2D.Dynamics.b2Body,
		b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
		b2Fixture = Box2D.Dynamics.b2Fixture,
		b2World = Box2D.Dynamics.b2World,
		b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
		b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
		b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
		b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
		b2Transform = Box2D.Common.Math.b2Transform,
		b2Mat22 = Box2D.Common.Math.b2Mat22;
	var TILE_FLIPPED_HORIZONTAL = -0x80000000		// note: pretend is a signed int, so negate
	var TILE_FLIPPED_VERTICAL = 0x40000000
	var TILE_FLIPPED_DIAGONAL = 0x20000000
	var TILE_FLAGS_MASK = 0xE0000000
	var worldScale = 0.02;
	var behaviorProto = cr.behaviors.Physics.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.world = this.behavior.world;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.immovable = (this.properties[0] !== 0);
		this.collisionmask = this.properties[1];
		this.preventRotation = (this.properties[2] !== 0);
		this.density = this.properties[3];
		this.friction = this.properties[4];
		this.restitution = this.properties[5];
		this.linearDamping = this.properties[6];
		this.angularDamping = this.properties[7];
		this.bullet = (this.properties[8] !== 0);
		this.enabled = (this.properties[9] !== 0);
		this.body = null;
		this.inst.update_bbox();
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.lastWidth = 0;
		this.lastHeight = 0;
		this.lastTickOverride = false;
		this.recreateBody = false;
		this.lastAnimation = null;			// for sprites only - will be undefined for other objects
		this.lastAnimationFrame = -1;		// for sprites only - will be undefined for other objects
		if (this.myJoints)
		{
			this.myJoints.length = 0;
			this.myCreatedJoints.length = 0;
			this.joiningMe.clear();
		}
		else
		{
			this.myJoints = [];						// Created Box2D joints
			this.myCreatedJoints = [];				// List of actions called to create joints
			this.joiningMe = new cr.ObjectSet();	// Instances with joints to me
		}
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.postCreate = function ()
	{
		this.inst.update_bbox();
		this.createBody();
		this.lastAnimation = this.inst.cur_animation;
		this.lastAnimationFrame = this.inst.cur_frame;
	};
	behinstProto.onDestroy = function()
	{
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
		if (this.body)
		{
			this.world.DestroyBody(this.body);
			this.body = null;
		}
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		var o = {
			"e": this.enabled,
			"im": this.immovable,
			"pr": this.preventRotation,
			"d": this.density,
			"fr": this.friction,
			"re": this.restitution,
			"ld": this.linearDamping,
			"ad": this.angularDamping,
			"b": this.bullet,
			"mcj": this.myCreatedJoints
		};
		if (this.enabled)
		{
			var temp = b2Vec2.Get(0, 0);
			temp.SetV(this.body.GetLinearVelocity());
			o["vx"] = temp.x;
			o["vy"] = temp.y;
			o["om"] = this.body.GetAngularVelocity();
		}
		return o;
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
		if (this.body)
		{
			this.world.DestroyBody(this.body);
			this.body = null;
		}
		this.enabled = o["e"];
		this.immovable = o["im"];
		this.preventRotation = o["pr"];
		this.density = o["d"];
		this.friction = o["fr"];
		this.restitution = o["re"];
		this.linearDamping = o["ld"];
		this.angularDamping = o["ad"];
		this.bullet = o["b"];
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.lastWidth = this.inst.width;
		this.lastHeight = this.inst.height;
		if (this.enabled)
		{
			this.createBody();
			this.body.SetLinearVelocity(b2Vec2.Get(o["vx"], o["vy"]));
			this.body.SetAngularVelocity(o["om"]);
			if (o["vx"] !== 0 || o["vy"] !== 0 || o["om"] !== 0)
				this.body.SetAwake(true);
			this.myCreatedJoints = o["mcj"];
		}
	};
	behinstProto.afterLoad = function ()
	{
		if (this.enabled)
			this.recreateMyJoints();
		this.behavior.lastUpdateTick = this.runtime.tickcount - 1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		var i, len, j, instuid = inst.uid;
		for (i = 0, j = 0, len = this.myCreatedJoints.length; i < len; i++)
		{
			this.myCreatedJoints[j] = this.myCreatedJoints[i];
			if (j < this.myJoints.length)
				this.myJoints[j] = this.myJoints[i];
			if (this.myCreatedJoints[i].params[1] == instuid)		// attached instance is always 2nd param
				this.world.DestroyJoint(this.myJoints[i]);
			else
				j++;
		}
		this.myCreatedJoints.length = j;
		if (j < this.myJoints.length)
			this.myJoints.length = j;
		this.joiningMe.remove(inst);
	};
	behinstProto.destroyMyJoints = function()
	{
		var i, len;
		for (i = 0, len = this.myJoints.length; i < len; i++)
			this.world.DestroyJoint(this.myJoints[i]);
		this.myJoints.length = 0;
	};
	behinstProto.recreateMyJoints = function()
	{
		var i, len, j;
		for (i = 0, len = this.myCreatedJoints.length; i < len; i++)
		{
			j = this.myCreatedJoints[i];
			switch (j.type) {
			case 0:			// distance joint
				this.doCreateDistanceJoint(j.params[0], j.params[1], j.params[2], j.params[3], j.params[4]);
				break;
			case 1:			// revolute joint
				this.doCreateRevoluteJoint(j.params[0], j.params[1]);
				break;
			case 2:			// limited revolute joint
				this.doCreateLimitedRevoluteJoint(j.params[0], j.params[1], j.params[2], j.params[3]);
				break;
			default:
;
			}
		}
	};
	behinstProto.destroyBody = function()
	{
		if (!this.body)
			return;
		this.destroyMyJoints();
		this.world.DestroyBody(this.body);
		this.body = null;
		this.inst.extra.box2dbody = null;
	};
	var collrects = [];
	behinstProto.createBody = function()
	{
		if (!this.enabled)
			return;
		var inst = this.inst;
		var hadOldBody = false;
		var oldVelocity = null;
		var oldOmega = null;
		var i, len, j, lenj, k, lenk, vec, arr, b, c, rc, pts_cache, pts_count, convexpolys, cp, offx, offy, oldAngle;
		if (this.body)
		{
			hadOldBody = true;
			oldVelocity = b2Vec2.Get(0, 0);
			oldVelocity.SetV(this.body.GetLinearVelocity());
			oldOmega = this.body.GetAngularVelocity();
			arr = this.joiningMe.valuesRef();
			for (i = 0, len = arr.length; i < len; i++)
			{
				b = arr[i].extra.box2dbody.c2userdata;
				b.destroyMyJoints();
			}
			this.destroyBody();
		}
		var fixDef = new b2FixtureDef;
		fixDef.density = this.density;
		fixDef.friction = this.friction;
		fixDef.restitution = this.restitution;
		var bodyDef = new b2BodyDef;
		if (this.immovable)
			bodyDef.type = 0; //b2BodyDef.b2_staticBody
		else
			bodyDef.type = 2; //b2BodyDef.b2_dynamicBody
		inst.update_bbox();
		bodyDef.position.x = inst.bquad.midX() * worldScale;
		bodyDef.position.y = inst.bquad.midY() * worldScale;
		bodyDef.angle = inst.angle;
		bodyDef.fixedRotation = this.preventRotation;
		bodyDef.linearDamping = this.linearDamping;
		bodyDef.angularDamping = this.angularDamping;
		bodyDef.bullet = this.bullet;
		var hasPoly = this.inst.collision_poly && !this.inst.collision_poly.is_empty();
		this.body = this.world.CreateBody(bodyDef);
		this.body.c2userdata = this;
		var usecollisionmask = this.collisionmask;
		if (!hasPoly && !this.inst.tilemap_exists && this.collisionmask === 0)
			usecollisionmask = 1;
		var instw = Math.max(Math.abs(inst.width), 1);
		var insth = Math.max(Math.abs(inst.height), 1);
		var ismirrored = inst.width < 0;
		var isflipped = inst.height < 0;
		if (usecollisionmask === 0)
		{
			if (inst.tilemap_exists)
			{
				offx = inst.bquad.midX() - inst.x;
				offy = inst.bquad.midY() - inst.y;
				inst.getAllCollisionRects(collrects);
				arr = [];
				for (i = 0, len = collrects.length; i < len; ++i)
				{
					c = collrects[i];
					rc = c.rc;
					if (c.poly)
					{
						if (!c.poly.convexpolys)
						{
							pts_cache = c.poly.pts_cache;
							pts_count = c.poly.pts_count;
							for (j = 0; j < pts_count; ++j)
							{
								arr.push(b2Vec2.Get(pts_cache[j*2], pts_cache[j*2+1]));
							}
							var flags = (c.id & TILE_FLAGS_MASK);
							if (flags === TILE_FLIPPED_HORIZONTAL || flags === TILE_FLIPPED_VERTICAL || flags === TILE_FLIPPED_DIAGONAL ||
								((flags & TILE_FLIPPED_HORIZONTAL) && (flags & TILE_FLIPPED_VERTICAL) && (flags & TILE_FLIPPED_DIAGONAL)))
							{
								arr.reverse();
							}
							c.poly.convexpolys = cr.b2Separator.Separate(arr, (rc.right - rc.left) * (rc.bottom - rc.top));
							for (j = 0, lenj = arr.length; j < lenj; ++j)
								b2Vec2.Free(arr[j]);
							arr.length = 0;
						}
						for (j = 0, lenj = c.poly.convexpolys.length; j < lenj; ++j)
						{
							cp = c.poly.convexpolys[j];
;
							for (k = 0, lenk = cp.length; k < lenk; ++k)
							{
								arr.push(b2Vec2.Get((rc.left + cp[k].x - offx) * worldScale, (rc.top + cp[k].y - offy) * worldScale));
							}
							fixDef.shape = new b2PolygonShape;
							fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
							this.body.CreateFixture(fixDef);
							for (k = 0, lenk = arr.length; k < lenk; ++k)
								b2Vec2.Free(arr[k]);
							arr.length = 0;
						}
					}
					else
					{
						arr.push(b2Vec2.Get((rc.left - offx) * worldScale, (rc.top - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.right - offx) * worldScale, (rc.top - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.right - offx) * worldScale, (rc.bottom - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.left - offx) * worldScale, (rc.bottom - offy) * worldScale));
						fixDef.shape = new b2PolygonShape;
						fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
						this.body.CreateFixture(fixDef);
					}
					for (j = 0, lenj = arr.length; j < lenj; ++j)
						b2Vec2.Free(arr[j]);
					arr.length = 0;
				}
			}
			else
			{
				oldAngle = inst.angle;
				inst.angle = 0;
				inst.set_bbox_changed();
				inst.update_bbox();
				offx = inst.bquad.midX() - inst.x;
				offy = inst.bquad.midY() - inst.y;
				inst.angle = oldAngle;
				inst.set_bbox_changed();
				inst.collision_poly.cache_poly(ismirrored ? -instw : instw, isflipped ? -insth : insth, 0);
				pts_cache = inst.collision_poly.pts_cache;
				pts_count = inst.collision_poly.pts_count;
				arr = [];
				arr.length = pts_count;
				for (i = 0; i < pts_count; i++)
				{
					arr[i] = b2Vec2.Get(pts_cache[i*2] - offx, pts_cache[i*2+1] - offy);
				}
				if (ismirrored !== isflipped)
					arr.reverse();		// wrong clockwise order when flipped
				convexpolys = cr.b2Separator.Separate(arr, instw * insth);
				for (i = 0; i < pts_count; i++)
					b2Vec2.Free(arr[i]);
				if (convexpolys.length)
				{
					for (i = 0, len = convexpolys.length; i < len; i++)
					{
						arr = convexpolys[i];
;
						for (j = 0, lenj = arr.length; j < lenj; j++)
						{
							vec = arr[j];
							vec.x *= worldScale;
							vec.y *= worldScale;
						}
						fixDef.shape = new b2PolygonShape;
						fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
						this.body.CreateFixture(fixDef);
						for (j = 0, lenj = arr.length; j < lenj; j++)
							b2Vec2.Free(arr[j]);
					}
				}
				else
				{
					fixDef.shape = new b2PolygonShape;
					fixDef.shape.SetAsBox(instw * worldScale * 0.5, insth * worldScale * 0.5);
					this.body.CreateFixture(fixDef);
				}
			}
		}
		else if (usecollisionmask === 1)
		{
			fixDef.shape = new b2PolygonShape;
			fixDef.shape.SetAsBox(instw * worldScale * 0.5, insth * worldScale * 0.5);
			this.body.CreateFixture(fixDef);
		}
		else
		{
			fixDef.shape = new b2CircleShape(Math.min(instw, insth) * worldScale * 0.5);
			this.body.CreateFixture(fixDef);
		}
		inst.extra.box2dbody = this.body;
		this.lastWidth = inst.width;
		this.lastHeight = inst.height;
		if (hadOldBody)
		{
			this.body.SetLinearVelocity(oldVelocity);
			this.body.SetAngularVelocity(oldOmega);
			b2Vec2.Free(oldVelocity);
			this.recreateMyJoints();
			arr = this.joiningMe.valuesRef();
			for (i = 0, len = arr.length; i < len; i++)
			{
				b = arr[i].extra.box2dbody.c2userdata;
				b.recreateMyJoints();
			}
		}
		collrects.length = 0;
	};
	/*
	behinstProto.draw = function (ctx)
	{
		if (!this.myconvexpolys)
			return;
		this.inst.update_bbox();
		var midx = this.inst.bquad.midX();
		var midy = this.inst.bquad.midY();
		var i, len, j, lenj;
		var sina = 0;
		var cosa = 1;
		if (this.inst.angle !== 0)
		{
			sina = Math.sin(this.inst.angle);
			cosa = Math.cos(this.inst.angle);
		}
		var strokeStyles = ["#f00", "#0f0", "#00f", "#ff0", "#0ff", "#f0f"];
		ctx.lineWidth = 2;
		var i, len, j, lenj, ax, ay, bx, by, poly, va, vb;
		for (i = 0, len = this.myconvexpolys.length; i < len; i++)
		{
			poly = this.myconvexpolys[i];
			ctx.strokeStyle = strokeStyles[i];
			for (j = 0, lenj = poly.length; j < lenj; j++)
			{
				va = poly[j];
				vb = poly[(j + 1) % lenj];
				ax = va.x / worldScale;
				ay = va.y / worldScale;
				bx = vb.x / worldScale;
				by = vb.y / worldScale;
				ctx.beginPath();
				ctx.moveTo(((ax * cosa) - (ay * sina)) + midx, ((ay * cosa) + (ax * sina)) + midy);
				ctx.lineTo(((bx * cosa) - (by * sina)) + midx, ((by * cosa) + (bx * sina)) + midy);
				ctx.stroke();
				ctx.closePath();
			}
		}
	};
	*/
	behinstProto.tick = function ()
	{
		if (!this.enabled)
			return;
		var inst = this.inst;
		var dt;
		if (this.behavior.steppingMode === 0)		// fixed
			dt = this.runtime.timescale / 60;
		else
		{
			dt = this.runtime.getDt(this.inst);
			if (dt > 1 / 30)
				dt = 1 / 30;
		}
		if (this.runtime.tickcount > this.behavior.lastUpdateTick && this.runtime.timescale > 0)
		{
			this.world.Step(dt, this.behavior.velocityIterations, this.behavior.positionIterations);		// still apply timescale
			this.world.ClearForces();
			this.behavior.lastUpdateTick = this.runtime.tickcount;
		}
		if (this.recreateBody || inst.width !== this.lastWidth || inst.height !== this.lastHeight
			|| inst.cur_animation !== this.lastAnimation || inst.cur_frame !== this.lastAnimationFrame
			|| (inst.tilemap_exists && inst.physics_changed))
		{
			this.createBody();
			this.recreateBody = false;
			this.lastAnimation = inst.cur_animation;
			this.lastAnimationFrame = inst.cur_frame;
			if (inst.tilemap_exists && inst.physics_changed)
				inst.physics_changed = false;
		}
		var pos_changed = (inst.x !== this.lastKnownX || inst.y !== this.lastKnownY);
		var angle_changed = (inst.angle !== this.lastKnownAngle);
		if (pos_changed)
		{
			inst.update_bbox();
			var newmidx = inst.bquad.midX();
			var newmidy = inst.bquad.midY();
			var diffx = newmidx - this.lastKnownX;
			var diffy = newmidy - this.lastKnownY;
			this.body.SetPosition(b2Vec2.Get(newmidx * worldScale, newmidy * worldScale));
			this.body.SetLinearVelocity(b2Vec2.Get(diffx, diffy));
			this.lastTickOverride = true;
			this.body.SetAwake(true);
		}
		else if (this.lastTickOverride)
		{
			this.lastTickOverride = false;
			this.body.SetLinearVelocity(b2Vec2.Get(0, 0));
			this.body.SetPosition(b2Vec2.Get(inst.bquad.midX() * worldScale, inst.bquad.midY() * worldScale));
		}
		if (angle_changed)
		{
			this.body.SetAngle(inst.angle);
			this.body.SetAwake(true);
		}
		var pos = this.body.GetPosition();
		var newx = pos.x / worldScale;
		var newy = pos.y / worldScale;
		var newangle = this.body.GetAngle();
		if (newx !== inst.x || newy !== inst.y || newangle !== inst.angle)
		{
			inst.x = newx;
			inst.y = newy;
			inst.angle = newangle;
			inst.set_bbox_changed();
			inst.update_bbox();
			var dx = inst.bquad.midX() - inst.x;
			var dy = inst.bquad.midY() - inst.y;
			if (dx !== 0 || dy !== 0)
			{
				inst.x -= dx;
				inst.y -= dy;
				inst.set_bbox_changed();
			}
		}
		this.lastKnownX = inst.x;
		this.lastKnownY = inst.y;
		this.lastKnownAngle = inst.angle;
	};
	behinstProto.getInstImgPointX = function(imgpt)
	{
		if (imgpt === -1 || !this.inst.getImagePoint)
			return this.inst.x;
		if (imgpt === 0 && this.body)
			return (this.body.GetPosition().x + this.body.GetLocalCenter().x) / worldScale;
		return this.inst.getImagePoint(imgpt, true);
	};
	behinstProto.getInstImgPointY = function(imgpt)
	{
		if (imgpt === -1 || !this.inst.getImagePoint)
			return this.inst.y;
		if (imgpt === 0 && this.body)
			return (this.body.GetPosition().y + this.body.GetLocalCenter().y) / worldScale;
		return this.inst.getImagePoint(imgpt, false);
	};
	function Cnds() {};
	Cnds.prototype.IsSleeping = function ()
	{
		if (!this.enabled)
			return false;
		return !this.body.IsAwake();
	};
	Cnds.prototype.CompareVelocity = function (which_, cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var velocity_vec = this.body.GetLinearVelocity();
		var v, vx, vy;
		if (which_ === 0)		// X velocity
			v = velocity_vec.x / worldScale;
		else if (which_ === 1)	// Y velocity
			v = velocity_vec.y / worldScale;
		else					// Overall velocity
		{
			vx = velocity_vec.x / worldScale;
			vy = velocity_vec.y / worldScale;
			v = cr.distanceTo(0, 0, vx, vy);
		}
		return cr.do_cmp(v, cmp_, x_);
	};
	Cnds.prototype.CompareAngularVelocity = function (cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var av = cr.to_degrees(this.body.GetAngularVelocity());
		return cr.do_cmp(av, cmp_, x_);
	};
	Cnds.prototype.CompareMass = function (cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var mass = this.body.GetMass() / worldScale;
		return cr.do_cmp(mass, cmp_, x_);
	};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.enabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.ApplyForce = function (fx, fy, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyForce(b2Vec2.Get(fx, fy), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyForceToward = function (f, px, py, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		var a = cr.angleTo(x, y, px, py);
		this.body.ApplyForce(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyForceAtAngle = function (f, a, imgpt)
	{
		if (!this.enabled)
			return;
		a = cr.to_radians(a);
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyForce(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyImpulse = function (fx, fy, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyImpulse(b2Vec2.Get(fx, fy), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyImpulseToward = function (f, px, py, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		var a = cr.angleTo(x, y, px, py);
		this.body.ApplyImpulse(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyImpulseAtAngle = function (f, a, imgpt)
	{
		if (!this.enabled)
			return;
		a = cr.to_radians(a);
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyImpulse(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyTorque = function (m)
	{
		if (!this.enabled)
			return;
		this.body.ApplyTorque(cr.to_radians(m));
	};
	Acts.prototype.ApplyTorqueToAngle = function (m, a)
	{
		if (!this.enabled)
			return;
		m = cr.to_radians(m);
		a = cr.to_radians(a);
		if (cr.angleClockwise(this.inst.angle, a))
			this.body.ApplyTorque(-m);
		else
			this.body.ApplyTorque(m);
	};
	Acts.prototype.ApplyTorqueToPosition = function (m, x, y)
	{
		if (!this.enabled)
			return;
		m = cr.to_radians(m);
		var a = cr.angleTo(this.inst.x, this.inst.y, x, y);
		if (cr.angleClockwise(this.inst.angle, a))
			this.body.ApplyTorque(-m);
		else
			this.body.ApplyTorque(m);
	};
	Acts.prototype.SetAngularVelocity = function (v)
	{
		if (!this.enabled)
			return;
		this.body.SetAngularVelocity(cr.to_radians(v));
		this.body.SetAwake(true);
	};
	Acts.prototype.CreateDistanceJoint = function (imgpt, obj, objimgpt, damping, freq)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 0, params: [imgpt, otherinst.uid, objimgpt, damping, freq]});
		this.doCreateDistanceJoint(imgpt, otherinst.uid, objimgpt, damping, freq);
	};
	behinstProto.doCreateDistanceJoint = function (imgpt, otherinstuid, objimgpt, damping, freq)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var theirx, theiry;
		if (otherinst.getImagePoint)
		{
			theirx = otherinst.getImagePoint(objimgpt, true);
			theiry = otherinst.getImagePoint(objimgpt, false);
		}
		else
		{
			theirx = otherinst.x;
			theiry = otherinst.y;
		}
		var dx = myx - theirx;
		var dy = myy - theiry;
		var jointDef = new b2DistanceJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale), b2Vec2.Get(theirx * worldScale, theiry * worldScale));
		jointDef.length = Math.sqrt(dx*dx + dy*dy) * worldScale;
		jointDef.dampingRatio = damping;
		jointDef.frequencyHz = freq;
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.CreateRevoluteJoint = function (imgpt, obj)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 1, params: [imgpt, otherinst.uid]});
		this.doCreateRevoluteJoint(imgpt, otherinst.uid);
	};
	behinstProto.doCreateRevoluteJoint = function (imgpt, otherinstuid)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var jointDef = new b2RevoluteJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale));
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.CreateLimitedRevoluteJoint = function (imgpt, obj, lower, upper)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 2, params: [imgpt, otherinst.uid, lower, upper]});
		this.doCreateLimitedRevoluteJoint(imgpt, otherinst.uid, lower, upper);
	};
	behinstProto.doCreateLimitedRevoluteJoint = function (imgpt, otherinstuid, lower, upper)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var jointDef = new b2RevoluteJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale));
		jointDef.enableLimit = true;
		jointDef.lowerAngle = cr.to_radians(lower);
		jointDef.upperAngle = cr.to_radians(upper);
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.SetWorldGravity = function (g)
	{
		if (g === this.behavior.worldG)
			return;
		this.world.SetGravity(b2Vec2.Get(0, g));
		this.behavior.worldG = g;
		var i, len, arr = this.behavior.my_instances.valuesRef();
		for (i = 0, len = arr.length; i < len; i++)
		{
			if (arr[i].extra.box2dbody)
				arr[i].extra.box2dbody.SetAwake(true);
		}
	};
	Acts.prototype.SetSteppingMode = function (mode)
	{
		this.behavior.steppingMode = mode;
	};
	Acts.prototype.SetIterations = function (vel, pos)
	{
		if (vel < 1) vel = 1;
		if (pos < 1) pos = 1;
		this.behavior.velocityIterations = vel;
		this.behavior.positionIterations = pos;
	};
	Acts.prototype.SetVelocity = function (vx, vy)
	{
		if (!this.enabled)
			return;
		this.body.SetLinearVelocity(b2Vec2.Get(vx * worldScale, vy * worldScale));
		this.body.SetAwake(true);
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.SetDensity = function (d)
	{
		if (!this.enabled)
			return;
		if (this.density === d)
			return;
		this.density = d;
		this.recreateBody = true;
	};
	Acts.prototype.SetFriction = function (f)
	{
		if (!this.enabled)
			return;
		if (this.friction === f)
			return;
		this.friction = f;
		this.recreateBody = true;
	};
	Acts.prototype.SetElasticity = function (e)
	{
		if (!this.enabled)
			return;
		if (this.restitution === e)
			return;
		this.restitution = e;
		this.recreateBody = true;
	};
	Acts.prototype.SetLinearDamping = function (ld)
	{
		if (!this.enabled)
			return;
		if (this.linearDamping === ld)
			return;
		this.linearDamping = ld;
		this.body.SetLinearDamping(ld);
	};
	Acts.prototype.SetAngularDamping = function (ad)
	{
		if (!this.enabled)
			return;
		if (this.angularDamping === ad)
			return;
		this.angularDamping = ad;
		this.body.SetAngularDamping(ad);
	};
	Acts.prototype.SetImmovable = function (i)
	{
		if (!this.enabled)
			return;
		if (this.immovable === (i !== 0))
			return;
		this.immovable = (i !== 0);
		this.body.SetType(this.immovable ? 0 /*b2BodyDef.b2_staticBody*/ : 2 /*b2BodyDef.b2_dynamicBody*/);
		this.body.SetAwake(true);
	};
	function SetCollisionsEnabled(typeA, typeB, state)
	{
		var s;
		if (state)
		{
			s = typeA.extra.Physics_DisabledCollisions;
			if (s)
				s.remove(typeB);
			s = typeB.extra.Physics_DisabledCollisions;
			if (s)
				s.remove(typeA);
		}
		else
		{
			if (!typeA.extra.Physics_DisabledCollisions)
				typeA.extra.Physics_DisabledCollisions = new cr.ObjectSet();
			typeA.extra.Physics_DisabledCollisions.add(typeB);
			if (!typeB.extra.Physics_DisabledCollisions)
				typeB.extra.Physics_DisabledCollisions = new cr.ObjectSet();
			typeB.extra.Physics_DisabledCollisions.add(typeA);
		}
	};
	Acts.prototype.EnableCollisions = function (obj, state)
	{
		if (!obj || !this.enabled)
			return;
		var i, len;
		if (obj.is_family)
		{
			for (i = 0, len = obj.members.length; i < len; i++)
			{
				SetCollisionsEnabled(this.inst.type, obj.members[i], state !== 0);
			}
		}
		else
		{
			SetCollisionsEnabled(this.inst.type, obj, state !== 0);
		}
		this.behavior.allCollisionsEnabled = false;
	};
	Acts.prototype.SetPreventRotate = function (i)
	{
		if (!this.enabled)
			return;
		if (this.preventRotation === (i !== 0))
			return;
		this.preventRotation = (i !== 0);
		this.body.SetFixedRotation(this.preventRotation);
		this.body.m_torque = 0;
		this.body.SetAngularVelocity(0);
		this.body.SetAwake(true);
	};
	Acts.prototype.SetBullet = function (i)
	{
		if (!this.enabled)
			return;
		if (this.bullet === (i !== 0))
			return;
		this.bullet = (i !== 0);
		this.body.SetBullet(this.bullet);
		this.body.SetAwake(true);
	};
	Acts.prototype.RemoveJoints = function ()
	{
		if (!this.enabled)
			return;
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
	};
	Acts.prototype.SetEnabled = function (e)
	{
		if (this.enabled && e === 0)
		{
			this.destroyBody();
			this.enabled = false;
		}
		else if (!this.enabled && e === 1)
		{
			this.enabled = true;
			this.createBody();
		}
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.VelocityX = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetLinearVelocity().x / worldScale : 0);
	};
	Exps.prototype.VelocityY = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetLinearVelocity().y / worldScale : 0);
	};
	Exps.prototype.AngularVelocity = function (ret)
	{
		ret.set_float(this.enabled ? cr.to_degrees(this.body.GetAngularVelocity()) : 0);
	};
	Exps.prototype.Mass = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetMass() / worldScale : 0);
	};
	Exps.prototype.CenterOfMassX = function (ret)
	{
		ret.set_float(this.enabled ? (this.body.GetPosition().x + this.body.GetLocalCenter().x) / worldScale : 0);
	};
	Exps.prototype.CenterOfMassY = function (ret)
	{
		ret.set_float(this.enabled ? (this.body.GetPosition().y + this.body.GetLocalCenter().y) / worldScale : 0);
	};
	Exps.prototype.Density = function (ret)
	{
		ret.set_float(this.enabled ? this.density : 0);
	};
	Exps.prototype.Friction = function (ret)
	{
		ret.set_float(this.enabled ? this.friction : 0);
	};
	Exps.prototype.Elasticity = function (ret)
	{
		ret.set_float(this.enabled ? this.restitution : 0);
	};
	Exps.prototype.LinearDamping = function (ret)
	{
		ret.set_float(this.enabled ? this.linearDamping : 0);
	};
	Exps.prototype.AngularDamping = function (ret)
	{
		ret.set_float(this.enabled ? this.angularDamping : 0);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Platform = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Platform.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	var ANIMMODE_STOPPED = 0;
	var ANIMMODE_MOVING = 1;
	var ANIMMODE_JUMPING = 2;
	var ANIMMODE_FALLING = 3;
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;			// prevent bunnyhopping
		this.ignoreInput = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.lastFloorObject = null;
		this.loadFloorObject = -1;
		this.lastFloorX = 0;
		this.lastFloorY = 0;
		this.floorIsJumpthru = false;
		this.animMode = ANIMMODE_STOPPED;
		this.fallthrough = 0;			// fall through jump-thru.  >0 to disable, lasts a few ticks
		this.firstTick = true;
		this.dx = 0;
		this.dy = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.updateGravity = function()
	{
		this.downx = Math.cos(this.ga);
		this.downy = Math.sin(this.ga);
		this.rightx = Math.cos(this.ga - Math.PI / 2);
		this.righty = Math.sin(this.ga - Math.PI / 2);
		this.downx = cr.round6dp(this.downx);
		this.downy = cr.round6dp(this.downy);
		this.rightx = cr.round6dp(this.rightx);
		this.righty = cr.round6dp(this.righty);
		this.g1 = this.g;
		if (this.g < 0)
		{
			this.downx *= -1;
			this.downy *= -1;
			this.g = Math.abs(this.g);
		}
	};
	behinstProto.onCreate = function()
	{
		this.maxspeed = this.properties[0];
		this.acc = this.properties[1];
		this.dec = this.properties[2];
		this.jumpStrength = this.properties[3];
		this.g = this.properties[4];
		this.g1 = this.g;
		this.maxFall = this.properties[5];
		this.defaultControls = (this.properties[6] === 1);	// 0=no, 1=yes
		this.enabled = (this.properties[7] !== 0);
		this.wasOnFloor = false;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
		this.loadOverJumpthru = -1;
		this.ga = cr.to_radians(90);
		this.updateGravity();
		var self = this;
		if (this.defaultControls && !this.runtime.isDomFree)
		{
			jQuery(document).keydown(function(info) {
						self.onKeyDown(info);
					});
			jQuery(document).keyup(function(info) {
						self.onKeyUp(info);
					});
		}
		if (!this.recycled)
		{
			this.myDestroyCallback = function(inst) {
										self.onInstanceDestroyed(inst);
									};
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"ii": this.ignoreInput,
			"lfx": this.lastFloorX,
			"lfy": this.lastFloorY,
			"lfo": (this.lastFloorObject ? this.lastFloorObject.uid : -1),
			"am": this.animMode,
			"en": this.enabled,
			"fall": this.fallthrough,
			"ft": this.firstTick,
			"dx": this.dx,
			"dy": this.dy,
			"ms": this.maxspeed,
			"acc": this.acc,
			"dec": this.dec,
			"js": this.jumpStrength,
			"g": this.g,
			"g1": this.g1,
			"mf": this.maxFall,
			"wof": this.wasOnFloor,
			"woj": (this.wasOverJumpthru ? this.wasOverJumpthru.uid : -1),
			"ga": this.ga
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.ignoreInput = o["ii"];
		this.lastFloorX = o["lfx"];
		this.lastFloorY = o["lfy"];
		this.loadFloorObject = o["lfo"];
		this.animMode = o["am"];
		this.enabled = o["en"];
		this.fallthrough = o["fall"];
		this.firstTick = o["ft"];
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.maxspeed = o["ms"];
		this.acc = o["acc"];
		this.dec = o["dec"];
		this.jumpStrength = o["js"];
		this.g = o["g"];
		this.g1 = o["g1"];
		this.maxFall = o["mf"];
		this.wasOnFloor = o["wof"];
		this.loadOverJumpthru = o["woj"];
		this.ga = o["ga"];
		this.leftkey = false;
		this.rightkey = false;
		this.jumpkey = false;
		this.jumped = false;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		this.updateGravity();
	};
	behinstProto.afterLoad = function ()
	{
		if (this.loadFloorObject === -1)
			this.lastFloorObject = null;
		else
			this.lastFloorObject = this.runtime.getObjectByUID(this.loadFloorObject);
		if (this.loadOverJumpthru === -1)
			this.wasOverJumpthru = null;
		else
			this.wasOverJumpthru = this.runtime.getObjectByUID(this.loadOverJumpthru);
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		if (this.lastFloorObject == inst)
			this.lastFloorObject = null;
	};
	behinstProto.onDestroy = function ()
	{
		this.lastFloorObject = null;
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.onKeyDown = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = true;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = true;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = true;
			break;
		}
	};
	behinstProto.onKeyUp = function (info)
	{
		switch (info.which) {
		case 38:	// up
			info.preventDefault();
			this.jumpkey = false;
			this.jumped = false;
			break;
		case 37:	// left
			info.preventDefault();
			this.leftkey = false;
			break;
		case 39:	// right
			info.preventDefault();
			this.rightkey = false;
			break;
		}
	};
	behinstProto.getGDir = function ()
	{
		if (this.g < 0)
			return -1;
		else
			return 1;
	};
	behinstProto.isOnFloor = function ()
	{
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		if (this.lastFloorObject && this.runtime.testOverlap(this.inst, this.lastFloorObject))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return this.lastFloorObject;
		}
		else
		{
			ret = this.runtime.testOverlapSolid(this.inst);
			if (!ret && this.fallthrough === 0)
				ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			if (ret)		// was overlapping solid
			{
				if (this.runtime.testOverlap(this.inst, ret))
					return null;
				else
				{
					this.floorIsJumpthru = false;
					return ret;
				}
			}
			if (ret2 && ret2.length)
			{
				for (i = 0, j = 0, len = ret2.length; i < len; i++)
				{
					ret2[j] = ret2[i];
					if (!this.runtime.testOverlap(this.inst, ret2[i]))
						j++;
				}
				if (j >= 1)
				{
					this.floorIsJumpthru = true;
					return ret2[0];
				}
			}
			return null;
		}
	};
	behinstProto.tick = function ()
	{
	};
	behinstProto.posttick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var mx, my, obstacle, mag, allover, i, len, j, oldx, oldy;
		if (!this.jumpkey && !this.simjump)
			this.jumped = false;
		var left = this.leftkey || this.simleft;
		var right = this.rightkey || this.simright;
		var jump = (this.jumpkey || this.simjump) && !this.jumped;
		this.simleft = false;
		this.simright = false;
		this.simjump = false;
		if (!this.enabled)
			return;
		if (this.ignoreInput)
		{
			left = false;
			right = false;
			jump = false;
		}
		var lastFloor = this.lastFloorObject;
		var floor_moved = false;
		if (this.firstTick)
		{
			if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 4, true);
			}
			this.firstTick = false;
		}
		if (lastFloor && this.dy === 0 && (lastFloor.y !== this.lastFloorY || lastFloor.x !== this.lastFloorX))
		{
			mx = (lastFloor.x - this.lastFloorX);
			my = (lastFloor.y - this.lastFloorY);
			this.inst.x += mx;
			this.inst.y += my;
			this.inst.set_bbox_changed();
			this.lastFloorX = lastFloor.x;
			this.lastFloorY = lastFloor.y;
			floor_moved = true;
			if (this.runtime.testOverlapSolid(this.inst))
			{
				this.runtime.pushOutSolid(this.inst, -mx, -my, Math.sqrt(mx * mx + my * my) * 2.5);
			}
		}
		var floor_ = this.isOnFloor();
		var collobj = this.runtime.testOverlapSolid(this.inst);
		if (collobj)
		{
			if (this.runtime.pushOutSolidNearest(this.inst, Math.max(this.inst.width, this.inst.height) / 2))
				this.runtime.registerCollision(this.inst, collobj);
			else
				return;
		}
		if (floor_)
		{
			if (this.dy > 0)
			{
				if (!this.wasOnFloor)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, floor_, 16);
					this.wasOnFloor = true;
				}
				this.dy = 0;
			}
			if (lastFloor != floor_)
			{
				this.lastFloorObject = floor_;
				this.lastFloorX = floor_.x;
				this.lastFloorY = floor_.y;
				this.runtime.registerCollision(this.inst, floor_);
			}
			else if (floor_moved)
			{
				collobj = this.runtime.testOverlapSolid(this.inst);
				if (collobj)
				{
					this.runtime.registerCollision(this.inst, collobj);
					if (mx !== 0)
					{
						if (mx > 0)
							this.runtime.pushOutSolid(this.inst, -this.rightx, -this.righty);
						else
							this.runtime.pushOutSolid(this.inst, this.rightx, this.righty);
					}
					this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy);
				}
			}
			if (jump)
			{
				oldx = this.inst.x;
				oldy = this.inst.y;
				this.inst.x -= this.downx;
				this.inst.y -= this.downy;
				this.inst.set_bbox_changed();
				if (!this.runtime.testOverlapSolid(this.inst))
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnJump, this.inst);
					this.animMode = ANIMMODE_JUMPING;
					this.dy = -this.jumpStrength;
					this.jumped = true;
				}
				else
					jump = false;
				this.inst.x = oldx;
				this.inst.y = oldy;
				this.inst.set_bbox_changed();
			}
		}
		else
		{
			this.lastFloorObject = null;
			this.dy += this.g * dt;
			if (this.dy > this.maxFall)
				this.dy = this.maxFall;
			if (jump)
				this.jumped = true;
		}
		this.wasOnFloor = !!floor_;
		if (left == right)	// both up or both down
		{
			if (this.dx < 0)
			{
				this.dx += this.dec * dt;
				if (this.dx > 0)
					this.dx = 0;
			}
			else if (this.dx > 0)
			{
				this.dx -= this.dec * dt;
				if (this.dx < 0)
					this.dx = 0;
			}
		}
		if (left && !right)
		{
			if (this.dx > 0)
				this.dx -= (this.acc + this.dec) * dt;
			else
				this.dx -= this.acc * dt;
		}
		if (right && !left)
		{
			if (this.dx < 0)
				this.dx += (this.acc + this.dec) * dt;
			else
				this.dx += this.acc * dt;
		}
		if (this.dx > this.maxspeed)
			this.dx = this.maxspeed;
		else if (this.dx < -this.maxspeed)
			this.dx = -this.maxspeed;
		var landed = false;
		if (this.dx !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			mx = this.dx * dt * this.rightx;
			my = this.dx * dt * this.righty;
			this.inst.x += this.rightx * (this.dx > 1 ? 1 : -1) - this.downx;
			this.inst.y += this.righty * (this.dx > 1 ? 1 : -1) - this.downy;
			this.inst.set_bbox_changed();
			var is_jumpthru = false;
			var slope_too_steep = this.runtime.testOverlapSolid(this.inst);
			/*
			if (!slope_too_steep && floor_)
			{
				slope_too_steep = this.runtime.testOverlapJumpThru(this.inst);
				is_jumpthru = true;
				if (slope_too_steep)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, slope_too_steep))
					{
						slope_too_steep = null;
						is_jumpthru = false;
					}
				}
			}
			*/
			this.inst.x = oldx + mx;
			this.inst.y = oldy + my;
			this.inst.set_bbox_changed();
			obstacle = this.runtime.testOverlapSolid(this.inst);
			if (!obstacle && floor_)
			{
				obstacle = this.runtime.testOverlapJumpThru(this.inst);
				if (obstacle)
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlap(this.inst, obstacle))
					{
						obstacle = null;
						is_jumpthru = false;
					}
					else
						is_jumpthru = true;
					this.inst.x = oldx + mx;
					this.inst.y = oldy + my;
					this.inst.set_bbox_changed();
				}
			}
			if (obstacle)
			{
				var push_dist = Math.abs(this.dx * dt) + 2;
				if (slope_too_steep || !this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, push_dist, is_jumpthru, obstacle))
				{
					this.runtime.registerCollision(this.inst, obstacle);
					push_dist = Math.max(Math.abs(this.dx * dt * 2.5), 30);
					if (!this.runtime.pushOutSolid(this.inst, this.rightx * (this.dx < 0 ? 1 : -1), this.righty * (this.dx < 0 ? 1 : -1), push_dist, false))
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
					else if (floor_ && !is_jumpthru && !this.floorIsJumpthru)
					{
						oldx = this.inst.x;
						oldy = this.inst.y;
						this.inst.x += this.downx;
						this.inst.y += this.downy;
						if (this.runtime.testOverlapSolid(this.inst))
						{
							if (!this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, 3, false))
							{
								this.inst.x = oldx;
								this.inst.y = oldy;
								this.inst.set_bbox_changed();
							}
						}
						else
						{
							this.inst.x = oldx;
							this.inst.y = oldy;
							this.inst.set_bbox_changed();
						}
					}
					if (!is_jumpthru)
						this.dx = 0;	// stop
				}
				else if (!slope_too_steep && !jump && (Math.abs(this.dy) < Math.abs(this.jumpStrength / 2)))
				{
					this.dy = 0;
					if (!floor_)
						landed = true;
				}
			}
			else
			{
				var newfloor = this.isOnFloor();
				if (floor_ && !newfloor)
				{
					mag = Math.ceil(Math.abs(this.dx * dt)) + 2;
					oldx = this.inst.x;
					oldy = this.inst.y;
					this.inst.x += this.downx * mag;
					this.inst.y += this.downy * mag;
					this.inst.set_bbox_changed();
					if (this.runtime.testOverlapSolid(this.inst) || this.runtime.testOverlapJumpThru(this.inst))
						this.runtime.pushOutSolid(this.inst, -this.downx, -this.downy, mag + 2, true);
					else
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
					}
				}
				else if (newfloor && this.dy === 0)
				{
					this.runtime.pushInFractional(this.inst, -this.downx, -this.downy, newfloor, 16);
				}
			}
		}
		if (this.dy !== 0)
		{
			oldx = this.inst.x;
			oldy = this.inst.y;
			this.inst.x += this.dy * dt * this.downx;
			this.inst.y += this.dy * dt * this.downy;
			var newx = this.inst.x;
			var newy = this.inst.y;
			this.inst.set_bbox_changed();
			collobj = this.runtime.testOverlapSolid(this.inst);
			var fell_on_jumpthru = false;
			if (!collobj && (this.dy > 0) && !floor_)
			{
				allover = this.fallthrough > 0 ? null : this.runtime.testOverlapJumpThru(this.inst, true);
				if (allover && allover.length)
				{
					if (this.wasOverJumpthru)
					{
						this.inst.x = oldx;
						this.inst.y = oldy;
						this.inst.set_bbox_changed();
						for (i = 0, j = 0, len = allover.length; i < len; i++)
						{
							allover[j] = allover[i];
							if (!this.runtime.testOverlap(this.inst, allover[i]))
								j++;
						}
						allover.length = j;
						this.inst.x = newx;
						this.inst.y = newy;
						this.inst.set_bbox_changed();
					}
					if (allover.length >= 1)
						collobj = allover[0];
				}
				fell_on_jumpthru = !!collobj;
			}
			if (collobj)
			{
				this.runtime.registerCollision(this.inst, collobj);
				var push_dist = (fell_on_jumpthru ? Math.abs(this.dy * dt * 2.5 + 10) : Math.max(Math.abs(this.dy * dt * 2.5 + 10), 30));
				if (!this.runtime.pushOutSolid(this.inst, this.downx * (this.dy < 0 ? 1 : -1), this.downy * (this.dy < 0 ? 1 : -1), push_dist, fell_on_jumpthru, collobj))
				{
					this.inst.x = oldx;
					this.inst.y = oldy;
					this.inst.set_bbox_changed();
					this.wasOnFloor = true;		// prevent adjustment for unexpected floor landings
					if (!fell_on_jumpthru)
						this.dy = 0;	// stop
				}
				else
				{
					this.lastFloorObject = collobj;
					this.lastFloorX = collobj.x;
					this.lastFloorY = collobj.y;
					this.floorIsJumpthru = fell_on_jumpthru;
					if (fell_on_jumpthru)
						landed = true;
					this.dy = 0;	// stop
				}
			}
		}
		if (this.animMode !== ANIMMODE_FALLING && this.dy > 0 && !floor_)
		{
			this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnFall, this.inst);
			this.animMode = ANIMMODE_FALLING;
		}
		if (floor_ || landed)
		{
			if (this.animMode === ANIMMODE_FALLING || landed || (jump && this.dy === 0))
			{
				this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnLand, this.inst);
				if (this.dx === 0 && this.dy === 0)
					this.animMode = ANIMMODE_STOPPED;
				else
					this.animMode = ANIMMODE_MOVING;
			}
			else
			{
				if (this.animMode !== ANIMMODE_STOPPED && this.dx === 0 && this.dy === 0)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnStop, this.inst);
					this.animMode = ANIMMODE_STOPPED;
				}
				if (this.animMode !== ANIMMODE_MOVING && (this.dx !== 0 || this.dy !== 0) && !jump)
				{
					this.runtime.trigger(cr.behaviors.Platform.prototype.cnds.OnMove, this.inst);
					this.animMode = ANIMMODE_MOVING;
				}
			}
		}
		if (this.fallthrough > 0)
			this.fallthrough--;
		this.wasOverJumpthru = this.runtime.testOverlapJumpThru(this.inst);
	};
	function Cnds() {};
	Cnds.prototype.IsMoving = function ()
	{
		return this.dx !== 0 || this.dy !== 0;
	};
	Cnds.prototype.CompareSpeed = function (cmp, s)
	{
		var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.IsOnFloor = function ()
	{
		if (this.dy !== 0)
			return false;
		var ret = null;
		var ret2 = null;
		var i, len, j;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		if (!ret && this.fallthrough === 0)
			ret2 = this.runtime.testOverlapJumpThru(this.inst, true);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (ret)		// was overlapping solid
		{
			return !this.runtime.testOverlap(this.inst, ret);
		}
		if (ret2 && ret2.length)
		{
			for (i = 0, j = 0, len = ret2.length; i < len; i++)
			{
				ret2[j] = ret2[i];
				if (!this.runtime.testOverlap(this.inst, ret2[i]))
					j++;
			}
			if (j >= 1)
				return true;
		}
		return false;
	};
	Cnds.prototype.IsByWall = function (side)
	{
		var ret = false;
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x -= this.downx * 3;
		this.inst.y -= this.downy * 3;
		this.inst.set_bbox_changed();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.inst.x = oldx;
			this.inst.y = oldy;
			this.inst.set_bbox_changed();
			return false;
		}
		if (side === 0)		// left
		{
			this.inst.x -= this.rightx * 2;
			this.inst.y -= this.righty * 2;
		}
		else
		{
			this.inst.x += this.rightx * 2;
			this.inst.y += this.righty * 2;
		}
		this.inst.set_bbox_changed();
		ret = this.runtime.testOverlapSolid(this.inst);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		return ret;
	};
	Cnds.prototype.IsJumping = function ()
	{
		return this.dy < 0;
	};
	Cnds.prototype.IsFalling = function ()
	{
		return this.dy > 0;
	};
	Cnds.prototype.OnJump = function ()
	{
		return true;
	};
	Cnds.prototype.OnFall = function ()
	{
		return true;
	};
	Cnds.prototype.OnStop = function ()
	{
		return true;
	};
	Cnds.prototype.OnMove = function ()
	{
		return true;
	};
	Cnds.prototype.OnLand = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetIgnoreInput = function (ignoring)
	{
		this.ignoreInput = ignoring;
	};
	Acts.prototype.SetMaxSpeed = function (maxspeed)
	{
		this.maxspeed = maxspeed;
		if (this.maxspeed < 0)
			this.maxspeed = 0;
	};
	Acts.prototype.SetAcceleration = function (acc)
	{
		this.acc = acc;
		if (this.acc < 0)
			this.acc = 0;
	};
	Acts.prototype.SetDeceleration = function (dec)
	{
		this.dec = dec;
		if (this.dec < 0)
			this.dec = 0;
	};
	Acts.prototype.SetJumpStrength = function (js)
	{
		this.jumpStrength = js;
		if (this.jumpStrength < 0)
			this.jumpStrength = 0;
	};
	Acts.prototype.SetGravity = function (grav)
	{
		if (this.g1 === grav)
			return;		// no change
		this.g = grav;
		this.updateGravity();
		if (this.runtime.testOverlapSolid(this.inst))
		{
			this.runtime.pushOutSolid(this.inst, this.downx, this.downy, 10);
			this.inst.x += this.downx * 2;
			this.inst.y += this.downy * 2;
			this.inst.set_bbox_changed();
		}
		this.lastFloorObject = null;
	};
	Acts.prototype.SetMaxFallSpeed = function (mfs)
	{
		this.maxFall = mfs;
		if (this.maxFall < 0)
			this.maxFall = 0;
	};
	Acts.prototype.SimulateControl = function (ctrl)
	{
		switch (ctrl) {
		case 0:		this.simleft = true;	break;
		case 1:		this.simright = true;	break;
		case 2:		this.simjump = true;	break;
		}
	};
	Acts.prototype.SetVectorX = function (vx)
	{
		this.dx = vx;
	};
	Acts.prototype.SetVectorY = function (vy)
	{
		this.dy = vy;
	};
	Acts.prototype.SetGravityAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.ga === a)
			return;		// no change
		this.ga = a;
		this.updateGravity();
		this.lastFloorObject = null;
	};
	Acts.prototype.SetEnabled = function (en)
	{
		if (this.enabled !== (en === 1))
		{
			this.enabled = (en === 1);
			if (!this.enabled)
				this.lastFloorObject = null;
		}
	};
	Acts.prototype.FallThrough = function ()
	{
		var oldx = this.inst.x;
		var oldy = this.inst.y;
		this.inst.x += this.downx;
		this.inst.y += this.downy;
		this.inst.set_bbox_changed();
		var overlaps = this.runtime.testOverlapJumpThru(this.inst, false);
		this.inst.x = oldx;
		this.inst.y = oldy;
		this.inst.set_bbox_changed();
		if (!overlaps)
			return;
		this.fallthrough = 3;			// disable jumpthrus for 3 ticks (1 doesn't do it, 2 does, 3 to be on safe side)
		this.lastFloorObject = null;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(Math.sqrt(this.dx * this.dx + this.dy * this.dy));
	};
	Exps.prototype.MaxSpeed = function (ret)
	{
		ret.set_float(this.maxspeed);
	};
	Exps.prototype.Acceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Deceleration = function (ret)
	{
		ret.set_float(this.dec);
	};
	Exps.prototype.JumpStrength = function (ret)
	{
		ret.set_float(this.jumpStrength);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.GravityAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.ga));
	};
	Exps.prototype.MaxFallSpeed = function (ret)
	{
		ret.set_float(this.maxFall);
	};
	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(Math.atan2(this.dy, this.dx)));
	};
	Exps.prototype.VectorX = function (ret)
	{
		ret.set_float(this.dx);
	};
	Exps.prototype.VectorY = function (ret)
	{
		ret.set_float(this.dy);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.Sin = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Sin.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// period offset (radians)
	};
	var behinstProto = behaviorProto.Instance.prototype;
	var _2pi = 2 * Math.PI;
	var _pi_2 = Math.PI / 2;
	var _3pi_2 = (3 * Math.PI) / 2;
	behinstProto.onCreate = function()
	{
		this.active = (this.properties[0] === 1);
		this.movement = this.properties[1]; // 0=Horizontal|1=Vertical|2=Size|3=Width|4=Height|5=Angle|6=Opacity|7=Value only
		this.wave = this.properties[2];		// 0=Sine|1=Triangle|2=Sawtooth|3=Reverse sawtooth|4=Square
		this.period = this.properties[3];
		this.period += Math.random() * this.properties[4];								// period random
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i = (this.properties[5] / this.period) * _2pi;								// period offset
			this.i += ((Math.random() * this.properties[6]) / this.period) * _2pi;			// period offset random
		}
		this.mag = this.properties[7];													// magnitude
		this.mag += Math.random() * this.properties[8];									// magnitude random
		this.initialValue = 0;
		this.initialValue2 = 0;
		this.ratio = 0;
		this.init();
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"i": this.i,
			"a": this.active,
			"mv": this.movement,
			"w": this.wave,
			"p": this.period,
			"mag": this.mag,
			"iv": this.initialValue,
			"iv2": this.initialValue2,
			"r": this.ratio,
			"lkv": this.lastKnownValue,
			"lkv2": this.lastKnownValue2
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.i = o["i"];
		this.active = o["a"];
		this.movement = o["mv"];
		this.wave = o["w"];
		this.period = o["p"];
		this.mag = o["mag"];
		this.initialValue = o["iv"];
		this.initialValue2 = o["iv2"] || 0;
		this.ratio = o["r"];
		this.lastKnownValue = o["lkv"];
		this.lastKnownValue2 = o["lkv2"] || 0;
	};
	behinstProto.init = function ()
	{
		switch (this.movement) {
		case 0:		// horizontal
			this.initialValue = this.inst.x;
			break;
		case 1:		// vertical
			this.initialValue = this.inst.y;
			break;
		case 2:		// size
			this.initialValue = this.inst.width;
			this.ratio = this.inst.height / this.inst.width;
			break;
		case 3:		// width
			this.initialValue = this.inst.width;
			break;
		case 4:		// height
			this.initialValue = this.inst.height;
			break;
		case 5:		// angle
			this.initialValue = this.inst.angle;
			this.mag = cr.to_radians(this.mag);		// convert magnitude from degrees to radians
			break;
		case 6:		// opacity
			this.initialValue = this.inst.opacity;
			break;
		case 7:
			this.initialValue = 0;
			break;
		case 8:		// forwards/backwards
			this.initialValue = this.inst.x;
			this.initialValue2 = this.inst.y;
			break;
		default:
;
		}
		this.lastKnownValue = this.initialValue;
		this.lastKnownValue2 = this.initialValue2;
	};
	behinstProto.waveFunc = function (x)
	{
		x = x % _2pi;
		switch (this.wave) {
		case 0:		// sine
			return Math.sin(x);
		case 1:		// triangle
			if (x <= _pi_2)
				return x / _pi_2;
			else if (x <= _3pi_2)
				return 1 - (2 * (x - _pi_2) / Math.PI);
			else
				return (x - _3pi_2) / _pi_2 - 1;
		case 2:		// sawtooth
			return 2 * x / _2pi - 1;
		case 3:		// reverse sawtooth
			return -2 * x / _2pi + 1;
		case 4:		// square
			return x < Math.PI ? -1 : 1;
		};
		return 0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if (!this.active || dt === 0)
			return;
		if (this.period === 0)
			this.i = 0;
		else
		{
			this.i += (dt / this.period) * _2pi;
			this.i = this.i % _2pi;
		}
		switch (this.movement) {
		case 0:		// horizontal
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			this.inst.x = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			break;
		case 1:		// vertical
			if (this.inst.y !== this.lastKnownValue)
				this.initialValue += this.inst.y - this.lastKnownValue;
			this.inst.y = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.y;
			break;
		case 2:		// size
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			this.inst.height = this.inst.width * this.ratio;
			break;
		case 3:		// width
			this.inst.width = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 4:		// height
			this.inst.height = this.initialValue + this.waveFunc(this.i) * this.mag;
			break;
		case 5:		// angle
			if (this.inst.angle !== this.lastKnownValue)
				this.initialValue = cr.clamp_angle(this.initialValue + (this.inst.angle - this.lastKnownValue));
			this.inst.angle = cr.clamp_angle(this.initialValue + this.waveFunc(this.i) * this.mag);
			this.lastKnownValue = this.inst.angle;
			break;
		case 6:		// opacity
			this.inst.opacity = this.initialValue + (this.waveFunc(this.i) * this.mag) / 100;
			if (this.inst.opacity < 0)
				this.inst.opacity = 0;
			else if (this.inst.opacity > 1)
				this.inst.opacity = 1;
			break;
		case 8:		// forwards/backwards
			if (this.inst.x !== this.lastKnownValue)
				this.initialValue += this.inst.x - this.lastKnownValue;
			if (this.inst.y !== this.lastKnownValue2)
				this.initialValue2 += this.inst.y - this.lastKnownValue2;
			this.inst.x = this.initialValue + Math.cos(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.inst.y = this.initialValue2 + Math.sin(this.inst.angle) * this.waveFunc(this.i) * this.mag;
			this.lastKnownValue = this.inst.x;
			this.lastKnownValue2 = this.inst.y;
			break;
		}
		this.inst.set_bbox_changed();
	};
	behinstProto.onSpriteFrameChanged = function (prev_frame, next_frame)
	{
		switch (this.movement) {
		case 2:	// size
			this.initialValue *= (next_frame.width / prev_frame.width);
			this.ratio = next_frame.height / next_frame.width;
			break;
		case 3:	// width
			this.initialValue *= (next_frame.width / prev_frame.width);
			break;
		case 4:	// height
			this.initialValue *= (next_frame.height / prev_frame.height);
			break;
		}
	};
	function Cnds() {};
	Cnds.prototype.IsActive = function ()
	{
		return this.active;
	};
	Cnds.prototype.CompareMovement = function (m)
	{
		return this.movement === m;
	};
	Cnds.prototype.ComparePeriod = function (cmp, v)
	{
		return cr.do_cmp(this.period, cmp, v);
	};
	Cnds.prototype.CompareMagnitude = function (cmp, v)
	{
		if (this.movement === 5)
			return cr.do_cmp(this.mag, cmp, cr.to_radians(v));
		else
			return cr.do_cmp(this.mag, cmp, v);
	};
	Cnds.prototype.CompareWave = function (w)
	{
		return this.wave === w;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetActive = function (a)
	{
		this.active = (a === 1);
	};
	Acts.prototype.SetPeriod = function (x)
	{
		this.period = x;
	};
	Acts.prototype.SetMagnitude = function (x)
	{
		this.mag = x;
		if (this.movement === 5)	// angle
			this.mag = cr.to_radians(this.mag);
	};
	Acts.prototype.SetMovement = function (m)
	{
		if (this.movement === 5)
			this.mag = cr.to_degrees(this.mag);
		this.movement = m;
		this.init();
	};
	Acts.prototype.SetWave = function (w)
	{
		this.wave = w;
	};
	Acts.prototype.SetPhase = function (x)
	{
		this.i = (x * _2pi) % _2pi;
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.CyclePosition = function (ret)
	{
		ret.set_float(this.i / _2pi);
	};
	Exps.prototype.Period = function (ret)
	{
		ret.set_float(this.period);
	};
	Exps.prototype.Magnitude = function (ret)
	{
		if (this.movement === 5)	// angle
			ret.set_float(cr.to_degrees(this.mag));
		else
			ret.set_float(this.mag);
	};
	Exps.prototype.Value = function (ret)
	{
		ret.set_float(this.waveFunc(this.i) * this.mag);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.custom = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.custom.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;
		this.runtime = type.runtime;
		this.dx = 0;
		this.dy = 0;
		this.cancelStep = 0;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.stepMode = this.properties[0];	// 0=None, 1=Linear, 2=Horizontal then vertical, 3=Vertical then horizontal
		this.pxPerStep = this.properties[1];
		this.enabled = (this.properties[2] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"dx": this.dx,
			"dy": this.dy,
			"cancelStep": this.cancelStep,
			"enabled": this.enabled,
			"stepMode": this.stepMode,
			"pxPerStep": this.pxPerStep
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.dx = o["dx"];
		this.dy = o["dy"];
		this.cancelStep = o["cancelStep"];
		this.enabled = o["enabled"];
		this.stepMode = o["stepMode"];
		this.pxPerStep = o["pxPerStep"];
	};
	behinstProto.getSpeed = function ()
	{
		return Math.sqrt(this.dx * this.dx + this.dy * this.dy);
	};
	behinstProto.getAngle = function ()
	{
		return Math.atan2(this.dy, this.dx);
	};
	function sign(x)
	{
		if (x === 0)
			return 0;
		else if (x < 0)
			return -1;
		else
			return 1;
	};
	behinstProto.step = function (x, y, trigmethod)
	{
		if (x === 0 && y === 0)
			return;
		var startx = this.inst.x;
		var starty = this.inst.y;
		var sx, sy, prog;
		var steps = Math.round(Math.sqrt(x * x + y * y) / this.pxPerStep);
		if (steps === 0)
			steps = 1;
		var i;
		for (i = 1; i <= steps; i++)
		{
			prog = i / steps;
			this.inst.x = startx + x * prog;
			this.inst.y = starty + y * prog;
			this.inst.set_bbox_changed();
			this.runtime.trigger(trigmethod, this.inst);
			if (this.cancelStep === 1)
			{
				i--;
				prog = i / steps;
				this.inst.x = startx + x * prog;
				this.inst.y = starty + y * prog;
				this.inst.set_bbox_changed();
				return;
			}
			else if (this.cancelStep === 2)
			{
				return;
			}
		}
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		var mx = this.dx * dt;
		var my = this.dy * dt;
		var i, steps;
		if ((this.dx === 0 && this.dy === 0) || !this.enabled)
			return;
		this.cancelStep = 0;
		if (this.stepMode === 0)		// none
		{
			this.inst.x += mx;
			this.inst.y += my;
		}
		else if (this.stepMode === 1)	// linear
		{
			this.step(mx, my, cr.behaviors.custom.prototype.cnds.OnCMStep);
		}
		else if (this.stepMode === 2)	// horizontal then vertical
		{
			this.step(mx, 0, cr.behaviors.custom.prototype.cnds.OnCMHorizStep);
			this.cancelStep = 0;
			this.step(0, my, cr.behaviors.custom.prototype.cnds.OnCMVertStep);
		}
		else if (this.stepMode === 3)	// vertical then horizontal
		{
			this.step(0, my, cr.behaviors.custom.prototype.cnds.OnCMVertStep);
			this.cancelStep = 0;
			this.step(mx, 0, cr.behaviors.custom.prototype.cnds.OnCMHorizStep);
		}
		this.inst.set_bbox_changed();
	};
	function Cnds() {};
	Cnds.prototype.IsMoving = function ()
	{
		return this.dx != 0 || this.dy != 0;
	};
	Cnds.prototype.CompareSpeed = function (axis, cmp, s)
	{
		var speed;
		switch (axis) {
		case 0:		speed = this.getSpeed();	break;
		case 1:		speed = this.dx;			break;
		case 2:		speed = this.dy;			break;
		}
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OnCMStep = function ()
	{
		return true;
	};
	Cnds.prototype.OnCMHorizStep = function ()
	{
		return true;
	};
	Cnds.prototype.OnCMVertStep = function ()
	{
		return true;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Stop = function ()
	{
		this.dx = 0;
		this.dy = 0;
	};
	Acts.prototype.Reverse = function (axis)
	{
		switch (axis) {
		case 0:
			this.dx *= -1;
			this.dy *= -1;
			break;
		case 1:
			this.dx *= -1;
			break;
		case 2:
			this.dy *= -1;
			break;
		}
	};
	Acts.prototype.SetSpeed = function (axis, s)
	{
		var a;
		switch (axis) {
		case 0:
			a = this.getAngle();
			this.dx = Math.cos(a) * s;
			this.dy = Math.sin(a) * s;
			break;
		case 1:
			this.dx = s;
			break;
		case 2:
			this.dy = s;
			break;
		}
	};
	Acts.prototype.Accelerate = function (axis, acc)
	{
		var dt = this.runtime.getDt(this.inst);
		var ds = acc * dt;
		var a;
		switch (axis) {
		case 0:
			a = this.getAngle();
			this.dx += Math.cos(a) * ds;
			this.dy += Math.sin(a) * ds;
			break;
		case 1:
			this.dx += ds;
			break;
		case 2:
			this.dy += ds;
			break;
		}
	};
	Acts.prototype.AccelerateAngle = function (acc, a_)
	{
		var dt = this.runtime.getDt(this.inst);
		var ds = acc * dt;
		var a = cr.to_radians(a_);
		this.dx += Math.cos(a) * ds;
		this.dy += Math.sin(a) * ds;
	};
	Acts.prototype.AcceleratePos = function (acc, x, y)
	{
		var dt = this.runtime.getDt(this.inst);
		var ds = acc * dt;
		var a = Math.atan2(y - this.inst.y, x - this.inst.x);
		this.dx += Math.cos(a) * ds;
		this.dy += Math.sin(a) * ds;
	};
	Acts.prototype.SetAngleOfMotion = function (a_)
	{
		var a = cr.to_radians(a_);
		var s = this.getSpeed();
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.RotateAngleOfMotionClockwise = function (a_)
	{
		var a = this.getAngle() + cr.to_radians(a_);
		var s = this.getSpeed();
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.RotateAngleOfMotionCounterClockwise = function (a_)
	{
		var a = this.getAngle() - cr.to_radians(a_);
		var s = this.getSpeed();
		this.dx = Math.cos(a) * s;
		this.dy = Math.sin(a) * s;
	};
	Acts.prototype.StopStepping = function (mode)
	{
		this.cancelStep = mode + 1;
	};
	Acts.prototype.PushOutSolid = function (mode)
	{
		var a, ux, uy;
		switch (mode) {
		case 0:
			a = this.getAngle();
			ux = Math.cos(a);
			uy = Math.sin(a);
			this.runtime.pushOutSolid(this.inst, -ux, -uy, Math.max(this.getSpeed() * 3, 100));
			break;
		case 1:
			this.runtime.pushOutSolidNearest(this.inst);
			break;
		case 2:
			this.runtime.pushOutSolid(this.inst, 0, -1, Math.max(Math.abs(this.dy) * 3, 100));
			break;
		case 3:
			this.runtime.pushOutSolid(this.inst, 0, 1, Math.max(Math.abs(this.dy) * 3, 100));
			break;
		case 4:
			this.runtime.pushOutSolid(this.inst, -1, 0, Math.max(Math.abs(this.dx) * 3, 100));
			break;
		case 5:
			this.runtime.pushOutSolid(this.inst, 1, 0, Math.max(Math.abs(this.dx) * 3, 100));
			break;
		}
	};
	Acts.prototype.PushOutSolidAngle = function (a)
	{
		a = cr.to_radians(a);
		var ux = Math.cos(a);
		var uy = Math.sin(a);
		this.runtime.pushOutSolid(this.inst, ux, uy, Math.max(this.getSpeed() * 3, 100));
	};
	Acts.prototype.SetEnabled = function (en)
	{
		this.enabled = (en === 1);
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Speed = function (ret)
	{
		ret.set_float(this.getSpeed());
	};
	Exps.prototype.MovingAngle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.getAngle()));
	};
	Exps.prototype.dx = function (ret)
	{
		ret.set_float(this.dx);
	};
	Exps.prototype.dy = function (ret)
	{
		ret.set_float(this.dy);
	};
	behaviorProto.exps = new Exps();
}());
;
;
cr.behaviors.scrollto = function(runtime)
{
	this.runtime = runtime;
	this.shakeMag = 0;
	this.shakeStart = 0;
	this.shakeEnd = 0;
	this.shakeMode = 0;
};
(function ()
{
	var behaviorProto = cr.behaviors.scrollto.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.enabled = (this.properties[0] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"smg": this.behavior.shakeMag,
			"ss": this.behavior.shakeStart,
			"se": this.behavior.shakeEnd,
			"smd": this.behavior.shakeMode
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.behavior.shakeMag = o["smg"];
		this.behavior.shakeStart = o["ss"];
		this.behavior.shakeEnd = o["se"];
		this.behavior.shakeMode = o["smd"];
	};
	behinstProto.tick = function ()
	{
	};
	function getScrollToBehavior(inst)
	{
		var i, len, binst;
		for (i = 0, len = inst.behavior_insts.length; i < len; ++i)
		{
			binst = inst.behavior_insts[i];
			if (binst.behavior instanceof cr.behaviors.scrollto)
				return binst;
		}
		return null;
	};
	behinstProto.tick2 = function ()
	{
		if (!this.enabled)
			return;
		var all = this.behavior.my_instances.valuesRef();
		var sumx = 0, sumy = 0;
		var i, len, binst, count = 0;
		for (i = 0, len = all.length; i < len; i++)
		{
			binst = getScrollToBehavior(all[i]);
			if (!binst || !binst.enabled)
				continue;
			sumx += all[i].x;
			sumy += all[i].y;
			++count;
		}
		var layout = this.inst.layer.layout;
		var now = this.runtime.kahanTime.sum;
		var offx = 0, offy = 0;
		if (now >= this.behavior.shakeStart && now < this.behavior.shakeEnd)
		{
			var mag = this.behavior.shakeMag * Math.min(this.runtime.timescale, 1);
			if (this.behavior.shakeMode === 0)
				mag *= 1 - (now - this.behavior.shakeStart) / (this.behavior.shakeEnd - this.behavior.shakeStart);
			var a = Math.random() * Math.PI * 2;
			var d = Math.random() * mag;
			offx = Math.cos(a) * d;
			offy = Math.sin(a) * d;
		}
		layout.scrollToX(sumx / count + offx);
		layout.scrollToY(sumy / count + offy);
	};
	function Acts() {};
	Acts.prototype.Shake = function (mag, dur, mode)
	{
		this.behavior.shakeMag = mag;
		this.behavior.shakeStart = this.runtime.kahanTime.sum;
		this.behavior.shakeEnd = this.behavior.shakeStart + dur;
		this.behavior.shakeMode = mode;
	};
	Acts.prototype.SetEnabled = function (e)
	{
		this.enabled = (e !== 0);
	};
	behaviorProto.acts = new Acts();
}());
;
;
cr.behaviors.solid = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.solid.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.inst.extra.solidEnabled = (this.properties[0] !== 0);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.inst.extra.solidEnabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		this.inst.extra.solidEnabled = !!e;
	};
	behaviorProto.acts = new Acts();
}());
cr.getProjectModel = function() { return [
	null,
	"Intro",
	[
	[
		cr.plugins_.Audio,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Function,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Keyboard,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Mouse,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Sprite,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
,	[
		cr.plugins_.Text,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
,	[
		cr.plugins_.TiledBg,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Tilemap,
		false,
		true,
		true,
		true,
		false,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Touch,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
	],
	[
	[
		"t0",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1675730901218135,
			[
				["images/bullet_drax-sheet0.png", 5160, 1, 1, 91, 30, 1, 0.5054945349693298, 0.5,[],[],0]
			]
			]
,			[
			"powerup",
			5,
			false,
			1,
			0,
			false,
			6510187473093396,
			[
				["images/bullet_drax-sheet0.png", 5160, 1, 33, 91, 30, 1, 0.5054945349693298, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7363894026042152,
		[],
		null
	]
,	[
		"t1",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			24,
			false,
			1,
			0,
			false,
			8266498535188535,
			[
				["images/bullet_gamora-sheet0.png", 229888, 1, 160, 156, 156, 1, 0.6474359035491943, 0.5064102411270142,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 1, 318, 152, 154, 1, 0.6447368264198303, 0.5064935088157654,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 327, 1, 161, 156, 1, 0.6459627151489258, 0.5064102411270142,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 1, 1, 161, 157, 1, 0.6459627151489258, 0.5095541477203369,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 317, 317, 158, 154, 1, 0.6455696225166321, 0.5064935088157654,[],[],0],
				["images/bullet_gamora-sheet1.png", 54560, 1, 1, 153, 142, 1, 0.6470588445663452, 0.5070422291755676,[],[],0],
				["images/bullet_gamora-sheet1.png", 54560, 156, 1, 152, 130, 1, 0.6447368264198303, 0.5076923370361328,[],[],0],
				["images/bullet_gamora-sheet1.png", 54560, 310, 1, 158, 118, 1, 0.6455696225166321, 0.508474588394165,[],[],0],
				["images/bullet_gamora-sheet1.png", 54560, 310, 121, 130, 121, 15, 0.6461538672447205, 0.5041322112083435,[],[],0]
			]
			]
,			[
			"powerup",
			24,
			true,
			1,
			0,
			false,
			209567799638337,
			[
				["images/bullet_gamora-sheet0.png", 229888, 164, 1, 161, 157, 1, 0.5590062141418457, 0.4968152940273285,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 159, 160, 156, 156, 1, 0.557692289352417, 0.5,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 155, 318, 152, 154, 1, 0.5592105388641357, 0.5,[],[],0],
				["images/bullet_gamora-sheet0.png", 229888, 327, 159, 161, 156, 1, 0.5714285969734192, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2555017819922299,
		[],
		null
	]
,	[
		"t2",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			15,
			true,
			1,
			0,
			false,
			7134123879579775,
			[
				["images/bullet_rocket-sheet1.png", 7813, 47, 1, 36, 39, 1, 0.5, 0.5897436141967773,[],[],0],
				["images/bullet_rocket-sheet1.png", 7813, 1, 1, 44, 38, 1, 0.4318181872367859, 0.5526315569877625,[],[],0],
				["images/bullet_rocket-sheet1.png", 7813, 85, 1, 36, 39, 1, 0.5, 0.5384615659713745,[],[],0]
			]
			]
,			[
			"powerup",
			15,
			true,
			1,
			0,
			false,
			6223977226593227,
			[
				["images/bullet_rocket-sheet0.png", 18860, 1, 1, 50, 50, 1, 0.5, 0.5400000214576721,[],[],0],
				["images/bullet_rocket-sheet0.png", 18860, 53, 1, 50, 50, 1, 0.4399999976158142, 0.5,[],[],0],
				["images/bullet_rocket-sheet0.png", 18860, 1, 53, 50, 50, 1, 0.5, 0.5199999809265137,[],[],0],
				["images/bullet_rocket-sheet0.png", 18860, 53, 53, 50, 50, 1, 0.4799999892711639, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6900556731910963,
		[],
		null
	]
,	[
		"t3",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			24,
			false,
			1,
			0,
			false,
			7695415882600414,
			[
				["images/bullet_rocket-sheet1.png", 7813, 47, 1, 36, 39, 1, 0.0833333358168602, 0.410256415605545,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 121, 411, 58, 68, 1, 0.3103448152542114, 0.455882340669632,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 313, 109, 67, 102, 1, 0.3731343150138855, 0.5,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 416, 215, 95, 133, 1, 0.4000000059604645, 0.4962406158447266,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 1, 1, 118, 166, 1, 0.3898304998874664, 0.5240963697433472,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 359, 1, 136, 194, 1, 0.3897058963775635, 0.5051546096801758,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 158, 1, 157, 212, 1, 0.3885350227355957, 0.4952830076217651,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 1, 237, 165, 233, 1, 0.3939394056797028, 0.4935622215270996,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 1, 1, 177, 234, 1, 0.3841807842254639, 0.4871794879436493,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 335, 237, 155, 231, 1, 0.3612903356552124, 0.4978354871273041,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 296, 215, 118, 206, 1, 0.347457617521286, 0.5728155374526978,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 391, 1, 70, 106, 1, 0.228571429848671, 0.4905660450458527,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 241, 1, 73, 106, 1, 0.2876712381839752, 0.4811320900917053,[],[],0]
			]
			]
,			[
			"Powerup",
			24,
			false,
			1,
			0,
			false,
			443735442811587,
			[
				["images/bulletexplode-sheet0.png", 213968, 335, 470, 36, 39, 1, 0.5277777910232544, 0.5384615659713745,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 181, 411, 58, 68, 1, 0.5862069129943848, 0.529411792755127,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 382, 109, 67, 102, 1, 0.611940324306488, 0.5490196347236633,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 416, 350, 95, 133, 1, 0.5684210658073425, 0.5338345766067505,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 121, 1, 118, 166, 1, 0.5254237055778503, 0.5542168617248535,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 158, 215, 136, 194, 1, 0.5073529481887817, 0.530927836894989,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 317, 1, 157, 212, 1, 0.4904458522796631, 0.5188679099082947,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 168, 237, 165, 233, 1, 0.4909090995788574, 0.5150214433670044,[],[],0],
				["images/bulletexplode-sheet0.png", 213968, 180, 1, 177, 234, 1, 0.4745762646198273, 0.5085470080375671,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 1, 1, 155, 231, 1, 0.4645161330699921, 0.5194805264472961,[],[],0],
				["images/bulletexplode-sheet1.png", 232547, 1, 234, 118, 206, 1, 0.4830508530139923, 0.5970873832702637,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 241, 109, 70, 106, 1, 0.4571428596973419, 0.5377358198165894,[],[],0],
				["images/bulletexplode-sheet2.png", 105350, 316, 1, 73, 106, 1, 0.5068492889404297, 0.5283018946647644,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2462422520409217,
		[],
		null
	]
,	[
		"t4",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			24,
			false,
			1,
			0,
			false,
			6698465959587721,
			[
				["images/bulletgamora2-sheet0.png", 106562, 1, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet0.png", 106562, 192, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet0.png", 106562, 1, 179, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet0.png", 106562, 192, 179, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet1.png", 89072, 1, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet1.png", 89072, 192, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet1.png", 89072, 1, 179, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet1.png", 89072, 192, 179, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet2.png", 19874, 1, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0],
				["images/bulletgamora2-sheet2.png", 19874, 192, 1, 189, 176, 1, 0.5026454925537109, 0.5,[],[0.07936549186706543,-0.3409090042114258,0.3703705072402954,-0.125,0.354497492313385,0.1818180084228516,0.09523850679397583,0.3181819915771484],0]
			]
			]
,			[
			"powerup",
			5,
			false,
			1,
			0,
			false,
			8366016436594221,
			[
				["images/bullet_gamora-sheet0.png", 229888, 164, 1, 161, 157, 1, 0.5031055808067322, 0.5031847357749939,[],[0.07890540361404419,-0.3440937399864197,0.3699104189872742,-0.1281847357749939,0.3540374040603638,0.1786332726478577,0.09477841854095459,0.3149972558021545],0],
				["images/bullet_gamora-sheet0.png", 229888, 159, 160, 156, 156, 1, 0.5, 0.5,[],[0.08201098442077637,-0.3409090042114258,0.3730159997940064,-0.125,0.357142984867096,0.1818180084228516,0.09788399934768677,0.3181819915771484],0],
				["images/bullet_gamora-sheet0.png", 229888, 155, 318, 152, 154, 1, 0.5, 0.5,[],[0.08201098442077637,-0.3409090042114258,0.3730159997940064,-0.125,0.357142984867096,0.1818180084228516,0.09788399934768677,0.3181819915771484],0],
				["images/bullet_gamora-sheet0.png", 229888, 327, 159, 161, 156, 1, 0.5031055808067322, 0.5,[],[0.07890540361404419,-0.3409090042114258,0.3699104189872742,-0.125,0.3540374040603638,0.1818180084228516,0.09477841854095459,0.3181819915771484],0]
			]
			]
		],
		[
		],
		false,
		false,
		6998078105655638,
		[],
		null
	]
,	[
		"t5",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"default",
			24,
			true,
			1,
			0,
			false,
			7821199460951812,
			[
				["images/bullet_rocket-sheet1.png", 7813, 47, 1, 36, 39, 1, 0.5, 0.5897436141967773,[],[],0],
				["images/bullet_rocket-sheet1.png", 7813, 1, 1, 44, 38, 1, 0.5, 0.5789473652839661,[],[],0],
				["images/bullet_rocket-sheet1.png", 7813, 85, 1, 36, 39, 1, 0.5, 0.5897436141967773,[],[],0]
			]
			]
,			[
			"powerup",
			24,
			true,
			1,
			0,
			false,
			2309711975487401,
			[
				["images/bullet_-sheet0.png", 19073, 1, 1, 50, 50, 1, 0.5, 0.5400000214576721,[],[],0],
				["images/bullet_-sheet0.png", 19073, 53, 1, 50, 50, 1, 0.4600000083446503, 0.5,[],[],0],
				["images/bullet_-sheet0.png", 19073, 1, 53, 50, 50, 1, 0.5, 0.5199999809265137,[],[],0],
				["images/bullet_-sheet0.png", 19073, 53, 53, 50, 50, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4255170181847304,
		[],
		null
	]
,	[
		"t6",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			24,
			true,
			1,
			0,
			false,
			5280505034777196,
			[
				["images/enemybullet-sheet0.png", 203123, 470, 317, 36, 39, 1, 0.5, 0.5897436141967773,[],[],0],
				["images/enemybullet-sheet0.png", 203123, 310, 437, 44, 38, 1, 0.4318181872367859, 0.5526315569877625,[],[],0],
				["images/enemybullet-sheet0.png", 203123, 470, 358, 36, 39, 1, 0.5, 0.5384615659713745,[],[],0]
			]
			]
,			[
			"Boss",
			10,
			false,
			1,
			0,
			false,
			8656498796878372,
			[
				["images/enemybullet-sheet0.png", 203123, 1, 1, 161, 157, 1, 0.4658385217189789, 0.4777069985866547,[],[-5.364418029785156e-007,-0.203821986913681,0.385093480348587,-0.1082800030708313,0.4037264883518219,0.1592359840869904,4.76837158203125e-007,0.3057329952716827],0],
				["images/enemybullet-sheet0.png", 203123, 327, 159, 156, 156, 1, 0.4551281929016113, 0.4807692170143127,[],[0.01070979237556458,-0.2068842053413391,0.3958038091659546,-0.1113422214984894,0.4144368171691895,0.1561737656593323,0.01071080565452576,0.3026707768440247],0],
				["images/enemybullet-sheet0.png", 203123, 161, 160, 152, 154, 1, 0.4539473652839661, 0.4805194735527039,[],[0.01189061999320984,-0.2066344618797302,0.3969846367835999,-0.1110924780368805,0.4156176447868347,0.1564235091209412,0.01189163327217102,0.3029205203056335],0],
				["images/enemybullet-sheet0.png", 203123, 327, 1, 161, 156, 1, 0.4720496833324432, 0.4807692170143127,[],[-0.006211698055267334,-0.2068842053413391,0.3788823187351227,-0.1113422214984894,0.3975153267383575,0.1561737656593323,-0.006210684776306152,0.3026707768440247],0],
				["images/enemybullet-sheet0.png", 203123, 164, 1, 161, 157, 1, 0.4596273303031921, 0.4777069985866547,[],[0.006210654973983765,-0.203821986913681,0.3913046717643738,-0.1082800030708313,0.4099376797676086,0.1592359840869904,0.006211668252944946,0.3057329952716827],0],
				["images/enemybullet-sheet0.png", 203123, 1, 160, 158, 154, 1, 0.4556961953639984, 0.4740259647369385,[],[0.01014178991317749,-0.2001409530639648,0.3952358067035675,-0.1045989692211151,0.4138688147068024,0.1629170179367065,0.01014280319213867,0.3094140291213989],0],
				["images/enemybullet-sheet0.png", 203123, 1, 316, 153, 142, 1, 0.4575163424015045, 0.4366197288036346,[],[0.008321642875671387,-0.162734717130661,0.3934156596660614,-0.06719273328781128,0.4120486676692963,0.2003232538700104,0.008322656154632568,0.3468202650547028],0],
				["images/enemybullet-sheet0.png", 203123, 156, 316, 152, 130, 1, 0.460526317358017, 0.3846153914928436,[],[0.005311667919158936,-0.11073037981987,0.390405684709549,-0.01518839597702026,0.4090386927127838,0.2523275911808014,0.005312681198120117,0.3988246023654938],0],
				["images/enemybullet-sheet0.png", 203123, 310, 317, 158, 118, 1, 0.4810126721858978, 0.3220339119434357,[],[-0.01517468690872192,-0.04814890027046204,0.3699193298816681,0.0473930835723877,0.388552337884903,0.3149090707302094,-0.01517367362976074,0.4614060819149017],0],
				["images/enemybullet-sheet1.png", 5231, 0, 0, 130, 121, 1, 0.5384615659713745, 0.3471074402332306,[],[-0.07262358069419861,-0.07322242856025696,0.3124704360961914,0.02231955528259277,0.3311034440994263,0.2898355424404144,-0.07262256741523743,0.4363325536251068],0]
			]
			]
		],
		[
		[
			"Bullet",
			cr.behaviors.Bullet,
			81035809452422
		]
		],
		false,
		false,
		1873591876817869,
		[],
		null
	]
,	[
		"t7",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			24,
			false,
			1,
			0,
			false,
			6917081286164195,
			[
				["images/enemybullet-sheet0.png", 203123, 470, 317, 36, 39, 1, 0.0833333358168602, 0.410256415605545,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 408, 337, 58, 68, 1, 0.3103448152542114, 0.455882340669632,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 1, 332, 67, 102, 1, 0.3731343150138855, 0.5,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 1, 197, 95, 133, 1, 0.4000000059604645, 0.4962406158447266,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 379, 1, 118, 166, 1, 0.3898304998874664, 0.5240963697433472,[],[],0],
				["images/enemybulletexplode-sheet0.png", 110513, 359, 256, 136, 194, 1, 0.3897058963775635, 0.5051546096801758,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 1, 236, 157, 212, 1, 0.3885350227355957, 0.4952830076217651,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 1, 1, 165, 233, 1, 0.3939394056797028, 0.4935622215270996,[],[],0],
				["images/enemybulletexplode-sheet0.png", 110513, 1, 256, 177, 234, 1, 0.3841807842254639, 0.4871794879436493,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 335, 1, 155, 231, 1, 0.3612903356552124, 0.4978354871273041,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 139, 1, 118, 206, 1, 0.347457617521286, 0.5728155374526978,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 195, 317, 70, 106, 1, 0.228571429848671, 0.4905660450458527,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 195, 209, 73, 106, 1, 0.2876712381839752, 0.4811320900917053,[],[],0]
			]
			]
,			[
			"Boss",
			24,
			false,
			1,
			0,
			false,
			8760435183803503,
			[
				["images/enemybulletexplode-sheet0.png", 110513, 359, 452, 36, 39, 1, 0.0833333358168602, 0.410256415605545,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 70, 344, 58, 68, 1, 0.2931034564971924, 0.4411764740943909,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 339, 337, 67, 102, 1, 0.358208954334259, 0.4901960790157318,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 98, 209, 95, 133, 1, 0.3894736766815186, 0.4887218177318573,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 379, 169, 118, 166, 1, 0.3813559412956238, 0.5180723071098328,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 1, 1, 136, 194, 1, 0.3823529481887817, 0.5,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 160, 236, 157, 212, 1, 0.3821656107902527, 0.4905660450458527,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 168, 1, 165, 233, 1, 0.3878787755966187, 0.4892703890800476,[],[],0],
				["images/enemybulletexplode-sheet0.png", 110513, 180, 256, 177, 234, 1, 0.3785310685634613, 0.4829059839248657,[],[],0],
				["images/enemybulletexplode-sheet1.png", 211785, 335, 234, 155, 231, 1, 0.3548386991024017, 0.4935064911842346,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 259, 1, 118, 206, 1, 0.3389830589294434, 0.5679611563682556,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 267, 317, 70, 106, 1, 0.2142857164144516, 0.4811320900917053,[],[],0],
				["images/enemybulletexplode-sheet2.png", 221674, 270, 209, 73, 106, 1, 0.2739726006984711, 0.4716981053352356,[],[],0],
				["images/enemybulletexplode-sheet0.png", 110513, 1, 1, 249, 253, 1, 0.5020080208778381, 0.5019763112068176,[],[],0],
				["images/enemybulletexplode-sheet0.png", 110513, 252, 1, 249, 253, 1, 0.5020080208778381, 0.5019763112068176,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3655967678387992,
		[],
		null
	]
,	[
		"t8",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Fast",
			24,
			true,
			1,
			0,
			false,
			2947878770542719,
			[
				["images/enemybomb-sheet0.png", 15314, 1, 1, 49, 49, 1, 0.4693877696990967, 0.4897959232330322,[],[],0],
				["images/enemybomb-sheet2.png", 5599, 43, 1, 40, 40, 1, 0.449999988079071, 0.4749999940395355,[],[],0],
				["images/enemybomb-sheet1.png", 11990, 1, 1, 44, 45, 1, 0.4545454680919647, 0.4888888895511627,[],[],0]
			]
			]
,			[
			"Slow",
			24,
			true,
			1,
			0,
			false,
			6781856234437279,
			[
				["images/enemybomb-sheet0.png", 15314, 50, 52, 46, 46, 1, 0.45652174949646, 0.47826087474823,[],[],0],
				["images/enemybomb-sheet1.png", 11990, 47, 46, 41, 42, 1, 0.4634146392345429, 0.4761904776096344,[],[],0],
				["images/enemybomb-sheet2.png", 5599, 1, 1, 40, 41, 1, 0.449999988079071, 0.4878048896789551,[],[],0],
				["images/enemybomb-sheet1.png", 11990, 1, 48, 41, 41, 1, 0.4634146392345429, 0.4878048896789551,[],[],0],
				["images/enemybomb-sheet1.png", 11990, 47, 1, 43, 43, 1, 0.4651162922382355, 0.4883720874786377,[],[],0],
				["images/enemybomb-sheet0.png", 15314, 1, 52, 47, 47, 1, 0.4680851101875305, 0.4893617033958435,[],[],0],
				["images/enemybomb-sheet0.png", 15314, 52, 1, 48, 49, 1, 0.4583333432674408, 0.4897959232330322,[],[],0]
			]
			]
,			[
			"None",
			1,
			false,
			1,
			0,
			false,
			5702561489543531,
			[
				["images/enemybomb-sheet2.png", 5599, 85, 1, 40, 40, 1, 0.449999988079071, 0.4749999940395355,[],[],0]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			9382159036262434
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			6109257179149271
		]
		],
		false,
		false,
		2144620213880516,
		[],
		null
	]
,	[
		"t9",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Jump",
			15,
			true,
			1,
			0,
			false,
			255939204684164,
			[
				["images/drax-sheet0.png", 885301, 422, 696, 122, 151, 1, 0.4590163826942444, 1.125827789306641,[],[],0]
			]
			]
,			[
			"Run",
			15,
			true,
			1,
			0,
			false,
			1969911157374649,
			[
				["images/drax-sheet1.png", 1012767, 501, 144, 118, 139, 1, 0.4576271176338196, 0.9568345546722412,[],[],0],
				["images/drax-sheet1.png", 1012767, 553, 578, 103, 139, 1, 0.3203883469104767, 0.9640287756919861,[],[],0],
				["images/drax-sheet1.png", 1012767, 553, 435, 108, 141, 1, 0.4074074029922485, 0.9716312289237976,[],[],0],
				["images/drax-sheet0.png", 885301, 728, 563, 132, 141, 1, 0.3560605943202972, 1.028368830680847,[],[],0],
				["images/drax-sheet0.png", 885301, 592, 554, 134, 140, 1, 0.4253731369972229, 1.007142901420593,[],[],0],
				["images/drax-sheet0.png", 885301, 1, 558, 134, 139, 1, 0.4925373196601868, 0.9640287756919861,[],[],0],
				["images/drax-sheet1.png", 1012767, 185, 855, 92, 143, 1, 0.4021739065647125, 0.9510489702224731,[],[],0],
				["images/drax-sheet1.png", 1012767, 842, 776, 93, 144, 1, 0.3440860211849213, 0.9722222089767456,[],[],0],
				["images/drax-sheet0.png", 885301, 1, 841, 125, 145, 1, 0.2960000038146973, 0.9862068891525269,[],[],0],
				["images/drax-sheet0.png", 885301, 149, 343, 95, 134, 1, 0.4842105209827423, 1.029850721359253,[],[],0],
				["images/drax-sheet1.png", 1012767, 658, 586, 106, 134, 1, 0.5377358198165894, 1.014925360679627,[],[],0],
				["images/drax-sheet1.png", 1012767, 305, 843, 99, 135, 1, 0.5151515007019043, 0.9777777791023254,[],[],0]
			]
			]
,			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			2496245197839735,
			[
				["images/drax-sheet1.png", 1012767, 1, 1, 128, 140, 1, 0.453125, 0.9642857313156128,[["FirePoint", 0.9453125, 0.4285714328289032],["Imagepoint 1", 1.890625, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 105, 645, 99, 141, 1, 0.5959596037864685, 0.9645389914512634,[["FirePoint", 1.232323288917542, 0.432624101638794],["Imagepoint 1", 2.454545497894287, -0.5106382966041565]],[],0],
				["images/drax-sheet1.png", 1012767, 779, 1, 126, 140, 1, 0.6428571343421936, 0.9642857313156128,[["FirePoint", 1.142857193946838, 0.4285714328289032],["Imagepoint 1", 2.103174686431885, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 114, 430, 111, 141, 1, 0.7387387156486511, 0.9645389914512634,[["FirePoint", 1.3063063621521, 0.432624101638794],["Imagepoint 1", 2.396396398544312, -0.5106382966041565]],[],0],
				["images/drax-sheet0.png", 885301, 288, 479, 150, 140, 1, 0.3333333432674408, 0.9642857313156128,[["FirePoint", 0.753333330154419, 0.4285714328289032],["Imagepoint 1", 1.559999942779541, -0.5214285850524902]],[],0],
				["images/drax-sheet0.png", 885301, 549, 275, 242, 138, 1, 0.2479338794946671, 0.9637681245803833,[["FirePoint", 0.5082644820213318, 0.4202898442745209],["Imagepoint 1", 1.008264422416687, -0.54347825050354]],[],0],
				["images/drax-sheet0.png", 885301, 549, 137, 251, 136, 1, 0.2749004065990448, 0.9632353186607361,[["FirePoint", 0.525896430015564, 0.4117647111415863],["Imagepoint 1", 1.007968068122864, -0.5661764740943909]],[],0],
				["images/drax-sheet0.png", 885301, 376, 1, 257, 134, 1, 0.2918287813663483, 0.9626865386962891,[["FirePoint", 0.5369649529457092, 0.4029850661754608],["Imagepoint 1", 1.007782101631165, -0.5895522236824036]],[],0],
				["images/drax-sheet1.png", 1012767, 307, 703, 100, 138, 1, 0.6100000143051148, 0.9637681245803833,[["FirePoint", 1.240000009536743, 0.4202898442745209],["Imagepoint 1", 2.450000047683716, -0.54347825050354]],[],0],
				["images/drax-sheet2.png", 100137, 87, 1, 83, 145, 1, 0.5421686768531799, 0.9655172228813171,[["FirePoint", 1.301204800605774, 0.4482758641242981],["Imagepoint 1", 2.759036064147949, -0.4689655303955078]],[],0],
				["images/drax-sheet0.png", 885301, 254, 188, 115, 145, 1, 0.4521739184856415, 0.9655172228813171,[["FirePoint", 1, 0.4482758641242981],["Imagepoint 1", 2.052173852920532, -0.4689655303955078]],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			9493405178268437,
			[
				["images/drax-sheet1.png", 1012767, 131, 1, 128, 140, 1, 0.453125, 0.9642857313156128,[],[],0],
				["images/drax-sheet1.png", 1012767, 650, 1, 127, 140, 1, 0.4566929042339325, 0.9642857313156128,[],[],0],
				["images/drax-sheet0.png", 885301, 401, 849, 128, 141, 1, 0.4609375, 0.9645389914512634,[],[],0],
				["images/drax-sheet1.png", 1012767, 521, 1, 127, 141, 1, 0.4645669162273407, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 677, 849, 128, 141, 1, 0.46875, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 807, 849, 128, 141, 1, 0.46875, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 270, 763, 129, 141, 1, 0.4728682041168213, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 546, 696, 131, 140, 1, 0.4732824563980103, 0.9642857313156128,[],[],0],
				["images/drax-sheet0.png", 885301, 1, 699, 131, 140, 1, 0.4732824563980103, 0.9642857313156128,[],[],0],
				["images/drax-sheet0.png", 885301, 288, 621, 132, 140, 1, 0.4772727191448212, 0.9642857313156128,[],[],0],
				["images/drax-sheet0.png", 885301, 862, 563, 132, 141, 1, 0.469696968793869, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 137, 677, 131, 141, 1, 0.4656488597393036, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 679, 706, 130, 141, 1, 0.4615384638309479, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 811, 706, 130, 141, 1, 0.4615384638309479, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 134, 820, 129, 141, 1, 0.4573643505573273, 0.9645389914512634,[],[],0],
				["images/drax-sheet0.png", 885301, 546, 838, 129, 141, 1, 0.4573643505573273, 0.9645389914512634,[],[],0],
				["images/drax-sheet1.png", 1012767, 261, 1, 128, 140, 1, 0.453125, 0.9642857313156128,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			4506304015523706,
			[
				["images/drax-sheet1.png", 1012767, 937, 776, 81, 150, 1, 0.5802469253540039, 0.9333333373069763,[],[],0],
				["images/drax-sheet0.png", 885301, 937, 849, 82, 149, 1, 0.5853658318519592, 0.9328858852386475,[],[],0],
				["images/drax-sheet2.png", 100137, 1, 1, 84, 144, 1, 0.5714285969734192, 0.9513888955116272,[],[],0],
				["images/drax-sheet1.png", 1012767, 506, 859, 90, 143, 1, 0.5333333611488342, 0.9580419659614563,[],[],0],
				["images/drax-sheet1.png", 1012767, 1, 855, 93, 143, 1, 0.4838709533214569, 0.9650349617004395,[],[],0],
				["images/drax-sheet1.png", 1012767, 409, 738, 95, 144, 1, 0.4210526347160339, 0.9722222089767456,[],[],0],
				["images/drax-sheet1.png", 1012767, 638, 722, 94, 146, 1, 0.3617021143436432, 0.9726027250289917,[],[],0],
				["images/drax-sheet1.png", 1012767, 1, 506, 102, 147, 1, 0.3823529481887817, 0.9727891087532044,[],[],0],
				["images/drax-sheet1.png", 1012767, 834, 320, 108, 147, 1, 0.4074074029922485, 0.9727891087532044,[],[],0],
				["images/drax-sheet1.png", 1012767, 767, 143, 111, 148, 1, 0.4324324429035187, 0.9729729890823364,[],[],0],
				["images/drax-sheet1.png", 1012767, 880, 172, 112, 146, 1, 0.4553571343421936, 0.9794520735740662,[],[],0],
				["images/drax-sheet1.png", 1012767, 378, 285, 112, 145, 1, 0.4732142984867096, 0.9724137783050537,[],[],0],
				["images/drax-sheet1.png", 1012767, 492, 285, 112, 145, 1, 0.4821428656578064, 0.9586206674575806,[],[],0],
				["images/drax-sheet1.png", 1012767, 606, 290, 112, 143, 1, 0.4821428656578064, 0.9650349617004395,[],[],0],
				["images/drax-sheet1.png", 1012767, 220, 286, 113, 142, 1, 0.4690265357494354, 0.9577465057373047,[],[],0],
				["images/drax-sheet1.png", 1012767, 720, 293, 112, 142, 1, 0.4553571343421936, 0.9577465057373047,[],[],0],
				["images/drax-sheet1.png", 1012767, 1, 362, 111, 142, 1, 0.4414414465427399, 0.9647887349128723,[],[],0],
				["images/drax-sheet1.png", 1012767, 340, 432, 108, 144, 1, 0.4259259402751923, 0.9652777910232544,[],[],0],
				["images/drax-sheet1.png", 1012767, 663, 437, 103, 147, 1, 0.4077669978141785, 0.9659863710403442,[],[],0],
				["images/drax-sheet1.png", 1012767, 439, 587, 95, 149, 1, 0.3894736766815186, 0.9597315192222595,[],[],0],
				["images/drax-sheet1.png", 1012767, 766, 616, 94, 150, 1, 0.4255319237709045, 0.95333331823349,[],[],0],
				["images/drax-sheet1.png", 1012767, 1, 655, 91, 152, 1, 0.4725274741649628, 0.9473684430122376,[],[],0],
				["images/drax-sheet1.png", 1012767, 96, 855, 87, 152, 1, 0.517241358757019, 0.9407894611358643,[],[],0],
				["images/drax-sheet0.png", 885301, 940, 355, 82, 152, 1, 0.5609756112098694, 0.9342105388641357,[],[],0]
			]
			]
,			[
			"Fall",
			15,
			true,
			1,
			0,
			false,
			267544671387097,
			[
				["images/drax-sheet1.png", 1012767, 907, 1, 104, 169, 1, 0.4326923191547394, 0.9881656765937805,[],[],0]
			]
			]
,			[
			"Landed",
			15,
			false,
			1,
			0,
			false,
			6029942635990158,
			[
				["images/drax-sheet1.png", 1012767, 317, 578, 120, 123, 1, 0.300000011920929, 0.9593495726585388,[],[],0],
				["images/drax-sheet0.png", 885301, 265, 906, 117, 108, 1, 0.4529914557933807, 0.9537037014961243,[],[],0],
				["images/drax-sheet1.png", 1012767, 734, 768, 106, 129, 1, 0.6226415038108826, 0.961240291595459,[],[],0],
				["images/drax-sheet1.png", 1012767, 862, 633, 100, 141, 1, 0.6299999952316284, 0.9858155846595764,[],[],0]
			]
			]
,			[
			"Die",
			10,
			false,
			1,
			0,
			false,
			7087535197915164,
			[
				["images/drax-sheet0.png", 885301, 149, 479, 137, 196, 1, 0.5255474448204041, 0.9693877696990967,[],[],0],
				["images/drax-sheet0.png", 885301, 793, 355, 145, 206, 1, 0.5931034684181213, 0.9902912378311157,[],[],0],
				["images/drax-sheet0.png", 885301, 1, 343, 146, 213, 1, 0.5890411138534546, 1.018779397010803,[],[],0],
				["images/drax-sheet0.png", 885301, 802, 137, 147, 216, 1, 0.5714285969734192, 1.060185194015503,[],[],0],
				["images/drax-sheet0.png", 885301, 376, 137, 171, 200, 1, 0.5263158082962036, 1.044999957084656,[],[],0],
				["images/drax-sheet0.png", 885301, 1, 1, 181, 202, 1, 0.5524861812591553, 0.9950494766235352,[],[],0],
				["images/drax-sheet0.png", 885301, 184, 1, 190, 185, 1, 0.5736842155456543, 0.9567567706108093,[],[],0],
				["images/drax-sheet0.png", 885301, 498, 415, 206, 137, 1, 0.5339806079864502, 0.8905109763145447,[],[],0],
				["images/drax-sheet1.png", 1012767, 1, 285, 217, 75, 1, 0.4930875599384308, 0.7733333110809326,[],[],0],
				["images/drax-sheet1.png", 1012767, 105, 573, 210, 70, 1, 0.5, 0.7428571581840515,[],[],0],
				["images/drax-sheet1.png", 1012767, 94, 788, 209, 65, 1, 0.4976076483726502, 0.800000011920929,[],[],0],
				["images/drax-sheet1.png", 1012767, 598, 899, 207, 59, 1, 0.4975845515727997, 0.7796609997749329,[],[],0],
				["images/drax-sheet2.png", 100137, 257, 146, 208, 48, 1, 0.4951923191547394, 0.7291666865348816,[],[],0],
				["images/drax-sheet1.png", 1012767, 807, 928, 208, 50, 1, 0.4951923191547394, 0.7400000095367432,[],[],0],
				["images/drax-sheet1.png", 1012767, 598, 960, 207, 49, 1, 0.4975845515727997, 0.7346938848495483,[],[],0],
				["images/drax-sheet2.png", 100137, 1, 148, 208, 48, 1, 0.4951923191547394, 0.7291666865348816,[],[],0],
				["images/drax-sheet2.png", 100137, 211, 196, 207, 47, 1, 0.4975845515727997, 0.7234042286872864,[],[],0]
			]
			]
,			[
			"ShootPower",
			15,
			false,
			1,
			0,
			false,
			5471944193631349,
			[
				["images/drax-sheet1.png", 1012767, 391, 1, 128, 140, 1, 0.453125, 0.9642857313156128,[["FirePoint", 0.9453125, 0.4285714328289032],["Imagepoint 1", 1.890625, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 450, 432, 101, 153, 1, 0.4554455578327179, 0.9673202633857727,[["FirePoint", 1.079207897186279, 0.4771241843700409],["Imagepoint 1", 2.277227640151978, -0.3921568691730499]],[],0],
				["images/drax-sheet1.png", 1012767, 206, 645, 99, 141, 1, 0.5959596037864685, 0.9645389914512634,[["FirePoint", 1.232323288917542, 0.432624101638794],["Imagepoint 1", 2.454545497894287, -0.5106382966041565]],[],0],
				["images/drax-sheet1.png", 1012767, 255, 143, 121, 141, 1, 0.6280992031097412, 0.9645389914512634,[["FirePoint", 1.148760318756104, 0.432624101638794],["Imagepoint 1", 2.148760318756104, -0.5106382966041565]],[],0],
				["images/drax-sheet1.png", 1012767, 1, 143, 126, 140, 1, 0.6428571343421936, 0.9642857313156128,[["FirePoint", 1.142857193946838, 0.4285714328289032],["Imagepoint 1", 2.103174686431885, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 129, 143, 124, 140, 1, 0.6854838728904724, 0.9642857313156128,[["FirePoint", 1.193548440933228, 0.4285714328289032],["Imagepoint 1", 2.169354915618897, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 378, 143, 121, 140, 1, 0.7190082669258118, 0.9642857313156128,[["FirePoint", 1.239669442176819, 0.4285714328289032],["Imagepoint 1", 2.239669322967529, -0.5214285850524902]],[],0],
				["images/drax-sheet1.png", 1012767, 227, 430, 111, 141, 1, 0.7387387156486511, 0.9645389914512634,[["FirePoint", 1.3063063621521, 0.432624101638794],["Imagepoint 1", 2.396396398544312, -0.5106382966041565]],[],0],
				["images/drax-sheet1.png", 1012767, 874, 469, 93, 162, 1, 0.3763440847396851, 0.9691358208656311,[["FirePoint", 1.053763389587402, 0.5061728358268738],["Imagepoint 1", 2.354838609695435, -0.3148148059844971]],[],0],
				["images/drax-sheet0.png", 885301, 440, 554, 150, 140, 1, 0.3333333432674408, 0.9642857313156128,[["FirePoint", 0.753333330154419, 0.4285714328289032],["Imagepoint 1", 1.559999942779541, -0.5214285850524902]],[],0],
				["images/drax-sheet0.png", 885301, 254, 339, 242, 138, 1, 0.2479338794946671, 0.9637681245803833,[["FirePoint", 0.5082644820213318, 0.4202898442745209],["Imagepoint 1", 1.008264422416687, -0.54347825050354]],[],0],
				["images/drax-sheet0.png", 885301, 1, 205, 251, 136, 1, 0.2749004065990448, 0.9632353186607361,[["FirePoint", 0.525896430015564, 0.4117647111415863],["Imagepoint 1", 1.007968068122864, -0.5661764740943909]],[],0],
				["images/drax-sheet0.png", 885301, 635, 1, 257, 134, 1, 0.2918287813663483, 0.9626865386962891,[["FirePoint", 0.5369649529457092, 0.4029850661754608],["Imagepoint 1", 1.007782101631165, -0.5895522236824036]],[],0],
				["images/drax-sheet0.png", 885301, 894, 1, 119, 133, 1, 0.6134454011917114, 0.9624060392379761,[["FirePoint", 1.142857193946838, 0.3984962403774262],["Imagepoint 1", 2.159663915634155, -0.6015037298202515]],[],0],
				["images/drax-sheet1.png", 1012767, 536, 719, 100, 138, 1, 0.6100000143051148, 0.9637681245803833,[["FirePoint", 1.240000009536743, 0.4202898442745209],["Imagepoint 1", 2.450000047683716, -0.54347825050354]],[],0],
				["images/drax-sheet2.png", 100137, 257, 1, 81, 143, 1, 0.6296296119689941, 0.9650349617004395,[["FirePoint", 1.407407402992249, 0.440559446811676],["Imagepoint 1", 2.90123462677002, -0.4895104765892029]],[],0],
				["images/drax-sheet2.png", 100137, 172, 1, 83, 145, 1, 0.5421686768531799, 0.9655172228813171,[["FirePoint", 1.301204800605774, 0.4482758641242981],["Imagepoint 1", 2.759036064147949, -0.4689655303955078]],[],0],
				["images/drax-sheet1.png", 1012767, 768, 469, 104, 145, 1, 0.4423076808452606, 0.9655172228813171,[["FirePoint", 1.048076868057251, 0.4482758641242981],["Imagepoint 1", 2.211538553237915, -0.4689655303955078]],[],0],
				["images/drax-sheet1.png", 1012767, 650, 143, 115, 145, 1, 0.4521739184856415, 0.9655172228813171,[["FirePoint", 1, 0.4482758641242981],["Imagepoint 1", 2.052173852920532, -0.4689655303955078]],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			5598129278983256
		]
		],
		false,
		false,
		965707945555751,
		[],
		null
	]
,	[
		"t10",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Climb",
			15,
			false,
			1,
			0,
			false,
			7171969247537074,
			[
				["images/draxclimb-sheet0.png", 195494, 83, 297, 74, 153, 1, 0.8243243098258972, 0.196078434586525,[["Imagepoint 1", 1.581081032752991, 0.1633986979722977]],[],0],
				["images/draxclimb-sheet0.png", 195494, 231, 144, 91, 152, 1, 0.7472527623176575, 0.3618420958518982,[["Imagepoint 1", 1.362637400627136, 0.3289473652839661]],[],0],
				["images/draxclimb-sheet0.png", 195494, 117, 146, 84, 149, 1, 0.7023809552192688, 0.5637583732604981,[["Imagepoint 1", 1.36904764175415, 0.5302013158798218]],[],0],
				["images/draxclimb-sheet0.png", 195494, 413, 284, 81, 147, 1, 0.5555555820465088, 0.7687074542045593,[["Imagepoint 1", 1.246913552284241, 0.7346938848495483]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 287, 80, 143, 1, 0.449999988079071, 0.9440559148788452,[["Imagepoint 1", 1.149999976158142, 0.9090909361839294]],[],0],
				["images/draxclimb-sheet0.png", 195494, 324, 284, 87, 140, 1, 0.3908045887947083, 1.064285755157471,[["Imagepoint 1", 1.034482717514038, 1.028571486473084]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 149, 92, 136, 1, 0.282608687877655, 1.132352948188782,[["Imagepoint 1", 0.8913043737411499, 1.095588207244873]],[],0],
				["images/draxclimb-sheet0.png", 195494, 346, 143, 102, 139, 1, 0.1764705926179886, 1.158273339271545,[["Imagepoint 1", 0.7254902124404907, 1.122302174568176]],[],0],
				["images/draxclimb-sheet0.png", 195494, 346, 1, 109, 140, 1, 0.1192660555243492, 1.178571462631226,[["Imagepoint 1", 0.6330274939537048, 1.142857193946838]],[],0],
				["images/draxclimb-sheet0.png", 195494, 117, 1, 112, 143, 1, 0.0803571417927742, 1.153846144676209,[["Imagepoint 1", 0.5803571343421936, 1.118881106376648]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 1, 114, 146, 1, 0.0350877195596695, 1.109589099884033,[["Imagepoint 1", 0.5263158082962036, 1.075342416763306]],[],0],
				["images/draxclimb-sheet0.png", 195494, 231, 1, 113, 141, 1, 0, 1.021276593208313,[["Imagepoint 1", 0.4955752193927765, 0.9858155846595764]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6629493817232974,
		[],
		null
	]
,	[
		"t11",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Jump",
			15,
			true,
			1,
			0,
			false,
			5694255042841096,
			[
				["images/gamora-sheet0.png", 2499910, 1, 396, 133, 209, 1, 0.4360902309417725, 0.9952152967453003,[],[],0]
			]
			]
,			[
			"Run",
			15,
			true,
			1,
			0,
			false,
			2171093316643966,
			[
				["images/gamora-sheet0.png", 2499910, 1835, 1019, 158, 139, 1, 0.3101265728473663, 1.028777003288269,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1024, 1077, 157, 137, 1, 0.3821656107902527, 1.021897792816162,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1128, 1522, 98, 139, 1, 0.5408163070678711, 0.9784172773361206,[],[],0],
				["images/gamora-sheet0.png", 2499910, 193, 1241, 119, 146, 1, 0.4201680719852448, 0.9589040875434876,[],[],0],
				["images/gamora-sheet0.png", 2499910, 564, 1049, 149, 147, 1, 0.2348993271589279, 0.9795918464660645,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1301, 439, 165, 160, 1, 0.2484848499298096, 0.987500011920929,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1830, 357, 156, 180, 1, 0.3205128312110901, 1.022222280502319,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1155, 434, 144, 186, 1, 0.3888888955116272, 1.00537633895874,[],[],0],
				["images/gamora-sheet0.png", 2499910, 900, 554, 125, 196, 1, 0.5040000081062317, 0.9744898080825806,[],[],0],
				["images/gamora-sheet0.png", 2499910, 237, 1054, 117, 184, 1, 0.4786324799060822, 0.967391312122345,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1024, 1216, 146, 143, 1, 0.246575340628624, 0.9650349617004395,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1195, 622, 167, 145, 1, 0.2814371287822723, 0.9724137783050537,[],[],0]
			]
			]
,			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			782748553183305,
			[
				["images/gamora-sheet0.png", 2499910, 1183, 1107, 146, 146, 1, 0.835616409778595, 0.9794520735740662,[],[],0],
				["images/gamora-sheet0.png", 2499910, 619, 902, 161, 145, 1, 0.850931704044342, 0.9793103337287903,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1252, 962, 155, 143, 1, 0.8580645322799683, 0.9790209531784058,[],[],0],
				["images/gamora-sheet0.png", 2499910, 779, 199, 207, 208, 1, 0.695652186870575, 0.9855769276618958,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1, 271, 197, 1, 0.4981549680233002, 0.9847715497016907,[],[],0],
				["images/gamora-sheet0.png", 2499910, 779, 1, 267, 196, 1, 0.4569288492202759, 0.9846938848495483,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 200, 209, 194, 1, 0.330143541097641, 0.9845361113548279,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1392, 266, 217, 171, 1, 0.3410138189792633, 0.9824561476707459,[],[],0],
				["images/gamora-sheet0.png", 2499910, 136, 396, 200, 137, 1, 0.3549999892711639, 0.9781022071838379,[],[],0],
				["images/gamora-sheet0.png", 2499910, 274, 1515, 119, 140, 1, 0.5210084319114685, 0.9785714149475098,[],[],0],
				["images/gamora-sheet0.png", 2499910, 820, 1522, 103, 146, 1, 0.5048543810844421, 0.9794520735740662,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1950, 1160, 96, 148, 1, 0.4895833432674408, 0.9797297120094299,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1517, 102, 148, 1, 0.4705882370471954, 0.9797297120094299,[],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			5789321878831483,
			[
				["images/gamora-sheet0.png", 2499910, 1682, 1207, 113, 186, 1, 0.4955752193927765, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1835, 1160, 113, 187, 1, 0.4955752193927765, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 472, 1198, 113, 187, 1, 0.4955752193927765, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 587, 1198, 113, 187, 1, 0.4955752193927765, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 907, 1075, 115, 187, 1, 0.4956521689891815, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1566, 1099, 114, 187, 1, 0.5, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1049, 116, 187, 1, 0.5, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1928, 1, 119, 187, 1, 0.4873949587345123, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1590, 910, 122, 187, 1, 0.4836065471172333, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 860, 123, 187, 1, 0.4796747863292694, 0.9732620120048523,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1067, 770, 124, 186, 1, 0.4758064448833466, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 782, 902, 123, 186, 1, 0.4796747863292694, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 441, 939, 121, 186, 1, 0.4793388545513153, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1714, 1019, 119, 186, 1, 0.4873949587345123, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 119, 1053, 116, 186, 1, 0.5, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 715, 1090, 115, 186, 1, 0.4956521689891815, 0.9731183052062988,[],[],0],
				["images/gamora-sheet0.png", 2499910, 356, 1127, 114, 186, 1, 0.5, 0.9731183052062988,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			2876461790289423,
			[
				["images/gamora-sheet0.png", 2499910, 907, 922, 150, 151, 1, 0.3400000035762787, 0.940397322177887,[],[],0],
				["images/gamora-sheet0.png", 2499910, 126, 903, 155, 148, 1, 0.3225806355476379, 0.9527027010917664,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1640, 762, 163, 146, 1, 0.3128834366798401, 0.9589040875434876,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1027, 622, 166, 146, 1, 0.2891566157341003, 0.965753436088562,[],[],0],
				["images/gamora-sheet0.png", 2499910, 301, 599, 165, 148, 1, 0.260606050491333, 0.9729729890823364,[],[],0],
				["images/gamora-sheet0.png", 2499910, 744, 752, 161, 148, 1, 0.2484472095966339, 0.9797297120094299,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1805, 867, 157, 150, 1, 0.2611464858055115, 0.9800000190734863,[],[],0],
				["images/gamora-sheet0.png", 2499910, 465, 782, 152, 155, 1, 0.3026315867900848, 0.9806451797485352,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 690, 144, 168, 1, 0.3472222089767456, 0.9821428656578064,[],[],0],
				["images/gamora-sheet0.png", 2499910, 605, 600, 137, 177, 1, 0.3868613243103027, 0.9830508232116699,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1195, 769, 131, 181, 1, 0.4122137427330017, 0.9779005646705627,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1460, 778, 128, 184, 1, 0.4296875, 0.967391312122345,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1328, 778, 130, 182, 1, 0.4230769276618958, 0.9725274443626404,[],[],0],
				["images/gamora-sheet0.png", 2499910, 468, 600, 135, 180, 1, 0.4000000059604645, 0.9666666388511658,[],[],0],
				["images/gamora-sheet0.png", 2499910, 757, 548, 141, 174, 1, 0.3758865296840668, 0.9655172228813171,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1885, 539, 148, 167, 1, 0.3445945978164673, 0.970059871673584,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1885, 708, 154, 157, 1, 0.3116883039474487, 0.9681528806686401,[],[],0],
				["images/gamora-sheet0.png", 2499910, 907, 770, 158, 150, 1, 0.2784810066223145, 0.9666666388511658,[],[],0],
				["images/gamora-sheet0.png", 2499910, 147, 749, 159, 152, 1, 0.2578616440296173, 0.9605262875556946,[],[],0],
				["images/gamora-sheet0.png", 2499910, 136, 535, 163, 153, 1, 0.2638036906719208, 0.9607843160629273,[],[],0],
				["images/gamora-sheet0.png", 2499910, 592, 443, 163, 155, 1, 0.2822085916996002, 0.948387086391449,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1609, 530, 160, 156, 1, 0.293749988079071, 0.942307710647583,[],[],0],
				["images/gamora-sheet0.png", 2499910, 308, 749, 155, 154, 1, 0.3225806355476379, 0.9415584206581116,[],[],0]
			]
			]
,			[
			"Fall",
			15,
			true,
			1,
			0,
			false,
			4437093390167756,
			[
				["images/gamora-sheet0.png", 2499910, 1771, 539, 112, 221, 1, 0.4285714328289032, 1.027149319648743,[],[],0]
			]
			]
,			[
			"Landed",
			15,
			false,
			1,
			0,
			false,
			8005485878207406,
			[
				["images/gamora-sheet0.png", 2499910, 1468, 439, 139, 182, 1, 0.2877697944641113, 0.9725274443626404,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1241, 190, 110, 1, 0.2947368323802948, 0.9545454382896423,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1059, 958, 191, 117, 1, 0.3246073424816132, 1,[],[],0],
				["images/gamora-sheet0.png", 2499910, 338, 465, 191, 132, 1, 0.3455497324466705, 0.9621211886405945,[],[],0],
				["images/gamora-sheet0.png", 2499910, 963, 409, 190, 143, 1, 0.3578947484493256, 0.9860140085220337,[],[],0]
			]
			]
,			[
			"Die",
			10,
			false,
			1,
			0,
			false,
			734608134237318,
			[
				["images/gamora-sheet0.png", 2499910, 592, 235, 167, 206, 1, 0.4311377108097076, 0.9757281541824341,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1197, 228, 193, 204, 1, 0.4352331459522247, 0.9950980544090271,[],[],0],
				["images/gamora-sheet0.png", 2499910, 423, 235, 167, 228, 1, 0.4970059990882874, 1.021929860115051,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1531, 1, 181, 263, 1, 0.4530386626720429, 1.057034254074097,[],[],0],
				["images/gamora-sheet0.png", 2499910, 547, 1, 230, 232, 1, 0.395652174949646, 1.038793087005615,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1317, 1, 212, 225, 1, 0.4858490526676178, 0.995555579662323,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1714, 1, 212, 205, 1, 0.5235849022865295, 0.9658536314964294,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1714, 208, 269, 147, 1, 0.4126394093036652, 0.8979591727256775,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1364, 688, 274, 88, 1, 0.3905109465122223, 0.7045454382896423,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1172, 1257, 275, 70, 1, 0.3781818151473999, 0.7428571581840515,[],[],0],
				["images/gamora-sheet0.png", 2499910, 702, 1278, 272, 65, 1, 0.3786764740943909, 0.800000011920929,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1172, 1329, 271, 63, 1, 0.3763837516307831, 0.7142857313156128,[],[],0],
				["images/gamora-sheet0.png", 2499910, 702, 1345, 271, 63, 1, 0.3763837516307831, 0.6349206566810608,[],[],0],
				["images/gamora-sheet0.png", 2499910, 314, 1387, 271, 62, 1, 0.3763837516307831, 0.6451612710952759,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1389, 271, 62, 1, 0.3763837516307831, 0.6612903475761414,[],[],0],
				["images/gamora-sheet0.png", 2499910, 547, 1474, 271, 61, 1, 0.3763837516307831, 0.6557376980781555,[],[],0],
				["images/gamora-sheet0.png", 2499910, 975, 1394, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1248, 1394, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1521, 1395, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 587, 1410, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 274, 1451, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1, 1453, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 860, 1458, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1133, 1458, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1406, 1459, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1679, 1459, 271, 62, 1, 0.3763837516307831, 0.6290322542190552,[],[],0]
			]
			]
,			[
			"ShootPower",
			15,
			false,
			1,
			0,
			false,
			8588866931327517,
			[
				["images/gamora-sheet0.png", 2499910, 1331, 1109, 146, 146, 1, 0.8287671208381653, 0.9726027250289917,[],[],0],
				["images/gamora-sheet0.png", 2499910, 283, 905, 156, 147, 1, 0.8461538553237915, 0.9727891087532044,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1409, 964, 155, 143, 1, 0.85161292552948, 0.9720279574394226,[],[],0],
				["images/gamora-sheet0.png", 2499910, 988, 199, 207, 208, 1, 0.6908212304115295, 0.9807692170143127,[],[],0],
				["images/gamora-sheet0.png", 2499910, 274, 1, 271, 197, 1, 0.4944649338722229, 0.9796954393386841,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1048, 1, 267, 196, 1, 0.4531835317611694, 0.9795918464660645,[],[],0],
				["images/gamora-sheet0.png", 2499910, 212, 200, 209, 194, 1, 0.3253588378429413, 0.9793814420700073,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1611, 357, 217, 171, 1, 0.3364055156707764, 0.9766082167625427,[],[],0],
				["images/gamora-sheet0.png", 2499910, 761, 409, 200, 137, 1, 0.3499999940395355, 0.970802903175354,[],[],0],
				["images/gamora-sheet0.png", 2499910, 395, 1515, 119, 140, 1, 0.5126050710678101, 0.9714285731315613,[],[],0],
				["images/gamora-sheet0.png", 2499910, 925, 1522, 103, 146, 1, 0.4951456189155579, 0.9726027250289917,[],[],0],
				["images/gamora-sheet0.png", 2499910, 1030, 1522, 96, 148, 1, 0.4791666567325592, 0.9729729890823364,[],[],0],
				["images/gamora-sheet0.png", 2499910, 105, 1517, 102, 148, 1, 0.4607843160629273, 0.9729729890823364,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			1958308011776134
		]
		],
		false,
		false,
		4080137790972313,
		[],
		null
	]
,	[
		"t12",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Climb",
			15,
			false,
			1,
			0,
			false,
			695594089444003,
			[
				["images/gamoraclimb-sheet1.png", 68471, 301, 1, 82, 156, 1, 0.7560975551605225, 0.2115384638309479,[["Imagepoint 1", 1.426829218864441, 0.1794871836900711]],[],0],
				["images/gamoraclimb-sheet1.png", 68471, 109, 1, 98, 155, 1, 0.6734693646430969, 0.3677419424057007,[["Imagepoint 1", 1.234693884849548, 0.3354838788509369]],[],0],
				["images/gamoraclimb-sheet1.png", 68471, 209, 1, 90, 151, 1, 0.6333333253860474, 0.5629138946533203,[["Imagepoint 1", 1.244444489479065, 0.5298013091087341]],[],0],
				["images/gamoraclimb-sheet1.png", 68471, 1, 1, 106, 148, 1, 0.4056603908538818, 0.7635135054588318,[["Imagepoint 1", 0.9245283007621765, 0.7297297120094299]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 250, 333, 126, 145, 1, 0.2698412835597992, 0.9310345053672791,[["Imagepoint 1", 0.7063491940498352, 0.8965517282485962]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 115, 285, 133, 141, 1, 0.1804511249065399, 1.04964542388916,[["Imagepoint 1", 0.5939849615097046, 1.014184355735779]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 115, 144, 142, 139, 1, 0.1267605572938919, 1.107913613319397,[["Imagepoint 1", 0.51408451795578, 1.071942448616028]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 160, 1, 156, 141, 1, 0.05769230797886848, 1.134751796722412,[["Imagepoint 1", 0.410256415605545, 1.099290728569031]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 1, 1, 157, 141, 1, 0.0573248416185379, 1.156028389930725,[["Imagepoint 1", 0.4076433181762695, 1.120567321777344]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 259, 187, 137, 144, 1, 0.05839416012167931, 1.131944417953491,[["Imagepoint 1", 0.459854006767273, 1.097222208976746]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 1, 332, 111, 165, 1, 0.02702702768146992, 1.078787922859192,[["Imagepoint 1", 0.522522509098053, 1.048484802246094]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 398, 187, 109, 177, 1, -0.01834862306714058, 1.00564968585968,[["Imagepoint 1", 0.4862385392189026, 0.9774011373519898]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 318, 1, 117, 184, 1, -0.03418803587555885, 1.00543475151062,[["Imagepoint 1", 0.4358974397182465, 0.97826087474823]],[],0],
				["images/gamoraclimb-sheet0.png", 207940, 1, 144, 112, 186, 1, -0.02678571455180645, 1.00537633895874,[["Imagepoint 1", 0.4642857015132904, 0.9784946441650391]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2657262751786539,
		[],
		null
	]
,	[
		"t13",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Jump",
			15,
			true,
			1,
			0,
			false,
			7107331490524929,
			[
				["images/groot-sheet0.png", 2810068, 1343, 930, 279, 389, 1, 0.5806451439857483, 0.9948586225509644,[],[],0]
			]
			]
,			[
			"Run",
			15,
			true,
			1,
			0,
			false,
			9407948188033907,
			[
				["images/groot-sheet1.png", 2666044, 1, 1, 314, 294, 1, 0.662420392036438, 0.976190447807312,[],[],0],
				["images/groot-sheet1.png", 2666044, 318, 586, 312, 289, 1, 0.6602563858032227, 0.9653978943824768,[],[],0],
				["images/groot-sheet2.png", 2113937, 862, 283, 294, 280, 1, 0.6700680255889893, 0.9714285731315613,[],[],0],
				["images/groot-sheet2.png", 2113937, 285, 581, 277, 277, 1, 0.5992779731750488, 0.9855595827102661,[],[],0],
				["images/groot-sheet1.png", 2666044, 1804, 1196, 233, 281, 1, 0.4935622215270996, 0.9857650995254517,[],[],0],
				["images/groot-sheet0.png", 2810068, 1860, 317, 176, 301, 1, 0.4147727191448212, 0.9435216188430786,[],[],0],
				["images/groot-sheet0.png", 2810068, 1829, 1, 217, 314, 1, 0.5161290168762207, 0.9363057613372803,[],[],0],
				["images/groot-sheet1.png", 2666044, 1567, 875, 281, 319, 1, 0.4804270565509796, 0.9498432874679565,[],[],0],
				["images/groot-sheet0.png", 2810068, 393, 942, 312, 319, 1, 0.464743584394455, 0.9655172228813171,[],[],0],
				["images/groot-sheet0.png", 2810068, 1021, 987, 318, 310, 1, 0.4654088020324707, 0.9870967864990234,[],[],0],
				["images/groot-sheet1.png", 2666044, 632, 609, 315, 286, 1, 0.4920634925365448, 1.048951029777527,[],[],0],
				["images/groot-sheet1.png", 2666044, 1241, 585, 314, 288, 1, 0.5668789744377136, 1.017361164093018,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 879, 312, 286, 1, 0.6057692170143127, 0.996503472328186,[],[],0],
				["images/groot-sheet2.png", 2113937, 862, 1, 299, 280, 1, 0.6120401620864868, 0.9964285492897034,[],[],0],
				["images/groot-sheet2.png", 2113937, 1052, 845, 279, 270, 1, 0.5627239942550659, 1.014814853668213,[],[],0],
				["images/groot-sheet1.png", 2666044, 1850, 875, 195, 274, 1, 0.5589743852615356, 1.007299304008484,[],[],0],
				["images/groot-sheet0.png", 2810068, 358, 524, 144, 291, 1, 0.5694444179534912, 0.962199330329895,[],[],0],
				["images/groot-sheet1.png", 2666044, 1878, 294, 158, 303, 1, 0.5506328940391541, 0.9438943862915039,[],[],0],
				["images/groot-sheet2.png", 2113937, 1333, 874, 212, 310, 1, 0.5094339847564697, 0.948387086391449,[],[],0],
				["images/groot-sheet2.png", 2113937, 564, 621, 242, 312, 1, 0.4958677589893341, 0.9711538553237915,[],[],0],
				["images/groot-sheet2.png", 2113937, 1723, 293, 259, 312, 1, 0.5057914853096008, 0.9903846383094788,[],[],0],
				["images/groot-sheet2.png", 2113937, 1754, 1, 281, 290, 1, 0.5409252643585205, 1.06551718711853,[],[],0],
				["images/groot-sheet1.png", 2666044, 1241, 306, 308, 261, 1, 0.5616883039474487, 1.160919547080994,[],[],0],
				["images/groot-sheet1.png", 2666044, 1551, 304, 325, 279, 1, 0.6153846383094788, 1.053763389587402,[],[],0]
			]
			]
,			[
			"Shoot",
			20,
			false,
			1,
			0,
			false,
			8038262484690518,
			[
				["images/groot-sheet0.png", 2810068, 323, 1263, 322, 302, 1, 0.5745341777801514, 0.9370861053466797,[],[],0],
				["images/groot-sheet2.png", 2113937, 282, 1, 297, 286, 1, 0.6565656661987305, 0.9545454382896423,[],[],0],
				["images/groot-sheet2.png", 2113937, 1136, 565, 287, 278, 1, 0.6445993185043335, 0.9604316353797913,[],[],0],
				["images/groot-sheet2.png", 2113937, 1, 581, 282, 274, 1, 0.631205677986145, 0.959854006767273,[],[],0],
				["images/groot-sheet2.png", 2113937, 1, 308, 278, 271, 1, 0.6258992552757263, 0.9594095945358276,[],[],0],
				["images/groot-sheet0.png", 2810068, 647, 1308, 331, 289, 1, 0.6435045599937439, 0.9238754510879517,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 1248, 320, 308, 1, 0.3843750059604645, 0.9155844449996948,[],[],0],
				["images/groot-sheet0.png", 2810068, 1746, 1556, 299, 303, 1, 0.3846153914928436, 0.9372937083244324,[],[],0],
				["images/groot-sheet1.png", 2666044, 1501, 1196, 301, 290, 1, 0.3189368844032288, 0.9620689749717712,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 1558, 319, 291, 1, 0.5015674233436585, 0.9209622144699097,[],[],0],
				["images/groot-sheet1.png", 2666044, 598, 1185, 293, 298, 1, 0.5836177468299866, 0.8859060406684876,[],[],0],
				["images/groot-sheet2.png", 2113937, 1464, 1, 288, 287, 1, 0.5972222089767456, 0.9024389982223511,[],[],0],
				["images/groot-sheet2.png", 2113937, 1704, 607, 267, 285, 1, 0.5617977380752564, 0.9263157844543457,[],[],0],
				["images/groot-sheet2.png", 2113937, 1761, 1177, 206, 289, 1, 0.3932038843631744, 0.9377162456512451,[],[],0],
				["images/groot-sheet1.png", 2666044, 1856, 1, 171, 291, 1, 0.3040935695171356, 0.962199330329895,[],[],0],
				["images/groot-sheet2.png", 2113937, 1454, 290, 267, 303, 1, 0.4157303273677826, 0.9438943862915039,[],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			6858601914060851,
			[
				["images/groot-sheet1.png", 2666044, 1466, 1488, 280, 305, 1, 0.4785714149475098, 0.9442622661590576,[],[],0],
				["images/groot-sheet1.png", 2666044, 286, 1503, 279, 305, 1, 0.4802867472171783, 0.9442622661590576,[],[],0],
				["images/groot-sheet2.png", 2113937, 1, 1, 279, 305, 1, 0.4802867472171783, 0.9442622661590576,[],[],0],
				["images/groot-sheet2.png", 2113937, 581, 1, 279, 304, 1, 0.4802867472171783, 0.9440789222717285,[],[],0],
				["images/groot-sheet1.png", 2666044, 1748, 1488, 281, 303, 1, 0.4839857518672943, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 1181, 1484, 283, 303, 1, 0.4840989410877228, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 297, 1198, 287, 303, 1, 0.4843205511569977, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 645, 305, 292, 302, 1, 0.482876718044281, 0.943708598613739,[],[],0],
				["images/groot-sheet1.png", 2666044, 912, 1163, 295, 302, 1, 0.4813559353351593, 0.943708598613739,[],[],0],
				["images/groot-sheet1.png", 2666044, 1266, 875, 299, 301, 1, 0.47826087474823, 0.9435216188430786,[],[],0],
				["images/groot-sheet1.png", 2666044, 1551, 1, 303, 301, 1, 0.4785478413105011, 0.9435216188430786,[],[],0],
				["images/groot-sheet1.png", 2666044, 940, 1, 305, 301, 1, 0.4786885380744934, 0.9435216188430786,[],[],0],
				["images/groot-sheet0.png", 2810068, 980, 1585, 307, 301, 1, 0.4788273572921753, 0.9435216188430786,[],[],0],
				["images/groot-sheet0.png", 2810068, 631, 1599, 307, 301, 1, 0.4788273572921753, 0.9435216188430786,[],[],0],
				["images/groot-sheet0.png", 2810068, 322, 1567, 307, 302, 1, 0.4788273572921753, 0.943708598613739,[],[],0],
				["images/groot-sheet1.png", 2666044, 633, 1, 305, 302, 1, 0.4786885380744934, 0.943708598613739,[],[],0],
				["images/groot-sheet1.png", 2666044, 1247, 1, 302, 303, 1, 0.4801324605941773, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 940, 304, 299, 303, 1, 0.47826087474823, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 1167, 294, 303, 1, 0.4795918464660645, 0.9438943862915039,[],[],0],
				["images/groot-sheet1.png", 2666044, 1209, 1178, 290, 304, 1, 0.4793103337287903, 0.9440789222717285,[],[],0],
				["images/groot-sheet1.png", 2666044, 893, 1467, 286, 304, 1, 0.4790209829807282, 0.9440789222717285,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 1472, 283, 305, 1, 0.4805653691291809, 0.9442622661590576,[],[],0],
				["images/groot-sheet1.png", 2666044, 586, 1485, 281, 305, 1, 0.4804270565509796, 0.9442622661590576,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			4774408679720248,
			[
				["images/groot-sheet1.png", 2666044, 317, 1, 314, 294, 1, 0.662420392036438, 0.976190447807312,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 588, 312, 289, 1, 0.6602563858032227, 0.9653978943824768,[],[],0],
				["images/groot-sheet2.png", 2113937, 1158, 283, 294, 280, 1, 0.6700680255889893, 0.9714285731315613,[],[],0],
				["images/groot-sheet2.png", 2113937, 1425, 595, 277, 277, 1, 0.5992779731750488, 0.9855595827102661,[],[],0],
				["images/groot-sheet2.png", 2113937, 1761, 894, 233, 281, 1, 0.4935622215270996, 0.9857650995254517,[],[],0],
				["images/groot-sheet0.png", 2810068, 1860, 620, 176, 301, 1, 0.4147727191448212, 0.9435216188430786,[],[],0],
				["images/groot-sheet2.png", 2113937, 282, 860, 217, 314, 1, 0.5161290168762207, 0.9363057613372803,[],[],0],
				["images/groot-sheet1.png", 2666044, 315, 877, 281, 319, 1, 0.4804270565509796, 0.9498432874679565,[],[],0],
				["images/groot-sheet0.png", 2810068, 707, 987, 312, 319, 1, 0.464743584394455, 0.9655172228813171,[],[],0],
				["images/groot-sheet0.png", 2810068, 1624, 1244, 318, 310, 1, 0.4654088020324707, 0.9870967864990234,[],[],0],
				["images/groot-sheet1.png", 2666044, 949, 875, 315, 286, 1, 0.4920634925365448, 1.048951029777527,[],[],0],
				["images/groot-sheet1.png", 2666044, 1557, 585, 314, 288, 1, 0.5668789744377136, 1.017361164093018,[],[],0],
				["images/groot-sheet1.png", 2666044, 598, 897, 312, 286, 1, 0.6057692170143127, 0.996503472328186,[],[],0],
				["images/groot-sheet2.png", 2113937, 1163, 1, 299, 280, 1, 0.6120401620864868, 0.9964285492897034,[],[],0],
				["images/groot-sheet2.png", 2113937, 1, 857, 279, 270, 1, 0.5627239942550659, 1.014814853668213,[],[],0],
				["images/groot-sheet2.png", 2113937, 1278, 1186, 195, 274, 1, 0.5589743852615356, 1.007299304008484,[],[],0],
				["images/groot-sheet2.png", 2113937, 391, 1302, 144, 291, 1, 0.5694444179534912, 0.962199330329895,[],[],0],
				["images/groot-sheet2.png", 2113937, 1475, 1206, 158, 303, 1, 0.5506328940391541, 0.9438943862915039,[],[],0],
				["images/groot-sheet2.png", 2113937, 1547, 894, 212, 310, 1, 0.5094339847564697, 0.948387086391449,[],[],0],
				["images/groot-sheet2.png", 2113937, 808, 828, 242, 312, 1, 0.4958677589893341, 0.9711538553237915,[],[],0],
				["images/groot-sheet2.png", 2113937, 565, 307, 259, 312, 1, 0.5057914853096008, 0.9903846383094788,[],[],0],
				["images/groot-sheet2.png", 2113937, 282, 289, 281, 290, 1, 0.5409252643585205, 1.06551718711853,[],[],0],
				["images/groot-sheet2.png", 2113937, 826, 565, 308, 261, 1, 0.5616883039474487, 1.160919547080994,[],[],0],
				["images/groot-sheet1.png", 2666044, 318, 305, 325, 279, 1, 0.6153846383094788, 1.053763389587402,[],[],0]
			]
			]
,			[
			"Fall",
			15,
			true,
			1,
			0,
			false,
			1801021026421827,
			[
				["images/groot-sheet0.png", 2810068, 1624, 930, 339, 312, 1, 0.5132743120193481, 0.9935897588729858,[],[],0]
			]
			]
,			[
			"Landed",
			15,
			false,
			1,
			0,
			false,
			8287598356677634,
			[
				["images/groot-sheet0.png", 2810068, 980, 1308, 346, 275, 1, 0.5982658863067627, 0.9200000166893005,[],[],0],
				["images/groot-sheet1.png", 2666044, 869, 1789, 343, 244, 1, 0.6034985184669495, 0.9508196711540222,[],[],0],
				["images/groot-sheet1.png", 2666044, 1214, 1795, 340, 240, 1, 0.6000000238418579, 0.887499988079071,[],[],0],
				["images/groot-sheet0.png", 2810068, 1289, 1786, 349, 249, 1, 0.5902578830718994, 0.9236947894096375,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 297, 315, 289, 1, 0.5269841551780701, 0.9377162456512451,[],[],0]
			]
			]
,			[
			"Die",
			10,
			false,
			1,
			0,
			false,
			2972834129410788,
			[
				["images/groot-sheet0.png", 2810068, 1398, 482, 460, 446, 1, 0.4956521689891815, 0.9753363132476807,[],[],0],
				["images/groot-sheet0.png", 2810068, 962, 1, 434, 485, 1, 0.5460829734802246, 1.0804123878479,[],[],0],
				["images/groot-sheet0.png", 2810068, 962, 488, 379, 497, 1, 0.6068601608276367, 1.138833045959473,[],[],0],
				["images/groot-sheet0.png", 2810068, 509, 1, 451, 491, 1, 0.67405766248703, 1.105906367301941,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 1, 506, 521, 1, 0.747035562992096, 1.046065211296082,[],[],0],
				["images/groot-sheet0.png", 2810068, 1398, 1, 429, 479, 1, 0.7645687460899353, 1.031315207481384,[],[],0],
				["images/groot-sheet0.png", 2810068, 509, 494, 387, 446, 1, 0.7157622575759888, 0.9910314083099365,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 524, 355, 402, 1, 0.6845070719718933, 0.9353233575820923,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 928, 390, 318, 1, 0.6384615302085877, 0.9496855139732361,[],[],0],
				["images/groot-sheet0.png", 2810068, 1328, 1556, 416, 228, 1, 0.588942289352417, 0.9035087823867798,[],[],0],
				["images/groot-sheet0.png", 2810068, 1640, 1861, 400, 173, 1, 0.574999988079071, 0.8670520186424255,[],[],0],
				["images/groot-sheet1.png", 2666044, 1556, 1795, 388, 163, 1, 0.5876288414001465, 0.8588957190513611,[],[],0],
				["images/groot-sheet0.png", 2810068, 1, 1871, 386, 168, 1, 0.5880829095840454, 0.8392857313156128,[],[],0],
				["images/groot-sheet1.png", 2666044, 1, 1810, 386, 163, 1, 0.5880829095840454, 0.8527607321739197,[],[],0],
				["images/groot-sheet2.png", 2113937, 501, 1142, 387, 158, 1, 0.5865632891654968, 0.8734177350997925,[],[],0],
				["images/groot-sheet2.png", 2113937, 1, 1176, 388, 157, 1, 0.5876288414001465, 0.8789808750152588,[],[],0],
				["images/groot-sheet1.png", 2666044, 389, 1810, 388, 158, 1, 0.5876288414001465, 0.8734177350997925,[],[],0],
				["images/groot-sheet2.png", 2113937, 890, 1142, 386, 158, 1, 0.5880829095840454, 0.8734177350997925,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			7398404938135049
		]
		],
		false,
		false,
		8224838724508433,
		[],
		null
	]
,	[
		"t14",
		cr.plugins_.Sprite,
		false,
		[9581134574745037,1909410010375255,5763977270682626,360034748212341,898317675380712,1006779366376782],
		1,
		0,
		null,
		[
			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			7392218746650505,
			[
				["images/enemy1-sheet0.png", 846347, 856, 795, 167, 148, 1, 0.329341322183609, 0.9797297120094299,[["firePoint", 0.9520958065986633, 0.4189189076423645]],[-0.329341322183609,-0.9797297120094299,0.1017966866493225,-0.9797297120094299,0.1676646769046783,0.02027028799057007,-0.329341322183609,0.02027028799057007],0],
				["images/enemy1-sheet0.png", 846347, 1, 635, 173, 148, 1, 0.323699414730072, 0.9662162065505981,[["firePoint", 0.9364162087440491, 0.4189189076423645]],[-0.323699414730072,-0.9662162065505981,0.1074385941028595,-0.9662162065505981,0.1733065843582153,0.03378379344940186,-0.323699414730072,0.03378379344940186],0],
				["images/enemy1-sheet0.png", 846347, 815, 195, 181, 147, 1, 0.325966864824295, 0.9659863710403442,[["firePoint", 0.9116021990776062, 0.4149659872055054]],[-0.325966864824295,-0.9659863710403442,0.1051711440086365,-0.9659863710403442,0.1710391342639923,0.03401362895965576,-0.325966864824295,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 395, 180, 184, 147, 1, 0.33152174949646, 0.9659863710403442,[["firePoint", 0.907608687877655, 0.4149659872055054]],[-0.33152174949646,-0.9659863710403442,0.09961625933647156,-0.9659863710403442,0.1654842495918274,0.03401362895965576,-0.33152174949646,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 581, 318, 180, 147, 1, 0.3444444537162781, 0.9659863710403442,[["firePoint", 0.9333333373069763, 0.4149659872055054]],[-0.3444444537162781,-0.9659863710403442,0.08669355511665344,-0.9659863710403442,0.1525615453720093,0.03401362895965576,-0.3444444537162781,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 526, 644, 156, 164, 1, 0.3653846085071564, 0.9695122241973877,[["firePoint", 1.044871807098389, 0.4756097495555878]],[-0.3653846085071564,-0.9695122241973877,0.06575340032577515,-0.9695122241973877,0.131621390581131,0.03048777580261231,-0.3653846085071564,0.03048777580261231],0],
				["images/enemy1-sheet1.png", 972382, 445, 318, 114, 194, 1, 0.4649122953414917, 0.9742268323898315,[["firePoint", 1.394736886024475, 0.5567010045051575]],[-0.4649122953414917,-0.9742268323898315,-0.03377428650856018,-0.9742268323898315,0.03209370374679565,0.02577316761016846,-0.4649122953414917,0.02577316761016846],0],
				["images/enemy1-sheet1.png", 972382, 919, 448, 100, 202, 1, 0.5299999713897705, 0.9752475023269653,[["firePoint", 1.590000033378601, 0.5742574334144592]],[-0.5299999713897705,-0.9752475023269653,-0.09886196255683899,-0.9752475023269653,-0.03299397230148315,0.02475249767303467,-0.5299999713897705,0.02475249767303467],0],
				["images/enemy1-sheet1.png", 972382, 815, 448, 102, 200, 1, 0.5, 0.9750000238418579,[["firePoint", 1.539215683937073, 0.5699999928474426]],[-0.5,-0.9750000238418579,-0.06886199116706848,-0.9750000238418579,-0.002994000911712647,0.02499997615814209,-0.5,0.02499997615814209],0],
				["images/enemy1-sheet1.png", 972382, 561, 448, 111, 194, 1, 0.4504504501819611, 0.9742268323898315,[["firePoint", 1.405405402183533, 0.5567010045051575]],[-0.4504504501819611,-0.9742268323898315,-0.01931244134902954,-0.9742268323898315,0.04655554890632629,0.02577316761016846,-0.4504504501819611,0.02577316761016846],0],
				["images/enemy1-sheet1.png", 972382, 163, 301, 127, 182, 1, 0.3779527544975281, 0.9725274443626404,[["firePoint", 1.212598443031311, 0.5274725556373596]],[-0.3779527544975281,-0.9725274443626404,0.05318525433540344,-0.9725274443626404,0.1190532445907593,0.02747255563735962,-0.3779527544975281,0.02747255563735962],0],
				["images/enemy1-sheet1.png", 972382, 497, 151, 144, 165, 1, 0.3263888955116272, 0.9696969985961914,[["firePoint", 1.0625, 0.4787878692150116]],[-0.3263888955116272,-0.9696969985961914,0.1047491133213043,-0.9696969985961914,0.1706171035766602,0.03030300140380859,-0.3263888955116272,0.03030300140380859],0],
				["images/enemy1-sheet1.png", 972382, 803, 299, 158, 147, 1, 0.297468364238739, 0.9659863710403442,[["firePoint", 0.9683544039726257, 0.4149659872055054]],[-0.297468364238739,-0.9659863710403442,0.1336696445941925,-0.9659863710403442,0.1995376348495483,0.03401362895965576,-0.297468364238739,0.03401362895965576],0],
				["images/enemy1-sheet1.png", 972382, 854, 1, 167, 147, 1, 0.2934131622314453, 0.9659863710403442,[["firePoint", 0.9281437397003174, 0.4149659872055054]],[-0.2934131622314453,-0.9659863710403442,0.1377248466014862,-0.9659863710403442,0.203592836856842,0.03401362895965576,-0.2934131622314453,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 176, 782, 172, 147, 1, 0.2906976640224457, 0.9659863710403442,[["firePoint", 0.9069767594337463, 0.4149659872055054]],[-0.2906976640224457,-0.9659863710403442,0.1404403448104858,-0.9659863710403442,0.2063083350658417,0.03401362895965576,-0.2906976640224457,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 423, 467, 176, 147, 1, 0.3011363744735718, 0.9659863710403442,[["firePoint", 0.9034090638160706, 0.4149659872055054]],[-0.3011363744735718,-0.9659863710403442,0.1300016343593597,-0.9659863710403442,0.1958696246147156,0.03401362895965576,-0.3011363744735718,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 601, 495, 175, 147, 1, 0.3085714280605316, 0.9659863710403442,[["firePoint", 0.9142857193946838, 0.4149659872055054]],[-0.3085714280605316,-0.9659863710403442,0.1225665807723999,-0.9659863710403442,0.1884345710277557,0.03401362895965576,-0.3085714280605316,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 684, 646, 174, 147, 1, 0.3218390941619873, 0.9659863710403442,[["firePoint", 0.9310345053672791, 0.4149659872055054]],[-0.3218390941619873,-0.9659863710403442,0.1092989146709442,-0.9659863710403442,0.1751669049263001,0.03401362895965576,-0.3218390941619873,0.03401362895965576],0],
				["images/enemy1-sheet0.png", 846347, 1, 785, 170, 148, 1, 0.3235294222831726, 0.9662162065505981,[["firePoint", 0.9470587968826294, 0.4189189076423645]],[-0.3235294222831726,-0.9662162065505981,0.1076085865497589,-0.9662162065505981,0.1734765768051148,0.03378379344940186,-0.3235294222831726,0.03378379344940186],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			218614961246562,
			[
				["images/enemy1-sheet1.png", 972382, 515, 1, 168, 148, 1, 0.3154761791229248, 0.9662162065505981,[],[-0.3154761791229248,-0.9662162065505981,0.1369048058986664,-0.9527027010917664,0.1607138216495514,0.03378379344940186,-0.3154761791229248,0.03378379344940186],0],
				["images/enemy1-sheet1.png", 972382, 854, 150, 167, 147, 1, 0.3173652589321137, 0.9659863710403442,[],[-0.3173652589321137,-0.9659863710403442,0.1350157260894775,-0.9524728655815125,0.1588247418403626,0.03401362895965576,-0.3173652589321137,0.03401362895965576],0],
				["images/enemy1-sheet1.png", 972382, 1, 151, 167, 147, 1, 0.3173652589321137, 0.9659863710403442,[],[-0.3173652589321137,-0.9659863710403442,0.1350157260894775,-0.9524728655815125,0.1588247418403626,0.03401362895965576,-0.3173652589321137,0.03401362895965576],0],
				["images/enemy1-sheet1.png", 972382, 685, 1, 167, 148, 1, 0.3173652589321137, 0.9662162065505981,[],[-0.3173652589321137,-0.9662162065505981,0.1350157260894775,-0.9527027010917664,0.1588247418403626,0.03378379344940186,-0.3173652589321137,0.03378379344940186],0],
				["images/enemy1-sheet1.png", 972382, 173, 1, 169, 148, 1, 0.3195266127586365, 0.9662162065505981,[],[-0.3195266127586365,-0.9662162065505981,0.1328543722629547,-0.9527027010917664,0.1566633880138397,0.03378379344940186,-0.3195266127586365,0.03378379344940186],0],
				["images/enemy1-sheet0.png", 846347, 684, 795, 170, 148, 1, 0.3176470696926117, 0.9662162065505981,[],[-0.3176470696926117,-0.9662162065505981,0.1347339153289795,-0.9527027010917664,0.1585429310798645,0.03378379344940186,-0.3176470696926117,0.03378379344940186],0],
				["images/enemy1-sheet0.png", 846347, 350, 767, 172, 148, 1, 0.3197674453258514, 0.9662162065505981,[],[-0.3197674453258514,-0.9662162065505981,0.1326135396957398,-0.9527027010917664,0.1564225554466248,0.03378379344940186,-0.3197674453258514,0.03378379344940186],0],
				["images/enemy1-sheet0.png", 846347, 778, 495, 172, 149, 1, 0.3197674453258514, 0.9664429426193237,[],[-0.3197674453258514,-0.9664429426193237,0.1326135396957398,-0.9529294371604919,0.1564225554466248,0.03355705738067627,-0.3197674453258514,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 177, 480, 173, 149, 1, 0.323699414730072, 0.9664429426193237,[],[-0.323699414730072,-0.9664429426193237,0.1286815702915192,-0.9529294371604919,0.1524905860424042,0.03355705738067627,-0.323699414730072,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 247, 329, 174, 149, 1, 0.3218390941619873, 0.9664429426193237,[],[-0.3218390941619873,-0.9664429426193237,0.1305418908596039,-0.9529294371604919,0.1543509066104889,0.03355705738067627,-0.3218390941619873,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 1, 333, 174, 149, 1, 0.3218390941619873, 0.9664429426193237,[],[-0.3218390941619873,-0.9664429426193237,0.1305418908596039,-0.9529294371604919,0.1543509066104889,0.03355705738067627,-0.3218390941619873,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 763, 344, 174, 149, 1, 0.3218390941619873, 0.9664429426193237,[],[-0.3218390941619873,-0.9664429426193237,0.1305418908596039,-0.9529294371604919,0.1543509066104889,0.03355705738067627,-0.3218390941619873,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 1, 484, 173, 149, 1, 0.323699414730072, 0.9664429426193237,[],[-0.323699414730072,-0.9664429426193237,0.1286815702915192,-0.9529294371604919,0.1524905860424042,0.03355705738067627,-0.323699414730072,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 352, 616, 172, 149, 1, 0.3197674453258514, 0.9664429426193237,[],[-0.3197674453258514,-0.9664429426193237,0.1326135396957398,-0.9529294371604919,0.1564225554466248,0.03355705738067627,-0.3197674453258514,0.03355705738067627],0],
				["images/enemy1-sheet0.png", 846347, 176, 631, 172, 149, 1, 0.3197674453258514, 0.9664429426193237,[],[-0.3197674453258514,-0.9664429426193237,0.1326135396957398,-0.9529294371604919,0.1564225554466248,0.03355705738067627,-0.3197674453258514,0.03355705738067627],0],
				["images/enemy1-sheet1.png", 972382, 1, 1, 170, 148, 1, 0.3176470696926117, 0.9662162065505981,[],[-0.3176470696926117,-0.9662162065505981,0.1347339153289795,-0.9527027010917664,0.1585429310798645,0.03378379344940186,-0.3176470696926117,0.03378379344940186],0],
				["images/enemy1-sheet1.png", 972382, 344, 1, 169, 148, 1, 0.3195266127586365, 0.9662162065505981,[],[-0.3195266127586365,-0.9662162065505981,0.1328543722629547,-0.9527027010917664,0.1566633880138397,0.03378379344940186,-0.3195266127586365,0.03378379344940186],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			1462508866056224,
			[
				["images/enemy1-sheet1.png", 972382, 278, 602, 103, 148, 1, 0.3398058116436005, 0.9797297120094299,[],[-0.3398058116436005,-0.9797297120094299,0.1747572124004364,-0.9797297120094299,0.2038832008838654,0.02027028799057007,-0.3398058116436005,0.02027028799057007],0],
				["images/enemy1-sheet1.png", 972382, 432, 514, 122, 149, 1, 0.311475396156311, 0.9798657894134522,[],[-0.311475396156311,-0.9798657894134522,0.2030876278877258,-0.9798657894134522,0.2322136163711548,0.02013421058654785,-0.311475396156311,0.02013421058654785],0],
				["images/enemy1-sheet1.png", 972382, 674, 448, 139, 150, 1, 0.3093525171279907, 0.9800000190734863,[],[-0.3093525171279907,-0.9800000190734863,0.2052105069160461,-0.9800000190734863,0.2343364953994751,0.01999998092651367,-0.3093525171279907,0.01999998092651367],0],
				["images/enemy1-sheet1.png", 972382, 292, 301, 151, 150, 1, 0.3112582862377167, 0.9800000190734863,[],[-0.3112582862377167,-0.9800000190734863,0.2033047378063202,-0.9800000190734863,0.2324307262897492,0.01999998092651367,-0.3112582862377167,0.01999998092651367],0],
				["images/enemy1-sheet1.png", 972382, 643, 151, 158, 149, 1, 0.3164556920528412, 0.9798657894134522,[],[-0.3164556920528412,-0.9798657894134522,0.1981073319911957,-0.9798657894134522,0.2272333204746246,0.02013421058654785,-0.3164556920528412,0.02013421058654785],0],
				["images/enemy1-sheet1.png", 972382, 334, 151, 161, 148, 1, 0.3167701959609985, 0.9729729890823364,[],[-0.3167701959609985,-0.9729729890823364,0.1977928280830383,-0.9729729890823364,0.2269188165664673,0.02702701091766357,-0.3167701959609985,0.02702701091766357],0],
				["images/enemy1-sheet1.png", 972382, 170, 151, 162, 148, 1, 0.3209876418113709, 0.9594594836235046,[],[-0.3209876418113709,-0.9594594836235046,0.193575382232666,-0.9594594836235046,0.222701370716095,0.04054051637649536,-0.3209876418113709,0.04054051637649536],0],
				["images/enemy1-sheet0.png", 846347, 860, 646, 162, 146, 1, 0.3209876418113709, 0.965753436088562,[],[-0.3209876418113709,-0.965753436088562,0.193575382232666,-0.965753436088562,0.222701370716095,0.03424656391143799,-0.3209876418113709,0.03424656391143799],0],
				["images/enemy1-sheet1.png", 972382, 1, 300, 160, 145, 1, 0.3187499940395355, 0.9586206674575806,[],[-0.3187499940395355,-0.9586206674575806,0.1958130300045013,-0.9586206674575806,0.2249390184879303,0.04137933254241943,-0.3187499940395355,0.04137933254241943],0],
				["images/enemy1-sheet1.png", 972382, 643, 302, 156, 144, 1, 0.3205128312110901, 0.9583333134651184,[],[-0.3205128312110901,-0.9583333134651184,0.1940501928329468,-0.9583333134651184,0.2231761813163757,0.04166668653488159,-0.3205128312110901,0.04166668653488159],0],
				["images/enemy1-sheet1.png", 972382, 1, 447, 150, 146, 1, 0.3199999928474426, 0.9589040875434876,[],[-0.3199999928474426,-0.9589040875434876,0.1945630311965942,-0.9589040875434876,0.2236890196800232,0.04109591245651245,-0.3199999928474426,0.04109591245651245],0],
				["images/enemy1-sheet1.png", 972382, 292, 453, 138, 147, 1, 0.3260869681835175, 0.9659863710403442,[],[-0.3260869681835175,-0.9659863710403442,0.1884760558605194,-0.9659863710403442,0.2176020443439484,0.03401362895965576,-0.3260869681835175,0.03401362895965576],0],
				["images/enemy1-sheet1.png", 972382, 153, 485, 123, 149, 1, 0.3333333432674408, 0.9664429426193237,[],[-0.3333333432674408,-0.9664429426193237,0.1812296807765961,-0.9664429426193237,0.210355669260025,0.03355705738067627,-0.3333333432674408,0.03355705738067627],0],
				["images/enemy1-sheet1.png", 972382, 674, 600, 105, 151, 1, 0.3523809611797333, 0.9602649211883545,[],[-0.3523809611797333,-0.9602649211883545,0.1621820628643036,-0.9602649211883545,0.1913080513477325,0.03973507881164551,-0.3523809611797333,0.03973507881164551],0],
				["images/enemy1-sheet2.png", 104947, 1, 62, 92, 153, 1, 0.4347825944423676, 0.9607843160629273,[],[-0.4347825944423676,-0.9607843160629273,0.07978042960166931,-0.9607843160629273,0.1089064180850983,0.03921568393707275,-0.4347825944423676,0.03921568393707275],0],
				["images/enemy1-sheet2.png", 104947, 95, 62, 80, 154, 1, 0.550000011920929, 0.9545454382896423,[],[-0.550000011920929,-0.9545454382896423,-0.03543698787689209,-0.9545454382896423,-0.006310999393463135,0.04545456171035767,-0.550000011920929,0.04545456171035767],0],
				["images/enemy1-sheet2.png", 104947, 256, 62, 75, 155, 1, 0.6000000238418579, 0.9419354796409607,[],[-0.6000000238418579,-0.9419354796409607,-0.08543699979782105,-0.9419354796409607,-0.05631101131439209,0.05806452035903931,-0.6000000238418579,0.05806452035903931],0],
				["images/enemy1-sheet2.png", 104947, 177, 62, 77, 153, 1, 0.5974025726318359, 0.9411764740943909,[],[-0.5974025726318359,-0.9411764740943909,-0.08283954858779907,-0.9411764740943909,-0.05371356010437012,0.05882352590560913,-0.5974025726318359,0.05882352590560913],0]
			]
			]
,			[
			"Death",
			24,
			true,
			1,
			0,
			false,
			7421218400244532,
			[
				["images/enemy1-sheet0.png", 846347, 831, 1, 176, 192, 1, 0.4204545319080353, 0.9791666865348816,[],[],0],
				["images/enemy1-sheet0.png", 846347, 200, 1, 193, 200, 1, 0.4404145181179047, 1.004999995231628,[],[],0],
				["images/enemy1-sheet0.png", 846347, 1, 1, 197, 196, 1, 0.4263959527015686, 1.035714268684387,[],[],0],
				["images/enemy1-sheet0.png", 846347, 395, 1, 201, 177, 1, 0.4129353165626526, 1.096045255661011,[],[],0],
				["images/enemy1-sheet0.png", 846347, 598, 154, 215, 162, 1, 0.4279069900512695, 1.080246925354004,[],[],0],
				["images/enemy1-sheet0.png", 846347, 598, 1, 231, 151, 1, 0.4502164423465729, 1.019867539405823,[],[],0],
				["images/enemy1-sheet0.png", 846347, 1, 203, 244, 128, 1, 0.4590163826942444, 0.96875,[],[],0],
				["images/enemy1-sheet0.png", 846347, 350, 917, 247, 101, 1, 0.449392706155777, 0.9306930899620056,[],[],0],
				["images/enemy1-sheet0.png", 846347, 1, 935, 246, 87, 1, 0.434959352016449, 0.7241379022598267,[],[],0],
				["images/enemy1-sheet0.png", 846347, 599, 945, 245, 76, 1, 0.4244897961616516, 0.6973684430122376,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 636, 242, 66, 1, 0.4214875996112824, 0.7878788113594055,[],[],0],
				["images/enemy1-sheet2.png", 104947, 1, 1, 241, 59, 1, 0.419087141752243, 0.7966101765632629,[],[],0],
				["images/enemy1-sheet1.png", 972382, 781, 652, 241, 61, 1, 0.419087141752243, 0.7049180269241333,[],[],0],
				["images/enemy1-sheet2.png", 104947, 244, 1, 241, 59, 1, 0.419087141752243, 0.7457627058029175,[],[],0],
				["images/enemy1-sheet1.png", 972382, 383, 665, 241, 61, 1, 0.419087141752243, 0.7213114500045776,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 704, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 781, 715, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 383, 728, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 766, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 626, 777, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 244, 790, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 828, 241, 60, 1, 0.419087141752243, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 487, 839, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 730, 839, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 244, 852, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 890, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 487, 901, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 730, 901, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 244, 914, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 1, 952, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 487, 963, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0],
				["images/enemy1-sheet1.png", 972382, 730, 963, 241, 60, 1, 0.4149377644062042, 0.7166666388511658,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			9289150919431106
		]
		],
		false,
		false,
		2328350114767622,
		[],
		null
	]
,	[
		"t15",
		cr.plugins_.Sprite,
		false,
		[3119903620541355,5003755327191346,8216588619937536,2409882371329057,7763111608534692,8703203236722239,9093650822377173,8285306018078022],
		1,
		0,
		null,
		[
			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			920596479507903,
			[
				["images/enemyboss-sheet0.png", 2689971, 918, 755, 169, 179, 1, 0.4497041404247284, 0.9776536226272583,[["Imagepoint 1", 1.213017702102661, 0.5307262539863586]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1819, 206, 163, 219, 1, 0.4785276055335999, 0.9817351698875427,[["Imagepoint 1", 1.214723944664002, 0.5296803712844849]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 364, 1305, 174, 150, 1, 0.6839080452919006, 0.9733333587646484,[["Imagepoint 1", 1.212643623352051, 0.5333333611488342]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1429, 962, 172, 171, 1, 0.8197674155235291, 0.9707602262496948,[["Imagepoint 1", 1.215116262435913, 0.5321637392044067]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1184, 971, 173, 169, 1, 0.849711000919342, 0.976331353187561,[["Imagepoint 1", 1.213872790336609, 0.5325443744659424]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1804, 788, 178, 168, 1, 0.8426966071128845, 0.976190447807312,[["Imagepoint 1", 1.213483095169067, 0.5297619104385376]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 175, 503, 181, 172, 1, 0.8453038930892944, 0.9534883499145508,[["Imagepoint 1", 1.215469598770142, 0.5290697813034058]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 944, 574, 173, 179, 1, 0.8612716794013977, 0.9273743033409119,[["Imagepoint 1", 1.213872790336609, 0.5307262539863586]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 791, 1, 174, 227, 1, 0.4482758641242981, 0.9823788404464722,[["Imagepoint 1", 1.212643623352051, 0.5286343693733215]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 367, 1, 250, 167, 1, 0.3240000009536743, 0.9880239367485046,[["Imagepoint 1", 1.212000012397766, 0.5329341292381287]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 235, 243, 139, 1, 0.3415637910366058, 0.971222996711731,[["Imagepoint 1", 1.213991761207581, 0.5323740839958191]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 364, 1150, 183, 153, 1, 0.4480874240398407, 0.8692810535430908,[["Imagepoint 1", 1.213114738464356, 0.529411792755127]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 923, 1467, 153, 139, 1, 0.5098039507865906, 0.9424460530281067,[["Imagepoint 1", 1.215686321258545, 0.5323740839958191]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 1466, 162, 134, 1, 0.4567901194095612, 0.9701492786407471,[["Imagepoint 1", 1.216049432754517, 0.5298507213592529]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 540, 1431, 161, 154, 1, 0.5031055808067322, 0.8701298832893372,[["Imagepoint 1", 1.211180090904236, 0.5324675440788269]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 192, 1326, 163, 158, 1, 0.5889570713043213, 0.8860759735107422,[["Imagepoint 1", 1.214723944664002, 0.5316455960273743]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1676, 1459, 162, 146, 1, 0.6296296119689941, 0.9726027250289917,[["Imagepoint 1", 1.216049432754517, 0.5273972749710083]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1146, 1276, 184, 146, 1, 0.5489130616188049, 0.9726027250289917,[["Imagepoint 1", 1.21195650100708, 0.5273972749710083]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 663, 1081, 175, 165, 1, 0.4914285838603973, 0.9757575988769531,[["Imagepoint 1", 1.21142852306366, 0.5333333611488342]],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			1247156411683498,
			[
				["images/enemyboss-sheet0.png", 2689971, 164, 858, 166, 179, 1, 0.4397590458393097, 0.9776536226272583,[["Imagepoint 1", 0.5, 0.5027933120727539]],[],0],
				["images/enemyboss-sheet0.png", 2689971, 850, 936, 165, 179, 1, 0.4424242377281189, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 497, 969, 164, 179, 1, 0.4390243887901306, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1017, 944, 165, 179, 1, 0.4363636374473572, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1777, 958, 165, 179, 1, 0.4242424368858337, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1260, 790, 167, 179, 1, 0.413173645734787, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1089, 763, 169, 179, 1, 0.4082840383052826, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1286, 609, 170, 179, 1, 0.4000000059604645, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1463, 589, 173, 179, 1, 0.3988439440727234, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 768, 571, 174, 178, 1, 0.3965517282485962, 0.9775280952453613,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1654, 427, 175, 178, 1, 0.3942857086658478, 0.9775280952453613,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1831, 427, 175, 178, 1, 0.4000000059604645, 0.9775280952453613,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1286, 429, 175, 178, 1, 0.4057142734527588, 0.9775280952453613,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 536, 607, 173, 179, 1, 0.4161849617958069, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1804, 607, 171, 179, 1, 0.4210526347160339, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 172, 677, 170, 179, 1, 0.429411768913269, 0.9776536226272583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 512, 788, 168, 179, 1, 0.4345238208770752, 0.9776536226272583,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			3973433468715505,
			[
				["images/enemyboss-sheet0.png", 2689971, 1001, 1276, 143, 189, 1, 0.503496527671814, 0.9576719403266907,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1859, 1274, 146, 186, 1, 0.5, 0.9569892287254334,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1708, 1274, 149, 183, 1, 0.4899328947067261, 0.9672130942344666,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 549, 1248, 152, 181, 1, 0.4802631437778473, 0.9723756909370422,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1551, 1183, 155, 180, 1, 0.4709677398204804, 0.9777777791023254,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 840, 1117, 159, 181, 1, 0.4654088020324707, 0.9834254384040833,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 332, 867, 163, 182, 1, 0.453987717628479, 0.9890109896659851,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 344, 682, 166, 183, 1, 0.4457831382751465, 0.9890710115432739,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 561, 169, 183, 1, 0.4378698170185089, 0.9890710115432739,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 595, 422, 171, 183, 1, 0.4327485263347626, 0.9890710115432739,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 376, 172, 183, 1, 0.4302325546741486, 0.9890710115432739,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 246, 318, 173, 183, 1, 0.4219653308391571, 0.9836065769195557,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 421, 318, 172, 184, 1, 0.4186046421527863, 0.9728260636329651,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 941, 386, 172, 183, 1, 0.4186046421527863, 0.9726775884628296,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1115, 386, 169, 186, 1, 0.41420117020607, 0.9569892287254334,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1484, 400, 168, 187, 1, 0.4166666567325592, 0.9518716335296631,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1119, 574, 165, 187, 1, 0.4242424368858337, 0.9572192430496216,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1638, 607, 164, 187, 1, 0.4329268336296082, 0.9732620120048523,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 746, 161, 188, 1, 0.4409937858581543, 0.978723406791687,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1458, 770, 159, 190, 1, 0.4528301954269409, 0.9736841917037964,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1619, 796, 156, 191, 1, 0.4615384638309479, 0.9738219976425171,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 936, 153, 192, 1, 0.4705882370471954, 0.9635416865348816,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1603, 989, 150, 192, 1, 0.4799999892711639, 0.9583333134651184,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 1130, 146, 191, 1, 0.4931506812572479, 0.9581151604652405,[],[],0]
			]
			]
,			[
			"Death",
			15,
			true,
			1,
			0,
			false,
			7941200039585633,
			[
				["images/enemyboss-sheet0.png", 2689971, 793, 230, 146, 221, 1, 0.4520547986030579, 1.081447958946228,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1332, 1288, 169, 155, 1, 0.7100591659545898, 1.225806474685669,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1503, 1365, 171, 152, 1, 0.9005848169326782, 1.282894730567932,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 357, 1457, 172, 142, 1, 1.116279125213623, 1.225352168083191,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1840, 1462, 193, 114, 1, 1.238341927528381, 1.114035129547119,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1359, 1135, 190, 151, 1, 1.336842060089111, 0.8278145790100098,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 1326, 189, 138, 1, 1.365079402923584, 0.8840579986572266,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 384, 1601, 210, 69, 1, 1.328571438789368, 0.9710144996643066,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 703, 1542, 208, 81, 1, 1.379807710647583, 0.8641975522041321,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1359, 1519, 206, 91, 1, 1.436893224716187, 0.7142857313156128,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 165, 1601, 217, 67, 1, 1.423963189125061, 0.7910447716712952,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1795, 1607, 227, 62, 1, 1.41409695148468, 0.9032257795333862,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1567, 1607, 226, 64, 1, 1.446902632713318, 0.796875,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1078, 1566, 224, 69, 1, 1.473214268684387, 0.7101449370384216,[],[],0]
			]
			]
,			[
			"Jump",
			15,
			false,
			1,
			0,
			false,
			4800662652530212,
			[
				["images/enemyboss-sheet0.png", 2689971, 682, 901, 166, 178, 1, 0.4337349534034729, 0.9775280952453613,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1755, 1139, 215, 133, 1, 0.3860464990139008, 0.969924807548523,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1146, 1445, 211, 119, 1, 0.4691943228244782, 0.9663865566253662,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 703, 1300, 214, 122, 1, 0.4485981166362763, 0.9344262480735779,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 367, 170, 246, 146, 1, 0.3983739912509918, 0.965753436088562,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1306, 1, 172, 219, 1, 0.4593023359775543, 0.990867555141449,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1136, 1, 168, 232, 1, 0.3511904776096344, 1,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 967, 1, 167, 235, 1, 0.3652694523334503, 1.017021298408508,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 619, 1, 170, 233, 1, 0.4000000059604645, 1.038626551628113,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1480, 1, 168, 223, 1, 0.4404761791229248, 1.062780261039734,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1819, 1, 176, 203, 1, 0.5056818127632141, 1.083743810653687,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 615, 236, 176, 184, 1, 0.5284090638160706, 1.125,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 358, 504, 176, 176, 1, 0.5397727489471436, 1.147727251052856,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1306, 226, 176, 201, 1, 0.5397727489471436, 1.094527363777161,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1, 1, 181, 232, 1, 0.5082873106002808, 1.030172467231751,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 184, 1, 181, 232, 1, 0.4861878454685211, 0.9956896305084229,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1650, 1, 167, 222, 1, 0.485029935836792, 0.977477490901947,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1484, 226, 200, 172, 1, 0.324999988079071, 0.9476743936538696,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 1001, 1142, 212, 132, 1, 0.4386792480945587, 0.8030303120613098,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 703, 1424, 218, 116, 1, 0.4633027613162994, 1.008620738983154,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 149, 1194, 213, 130, 1, 0.4788732528686523, 0.9692307710647583,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 156, 1051, 206, 141, 1, 0.4902912676334381, 0.9929078221321106,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 941, 238, 219, 146, 1, 0.4383561611175537, 0.9726027250289917,[],[],0],
				["images/enemyboss-sheet0.png", 2689971, 711, 751, 205, 148, 1, 0.35121950507164, 0.9729729890823364,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			3851797144592636
		]
		],
		false,
		false,
		7349178262497708,
		[],
		null
	]
,	[
		"t16",
		cr.plugins_.Sprite,
		false,
		[5103729947055144,2428469845150363,7669708612187844,9731542844128243,6995554818024755,9569712933465565,2214208286550338],
		2,
		0,
		null,
		[
			[
			"Side",
			24,
			true,
			1,
			0,
			false,
			1709335310873605,
			[
				["images/enemyboss2-sheet2.png", 579808, 1, 1, 301, 135, 1, 0.4485049843788147, 0.6518518328666687,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 304, 1, 301, 135, 1, 0.4485049843788147, 0.644444465637207,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 1, 273, 301, 136, 1, 0.4518272280693054, 0.6323529481887817,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 607, 1, 301, 135, 1, 0.4485049843788147, 0.6296296119689941,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 398, 685, 301, 136, 1, 0.4485049843788147, 0.6323529481887817,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 304, 412, 301, 134, 1, 0.4485049843788147, 0.641791045665741,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 701, 685, 301, 136, 1, 0.4485049843788147, 0.6397058963775635,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 1, 138, 301, 135, 1, 0.4485049843788147, 0.6518518328666687,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 304, 138, 301, 135, 1, 0.4485049843788147, 0.6592592597007752,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 607, 412, 301, 134, 1, 0.4485049843788147, 0.6716417670249939,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 607, 138, 301, 135, 1, 0.4485049843788147, 0.6740740537643433,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 1, 275, 301, 135, 1, 0.4485049843788147, 0.6740740537643433,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 304, 275, 301, 135, 1, 0.4485049843788147, 0.6740740537643433,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 607, 275, 301, 135, 1, 0.4485049843788147, 0.6740740537643433,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 398, 823, 301, 136, 1, 0.4485049843788147, 0.6691176295280457,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 701, 823, 301, 136, 1, 0.4485049843788147, 0.654411792755127,[],[],0],
				["images/enemyboss2-sheet2.png", 579808, 1, 412, 301, 135, 1, 0.4485049843788147, 0.6518518328666687,[],[],0]
			]
			]
,			[
			"Hit",
			12,
			false,
			1,
			0,
			false,
			4466049119356182,
			[
				["images/enemyboss2-sheet1.png", 663824, 603, 225, 303, 220, 1, 0.4884488582611084, 0.7363636493682861,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 303, 1, 298, 236, 1, 0.4664429426193237, 0.7923728823661804,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 647, 197, 299, 262, 1, 0.3311036825180054, 0.9122137427330017,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 325, 197, 320, 252, 1, 0.3062500059604645, 1.011904716491699,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 304, 447, 309, 214, 1, 0.3818770349025726, 0.8738317489624023,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 417, 461, 307, 254, 1, 0.4527687430381775, 0.9921259880065918,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 1, 1, 322, 270, 1, 0.4968944191932678, 0.9481481313705444,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 307, 717, 275, 263, 1, 0.4545454680919647, 0.8174905180931091,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 1, 646, 304, 244, 1, 0.5032894611358643, 0.7418032884597778,[],[],0],
				["images/enemyboss2-sheet0.png", 644522, 726, 461, 290, 255, 1, 0.5275862216949463, 0.7333333492279053,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 1, 1, 300, 237, 1, 0.5099999904632568, 0.7383966445922852,[],[],0],
				["images/enemyboss2-sheet1.png", 663824, 603, 1, 303, 222, 1, 0.4917491674423218, 0.7387387156486511,[],[],0]
			]
			]
,			[
			"Front",
			24,
			true,
			1,
			0,
			false,
			3485473740696166,
			[
				["images/enemyboss2-sheet0.png", 644522, 584, 718, 357, 201, 1, 0.523809552192688, 0.6965174078941345,[],[-0.1595715582370758,-0.5426714420318604,0.08546143770217896,-0.5562463998794556,0.1848004460334778,0.3034825921058655,-0.2357305586338043,0.3034825921058655],0],
				["images/enemyboss2-sheet0.png", 644522, 1, 451, 414, 193, 1, 0.512077271938324, 0.6839378476142883,[],[-0.1478392779827118,-0.5300918817520142,0.09719371795654297,-0.5436668395996094,0.1965327262878418,0.3160621523857117,-0.2239982783794403,0.3160621523857117],0],
				["images/enemyboss2-sheet0.png", 644522, 325, 1, 431, 194, 1, 0.5081206560134888, 0.6804123520851135,[],[-0.1438826620578766,-0.5265663862228394,0.1011503338813782,-0.5401413440704346,0.200489342212677,0.3195876479148865,-0.2200416624546051,0.3195876479148865],0],
				["images/enemyboss2-sheet1.png", 663824, 1, 240, 301, 221, 1, 0.5049833655357361, 0.7194570302963257,[],[-0.1407453715801239,-0.5656110048294067,0.1042876243591309,-0.5791860222816467,0.2036266326904297,0.2805429697036743,-0.2169043719768524,0.2805429697036743],0],
				["images/enemyboss2-sheet1.png", 663824, 615, 447, 240, 236, 1, 0.5, 0.741525411605835,[],[-0.1357620060443878,-0.587679386138916,0.1092709898948669,-0.601254403591156,0.2086099982261658,0.258474588394165,-0.2119210064411163,0.258474588394165],0],
				["images/enemyboss2-sheet1.png", 663824, 1, 463, 202, 243, 1, 0.4900990128517151, 0.748971164226532,[],[-0.1258610188961029,-0.5951251983642578,0.1191719770431519,-0.608700156211853,0.2185109853744507,0.251028835773468,-0.2020200192928314,0.251028835773468],0],
				["images/enemyboss2-sheet1.png", 663824, 205, 663, 191, 246, 1, 0.4869109988212585, 0.7479674816131592,[],[-0.1226730048656464,-0.5941214561462402,0.1223599910736084,-0.6076964735984802,0.2216989994049072,0.2520325183868408,-0.1988320052623749,0.2520325183868408],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			7330350897997263
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			5791101627655087
		]
		],
		false,
		false,
		6900366070759408,
		[],
		null
	]
,	[
		"t17",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Jump",
			15,
			true,
			1,
			0,
			false,
			9024103519260638,
			[
				["images/rocket-sheet0.png", 3133722, 1, 267, 155, 195, 1, 0.3483870923519135, 1.066666722297669,[],[],0]
			]
			]
,			[
			"Run",
			15,
			true,
			1,
			0,
			false,
			7859814097348442,
			[
				["images/rocket-sheet0.png", 3133722, 591, 650, 223, 127, 1, 0.2466367781162262, 1.133858323097229,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1029, 751, 221, 126, 1, 0.2398190051317215, 1.103174567222595,[],[],0],
				["images/rocket-sheet0.png", 3133722, 343, 909, 217, 125, 1, 0.2258064448833466, 1.047999978065491,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1029, 879, 210, 130, 1, 0.2000000029802322, 0.9615384340286255,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 923, 202, 133, 1, 0.1732673197984695, 0.9548872113227844,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1593, 1057, 200, 125, 1, 0.1700000017881393, 1.064000010490418,[],[],0],
				["images/rocket-sheet0.png", 3133722, 521, 1148, 205, 119, 1, 0.1902438998222351, 1.142857193946838,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1375, 1166, 201, 120, 1, 0.1741293519735336, 1.108333349227905,[],[],0],
				["images/rocket-sheet0.png", 3133722, 205, 1036, 204, 125, 1, 0.1764705926179886, 1.02400004863739,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1610, 577, 212, 136, 1, 0.2075471729040146, 0.9264705777168274,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1365, 207, 217, 141, 1, 0.2258064448833466, 0.936170220375061,[],[],0],
				["images/rocket-sheet0.png", 3133722, 933, 338, 220, 137, 1, 0.2363636344671249, 1,[],[],0],
				["images/rocket-sheet0.png", 3133722, 220, 523, 222, 130, 1, 0.2432432472705841, 1.092307686805725,[],[],0]
			]
			]
,			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			927496057625802,
			[
				["images/rocket-sheet0.png", 3133722, 1756, 1, 208, 152, 1, 0.2836538553237915, 0.9736841917037964,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1396, 1, 178, 204, 1, 0.4325842559337616, 0.9803921580314636,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1925, 790, 108, 226, 1, 0.7870370149612427, 0.982300877571106,[],[],0],
				["images/rocket-sheet0.png", 3133722, 636, 779, 126, 217, 1, 0.817460298538208, 0.981566846370697,[],[],0],
				["images/rocket-sheet0.png", 3133722, 444, 523, 145, 197, 1, 0.800000011920929, 0.9796954393386841,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1261, 710, 147, 191, 1, 0.7414966225624085, 0.9790576100349426,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1022, 1392, 99, 211, 1, 0.6363636255264282, 0.9810426831245422,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1183, 171, 180, 173, 1, 0.3166666626930237, 0.9768785834312439,[],[],0],
				["images/rocket-sheet0.png", 3133722, 976, 1011, 204, 130, 1, 0.2549019753932953, 0.9692307710647583,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			8328319057110946,
			[
				["images/rocket-sheet0.png", 3133722, 816, 749, 211, 133, 1, 0.194312795996666, 0.902255654335022,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 790, 212, 131, 1, 0.1981132030487061, 0.9083969593048096,[],[],0],
				["images/rocket-sheet0.png", 3133722, 764, 884, 210, 130, 1, 0.2000000029802322, 0.9153845906257629,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1456, 908, 211, 129, 1, 0.2085307985544205, 0.930232584476471,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1241, 903, 213, 128, 1, 0.2206572741270065, 0.9453125,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1708, 790, 215, 129, 1, 0.2325581461191177, 0.9534883499145508,[],[],0],
				["images/rocket-sheet0.png", 3133722, 417, 779, 217, 128, 1, 0.2442396283149719, 0.96875,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1324, 578, 221, 130, 1, 0.2624434530735016, 0.9538461565971375,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1610, 444, 223, 131, 1, 0.2780269086360931, 0.9389312863349915,[],[],0],
				["images/rocket-sheet0.png", 3133722, 649, 379, 227, 132, 1, 0.299559473991394, 0.9242424368858337,[],[],0],
				["images/rocket-sheet0.png", 3133722, 418, 254, 229, 132, 1, 0.3056768476963043, 0.9166666865348816,[],[],0],
				["images/rocket-sheet0.png", 3133722, 186, 238, 230, 132, 1, 0.313043475151062, 0.9166666865348816,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1155, 350, 230, 131, 1, 0.3173913061618805, 0.9160305261611939,[],[],0],
				["images/rocket-sheet0.png", 3133722, 158, 372, 230, 131, 1, 0.313043475151062, 0.9236640930175781,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1584, 309, 229, 132, 1, 0.3056768476963043, 0.9242424368858337,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1815, 309, 227, 133, 1, 0.2951541841030121, 0.9248120188713074,[],[],0],
				["images/rocket-sheet0.png", 3133722, 390, 388, 223, 133, 1, 0.2780269086360931, 0.932330846786499,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1387, 443, 221, 133, 1, 0.2624434530735016, 0.932330846786499,[],[],0],
				["images/rocket-sheet0.png", 3133722, 878, 477, 218, 134, 1, 0.2431192696094513, 0.9328358173370361,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 505, 217, 134, 1, 0.2304147481918335, 0.9253731369972229,[],[],0],
				["images/rocket-sheet0.png", 3133722, 615, 513, 215, 135, 1, 0.2186046540737152, 0.9185185432434082,[],[],0],
				["images/rocket-sheet0.png", 3133722, 832, 613, 213, 134, 1, 0.2065727710723877, 0.9104477763175964,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1047, 615, 212, 134, 1, 0.1981132030487061, 0.9029850959777832,[],[],0],
				["images/rocket-sheet0.png", 3133722, 203, 655, 212, 133, 1, 0.1981132030487061, 0.902255654335022,[],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			5148208300504639,
			[
				["images/rocket-sheet0.png", 3133722, 1795, 1057, 201, 123, 1, 0.2338308393955231, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 974, 1143, 200, 123, 1, 0.2300000041723251, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1176, 1162, 197, 123, 1, 0.2182741165161133, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 204, 1163, 197, 123, 1, 0.2131979763507843, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 1183, 196, 123, 1, 0.2091836780309677, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1578, 1184, 195, 123, 1, 0.2102564126253128, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 403, 1269, 195, 122, 1, 0.2102564126253128, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 600, 1271, 195, 122, 1, 0.2102564126253128, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1166, 1287, 194, 122, 1, 0.2113402038812637, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 199, 1288, 194, 122, 1, 0.2113402038812637, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1362, 1288, 194, 122, 1, 0.2113402038812637, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1558, 1309, 193, 122, 1, 0.2124352306127548, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 1308, 194, 122, 1, 0.2164948433637619, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1775, 1281, 195, 122, 1, 0.2153846174478531, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 968, 1268, 196, 122, 1, 0.2193877547979355, 0.9672130942344666,[],[],0],
				["images/rocket-sheet0.png", 3133722, 768, 1146, 198, 123, 1, 0.2272727340459824, 0.9674796462059021,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 1058, 201, 123, 1, 0.2338308393955231, 0.9674796462059021,[],[],0]
			]
			]
,			[
			"Fall",
			15,
			true,
			1,
			0,
			false,
			6959096005813875,
			[
				["images/rocket-sheet0.png", 3133722, 1410, 710, 147, 191, 1, 0.7414966225624085, 0.9790576100349426,[],[],0]
			]
			]
,			[
			"Landed",
			15,
			false,
			1,
			0,
			false,
			2160461861302944,
			[
				["images/rocket-sheet0.png", 3133722, 1835, 444, 199, 145, 1, 0.2462311536073685, 0.9655172228813171,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 641, 200, 142, 1, 0.2300000041723251, 0.9507042169570923,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1669, 921, 202, 134, 1, 0.2178217768669128, 0.9402984976768494,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1182, 1033, 203, 127, 1, 0.2216748744249344, 0.9527559280395508,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1387, 1039, 204, 125, 1, 0.2352941185235977, 0.9679999947547913,[],[],0],
				["images/rocket-sheet0.png", 3133722, 768, 1016, 204, 128, 1, 0.25, 0.96875,[],[],0]
			]
			]
,			[
			"Die",
			10,
			false,
			1,
			0,
			false,
			2870910648212181,
			[
				["images/rocket-sheet0.png", 3133722, 1176, 1, 218, 168, 1, 0.2477064281702042, 0.9642857313156128,[],[],0],
				["images/rocket-sheet0.png", 3133722, 751, 1, 208, 201, 1, 0.2451923042535782, 1.009950280189514,[],[],0],
				["images/rocket-sheet0.png", 3133722, 391, 1, 186, 235, 1, 0.2956989109516144, 0.9914893507957459,[],[],0],
				["images/rocket-sheet0.png", 3133722, 579, 1, 170, 251, 1, 0.3470588326454163, 0.9402390718460083,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 1, 183, 264, 1, 0.3497267663478851, 0.9469696879386902,[],[],0],
				["images/rocket-sheet0.png", 3133722, 186, 1, 203, 231, 1, 0.3300492465496063, 0.9783549904823303,[],[],0],
				["images/rocket-sheet0.png", 3133722, 961, 1, 213, 190, 1, 0.3239436745643616, 0.9473684430122376,[],[],0],
				["images/rocket-sheet0.png", 3133722, 961, 193, 220, 143, 1, 0.3181818127632141, 0.8601398468017578,[],[],0],
				["images/rocket-sheet0.png", 3133722, 797, 1392, 223, 106, 1, 0.318385660648346, 0.7641509175300598,[],[],0],
				["images/rocket-sheet0.png", 3133722, 496, 1476, 222, 85, 1, 0.315315306186676, 0.7647058963775635,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1753, 1405, 223, 91, 1, 0.3139013350009918, 0.791208803653717,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1098, 483, 224, 130, 1, 0.3125, 0.8384615182876587,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1795, 1182, 249, 97, 1, 0.3855421543121338, 0.7938144207000732,[],[],0],
				["images/rocket-sheet0.png", 3133722, 496, 1395, 259, 79, 1, 0.4092664122581482, 0.7594936490058899,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 1432, 254, 78, 1, 0.3976377844810486, 0.7564102411270142,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1377, 1433, 253, 78, 1, 0.395256906747818, 0.7564102411270142,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1123, 1412, 252, 79, 1, 0.3968254029750824, 0.746835470199585,[],[],0]
			]
			]
,			[
			"ShootPower",
			15,
			false,
			1,
			0,
			false,
			2442726662838392,
			[
				["images/rocket-sheet0.png", 3133722, 1756, 155, 208, 152, 1, 0.2836538553237915, 0.9736841917037964,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1576, 1, 178, 204, 1, 0.4325842559337616, 0.9803921580314636,[],[],0],
				["images/rocket-sheet0.png", 3133722, 411, 1036, 108, 226, 1, 0.7870370149612427, 0.982300877571106,[],[],0],
				["images/rocket-sheet0.png", 3133722, 215, 790, 126, 217, 1, 0.817460298538208, 0.981566846370697,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1824, 591, 145, 197, 1, 0.800000011920929, 0.9796954393386841,[],[],0],
				["images/rocket-sheet0.png", 3133722, 1559, 715, 147, 191, 1, 0.7414966225624085, 0.9790576100349426,[],[],0],
				["images/rocket-sheet0.png", 3133722, 395, 1393, 99, 211, 1, 0.6363636255264282, 0.9810426831245422,[],[],0],
				["images/rocket-sheet0.png", 3133722, 751, 204, 180, 173, 1, 0.3166666626930237, 0.9768785834312439,[],[],0],
				["images/rocket-sheet0.png", 3133722, 562, 1016, 204, 130, 1, 0.2549019753932953, 0.9692307710647583,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8326597072781213,
		[],
		null
	]
,	[
		"t18",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Climb",
			15,
			false,
			1,
			0,
			false,
			5132662730258334,
			[
				["images/rocketclimb-sheet1.png", 94248, 1, 1, 122, 210, 1, 0.8442623019218445, 0.6952381134033203,[["Imagepoint 1", 1.090163946151733, 0.6476190686225891]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 356, 1, 130, 207, 1, 0.7923076748847961, 0.7004830837249756,[["Imagepoint 1", 1.023076891899109, 0.6521739363670349]],[],0],
				["images/rocket-sheet0.png", 3133722, 1, 267, 155, 195, 1, 0.6645161509513855, 0.6717948913574219,[["Imagepoint 1", 0.8580645322799683, 0.620512843132019]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 184, 1, 170, 184, 1, 0.6058823466300964, 0.6413043737411499,[["Imagepoint 1", 0.7823529243469238, 0.5869565010070801]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 1, 1, 181, 182, 1, 0.5690608024597168, 0.6153846383094788,[["Imagepoint 1", 0.7348066568374634, 0.5604395866394043]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 1, 371, 196, 134, 1, 0.4744898080825806, 0.6865671873092651,[["Imagepoint 1", 0.6275510191917419, 0.611940324306488]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 345, 210, 152, 176, 1, 0.4407894611358643, 0.75,[["Imagepoint 1", 0.6381579041481018, 0.6931818127632141]],[],0],
				["images/rocketclimb-sheet1.png", 94248, 327, 1, 118, 201, 1, 0.4152542352676392, 0.7562189102172852,[["Imagepoint 1", 0.6694915294647217, 0.7064676880836487]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 1, 185, 162, 184, 1, 0.2098765373229981, 0.7880434989929199,[["Imagepoint 1", 0.395061731338501, 0.7336956262588501]],[],0],
				["images/rocketclimb-sheet1.png", 94248, 125, 1, 200, 124, 1, 0.08500000089406967, 1.080645203590393,[["Imagepoint 1", 0.2349999994039536, 1]],[],0],
				["images/rocketclimb-sheet0.png", 233552, 165, 187, 178, 165, 1, 0.05617977678775787, 1.030303001403809,[["Imagepoint 1", 0.2247191071510315, 0.9696969985961914]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8956009622731461,
		[],
		null
	]
,	[
		"t19",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Jump",
			15,
			true,
			1,
			0,
			false,
			6716017820930081,
			[
				["images/starlord-sheet0.png", 968903, 478, 344, 137, 158, 1, 0.262773722410202, 0.9430379867553711,[],[],0]
			]
			]
,			[
			"Run",
			15,
			true,
			1,
			0,
			false,
			3317346437491681,
			[
				["images/starlord-sheet1.png", 919921, 389, 757, 135, 138, 1, 0.3185185194015503, 1.014492750167847,[],[],0],
				["images/starlord-sheet1.png", 919921, 691, 442, 143, 136, 1, 0.3776223659515381, 1.007352948188782,[],[],0],
				["images/starlord-sheet2.png", 486325, 882, 1, 127, 138, 1, 0.3070866167545319, 0.9637681245803833,[],[],0],
				["images/starlord-sheet2.png", 486325, 629, 297, 113, 146, 1, 0.2123893797397614, 0.9383561611175537,[],[],0],
				["images/starlord-sheet2.png", 486325, 629, 150, 120, 145, 1, 0.2416666597127914, 0.9655172228813171,[],[],0],
				["images/starlord-sheet1.png", 919921, 521, 607, 127, 148, 1, 0.2677165269851685, 0.9729729890823364,[],[],0],
				["images/starlord-sheet1.png", 919921, 419, 298, 139, 143, 1, 0.316546767950058, 1.013985991477966,[],[],0],
				["images/starlord-sheet0.png", 968903, 583, 792, 147, 142, 1, 0.3401360511779785, 0.9929577708244324,[],[],0],
				["images/starlord-sheet0.png", 968903, 1, 208, 155, 142, 1, 0.3677419424057007, 0.9507042169570923,[],[],0],
				["images/starlord-sheet1.png", 919921, 716, 1, 146, 141, 1, 0.3424657583236694, 0.9432623982429504,[],[],0],
				["images/starlord-sheet1.png", 919921, 650, 881, 124, 142, 1, 0.2338709682226181, 0.9507042169570923,[],[],0],
				["images/starlord-sheet1.png", 919921, 259, 447, 134, 144, 1, 0.305970162153244, 0.9583333134651184,[],[],0]
			]
			]
,			[
			"Shoot",
			15,
			false,
			1,
			0,
			false,
			9027516632424179,
			[
				["images/starlord-sheet0.png", 968903, 291, 806, 141, 147, 1, 0.3546099364757538, 0.9795918464660645,[["FirePoint", 0.936170220375061, 0.3401360511779785],["Imagepoint 1", 0.9929078221321106, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 617, 493, 145, 147, 1, 0.3586207032203674, 0.9795918464660645,[["FirePoint", 0.9241379499435425, 0.3401360511779785],["Imagepoint 1", 0.9793103337287903, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 328, 209, 148, 147, 1, 0.3783783912658691, 0.9795918464660645,[["FirePoint", 0.9324324131011963, 0.3401360511779785],["Imagepoint 1", 0.9864864945411682, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 328, 358, 147, 146, 1, 0.3945578336715698, 0.9794520735740662,[["FirePoint", 0.9523809552192688, 0.3356164395809174],["Imagepoint 1", 1.006802678108215, 0.4520547986030579]],[],0],
				["images/starlord-sheet0.png", 968903, 617, 344, 147, 147, 1, 0.4013605415821075, 0.9795918464660645,[["FirePoint", 0.9591836929321289, 0.3401360511779785],["Imagepoint 1", 1.01360547542572, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 143, 298, 136, 147, 1, 0.3970588147640228, 0.9795918464660645,[["FirePoint", 1, 0.3401360511779785],["Imagepoint 1", 1.058823585510254, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 909, 458, 112, 157, 1, 0.4464285671710968, 0.9808917045593262,[["FirePoint", 1.178571462631226, 0.3821656107902527],["Imagepoint 1", 1.25, 0.4904458522796631]],[],0],
				["images/starlord-sheet2.png", 486325, 109, 302, 94, 165, 1, 0.5, 0.9818181991577148,[["FirePoint", 1.372340440750122, 0.4121212065219879],["Imagepoint 1", 1.457446813583374, 0.5151515007019043]],[],0],
				["images/starlord-sheet2.png", 486325, 501, 298, 98, 164, 1, 0.4795918464660645, 0.9817073345184326,[["FirePoint", 1.316326498985291, 0.4085365831851959],["Imagepoint 1", 1.397959232330322, 0.5121951103210449]],[],0],
				["images/starlord-sheet2.png", 486325, 867, 270, 106, 159, 1, 0.4339622557163239, 0.9811320900917053,[["FirePoint", 1.207547187805176, 0.3899371027946472],["Imagepoint 1", 1.283018827438355, 0.4968553483486176]],[],0],
				["images/starlord-sheet2.png", 486325, 383, 148, 116, 150, 1, 0.3879310488700867, 0.9800000190734863,[["FirePoint", 1.09482753276825, 0.3533333241939545],["Imagepoint 1", 1.163793087005615, 0.4666666686534882]],[],0],
				["images/starlord-sheet2.png", 486325, 131, 1, 124, 147, 1, 0.3548386991024017, 0.9795918464660645,[["FirePoint", 1.016129016876221, 0.3401360511779785],["Imagepoint 1", 1.080645203590393, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 676, 580, 130, 147, 1, 0.3384615480899811, 0.9795918464660645,[["FirePoint", 0.9692307710647583, 0.3401360511779785],["Imagepoint 1", 1.030769228935242, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 1, 299, 134, 146, 1, 0.335820883512497, 0.9794520735740662,[["FirePoint", 0.9477611780166626, 0.3356164395809174],["Imagepoint 1", 1.007462739944458, 0.4520547986030579]],[],0],
				["images/starlord-sheet1.png", 919921, 427, 150, 138, 146, 1, 0.3405797183513641, 0.9794520735740662,[["FirePoint", 0.9347826242446899, 0.3356164395809174],["Imagepoint 1", 0.9927536249160767, 0.4520547986030579]],[],0],
				["images/starlord-sheet1.png", 919921, 143, 150, 140, 146, 1, 0.3499999940395355, 0.9794520735740662,[["FirePoint", 0.9357143044471741, 0.3356164395809174],["Imagepoint 1", 0.9928571581840515, 0.4520547986030579]],[],0],
				["images/starlord-sheet0.png", 968903, 434, 806, 141, 147, 1, 0.3617021143436432, 0.9795918464660645,[["FirePoint", 0.9432623982429504, 0.3401360511779785],["Imagepoint 1", 1, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 145, 818, 141, 147, 1, 0.3758865296840668, 0.9795918464660645,[["FirePoint", 0.957446813583374, 0.3401360511779785],["Imagepoint 1", 1.014184355735779, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 858, 150, 137, 147, 1, 0.3795620501041412, 0.9795918464660645,[["FirePoint", 0.9781022071838379, 0.3401360511779785],["Imagepoint 1", 1.03649640083313, 0.4557823240756989]],[],0]
			]
			]
,			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			4799360097587909,
			[
				["images/starlord-sheet1.png", 919921, 1, 1, 141, 147, 1, 0.3191489279270172, 0.9795918464660645,[],[],0],
				["images/starlord-sheet1.png", 919921, 864, 1, 140, 147, 1, 0.3214285671710968, 0.9795918464660645,[],[],0],
				["images/starlord-sheet1.png", 919921, 716, 144, 140, 147, 1, 0.3214285671710968, 0.9795918464660645,[],[],0],
				["images/starlord-sheet1.png", 919921, 1, 150, 140, 147, 1, 0.3214285671710968, 0.9795918464660645,[],[],0],
				["images/starlord-sheet0.png", 968903, 879, 763, 142, 147, 1, 0.3239436745643616, 0.9795918464660645,[],[],0],
				["images/starlord-sheet0.png", 968903, 1, 800, 142, 147, 1, 0.3239436745643616, 0.9795918464660645,[],[],0],
				["images/starlord-sheet0.png", 968903, 445, 506, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 148, 518, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 764, 613, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 590, 642, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 299, 506, 144, 148, 1, 0.3333333432674408, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 1, 650, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 293, 656, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 438, 656, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 146, 668, 143, 148, 1, 0.3286713361740112, 0.9797297120094299,[],[],0],
				["images/starlord-sheet0.png", 968903, 735, 763, 142, 148, 1, 0.3239436745643616, 0.9797297120094299,[],[],0],
				["images/starlord-sheet1.png", 919921, 144, 1, 141, 147, 1, 0.3191489279270172, 0.9795918464660645,[],[],0]
			]
			]
,			[
			"Walk",
			15,
			true,
			1,
			0,
			false,
			4478888146545198,
			[
				["images/starlord-sheet1.png", 919921, 1, 447, 127, 152, 1, 0.2913385927677155, 0.9342105388641357,[["FirePoint", 0.960629940032959, 0.3486842215061188],["Imagepoint 1", 0.9685039520263672, 0.3684210479259491]],[],0],
				["images/starlord-sheet1.png", 919921, 547, 454, 127, 151, 1, 0.2913385927677155, 0.9337748289108276,[["FirePoint", 0.960629940032959, 0.3443708717823029],["Imagepoint 1", 0.9685039520263672, 0.3642384111881256]],[],0],
				["images/starlord-sheet1.png", 919921, 777, 746, 127, 147, 1, 0.2913385927677155, 0.9523809552192688,[["FirePoint", 0.960629940032959, 0.3469387888908386],["Imagepoint 1", 0.9685039520263672, 0.3673469424247742]],[],0],
				["images/starlord-sheet1.png", 919921, 125, 756, 128, 145, 1, 0.2890625, 0.9586206674575806,[["FirePoint", 0.953125, 0.3448275923728943],["Imagepoint 1", 0.9609375, 0.3655172288417816]],[],0],
				["images/starlord-sheet2.png", 486325, 383, 1, 125, 145, 1, 0.2800000011920929, 0.9655172228813171,[["FirePoint", 0.9599999785423279, 0.3517241477966309],["Imagepoint 1", 0.9679999947547913, 0.3724137842655182]],[],0],
				["images/starlord-sheet2.png", 486325, 1, 147, 120, 146, 1, 0.25, 0.9726027250289917,[["FirePoint", 0.9583333134651184, 0.3630136847496033],["Imagepoint 1", 0.9666666388511658, 0.3835616409778595]],[],0],
				["images/starlord-sheet2.png", 486325, 751, 152, 114, 148, 1, 0.210526317358017, 0.9729729890823364,[["FirePoint", 0.9561403393745422, 0.3716216087341309],["Imagepoint 1", 0.9649122953414917, 0.3918918967247009]],[],0],
				["images/starlord-sheet2.png", 486325, 510, 147, 117, 149, 1, 0.2393162399530411, 0.9731543660163879,[["FirePoint", 0.9658119678497315, 0.3758389353752136],["Imagepoint 1", 0.9743589758872986, 0.3959731459617615]],[],0],
				["images/starlord-sheet1.png", 919921, 526, 757, 122, 150, 1, 0.2704918086528778, 0.9733333587646484,[["FirePoint", 0.9672130942344666, 0.3799999952316284],["Imagepoint 1", 0.9754098653793335, 0.4000000059604645]],[],0],
				["images/starlord-sheet1.png", 919921, 650, 729, 125, 150, 1, 0.2879999876022339, 0.9733333587646484,[["FirePoint", 0.9679999947547913, 0.3799999952316284],["Imagepoint 1", 0.9760000109672546, 0.4000000059604645]],[],0],
				["images/starlord-sheet1.png", 919921, 391, 599, 128, 148, 1, 0.3046875, 0.9797297120094299,[["FirePoint", 0.96875, 0.3783783912658691],["Imagepoint 1", 0.9765625, 0.3986486494541168]],[],0],
				["images/starlord-sheet1.png", 919921, 808, 597, 129, 147, 1, 0.3178294599056244, 0.9727891087532044,[["FirePoint", 0.9767441749572754, 0.3673469424247742],["Imagepoint 1", 0.9844961166381836, 0.3877550959587097]],[],0],
				["images/starlord-sheet1.png", 919921, 836, 447, 130, 148, 1, 0.3230769336223602, 0.9594594836235046,[["FirePoint", 0.9769230484962463, 0.3581081032752991],["Imagepoint 1", 0.9846153855323792, 0.3783783912658691]],[],0],
				["images/starlord-sheet1.png", 919921, 1, 601, 130, 145, 1, 0.3230769336223602, 0.9655172228813171,[["FirePoint", 0.9769230484962463, 0.3517241477966309],["Imagepoint 1", 0.9846153855323792, 0.3724137842655182]],[],0],
				["images/starlord-sheet1.png", 919921, 258, 742, 129, 145, 1, 0.3178294599056244, 0.9586206674575806,[["FirePoint", 0.9767441749572754, 0.3448275923728943],["Imagepoint 1", 0.9844961166381836, 0.3655172288417816]],[],0],
				["images/starlord-sheet2.png", 486325, 1, 1, 128, 144, 1, 0.3125, 0.9583333134651184,[["FirePoint", 0.9765625, 0.3402777910232544],["Imagepoint 1", 0.984375, 0.3611111044883728]],[],0],
				["images/starlord-sheet2.png", 486325, 510, 1, 125, 144, 1, 0.2960000038146973, 0.9652777910232544,[["FirePoint", 0.9760000109672546, 0.3472222089767456],["Imagepoint 1", 0.984000027179718, 0.3680555522441864]],[],0],
				["images/starlord-sheet2.png", 486325, 637, 1, 122, 147, 1, 0.2786885201931, 0.9659863710403442,[["FirePoint", 0.9754098653793335, 0.3605442047119141],["Imagepoint 1", 0.9836065769195557, 0.380952388048172]],[],0],
				["images/starlord-sheet2.png", 486325, 761, 1, 119, 149, 1, 0.2605042159557343, 0.9664429426193237,[["FirePoint", 0.9747899174690247, 0.3691275119781494],["Imagepoint 1", 0.9831932783126831, 0.3892617523670197]],[],0],
				["images/starlord-sheet2.png", 486325, 123, 150, 116, 150, 1, 0.2327586263418198, 0.9666666388511658,[["FirePoint", 0.9655172228813171, 0.3733333349227905],["Imagepoint 1", 0.9741379022598267, 0.3933333456516266]],[],0],
				["images/starlord-sheet0.png", 968903, 902, 1, 119, 152, 1, 0.2521008551120758, 0.9605262875556946,[["FirePoint", 0.9663865566253662, 0.375],["Imagepoint 1", 0.9747899174690247, 0.3947368562221527]],[],0],
				["images/starlord-sheet1.png", 919921, 1, 748, 122, 153, 1, 0.2704918086528778, 0.9542483687400818,[["FirePoint", 0.9672130942344666, 0.3725490272045136],["Imagepoint 1", 0.9754098653793335, 0.3921568691730499]],[],0],
				["images/starlord-sheet1.png", 919921, 133, 601, 123, 153, 1, 0.2764227688312531, 0.9477124214172363,[["FirePoint", 0.9674796462059021, 0.3660130798816681],["Imagepoint 1", 0.9756097793579102, 0.3856209218502045]],[],0],
				["images/starlord-sheet1.png", 919921, 419, 443, 126, 154, 1, 0.2857142984867096, 0.9350649118423462,[["FirePoint", 0.9603174328804016, 0.3571428656578064],["Imagepoint 1", 0.9682539701461792, 0.3766233623027802]],[],0],
				["images/starlord-sheet1.png", 919921, 130, 447, 127, 152, 1, 0.2913385927677155, 0.9342105388641357,[["FirePoint", 0.960629940032959, 0.3486842215061188],["Imagepoint 1", 0.9685039520263672, 0.3684210479259491]],[],0],
				["images/starlord-sheet1.png", 919921, 560, 298, 129, 154, 1, 0.2790697813034058, 0.9220778942108154,[["FirePoint", 0.9379844665527344, 0.3441558480262756],["Imagepoint 1", 0.9457364082336426, 0.3636363744735718]],[],0]
			]
			]
,			[
			"Fall",
			15,
			true,
			1,
			0,
			false,
			6100783499236904,
			[
				["images/starlord-sheet0.png", 968903, 766, 458, 140, 153, 1, 0.3785714209079742, 1.058823585510254,[["FirePoint", 0.9928571581840515, 0.3202614486217499],["Imagepoint 1", 0.9857142567634583, 0.3267973959445953]],[],0]
			]
			]
,			[
			"Landed",
			15,
			false,
			1,
			0,
			false,
			6605728280059391,
			[
				["images/starlord-sheet2.png", 486325, 882, 141, 138, 127, 1, 0.2101449221372604, 0.9685039520263672,[["FirePoint", 0.97826087474823, 0.4488188922405243],["Imagepoint 1", 0.9855072498321533, 0.4566929042339325]],[],0],
				["images/starlord-sheet1.png", 919921, 776, 895, 108, 112, 1, 0.4166666567325592, 0.9642857313156128,[["FirePoint", 1.39814817905426, 0.375],["Imagepoint 1", 1.407407402992249, 0.3839285671710968]],[],0],
				["images/starlord-sheet1.png", 919921, 255, 889, 111, 120, 1, 0.4594594538211823, 1,[["FirePoint", 1.414414405822754, 0.449999988079071],["Imagepoint 1", 1.423423409461975, 0.4583333432674408]],[],0],
				["images/starlord-sheet0.png", 968903, 909, 617, 107, 132, 1, 0.5327102541923523, 0.9696969985961914,[["FirePoint", 1.523364543914795, 0.469696968793869],["Imagepoint 1", 1.532710313796997, 0.4772727191448212]],[],0],
				["images/starlord-sheet0.png", 968903, 923, 309, 94, 142, 1, 0.6063829660415649, 0.9929577708244324,[["FirePoint", 1.734042525291443, 0.5281690359115601],["Imagepoint 1", 1.744680881500244, 0.5352112650871277]],[],0]
			]
			]
,			[
			"Die",
			15,
			false,
			0,
			0,
			false,
			4411688683304583,
			[
				["images/starlord-sheet0.png", 968903, 184, 170, 142, 198, 1, 0.5, 0.9747474789619446,[],[],0],
				["images/starlord-sheet0.png", 968903, 397, 1, 158, 206, 1, 0.5253164768218994, 0.9951456189155579,[],[],0],
				["images/starlord-sheet0.png", 968903, 1, 1, 181, 205, 1, 0.4585635364055634, 1.02439022064209,[],[],0],
				["images/starlord-sheet0.png", 968903, 737, 1, 163, 195, 1, 0.5030674934387207, 1.071794867515564,[],[],0],
				["images/starlord-sheet0.png", 968903, 557, 1, 178, 180, 1, 0.5112359523773193, 1.055555582046509,[],[],0],
				["images/starlord-sheet0.png", 968903, 184, 1, 211, 167, 1, 0.4881516695022583, 1,[],[],0],
				["images/starlord-sheet0.png", 968903, 557, 198, 214, 144, 1, 0.514018714427948, 0.9513888955116272,[],[],0],
				["images/starlord-sheet0.png", 968903, 773, 198, 212, 109, 1, 0.5235849022865295, 0.8715596199035645,[],[],0],
				["images/starlord-sheet0.png", 968903, 732, 913, 212, 78, 1, 0.5047169923782349, 0.7948718070983887,[],[],0],
				["images/starlord-sheet0.png", 968903, 288, 955, 212, 68, 1, 0.4905660450458527, 0.7941176295280457,[],[],0],
				["images/starlord-sheet0.png", 968903, 502, 955, 210, 65, 1, 0.4904761910438538, 0.8153846263885498,[],[],0],
				["images/starlord-sheet1.png", 919921, 1, 903, 209, 57, 1, 0.4880382716655731, 0.8070175647735596,[],[],0],
				["images/starlord-sheet0.png", 968903, 1, 967, 209, 50, 1, 0.4880382716655731, 0.7799999713897705,[],[],0],
				["images/starlord-sheet1.png", 919921, 368, 909, 209, 50, 1, 0.4880382716655731, 0.7799999713897705,[],[],0],
				["images/starlord-sheet1.png", 919921, 368, 961, 209, 50, 1, 0.4880382716655731, 0.7799999713897705,[],[],0],
				["images/starlord-sheet1.png", 919921, 1, 962, 209, 50, 1, 0.4880382716655731, 0.7799999713897705,[],[],0],
				["images/starlord-sheet2.png", 486325, 744, 431, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 459, 464, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 1, 469, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 212, 469, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 670, 482, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 423, 515, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 1, 520, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 212, 520, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 634, 533, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0],
				["images/starlord-sheet2.png", 486325, 423, 566, 209, 49, 1, 0.4880382716655731, 0.7755101919174194,[],[],0]
			]
			]
,			[
			"ShootPower",
			15,
			false,
			1,
			0,
			false,
			390483050358199,
			[
				["images/starlord-sheet1.png", 919921, 287, 1, 141, 147, 1, 0.3546099364757538, 0.9795918464660645,[["FirePoint", 0.936170220375061, 0.3401360511779785],["Imagepoint 1", 0.9929078221321106, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 1, 501, 145, 147, 1, 0.3586207032203674, 0.9795918464660645,[["FirePoint", 0.9241379499435425, 0.3401360511779785],["Imagepoint 1", 0.9793103337287903, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 773, 309, 148, 147, 1, 0.3783783912658691, 0.9795918464660645,[["FirePoint", 0.9324324131011963, 0.3401360511779785],["Imagepoint 1", 0.9864864945411682, 0.4557823240756989]],[],0],
				["images/starlord-sheet0.png", 968903, 150, 370, 147, 146, 1, 0.3945578336715698, 0.9794520735740662,[["FirePoint", 0.9523809552192688, 0.3356164395809174],["Imagepoint 1", 1.006802678108215, 0.4520547986030579]],[],0],
				["images/starlord-sheet0.png", 968903, 1, 352, 147, 147, 1, 0.4013605415821075, 0.9795918464660645,[["FirePoint", 0.9591836929321289, 0.3401360511779785],["Imagepoint 1", 1.01360547542572, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 281, 298, 136, 147, 1, 0.3970588147640228, 0.9795918464660645,[["FirePoint", 1, 0.3401360511779785],["Imagepoint 1", 1.058823585510254, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 906, 746, 112, 157, 1, 0.4464285671710968, 0.9808917045593262,[["FirePoint", 1.178571462631226, 0.3821656107902527],["Imagepoint 1", 1.25, 0.4904458522796631]],[],0],
				["images/starlord-sheet2.png", 486325, 205, 302, 94, 165, 1, 0.5, 0.9818181991577148,[["FirePoint", 1.372340440750122, 0.4121212065219879],["Imagepoint 1", 1.457446813583374, 0.5151515007019043]],[],0],
				["images/starlord-sheet2.png", 486325, 359, 300, 98, 164, 1, 0.4795918464660645, 0.9817073345184326,[["FirePoint", 1.316326498985291, 0.4085365831851959],["Imagepoint 1", 1.397959232330322, 0.5121951103210449]],[],0],
				["images/starlord-sheet2.png", 486325, 1, 295, 106, 159, 1, 0.4339622557163239, 0.9811320900917053,[["FirePoint", 1.207547187805176, 0.3899371027946472],["Imagepoint 1", 1.283018827438355, 0.4968553483486176]],[],0],
				["images/starlord-sheet2.png", 486325, 241, 150, 116, 150, 1, 0.3879310488700867, 0.9800000190734863,[["FirePoint", 1.09482753276825, 0.3533333241939545],["Imagepoint 1", 1.163793087005615, 0.4666666686534882]],[],0],
				["images/starlord-sheet2.png", 486325, 257, 1, 124, 147, 1, 0.3548386991024017, 0.9795918464660645,[["FirePoint", 1.016129016876221, 0.3401360511779785],["Imagepoint 1", 1.080645203590393, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 259, 593, 130, 147, 1, 0.3384615480899811, 0.9795918464660645,[["FirePoint", 0.9692307710647583, 0.3401360511779785],["Imagepoint 1", 1.030769228935242, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 846, 299, 134, 146, 1, 0.335820883512497, 0.9794520735740662,[["FirePoint", 0.9477611780166626, 0.3356164395809174],["Imagepoint 1", 1.007462739944458, 0.4520547986030579]],[],0],
				["images/starlord-sheet1.png", 919921, 567, 150, 138, 146, 1, 0.3405797183513641, 0.9794520735740662,[["FirePoint", 0.9347826242446899, 0.3356164395809174],["Imagepoint 1", 0.9927536249160767, 0.4520547986030579]],[],0],
				["images/starlord-sheet1.png", 919921, 285, 150, 140, 146, 1, 0.3499999940395355, 0.9794520735740662,[["FirePoint", 0.9357143044471741, 0.3356164395809174],["Imagepoint 1", 0.9928571581840515, 0.4520547986030579]],[],0],
				["images/starlord-sheet1.png", 919921, 430, 1, 141, 147, 1, 0.3617021143436432, 0.9795918464660645,[["FirePoint", 0.9432623982429504, 0.3401360511779785],["Imagepoint 1", 1, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 573, 1, 141, 147, 1, 0.3758865296840668, 0.9795918464660645,[["FirePoint", 0.957446813583374, 0.3401360511779785],["Imagepoint 1", 1.014184355735779, 0.4557823240756989]],[],0],
				["images/starlord-sheet1.png", 919921, 707, 293, 137, 147, 1, 0.3795620501041412, 0.9795918464660645,[["FirePoint", 0.9781022071838379, 0.3401360511779785],["Imagepoint 1", 1.03649640083313, 0.4557823240756989]],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			2276576520638498
		]
		],
		false,
		false,
		9782238159192878,
		[],
		null
	]
,	[
		"t20",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Climb",
			15,
			false,
			1,
			0,
			false,
			2031718924547595,
			[
				["images/starlordclimb-sheet0.png", 191680, 370, 1, 131, 205, 1, 0.6412213444709778, 0.1853658556938171,[["Imagepoint 1", 1.229007601737976, 0.1609756052494049]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 1, 1, 151, 204, 1, 0.5894039869308472, 0.3529411852359772,[["Imagepoint 1", 1.099337697029114, 0.3284313678741455]],[],0],
				["images/starlordclimb-sheet0.png", 191680, 367, 208, 133, 200, 1, 0.5789473652839661, 0.5550000071525574,[["Imagepoint 1", 1.157894730567932, 0.5299999713897705]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 1, 207, 87, 197, 1, 0.6666666865348816, 0.7614213228225708,[["Imagepoint 1", 1.551724195480347, 0.7360405921936035]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 154, 191, 96, 193, 1, 0.46875, 0.9326424598693848,[["Imagepoint 1", 1.270833373069763, 0.9067357778549194]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 402, 190, 103, 189, 1, 0.3106796145439148, 1.052910089492798,[["Imagepoint 1", 1.058252453804016, 1.026455044746399]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 293, 1, 114, 187, 1, 0.210526317358017, 1.11229944229126,[["Imagepoint 1", 0.8859649300575256, 1.085561513900757]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 293, 190, 107, 189, 1, 0.1214953288435936, 1.142857193946838,[["Imagepoint 1", 0.8411214947700501, 1.11640214920044]],[],0],
				["images/starlordclimb-sheet1.png", 174891, 154, 1, 137, 188, 1, 0.08029197156429291, 1.164893627166748,[["Imagepoint 1", 0.6423357725143433, 1.138297915458679]],[],0],
				["images/starlordclimb-sheet0.png", 191680, 1, 199, 170, 191, 1, 0.05294117704033852, 1.141361236572266,[["Imagepoint 1", 0.5058823823928833, 1.115183234214783]],[],0],
				["images/starlordclimb-sheet0.png", 191680, 1, 1, 184, 196, 1, 0.01086956541985273, 1.096938729286194,[["Imagepoint 1", 0.4293478131294251, 1.071428537368774]],[],0],
				["images/starlordclimb-sheet0.png", 191680, 187, 1, 181, 189, 1, -0.01657458581030369, 1.010581970214844,[["Imagepoint 1", 0.4088397920131683, 0.9841269850730896]],[],0],
				["images/starlordclimb-sheet0.png", 191680, 187, 192, 178, 192, 1, -0.03932584449648857, 1.010416626930237,[["Imagepoint 1", 0.3932584226131439, 0.984375]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8598921946694055,
		[],
		null
	]
,	[
		"t21",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			0,
			0,
			false,
			4986908718260886,
			[
				["images/hudbosshealth-sheet0.png", 2713, 1, 1, 260, 38, 1, 0.5, 0.5,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 58, 41, 31, 30, 1, -1.387096762657166, 0.6666666865348816,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 1, 41, 55, 30, 1, -0.3454545438289642, 0.6666666865348816,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 412, 1, 75, 30, 1, 0.01333333365619183, 0.6666666865348816,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 387, 33, 101, 30, 1, 0.2673267424106598, 0.6666666865348816,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 263, 33, 122, 30, 1, 0.3934426307678223, 0.6666666865348816,[],[],0],
				["images/hudbosshealth-sheet0.png", 2713, 263, 1, 147, 30, 1, 0.49659863114357, 0.6666666865348816,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			498978422564151
		]
		],
		false,
		false,
		9263732404958892,
		[],
		null
	]
,	[
		"t22",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			9625928834766316,
			[
				["images/hudaudio-sheet0.png", 1812, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0],
				["images/hudaudio-sheet1.png", 1845, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7020912980944229,
		[],
		null
	]
,	[
		"t23",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			0,
			0,
			false,
			604480760700448,
			[
				["images/hudbosshealth-sheet0.png", 2713, 1, 1, 260, 38, 1, 0.5, 0.5,[],[],0],
				["images/hudbosshealth2-sheet0.png", 2092, 1, 1, 162, 56, 1, 0.5, 0.5,[],[],0],
				["images/hudbosshealth2-sheet0.png", 2092, 1, 59, 162, 56, 1, 0.5, 0.5,[],[],0],
				["images/hudbosshealth2-sheet0.png", 2092, 1, 117, 162, 56, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			2702656812960592
		]
		],
		false,
		false,
		6818836741420026,
		[],
		null
	]
,	[
		"t24",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			0,
			0,
			false,
			2886992140500555,
			[
				["images/hudbosshealth-sheet0.png", 2713, 1, 1, 260, 38, 1, 0.5, 0.5,[],[],0],
				["images/hudhealth-sheet0.png", 2146, 1, 1, 145, 28, 1, 0.5034482479095459, 0.5,[],[],0],
				["images/hudhealth-sheet0.png", 2146, 1, 31, 145, 28, 1, 0.5034482479095459, 0.5,[],[],0],
				["images/hudhealth-sheet0.png", 2146, 1, 61, 145, 28, 1, 0.5034482479095459, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			4614345274696076
		]
		],
		false,
		false,
		2108401128471462,
		[],
		null
	]
,	[
		"t25",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			290912086832455,
			[
				["images/hudhealthicon-sheet0.png", 3738, 0, 0, 162, 56, 1, 0.5, 0.5,[],[-0.4753085970878601,-0.4285714030265808,0,0.1785709857940674,0.2654320001602173,0.1785709857940674,-0.4506173133850098,0,0.4444440007209778,0.3392860293388367,0,0.2142860293388367,-0.4691357910633087,0.4107139706611633],0]
			]
			]
		],
		[
		],
		false,
		false,
		4391383167541414,
		[],
		null
	]
,	[
		"t26",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7584663408496898,
			[
				["images/hudhome-sheet0.png", 2171, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[-0.2888891398906708,-0.2888891398906708,-0.0222221314907074,-0.4000001549720764,0.2666668295860291,-0.2888891398906708,0.3999998569488525,-0.0222221314907074,0.2888888716697693,0.2888888716697693,-0.0222221314907074,0.3999998569488525,-0.3111111521720886,0.2888888716697693,-0.4222222566604614,-0.0222221314907074],0]
			]
			]
		],
		[
		],
		false,
		false,
		8424647249825054,
		[],
		null
	]
,	[
		"t27",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4069915215591,
			[
				["images/hudmap-sheet0.png", 5127, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3757976944234376,
		[],
		null
	]
,	[
		"t28",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6243778984662074,
			[
				["images/hudpause-sheet0.png", 1746, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0],
				["images/hudpause-sheet1.png", 1776, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9041755582554929,
		[],
		null
	]
,	[
		"t29",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8352531960522812,
			[
				["images/hudreplay-sheet0.png", 5781, 0, 0, 128, 124, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Fade",
			cr.behaviors.Fade,
			1472651878650611
		]
		],
		false,
		false,
		9163781313128239,
		[],
		null
	]
,	[
		"t30",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			282979520101542,
			[
				["images/hudreplay2-sheet0.png", 5999, 0, 0, 128, 128, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Fade",
			cr.behaviors.Fade,
			4936559337896891
		]
		],
		false,
		false,
		5203151270714008,
		[],
		null
	]
,	[
		"t31",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Starlord",
			0,
			false,
			1,
			0,
			false,
			8220315386486402,
			[
				["images/hudobject-sheet2.png", 363, 0, 0, 64, 41, 1, 0.015625, 0.02439024299383164,[],[],0],
				["images/hudobject-sheet1.png", 7015, 1, 62, 66, 43, 1, 0.01515151560306549, 0.02325581386685371,[],[],0]
			]
			]
,			[
			"Drax",
			0,
			false,
			1,
			0,
			false,
			4866928616338018,
			[
				["images/hudobject-sheet1.png", 7015, 63, 1, 56, 56, 1, 0.5, 0.5,[],[],0],
				["images/hudobject-sheet0.png", 20684, 68, 1, 58, 58, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"Rocket",
			0,
			false,
			1,
			0,
			false,
			1212586920369347,
			[
				["images/hudobject-sheet0.png", 20684, 65, 66, 60, 59, 1, 0.5, 0.508474588394165,[],[],0],
				["images/hudobject-sheet0.png", 20684, 1, 66, 62, 61, 1, 0, 0,[],[],0]
			]
			]
,			[
			"Gamora",
			0,
			false,
			1,
			0,
			false,
			670853130583855,
			[
				["images/hudobject-sheet1.png", 7015, 1, 1, 60, 59, 1, 0.5, 0.508474588394165,[],[],0],
				["images/hudobject-sheet0.png", 20684, 1, 1, 65, 63, 1, 0.5076923370361328, 0.5079365372657776,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			7373839846880805
		]
		],
		false,
		false,
		7326227240916212,
		[],
		null
	]
,	[
		"t32",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8785143673660471,
			[
				["images/hudvignett-sheet0.png", 1111, 0, 0, 929, 122, 1, 0, 0,[],[0.001076429965905845,0.00819671992212534,0.9989240169525147,0.00819671992212534,0.8310009837150574,0.1147539988160133,0.1689990013837814,0.1147539988160133],0]
			]
			]
		],
		[
		],
		false,
		false,
		2734504596465013,
		[],
		null
	]
,	[
		"t33",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Starlord",
			5,
			false,
			1,
			0,
			false,
			9948846076590053,
			[
				["images/hudweapon-sheet0.png", 30428, 191, 1, 55, 49, 1, 0, 0.5102040767669678,[],[],0],
				["images/hudweapon-sheet0.png", 30428, 78, 89, 55, 49, 1, 0, 0.5102040767669678,[],[],0]
			]
			]
,			[
			"Drax",
			5,
			false,
			1,
			0,
			false,
			4338218908642408,
			[
				["images/hudweapon-sheet0.png", 30428, 144, 55, 75, 48, 1, 0, 0.5,[],[],0],
				["images/hudweapon-sheet0.png", 30428, 1, 89, 75, 48, 1, 0, 0.5,[],[],0]
			]
			]
,			[
			"Rocket",
			5,
			false,
			1,
			0,
			false,
			3446351400649393,
			[
				["images/hudweapon-sheet0.png", 30428, 1, 1, 93, 52, 1, 0, 0.5,[],[],0],
				["images/hudweapon-sheet0.png", 30428, 96, 1, 93, 52, 1, 0, 0.5,[],[],0]
			]
			]
,			[
			"Gamora",
			5,
			false,
			1,
			0,
			false,
			8428502228110904,
			[
				["images/hudweapon-sheet0.png", 30428, 1, 140, 126, 16, 1, 0, 0.5,[],[],0],
				["images/hudweapon-sheet0.png", 30428, 1, 55, 141, 32, 1, 0, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			716908753915951
		]
		],
		false,
		false,
		9126084986643101,
		[],
		null
	]
,	[
		"t34",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5578998762552685,
			[
				["images/hudstud-sheet0.png", 1625, 0, 0, 29, 28, 1, 0.517241358757019, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5332672474844615,
		[],
		null
	]
,	[
		"t35",
		cr.plugins_.Sprite,
		false,
		[5246466706634439,1507167829810083,5587300699124345,3353814644909978,4549733825714999,5970521711956942,1485245816777909,7812817668762496,5537789901036177,271171536559112,1084218943161637,1273344478549852],
		1,
		0,
		null,
		[
			[
			"Default",
			2,
			false,
			1,
			0,
			false,
			1210947345478959,
			[
				["images/player-sheet0.png", 155, 0, 0, 250, 250, 1, 0.5, 1,[["Imagepoint 1", 0.4959999918937683, 0.2560000121593475],["TrainingPosition1", -0.7039999961853027, 1.008000016212463],["Imagepoint 3", 1.575999975204468, 0.9800000190734863],["Imagepoint 4", 1.644000053405762, 0.9879999756813049],["Imagepoint 5", 0.004000000189989805, 0.9919999837875366],["Imagepoint 6", -0.004000000189989805, 0.2360000014305115],["Imagepoint 7", 0.9959999918937683, 0.2280000001192093]],[],1]
			]
			]
		],
		[
		[
			"Platform",
			cr.behaviors.Platform,
			3276967027150319
		]
		],
		false,
		false,
		8998526566558242,
		[],
		null
	]
,	[
		"t36",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7750828908635365,
			[
				["images/platform-sheet0.png", 131, 0, 0, 252, 20, 1, 0.5, 1,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			3310025655986216
		]
		],
		false,
		false,
		9369703032477403,
		[],
		null
	]
,	[
		"t37",
		cr.plugins_.Keyboard,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2341863297582566,
		[],
		null
		,[]
	]
,	[
		"t38",
		cr.plugins_.Mouse,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		9058753263515185,
		[],
		null
		,[]
	]
,	[
		"t39",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8600207285486154,
			[
				["images/playerclimbr-sheet0.png", 114, 0, 0, 25, 26, 1, -1.679999947547913, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6897610404242633,
		[],
		null
	]
,	[
		"t40",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9175972632277716,
			[
				["images/platformclimbhook-sheet0.png", 247, 0, 0, 21, 21, 1, 0, 0.523809552192688,[["Imagepoint 1", 3, -0.6190476417541504]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9654623603624625,
		[],
		null
	]
,	[
		"t41",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4924184822600673,
			[
				["images/playerclimbr-sheet0.png", 114, 0, 0, 25, 26, 1, 2.599999904632568, 0.4615384638309479,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2684315467658506,
		[],
		null
	]
,	[
		"t42",
		cr.plugins_.Sprite,
		false,
		[6388771852697194],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4450383643184209,
			[
				["images/camera-sheet0.png", 1119, 0, 0, 129, 109, 1, 0.5038759708404541, 0.5045871734619141,[],[],0]
			]
			]
		],
		[
		[
			"ScrollTo",
			cr.behaviors.scrollto,
			5108803362892484
		]
		],
		false,
		false,
		7868152295613376,
		[],
		null
	]
,	[
		"t43",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		7210421052638645,
		[],
		null
	]
,	[
		"t44",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1163572376271221,
		[],
		null
	]
,	[
		"t45",
		cr.plugins_.Tilemap,
		false,
		[],
		1,
		0,
		["images/tilemap.png", 2214081, 0],
		null,
		[
		[
			"Solid",
			cr.behaviors.solid,
			6725999417987507
		]
		],
		false,
		false,
		2380424816129624,
		[],
		[
			[0.462891012430191,0,1,0,1,0.8808590173721314,0.458983987569809,0.34375],
			null,
			null,
			null,
			null,
			null,
			null,
			[0,1,0,0,1,0,1,1],
			null,
			null,
			[0,0,0.5351560115814209,0,0.5351560115814209,0.349608987569809,0,0.8847659826278687,0,0.4238280057907105],
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0.4726560115814209,0,0.7539060115814209,0,0.7578129768371582,0,0.703125,0],
			[0,0,0,0,0,0,0,0],
			[0,0,1,0,1,1,1,1,0.00390625,1],
			null,
			null,
			null,
			null,
			[0.4609380066394806,0.001953129889443517,1,0,1,0.8808590173721314,0.462891012430191,0.34375],
			null,
			null,
			null,
			[0,0,0.5351560115814209,0,0.53125,0.3398439884185791,0,0.8886719942092896],
			null,
			[0,1,1,0.4960939884185791,1,1,0,1],
			[0,0.4980469942092896,1,0,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,0.6601560115814209,0,0.322266012430191,0],
			[0,0,1,0,0.5957030057907105,0,0.1621090024709702,0],
			[0,1,1,0.5039060115814209,1,1,0.5019530057907105,1],
			[0,0.6269530057907105,0.001953129889443517,0.4980469942092896,1,0,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0.494141012430191,1,1,0,1],
			[0,0.5058590173721314,1,1,0.4765630066394806,1,0,1],
			[0,1,0,1,0,1,0,1],
			[1,1,1,1,1,1],
			null,
			[0,0.5019530057907105,1,0.5039060115814209,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.4960939884185791,1,1,1,1,0,1],
			null,
			null,
			null,
			[0,0,1,0.4980469942092896,1,1,0,1],
			[0,0.5039060115814209,1,1,1,1,0,1],
			null,
			[0,0,1,0,1,0.494141012430191,0,0.4960939884185791],
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.4980469942092896,1,1,1,1,0,1],
			[0,1,1,0.4980469942092896,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0.462891012430191,0.5585939884185791,1,0,1,1,0,1],
			null,
			null,
			[0,0,1,0,1,0.3730469942092896,0,0.380858987569809],
			null,
			[0,0.3085939884185791,1,0.3085939884185791,1,0.6874999403953552,0.001953129889443517,0.6894530057907105]
		]
	]
,	[
		"t46",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			122945209745311,
			[
				["images/locator-sheet0.png", 130, 0, 0, 7, 7, 1, 0.5714285969734192, 0.5714285969734192,[],[],0]
			]
			]
		],
		[
		[
			"Fade",
			cr.behaviors.Fade,
			7223707517998403
		]
		],
		false,
		false,
		2195717300476594,
		[],
		null
	]
,	[
		"t47",
		cr.plugins_.Text,
		false,
		[7191423471230699,8045220592181946],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		6556156473613576,
		[],
		null
	]
,	[
		"t48",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3064089476646124,
			[
				["images/enemybarrier-sheet0.png", 120, 0, 0, 61, 59, 1, 0.5081967115402222, 0.508474588394165,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3292812876335256,
		[],
		null
	]
,	[
		"t49",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5208740107037241,
			[
				["images/upgradejump-sheet0.png", 6725, 0, 0, 141, 180, 1, 0.6808510422706604, 0.5333333611488342,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2955632923390042,
		[],
		null
	]
,	[
		"t50",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2998385137402013,
			[
				["images/tutorial_doublejump-sheet0.png", 16668, 0, 0, 400, 400, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		3803235592454559,
		[],
		null
	]
,	[
		"t51",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8129739306175126,
			[
				["images/touchjump-sheet0.png", 4432, 0, 0, 117, 117, 1, 0.504273533821106, 0.504273533821106,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1238018725624634,
		[],
		null
	]
,	[
		"t52",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4164052834461461,
			[
				["images/touchleft-sheet0.png", 3934, 0, 0, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5616050072511213,
		[],
		null
	]
,	[
		"t53",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5595753577148072,
			[
				["images/touchright-sheet0.png", 3946, 0, 0, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		486341321353588,
		[],
		null
	]
,	[
		"t54",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6132156356257372,
			[
				["images/touchfire-sheet0.png", 6178, 0, 0, 117, 117, 1, 0.504273533821106, 0.504273533821106,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6987583250523441,
		[],
		null
	]
,	[
		"t55",
		cr.plugins_.Touch,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		6697789993077301,
		[],
		null
		,[1]
	]
,	[
		"t56",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3327460293147493,
			[
				["images/drax-sheet1.png", 1012767, 131, 1, 128, 140, 1, 0.5, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		828651831600153,
		[],
		null
	]
,	[
		"t57",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3927641814111555,
			[
				["images/rocket-sheet0.png", 3133722, 1795, 1057, 201, 123, 1, 0.5024875402450562, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9255626620797876,
		[],
		null
	]
,	[
		"t58",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7547623160031838,
			[
				["images/gamora-sheet0.png", 2499910, 472, 1198, 113, 187, 1, 0.5044247508049011, 0.2139037400484085,[],[-0.5044247508049011,-0.01069474220275879,0.4955752491950989,-0.01069474220275879,0.4955752491950989,0.7860962748527527,-0.5044247508049011,0.7860962748527527],0]
			]
			]
		],
		[
		],
		false,
		false,
		2091850169102281,
		[],
		null
	]
,	[
		"t59",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			24,
			true,
			1,
			0,
			false,
			798386783542662,
			[
				["images/doorbarrier-sheet1.png", 377379, 607, 1, 130, 145, 1, 0.2230769246816635, 0.4896551668643951,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 739, 1, 130, 145, 1, 0.2230769246816635, 0.4896551668643951,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 606, 148, 130, 144, 1, 0.2230769246816635, 0.4861111044883728,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 201, 146, 131, 143, 1, 0.221374049782753, 0.4825174808502197,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 871, 148, 130, 142, 1, 0.2230769246816635, 0.48591548204422,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 334, 149, 130, 142, 1, 0.2230769246816635, 0.48591548204422,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 1, 213, 130, 142, 1, 0.2307692319154739, 0.48591548204422,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 871, 292, 130, 141, 1, 0.2307692319154739, 0.4893617033958435,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 266, 293, 130, 140, 1, 0.2307692319154739, 0.4928571283817291,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 133, 291, 131, 140, 1, 0.2366412281990051, 0.4928571283817291,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 738, 291, 131, 140, 1, 0.2366412281990051, 0.5,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 466, 288, 132, 139, 1, 0.2348484843969345, 0.5035971403121948,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 738, 148, 131, 141, 1, 0.2290076315402985, 0.5035461187362671,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 471, 145, 133, 141, 1, 0.2330827116966248, 0.5035461187362671,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 471, 1, 134, 142, 1, 0.2313432842493057, 0.5070422291755676,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 201, 1, 135, 143, 1, 0.2296296358108521, 0.5104895234107971,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 849, 765, 136, 144, 1, 0.227941170334816, 0.5069444179534912,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 1, 844, 136, 144, 1, 0.227941170334816, 0.5069444179534912,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 139, 844, 135, 145, 1, 0.2222222238779068, 0.5103448033332825,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 587, 855, 135, 145, 1, 0.2222222238779068, 0.5103448033332825,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 276, 859, 134, 145, 1, 0.2164179086685181, 0.5034482479095459,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 412, 859, 133, 146, 1, 0.2180451154708862, 0.5,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 338, 1, 131, 146, 1, 0.2137404531240463, 0.5,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 871, 1, 130, 145, 1, 0.2153846174478531, 0.4965517222881317,[],[],0]
			]
			]
,			[
			"Hit",
			24,
			false,
			1,
			0,
			false,
			8687505943230462,
			[
				["images/doorbarrier-sheet0.png", 563547, 849, 596, 157, 167, 1, 0.2738853394985199, 0.4910179674625397,[],[],0],
				["images/doorbarrier-sheet1.png", 377379, 1, 1, 198, 210, 1, 0.3131313025951386, 0.5,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 1, 602, 231, 240, 1, 0.3463203608989716, 0.5083333253860474,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 587, 596, 260, 257, 1, 0.3653846085071564, 0.5097275972366333,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 301, 585, 284, 272, 1, 0.3802816867828369, 0.5257353186607361,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 301, 300, 304, 283, 1, 0.3947368562221527, 0.5477032065391541,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 1, 1, 315, 296, 1, 0.4000000059604645, 0.5641891956329346,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 1, 299, 298, 301, 1, 0.3993288576602936, 0.5714285969734192,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 629, 1, 305, 296, 1, 0.4000000059604645, 0.5743243098258972,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 318, 1, 309, 297, 1, 0.3948220014572144, 0.5757575631141663,[],[],0],
				["images/doorbarrier-sheet0.png", 563547, 629, 299, 304, 295, 1, 0.4046052694320679, 0.5796610116958618,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			4688073947507107
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			4202832570812114
		]
		],
		false,
		false,
		292061293128303,
		[],
		null
	]
,	[
		"t60",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Part2",
			0.5,
			false,
			1,
			0,
			false,
			3274979648542936,
			[
				["images/sprite3-sheet0.png", 2906627, 1, 1, 930, 600, 1, 0, 0,[],[],0],
				["images/sprite3-sheet0.png", 2906627, 933, 1, 930, 600, 1, 0, 0,[],[],0]
			]
			]
,			[
			"Part1",
			0.5,
			false,
			1,
			0,
			false,
			9027416690525842,
			[
				["images/sprite3-sheet0.png", 2906627, 1, 603, 930, 600, 1, 0, 0,[],[],0],
				["images/sprite3-sheet0.png", 2906627, 933, 603, 930, 600, 1, 0, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3919633667376452,
		[],
		null
	]
,	[
		"t61",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Starlord",
			5,
			false,
			1,
			0,
			false,
			962640315257978,
			[
				["images/hudweapon-sheet0.png", 30428, 78, 89, 55, 49, 1, 0.5090909004211426, 0.5102040767669678,[],[],0]
			]
			]
,			[
			"Drax",
			5,
			false,
			1,
			0,
			false,
			3289951790497884,
			[
				["images/hudweapon-sheet0.png", 30428, 1, 89, 75, 48, 1, 0.5066666603088379, 0.5,[],[],0]
			]
			]
,			[
			"Rocket",
			5,
			false,
			1,
			0,
			false,
			9007453645308542,
			[
				["images/hudweapon-sheet0.png", 30428, 96, 1, 93, 52, 1, 0.5053763389587402, 0.5,[],[],0]
			]
			]
,			[
			"Gamora",
			5,
			false,
			1,
			0,
			false,
			6185211607846784,
			[
				["images/hudweapon-sheet0.png", 30428, 1, 55, 141, 32, 1, 0.5035461187362671, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			3603593782093245
		]
		],
		false,
		false,
		3749282768763477,
		[],
		null
	]
,	[
		"t62",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1587805779480008,
			[
				["images/tutorial_weaponupgrade-sheet0.png", 16023, 0, 0, 400, 400, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		6901975312457421,
		[],
		null
	]
,	[
		"t63",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4070873287978422,
			[
				["images/touchright-sheet0.png", 3946, 0, 0, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8217918126603955,
		[],
		null
	]
,	[
		"t64",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6415671017569168,
			[
				["images/endlevel-sheet0.png", 15816, 0, 0, 128, 128, 1, 0.5, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5985274883726131,
		[],
		null
	]
,	[
		"t65",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"1Star",
			5,
			false,
			1,
			0,
			false,
			3485978072661319,
			[
				["images/complete_gamora-sheet1.png", 2270, 0, 0, 39, 46, 1, 1.435897469520569, 0.5,[],[],0]
			]
			]
,			[
			"2Star",
			5,
			false,
			1,
			0,
			false,
			7011045880713978,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 1, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"3Star",
			5,
			false,
			1,
			0,
			false,
			8296903378054882,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 47, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2548591662066687,
		[],
		null
	]
,	[
		"t66",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8323020509796222,
			[
				["images/sprite8-sheet0.png", 184, 0, 0, 11, 10, 1, 11.45454502105713, 12.60000038146973,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3872229106742022,
		[],
		null
	]
,	[
		"t67",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1258324266983313,
			[
				["images/sprite9-sheet0.png", 440, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8156564111973003,
		[],
		null
	]
,	[
		"t68",
		cr.plugins_.Function,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8499237966548893,
		[],
		null
		,[]
	]
,	[
		"t69",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8853499940683953,
			[
				["images/menustarlord-sheet0.png", 21843, 0, 0, 140, 147, 1, 0.5, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		882097867668339,
		[],
		null
	]
,	[
		"t70",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap.png", 2214081, 0],
		null,
		[
		],
		false,
		false,
		2395203135091289,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0.4980469942092896,1,1,0,1],
			[0,0.4960939884185791,1,1,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0.5,1,1,0,1],
			[0,0.4980469942092896,1,1,1,1,0,1]
		]
	]
,	[
		"t71",
		cr.plugins_.Sprite,
		false,
		[8484543225043399],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1076341372426824,
			[
				["images/menulocator-sheet0.png", 6309, 0, 0, 107, 114, 1, 0.5046728849411011, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9922054271352225,
		[],
		null
	]
,	[
		"t72",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0.5,
			false,
			1,
			0,
			false,
			3841859203132384,
			[
				["images/menu_intro-sheet0.png", 233693, 1, 1, 900, 300, 1, 0.5, 0.5,[],[],0],
				["images/menu_intro-sheet0.png", 233693, 1, 303, 620, 320, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4782355734552038,
		[],
		null
	]
,	[
		"t73",
		cr.plugins_.Sprite,
		false,
		[8482931597594832],
		0,
		0,
		null,
		[
			[
			"Default",
			24,
			true,
			1,
			0,
			false,
			5592096994432548,
			[
				["images/collectablestud-sheet0.png", 14647, 1, 1, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 33, 1, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 65, 1, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 97, 1, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 1, 34, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 33, 34, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 65, 34, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0],
				["images/collectablestud-sheet0.png", 14647, 97, 34, 30, 31, 1, 0.5, 0.5161290168762207,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4737680078082253,
		[],
		null
	]
,	[
		"t74",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		9429770004485593,
		[],
		null
	]
,	[
		"t75",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		7433512840025776,
		[],
		null
	]
,	[
		"t76",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		4689024926503605,
		[],
		null
	]
,	[
		"t77",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		6569816653041238,
		[],
		null
	]
,	[
		"t78",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3562180063551457,
		[],
		null
	]
,	[
		"t79",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Tape",
			22,
			true,
			1,
			0,
			false,
			5155552595517768,
			[
				["images/collectablemixtape-sheet1.png", 194235, 329, 63, 64, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 146, 466, 65, 42, 1, 0.4923076927661896, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 392, 107, 60, 42, 1, 0.4833333194255829, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 374, 151, 52, 42, 1, 0.4807692170143127, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 470, 200, 41, 42, 1, 0.4878048896789551, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 478, 446, 26, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 247, 280, 18, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 478, 402, 33, 42, 1, 0.4848484992980957, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 461, 63, 47, 42, 1, 0.4893617033958435, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 63, 125, 56, 42, 1, 0.4821428656578064, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 262, 107, 63, 42, 1, 0.4920634925365448, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 262, 63, 65, 42, 1, 0.4923076927661896, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 78, 466, 66, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 327, 107, 63, 42, 1, 0.5079365372657776, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 454, 107, 57, 42, 1, 0.5087719559669495, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 194, 246, 46, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 476, 151, 34, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 247, 324, 18, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 213, 466, 26, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 470, 244, 40, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 99, 173, 51, 42, 1, 0.5098039507865906, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 1, 125, 60, 42, 1, 0.5, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 395, 63, 64, 42, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"Orb",
			22,
			true,
			1,
			0,
			false,
			9735793337794608,
			[
				["images/collectablemixtape-sheet1.png", 194235, 1, 217, 47, 45, 1, 0.5531914830207825, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 146, 221, 46, 45, 1, 0.5652173757553101, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 152, 173, 46, 46, 1, 0.5652173757553101, 0.6521739363670349,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 374, 195, 46, 46, 1, 0.5652173757553101, 0.6521739363670349,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 200, 198, 46, 46, 1, 0.5652173757553101, 0.6521739363670349,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 428, 151, 46, 47, 1, 0.5652173757553101, 0.6382978558540344,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 50, 217, 45, 47, 1, 0.5777778029441834, 0.6382978558540344,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 344, 243, 45, 46, 1, 0.5777778029441834, 0.6304348111152649,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 248, 198, 46, 46, 1, 0.5869565010070801, 0.6304348111152649,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 459, 99, 46, 48, 1, 0.5869565010070801, 0.6458333134651184,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 458, 149, 46, 48, 1, 0.5869565010070801, 0.6458333134651184,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 458, 199, 46, 48, 1, 0.5869565010070801, 0.6458333134651184,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 459, 1, 47, 47, 1, 0.5957446694374085, 0.6595744490623474,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 459, 50, 47, 47, 1, 0.5957446694374085, 0.6595744490623474,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 121, 125, 48, 46, 1, 0.5833333134651184, 0.6739130616188049,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 171, 125, 48, 46, 1, 0.5833333134651184, 0.6739130616188049,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 296, 198, 46, 46, 1, 0.5652173757553101, 0.6739130616188049,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 1, 169, 47, 46, 1, 0.5744680762290955, 0.6739130616188049,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 50, 169, 47, 46, 1, 0.5531914830207825, 0.6739130616188049,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 221, 151, 49, 45, 1, 0.5714285969734192, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 272, 151, 49, 45, 1, 0.5714285969734192, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 323, 151, 49, 45, 1, 0.5714285969734192, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 97, 217, 47, 45, 1, 0.5744680762290955, 0.6666666865348816,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 422, 200, 46, 46, 1, 0.5652173757553101, 0.6739130616188049,[],[],0]
			]
			]
,			[
			"Cloak",
			22,
			true,
			1,
			0,
			false,
			8285556166940557,
			[
				["images/collectablemixtape-sheet1.png", 194235, 199, 63, 61, 60, 1, 0.5901639461517334, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 153, 1, 71, 60, 1, 0.5633803009986877, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 167, 342, 77, 60, 1, 0.5454545617103577, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 87, 404, 77, 60, 1, 0.5324675440788269, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 1, 1, 74, 60, 1, 0.5270270109176636, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 445, 278, 66, 60, 1, 0.5454545617103577, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 69, 63, 63, 60, 1, 0.5714285969734192, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 299, 1, 70, 60, 1, 0.5285714268684387, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 245, 413, 76, 60, 1, 0.5263158082962036, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 87, 280, 78, 60, 1, 0.5384615659713745, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 401, 413, 75, 60, 1, 0.54666668176651, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 445, 340, 66, 60, 1, 0.5757575631141663, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 1, 63, 66, 60, 1, 0.5909090638160706, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 1, 415, 75, 60, 1, 0.6000000238418579, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 167, 280, 78, 60, 1, 0.6025640964508057, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 323, 413, 76, 60, 1, 0.6184210777282715, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 371, 1, 70, 60, 1, 0.6285714507102966, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 134, 63, 63, 60, 1, 0.60317462682724, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 443, 1, 67, 60, 1, 0.611940324306488, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 77, 1, 74, 60, 1, 0.6216216087341309, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 87, 342, 78, 60, 1, 0.6025640964508057, 0.5,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 166, 404, 77, 60, 1, 0.5974025726318359, 0.5,[],[],0],
				["images/collectablemixtape-sheet1.png", 194235, 226, 1, 71, 60, 1, 0.591549277305603, 0.5,[],[],0]
			]
			]
,			[
			"Nova",
			5,
			false,
			1,
			0,
			false,
			3603697998307078,
			[
				["images/collectablemixtape-sheet0.png", 355927, 277, 140, 89, 135, 1, 0.2584269642829895, -0.04444444552063942,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 368, 140, 88, 136, 1, 0.2727272808551788, -0.03676470741629601,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 93, 142, 87, 136, 1, 0.2873563170433044, -0.03676470741629601,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 1, 143, 85, 135, 1, 0.3058823645114899, -0.03703703731298447,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 1, 280, 84, 133, 1, 0.3095238208770752, -0.04511278122663498,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 358, 278, 85, 133, 1, 0.3176470696926117, -0.04511278122663498,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 271, 277, 85, 134, 1, 0.3294117748737335, -0.03731343150138855,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 182, 142, 87, 136, 1, 0.3333333432674408, -0.03676470741629601,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 277, 1, 89, 137, 1, 0.3370786607265472, -0.0364963486790657,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 93, 1, 90, 139, 1, 0.3222222328186035, -0.03597122430801392,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 1, 1, 90, 140, 1, 0.3111111223697662, -0.0357142873108387,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 185, 1, 90, 139, 1, 0.2888889014720917, -0.03597122430801392,[],[],0],
				["images/collectablemixtape-sheet0.png", 355927, 368, 1, 89, 137, 1, 0.2696629166603088, -0.0364963486790657,[],[],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			3200928774157068
		]
		],
		false,
		false,
		9242480995201813,
		[],
		null
	]
,	[
		"t80",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4469663768152306,
			[
				["images/sprite7-sheet0.png", 131, 0, 0, 23, 252, 1, 5.47826099395752, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			5228011250916578
		]
		],
		false,
		false,
		732246930456375,
		[],
		null
	]
,	[
		"t81",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1988768759640545,
		[],
		null
	]
,	[
		"t82",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/tiledbackground2.png", 131913, 0],
		null,
		[
		],
		false,
		false,
		8325802304746483,
		[],
		null
	]
,	[
		"t83",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5945556126959237,
			[
				["images/sprite18-sheet0.png", 1885, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3554369895526508,
		[],
		null
	]
,	[
		"t84",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2147693966539595,
			[
				["images/menuboss1-sheet0.png", 1039, 0, 0, 252, 130, 1, 0.5, 0,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		958010232006652,
		[],
		null
	]
,	[
		"t85",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			1,
			0,
			false,
			9401733101050807,
			[
				["images/enemybosslocator-sheet0.png", 1031, 0, 0, 250, 250, 1, 0.5, 1,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8667734617558525,
		[],
		null
	]
,	[
		"t86",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6620049010822211,
			[
				["images/collectablehealthup-sheet0.png", 224, 0, 0, 26, 24, 1, 0.4615384638309479, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			3151909285110598
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			5354366715766158
		]
		],
		false,
		false,
		7452587668848117,
		[],
		null
	]
,	[
		"t87",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8104827706966817,
			[
				["images/player_headstomp-sheet0.png", 118, 0, 0, 194, 14, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3958884742222137,
		[],
		null
	]
,	[
		"t88",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			1,
			true,
			1,
			0,
			false,
			9287635699928421,
			[
				["images/sprite23-sheet0.png", 572738, 0, 0, 929, 600, 1, 0, 0,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		3160315801991315,
		[],
		null
	]
,	[
		"t89",
		cr.plugins_.Text,
		false,
		[3971321650386941,2223207983668698,7128941828248135],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1373203352360577,
		[],
		null
	]
,	[
		"t90",
		cr.plugins_.Audio,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1942071627805376,
		[],
		null
		,[0,0,1,1,600,600,10000,1,5000,1]
	]
,	[
		"t91",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			true,
			1,
			0,
			false,
			5159662200350116,
			[
				["images/star1-sheet0.png", 12494, 0, 0, 116, 132, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1368447760210512,
		[],
		null
	]
,	[
		"t92",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			true,
			1,
			0,
			false,
			8488849437946479,
			[
				["images/star1-sheet0.png", 12494, 0, 0, 116, 132, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5454732260054312,
		[],
		null
	]
,	[
		"t93",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			true,
			1,
			0,
			false,
			5985841741638019,
			[
				["images/star1-sheet0.png", 12494, 0, 0, 116, 132, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4796868861896139,
		[],
		null
	]
,	[
		"t94",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap3.png", 1551020, 0],
		null,
		[
		],
		false,
		false,
		546376981026918,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.4921880066394806,1,0,1,1,0,1],
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.4921880066394806,1,0,1,0.4960939884185791,0,1],
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			null,
			[0,0,1,0,1,1,0.921875,1,0,0.494141012430191],
			null,
			[0,0,1,0,1,0.4980469942092896,0.08984380215406418,1,0,1],
			[0,0,1,0,1,0.4921880066394806,0,0.4921880066394806],
			[0,0,0.8203129768371582,0,1,0,0,0.4960939884185791],
			null,
			null,
			null,
			null,
			[0,1,1,0.4960939884185791,1,1,0,1],
			[0,0.5,1,0,1,0.5019530057907105,0,1],
			[0,0,0.3613280057907105,0,1,0,0,0.5014650225639343],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.494141012430191,1,0,1,0.4980469942092896,0,1],
			[0,0,1,0,1,0,0,0.5],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			[0,0,0.5839840173721314,0,1,0,0,0.4960939884185791],
			null,
			null,
			[0,0,1,0.494141012430191,1,1,0,1],
			[0,0.4882810115814209,1,1,1,1,0,1]
		]
	]
,	[
		"t95",
		cr.plugins_.Tilemap,
		false,
		[],
		1,
		0,
		["images/tilemap3.png", 1551020, 0],
		null,
		[
		[
			"Solid",
			cr.behaviors.solid,
			3791749752098875
		]
		],
		false,
		false,
		1027531493338634,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[1,0.490233987569809,1,0.7246090173721314,1,1,0,1],
			[0,0.4921880066394806,1,0,1,1,0,1],
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.4921880066394806,1,0,1,0.4960939884185791,0,1],
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			null,
			[0,0,1,0,1,1,0.921875,1,0,0.494141012430191],
			null,
			[0,0,1,0,1,0.4980469942092896,0.08984380215406418,1,0,1],
			[0,0,1,0,1,0.4921880066394806,0,0.4921880066394806],
			[0,0,0.8203129768371582,0,1,0,0,0.4960939884185791],
			null,
			null,
			null,
			null,
			[0,1,1,0.4960939884185791,1,1,0,1],
			[0,0.5,1,0,1,0.5019530057907105,0,1],
			[0,0,0.3613280057907105,0,1,0,0,0.5014650225639343],
			null,
			null,
			null,
			null,
			null,
			null,
			[0.00390625,0,1,0,1,1,0.7148439884185791,0.353516012430191],
			[0,0,1,0,1,0,0,0.4980469942092896],
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.494141012430191,1,0,1,0.4980469942092896,0,1],
			[0,0,1,0,1,0,0,0.5],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			[0,0,0.5839840173721314,0,1,0,0,0.4960939884185791],
			null,
			null,
			[0,0,1,0.494141012430191,1,1,0,1],
			[0,0.4882810115814209,1,1,1,1,0,1]
		]
	]
,	[
		"t96",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap3.png", 1551020, 0],
		null,
		[
		],
		false,
		false,
		6424094314280623,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.4921880066394806,1,0,1,1,0,1],
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.4921880066394806,1,0,1,0.4960939884185791,0,1],
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			null,
			[0,0,1,0,1,1,0.921875,1,0,0.494141012430191],
			null,
			[0,0,1,0,1,0.4980469942092896,0.08984380215406418,1,0,1],
			[0,0,1,0,1,0.4921880066394806,0,0.4921880066394806],
			[0,0,0.8203129768371582,0,1,0,0,0.4960939884185791],
			null,
			null,
			null,
			null,
			[0,1,1,0.4960939884185791,1,1,0,1],
			[0,0.5,1,0,1,0.5019530057907105,0,1],
			[0,0,0.3613280057907105,0,1,0,0,0.5014650225639343],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,1,1,0.494141012430191,1,1,0,1],
			[0,0.494141012430191,1,0,1,0.4980469942092896,0,1],
			[0,0,1,0,1,0,0,0.5],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0.490233987569809,0,0.490233987569809],
			[0,0,0.5839840173721314,0,1,0,0,0.4960939884185791],
			null,
			null,
			[0,0,1,0.494141012430191,1,1,0,1],
			[0,0.4882810115814209,1,1,1,1,0,1]
		]
	]
,	[
		"t97",
		cr.plugins_.Sprite,
		false,
		[6200611405289797,5947218018297512],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2863986411039825,
			[
				["images/liftlevel3-sheet0.png", 16772, 0, 0, 256, 89, 1, 0.5, 0.5056179761886597,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			9991793203013951
		]
,		[
			"Physics",
			cr.behaviors.Physics,
			5140701666635034
		]
		],
		false,
		false,
		4540662179631258,
		[],
		null
	]
,	[
		"t98",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2411307543451186,
			[
				["images/sprite25-sheet0.png", 168, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		9127540902828851,
		[],
		null
	]
,	[
		"t99",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6955964219705672,
			[
				["images/sprite26-sheet0.png", 717, 0, 0, 154, 39, 1, 0.701298713684082, 2.794871807098389,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8347755108479137,
		[],
		null
	]
,	[
		"t100",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3057654669023697,
			[
				["images/sprite27-sheet0.png", 774, 0, 0, 154, 39, 1, 0.701298713684082, 2.794871807098389,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7847323695426914,
		[],
		null
	]
,	[
		"t101",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			24,
			false,
			1,
			0,
			false,
			7167122196176141,
			[
				["images/sprite30-sheet0.png", 315083, 410, 1, 20, 18, 1, 0.449999988079071, 0.5555555820465088,[],[],0],
				["images/sprite30-sheet0.png", 315083, 400, 396, 109, 109, 1, 0.4862385392189026, 0.5045871734619141,[],[],0],
				["images/sprite30-sheet0.png", 315083, 116, 397, 109, 109, 1, 0.4862385392189026, 0.5045871734619141,[],[],0],
				["images/sprite30-sheet1.png", 147572, 134, 131, 109, 109, 1, 0.4862385392189026, 0.5045871734619141,[],[],0],
				["images/sprite30-sheet0.png", 315083, 1, 397, 113, 111, 1, 0.4690265357494354, 0.4954954981803894,[],[],0],
				["images/sprite30-sheet0.png", 315083, 269, 396, 129, 115, 1, 0.5038759708404541, 0.47826087474823,[],[],0],
				["images/sprite30-sheet1.png", 147572, 270, 130, 132, 126, 1, 0.4924242496490479, 0.4841269850730896,[],[],0],
				["images/sprite30-sheet1.png", 147572, 1, 1, 133, 128, 1, 0.4887218177318573, 0.484375,[],[],0],
				["images/sprite30-sheet0.png", 315083, 137, 133, 133, 130, 1, 0.4887218177318573, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 138, 1, 134, 130, 1, 0.4850746393203735, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 274, 1, 134, 130, 1, 0.4850746393203735, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 1, 1, 135, 130, 1, 0.4888888895511627, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 1, 133, 134, 130, 1, 0.4850746393203735, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 272, 133, 133, 130, 1, 0.481203019618988, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 1, 265, 132, 130, 1, 0.4772727191448212, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 135, 265, 132, 130, 1, 0.4772727191448212, 0.4846153855323792,[],[],0],
				["images/sprite30-sheet0.png", 315083, 269, 265, 132, 129, 1, 0.4772727191448212, 0.4806201457977295,[],[],0],
				["images/sprite30-sheet1.png", 147572, 136, 1, 132, 128, 1, 0.4772727191448212, 0.484375,[],[],0],
				["images/sprite30-sheet1.png", 147572, 270, 1, 131, 127, 1, 0.4732824563980103, 0.4803149700164795,[],[],0],
				["images/sprite30-sheet1.png", 147572, 1, 131, 131, 126, 1, 0.4732824563980103, 0.4841269850730896,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			7376925819618309
		]
		],
		false,
		false,
		6023221192178775,
		[],
		null
	]
,	[
		"t102",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			492306750661147,
			[
				["images/sprite31-sheet0.png", 1119, 0, 0, 252, 130, 1, 0.5, 0.8230769038200378,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7581937814139188,
		[],
		null
	]
,	[
		"t103",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap7.png", 1620547, 0],
		null,
		[
		],
		false,
		false,
		9586350301212176,
		[],
		[
		]
	]
,	[
		"t104",
		cr.plugins_.Tilemap,
		false,
		[],
		1,
		0,
		["images/tilemap7.png", 1620547, 0],
		null,
		[
		[
			"Solid",
			cr.behaviors.solid,
			4425151159072919
		]
		],
		false,
		false,
		880180162144881,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0.384766012430191,0,1,0,1,1,0.671875,1],
			[0,0,0.6152340173721314,0,0.1933600008487701,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7578129768371582,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0.3144530057907105,0.4824219942092896,0.5927730202674866,0.4287109971046448,0.8808590173721314,0.4960939884185791,1,0.765625,1,1,0,1,0,0.7563480138778687,0.1748050004243851,0.7548829913139343],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0,0,1,0,1,0,0,0],
			[0.5898439884185791,0.2929689884185791,1,0,1,1,0.390625,0.9921879768371582],
			[0,0,0.400391012430191,0.2890630066394806,0.6132810115814209,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0.1542969942092896,0.3320310115814209,0.8496090173721314,0.322266012430191,0.8984379768371582,0.9980469942092896,0.1015629991889,1],
			[0.400391012430191,0,1,0,1,1,0,1],
			[0,0,0.5996090173721314,0,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7578129768371582,1,0.7578129768371582,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7578129768371582,1,0.7578129768371582,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0.3046880066394806,0.4863280057907105,0.6015629768371582,0.4365229904651642,0.9355469942092896,0.5136719942092896,1,0.7646480202674866,1,1,0,1,0,0.7602540254592896,0.2089840024709702,0.7587890028953552],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1],
			[0,0.7597659826278687,1,0.7597659826278687,1,1,0,1]
		]
	]
,	[
		"t105",
		cr.plugins_.Sprite,
		false,
		[],
		3,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5273885803342084,
			[
				["images/sprite-sheet0.png", 22296, 0, 0, 130, 167, 1, 0.5, 0.227544903755188,[],[-0.4923076927661896,-0.173652708530426,0.5,-0.1796407103538513,0.4923080205917358,8.940696716308594e-008,-0.4923076927661896,8.940696716308594e-008],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			8295294439803514
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			2981016795190148
		]
,		[
			"Sine",
			cr.behaviors.Sin,
			8931188934146224
		]
		],
		false,
		false,
		4420300101899918,
		[],
		null
	]
,	[
		"t106",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			336490475146978,
			[
				["images/sprite2-sheet1.png", 333170, 186, 1, 178, 223, 1, 0.2808988690376282, 0.9955157041549683,[],[],0]
			]
			]
,			[
			"break",
			24,
			false,
			1,
			0,
			false,
			3501169109578573,
			[
				["images/sprite2-sheet1.png", 333170, 366, 1, 178, 223, 1, 0.2752808928489685, 0.9955157041549683,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 1, 183, 234, 1, 0.2732240557670593, 0.995726466178894,[],[],0],
				["images/sprite2-sheet0.png", 473820, 833, 612, 179, 246, 1, 0.2793295979499817, 0.9959349632263184,[],[],0],
				["images/sprite2-sheet0.png", 473820, 254, 257, 192, 257, 1, 0.296875, 0.9961089491844177,[],[],0],
				["images/sprite2-sheet0.png", 473820, 460, 235, 204, 261, 1, 0.3088235259056091, 0.9961685538291931,[],[],0],
				["images/sprite2-sheet0.png", 473820, 705, 1, 213, 260, 1, 0.32863849401474, 0.9961538314819336,[],[],0],
				["images/sprite2-sheet0.png", 473820, 236, 1, 222, 254, 1, 0.3468468487262726, 0.9960629940032959,[],[],0],
				["images/sprite2-sheet0.png", 473820, 1, 1, 233, 245, 1, 0.3690987229347229, 0.9959183931350708,[],[],0],
				["images/sprite2-sheet0.png", 473820, 460, 1, 243, 232, 1, 0.3909465074539185, 0.9956896305084229,[],[],0],
				["images/sprite2-sheet0.png", 473820, 1, 257, 251, 209, 1, 0.4023904502391815, 0.9952152967453003,[],[],0],
				["images/sprite2-sheet0.png", 473820, 1, 516, 258, 187, 1, 0.4108527004718781, 0.9946523904800415,[],[],0],
				["images/sprite2-sheet0.png", 473820, 531, 790, 263, 179, 1, 0.4182509481906891, 0.9888268113136292,[],[],0],
				["images/sprite2-sheet0.png", 473820, 261, 678, 268, 177, 1, 0.4291044771671295, 0.9943502545356751,[],[],0],
				["images/sprite2-sheet0.png", 473820, 561, 612, 270, 176, 1, 0.4296296238899231, 0.9943181872367859,[],[],0],
				["images/sprite2-sheet0.png", 473820, 666, 263, 289, 176, 1, 0.4083045125007629, 0.9886363744735718,[],[],0],
				["images/sprite2-sheet0.png", 473820, 666, 441, 295, 169, 1, 0.4067796468734741, 0.9881656765937805,[],[],0],
				["images/sprite2-sheet0.png", 473820, 261, 516, 298, 160, 1, 0.4127516746520996, 0.987500011920929,[],[],0],
				["images/sprite2-sheet0.png", 473820, 1, 857, 301, 145, 1, 0.4219269156455994, 0.9862068891525269,[],[],0],
				["images/sprite2-sheet1.png", 333170, 546, 1, 318, 116, 1, 0.4496855437755585, 0.982758641242981,[],[],0],
				["images/sprite2-sheet1.png", 333170, 546, 119, 327, 86, 1, 0.4648317992687225, 0.9767441749572754,[],[],0],
				["images/sprite2-sheet1.png", 333170, 186, 226, 319, 53, 1, 0.4952978193759918, 0.9622641801834106,[],[],0],
				["images/sprite2-sheet0.png", 473820, 644, 971, 331, 52, 1, 0.5015105605125427, 0.9615384340286255,[],[],0],
				["images/sprite2-sheet0.png", 473820, 304, 971, 338, 52, 1, 0.5059171319007874, 0.9615384340286255,[],[],0],
				["images/sprite2-sheet1.png", 333170, 546, 207, 343, 50, 1, 0.5131195187568665, 0.9599999785423279,[],[],0],
				["images/sprite2-sheet1.png", 333170, 352, 307, 348, 45, 1, 0.5201149582862854, 0.9555555582046509,[],[],0],
				["images/sprite2-sheet1.png", 333170, 507, 259, 349, 46, 1, 0.5214899778366089, 0.95652174949646,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 281, 349, 46, 1, 0.5214899778366089, 0.95652174949646,[],[],0],
				["images/sprite2-sheet1.png", 333170, 353, 446, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 492, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 352, 492, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 538, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 352, 538, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 584, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 352, 584, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 630, 349, 44, 1, 0.5214899778366089, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 354, 350, 44, 1, 0.522857129573822, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 353, 354, 350, 44, 1, 0.522857129573822, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 400, 350, 44, 1, 0.522857129573822, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 353, 400, 350, 44, 1, 0.522857129573822, 0.9545454382896423,[],[],0],
				["images/sprite2-sheet1.png", 333170, 1, 446, 350, 44, 1, 0.522857129573822, 0.9545454382896423,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		4631086550483521,
		[],
		null
	]
,	[
		"t107",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8651352670533117,
			[
				["images/sprite25-sheet0.png", 168, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		4632979711004302,
		[],
		null
	]
,	[
		"t108",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3047701456866615,
			[
				["images/sprite11-sheet0.png", 510780, 866, 735, 101, 229, 1, 0.5643564462661743, 0.9868995547294617,[],[],0]
			]
			]
,			[
			"break",
			24,
			false,
			1,
			0,
			false,
			8907725338577871,
			[
				["images/sprite11-sheet0.png", 510780, 345, 783, 101, 229, 1, 0.5643564462661743, 0.9868995547294617,[],[],0],
				["images/sprite11-sheet0.png", 510780, 761, 735, 103, 239, 1, 0.553398072719574, 0.9874476790428162,[],[],0],
				["images/sprite11-sheet0.png", 510780, 883, 208, 124, 251, 1, 0.4596774280071259, 0.9880478382110596,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 435, 151, 260, 1, 0.377483457326889, 0.9884615540504456,[],[],0],
				["images/sprite11-sheet0.png", 510780, 258, 246, 171, 262, 1, 0.3333333432674408, 0.9885495901107788,[],[],0],
				["images/sprite11-sheet0.png", 510780, 691, 208, 190, 261, 1, 0.300000011920929, 0.9885057210922241,[],[],0],
				["images/sprite11-sheet0.png", 510780, 476, 1, 213, 254, 1, 0.2676056325435638, 0.9881889820098877,[],[],0],
				["images/sprite11-sheet0.png", 510780, 246, 1, 228, 243, 1, 0.25, 0.9876543283462524,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 1, 243, 230, 1, 0.2345678955316544, 0.9869565367698669,[],[],0],
				["images/sprite11-sheet0.png", 510780, 691, 1, 251, 205, 1, 0.2270916402339935, 0.9853658676147461,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 246, 255, 187, 1, 0.2235294133424759, 0.9839572310447693,[],[],0],
				["images/sprite11-sheet0.png", 510780, 431, 471, 259, 168, 1, 0.2200772166252136, 0.9821428656578064,[],[],0],
				["images/sprite11-sheet0.png", 510780, 692, 471, 263, 146, 1, 0.2167300432920456, 0.9794520735740662,[],[],0],
				["images/sprite11-sheet0.png", 510780, 154, 510, 266, 129, 1, 0.2142857164144516, 0.9767441749572754,[],[],0],
				["images/sprite11-sheet0.png", 510780, 692, 619, 269, 114, 1, 0.2193308621644974, 0.9736841917037964,[],[],0],
				["images/sprite11-sheet0.png", 510780, 492, 735, 267, 96, 1, 0.213483139872551, 0.96875,[],[],0],
				["images/sprite11-sheet0.png", 510780, 448, 833, 267, 82, 1, 0.213483139872551, 0.9634146094322205,[],[],0],
				["images/sprite11-sheet0.png", 510780, 448, 917, 267, 79, 1, 0.213483139872551, 0.9620253443717957,[],[],0],
				["images/sprite11-sheet1.png", 231443, 337, 1, 267, 70, 1, 0.213483139872551, 0.9571428298950195,[],[],0],
				["images/sprite11-sheet0.png", 510780, 154, 641, 495, 70, 1, 0.5757575631141663, 0.9571428298950195,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 713, 489, 68, 1, 0.5705521702766419, 0.9558823704719544,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 119, 267, 68, 1, 0.213483139872551, 0.9558823704719544,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 920, 319, 68, 1, 0.3416927754878998, 0.9558823704719544,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 783, 342, 68, 1, 0.3859649002552033, 0.9558823704719544,[],[],0],
				["images/sprite11-sheet0.png", 510780, 1, 853, 342, 65, 1, 0.3859649002552033, 0.9538461565971375,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 1, 334, 59, 1, 0.3682634830474854, 0.9491525292396545,[],[],0],
				["images/sprite11-sheet1.png", 231443, 606, 1, 333, 55, 1, 0.3663663566112518, 0.9454545378684998,[],[],0],
				["images/sprite11-sheet1.png", 231443, 606, 58, 333, 55, 1, 0.3663663566112518, 0.9454545378684998,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 62, 333, 55, 1, 0.3663663566112518, 0.9454545378684998,[],[],0],
				["images/sprite11-sheet1.png", 231443, 336, 115, 333, 55, 1, 0.3663663566112518, 0.9454545378684998,[],[],0],
				["images/sprite11-sheet1.png", 231443, 671, 115, 333, 55, 1, 0.3663663566112518, 0.9454545378684998,[],[],0],
				["images/sprite11-sheet1.png", 231443, 270, 172, 333, 54, 1, 0.3663663566112518, 0.9444444179534912,[],[],0],
				["images/sprite11-sheet1.png", 231443, 605, 172, 333, 53, 1, 0.3663663566112518, 0.9433962106704712,[],[],0],
				["images/sprite11-sheet1.png", 231443, 605, 227, 333, 48, 1, 0.3663663566112518, 0.9375,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 228, 333, 48, 1, 0.3663663566112518, 0.9375,[],[],0],
				["images/sprite11-sheet1.png", 231443, 336, 277, 333, 47, 1, 0.3663663566112518, 0.936170220375061,[],[],0],
				["images/sprite11-sheet1.png", 231443, 671, 277, 333, 45, 1, 0.3663663566112518, 0.9333333373069763,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 278, 333, 44, 1, 0.3663663566112518, 0.9318181872367859,[],[],0],
				["images/sprite11-sheet1.png", 231443, 1, 324, 333, 44, 1, 0.3663663566112518, 0.9318181872367859,[],[],0],
				["images/sprite11-sheet1.png", 231443, 671, 324, 333, 43, 1, 0.3663663566112518, 0.930232584476471,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7107012014111344,
		[],
		null
	]
,	[
		"t109",
		cr.plugins_.Tilemap,
		false,
		[],
		1,
		0,
		["images/tilemap.png", 2214081, 0],
		null,
		[
		[
			"Solid",
			cr.behaviors.solid,
			7995075809606002
		]
		],
		false,
		false,
		4106911880271481,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0.4980469942092896,1,1,0,1],
			[0,0.4882810115814209,1,1,1,1,0,1],
			null,
			null,
			null,
			[0,0.5,1,0.4980469942092896,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0.5,1,1,0,1],
			[0,0.4980469942092896,1,1,1,1,0,1]
		]
	]
,	[
		"t110",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Menu1",
			5,
			false,
			1,
			0,
			false,
			814398657774616,
			[
				["images/sprite15-sheet0.png", 788768, 0, 0, 930, 600, 1, 0.5, 0.5,[],[],0]
			]
			]
,			[
			"MenuBoss",
			5,
			false,
			1,
			0,
			false,
			7355449351486564,
			[
				["images/sprite15-sheet1.png", 802647, 0, 0, 930, 600, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6741554282263813,
		[],
		null
	]
,	[
		"t111",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap3.png", 1551020, 0],
		null,
		[
		],
		false,
		false,
		2864657664449375,
		[],
		[
		]
	]
,	[
		"t112",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap12.png", 1094522, 0],
		null,
		[
		],
		false,
		false,
		4123371086803753,
		[],
		[
		]
	]
,	[
		"t113",
		cr.plugins_.Tilemap,
		false,
		[],
		1,
		0,
		["images/tilemap12.png", 1094522, 0],
		null,
		[
		[
			"Solid",
			cr.behaviors.solid,
			2442068581473501
		]
		],
		false,
		false,
		2985903609463879,
		[],
		[
			null,
			null,
			null,
			null,
			null,
			[0,1,1,1,1,1,0,1],
			[0,1,1,1,1,1,0,1],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0,1,0,0.9960939884185791,0.7109379768371582,0,0.2382809966802597],
			[0,0,1,0,1,0.234375,0,0.7050780057907105],
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			[0,0.08398439735174179,1,0,1,0.7949219942092896,0,0.328125]
		]
	]
,	[
		"t114",
		cr.plugins_.Sprite,
		false,
		[2033261581094988,1571616127345557,2798378861997084],
		2,
		0,
		null,
		[
			[
			"Off",
			5,
			false,
			1,
			0,
			false,
			7793193538009617,
			[
				["images/liftup-sheet0.png", 57943, 1, 1, 258, 118, 1, 0.007751937955617905, 0.06779661029577255,[],[],0]
			]
			]
,			[
			"On",
			5,
			false,
			1,
			0,
			false,
			4450982377716734,
			[
				["images/liftup-sheet0.png", 57943, 1, 121, 258, 118, 1, 0.007751937955617905, 0.06779661029577255,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			9355720783759674
		]
,		[
			"CustomMovement",
			cr.behaviors.custom,
			8705212206375098
		]
		],
		false,
		false,
		7014762680071752,
		[],
		null
	]
,	[
		"t115",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1259910448583421,
			[
				["images/lifttop-sheet0.png", 196, 0, 0, 61, 59, 1, 0.5081967115402222, 0.508474588394165,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6151072175252697,
		[],
		null
	]
,	[
		"t116",
		cr.plugins_.Sprite,
		false,
		[6181786672802106,231129958549694],
		2,
		0,
		null,
		[
			[
			"Off",
			5,
			false,
			1,
			0,
			false,
			9414011982716065,
			[
				["images/liftup-sheet0.png", 57943, 1, 1, 258, 118, 1, 0.01162790693342686, 0.05932203307747841,[],[],0]
			]
			]
,			[
			"On",
			5,
			false,
			1,
			0,
			false,
			3374493335333931,
			[
				["images/liftup-sheet0.png", 57943, 1, 121, 258, 118, 1, 0.01162790693342686, 0.05932203307747841,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			245054329993605
		]
,		[
			"CustomMovement",
			cr.behaviors.custom,
			4298652100275681
		]
		],
		false,
		false,
		4529914279163614,
		[],
		null
	]
,	[
		"t117",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3024412088546472,
			[
				["images/lifttop-sheet0.png", 196, 0, 0, 61, 59, 1, 0.5081967115402222, 0.508474588394165,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8216308702197452,
		[],
		null
	]
,	[
		"t118",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3692917196807732,
			[
				["images/lifttop-sheet0.png", 196, 0, 0, 61, 59, 1, 0.5081967115402222, 0.508474588394165,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6083893070144799,
		[],
		null
	]
,	[
		"t119",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Off",
			5,
			false,
			1,
			0,
			false,
			6904528279403536,
			[
				["images/liftpower-sheet0.png", 6116, 1, 1, 130, 27, 1, 0.5, 1,[],[],0]
			]
			]
,			[
			"On",
			5,
			false,
			1,
			0,
			false,
			8388435464553737,
			[
				["images/liftpower-sheet0.png", 6116, 1, 30, 130, 25, 1, 0.5, 0.9599999785423279,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		7894692465352898,
		[],
		null
	]
,	[
		"t120",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			20,
			true,
			1,
			0,
			false,
			8405764572916216,
			[
				["images/enddoor-sheet0.png", 166960, 214, 1, 87, 172, 1, 0.3448275923728943, 0.4941860437393189,[],[],0]
			]
			]
,			[
			"Open",
			10,
			false,
			1,
			0,
			false,
			4921242412365984,
			[
				["images/enddoor-sheet0.png", 166960, 303, 1, 87, 168, 1, 0.3448275923728943, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 1, 1, 106, 170, 1, 0.4622641503810883, 0.5058823823928833,[],[],0],
				["images/enddoor-sheet0.png", 166960, 109, 1, 103, 168, 1, 0.446601927280426, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 392, 1, 84, 168, 1, 0.3214285671710968, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 109, 171, 72, 168, 1, 0.2083333283662796, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 303, 171, 64, 168, 1, 0.109375, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 369, 171, 60, 168, 1, 0.05000000074505806, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 431, 171, 58, 168, 1, 0.01724137924611569, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 1, 173, 56, 168, 1, -0.01785714365541935, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 183, 175, 54, 168, 1, -0.0555555559694767, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 239, 175, 52, 168, 1, -0.09615384787321091, 0.5059523582458496,[],[],0],
				["images/enddoor-sheet0.png", 166960, 59, 341, 51, 168, 1, -0.1176470592617989, 0.5059523582458496,[],[],0]
			]
			]
,			[
			"Opened",
			10,
			true,
			1,
			0,
			false,
			3120491955233805,
			[
				["images/enddoor-sheet0.png", 166960, 112, 341, 51, 168, 1, -0.1176470592617989, 0.5059523582458496,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			8738304276691663
		]
		],
		false,
		false,
		6999876204990391,
		[],
		null
	]
,	[
		"t121",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9031165077633859,
			[
				["images/sprite19-sheet0.png", 5256, 0, 0, 37, 165, 1, 1.297297239303589, 0.4969696998596191,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8038321032703465,
		[],
		null
	]
,	[
		"t122",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2804192449613038,
			[
				["images/teleportdust-sheet0.png", 2090, 0, 0, 105, 57, 1, 0.5047619342803955, 0.5087719559669495,[],[],0]
			]
			]
		],
		[
		[
			"Sine",
			cr.behaviors.Sin,
			9481779830802802
		]
		],
		false,
		false,
		5665459980760456,
		[],
		null
	]
,	[
		"t123",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3941295844809753,
		[],
		null
	]
,	[
		"t124",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap.png", 2214081, 0],
		null,
		[
		],
		false,
		false,
		1002181750823986,
		[],
		[
		]
	]
,	[
		"t125",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7546211223180732,
			[
				["images/endboss1-sheet0.png", 17987, 0, 0, 128, 128, 1, 0.5, 1,[],[],0]
			]
			]
		],
		[
		[
			"Fade",
			cr.behaviors.Fade,
			3716616126673593
		]
		],
		false,
		false,
		1850133383321063,
		[],
		null
	]
,	[
		"t126",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Fire",
			3,
			false,
			1,
			0,
			false,
			3393731865573115,
			[
				["images/trainingicons-sheet0.png", 58831, 1, 163, 256, 123, 1, 0.5, 0.5040650367736816,[],[],0],
				["images/trainingicons-sheet0.png", 58831, 1, 288, 256, 123, 1, 0.5, 0.5040650367736816,[],[],0]
			]
			]
,			[
			"Right",
			3,
			false,
			1,
			0,
			false,
			3187821828590634,
			[
				["images/trainingicons-sheet0.png", 58831, 1, 1, 203, 160, 1, 0.4975369572639465, 0.518750011920929,[],[],0],
				["images/trainingicons-sheet0.png", 58831, 259, 163, 165, 160, 1, 0.6121212244033814, 0.518750011920929,[],[],0]
			]
			]
,			[
			"Jump",
			3,
			false,
			1,
			0,
			false,
			8245278417030919,
			[
				["images/trainingicons-sheet0.png", 58831, 206, 1, 203, 160, 1, 0.4975369572639465, 0.518750011920929,[],[],0],
				["images/trainingicons-sheet0.png", 58831, 259, 325, 203, 124, 1, 0.4975369572639465, 0.3790322542190552,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			9921411282889753
		]
		],
		false,
		false,
		7724349595751385,
		[],
		null
	]
,	[
		"t127",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3269001322402465,
			[
				["images/trainingright-sheet0.png", 457, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8917341077707693,
		[],
		null
	]
,	[
		"t128",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4634580375115592,
			[
				["images/trainingjump-sheet0.png", 836, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		1056328208615264,
		[],
		null
	]
,	[
		"t129",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6433167728895961,
			[
				["images/trainingfire-sheet0.png", 1588, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6028994335675456,
		[],
		null
	]
,	[
		"t130",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7361771335741156,
			[
				["images/trainingbox-sheet0.png", 13621, 0, 0, 336, 219, 1, 0.5, 0.5022830963134766,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9004530139384692,
		[],
		null
	]
,	[
		"t131",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2601276543506316,
			[
				["images/sprite4-sheet0.png", 6574, 0, 0, 128, 124, 1, 0.5, 0.5,[],[-0.125,-0.1129029989242554,0,-0.1532259881496429,0.1328129768371582,-0.1209680140018463,0.1640629768371582,0,0.1171879768371582,0.104839026927948,0,0.1532260179519653,-0.125,0.1129029989242554,-0.171875,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		6692836880478396,
		[],
		null
	]
,	[
		"t132",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7786923047667732,
			[
				["images/sprite16-sheet0.png", 3692, 0, 0, 162, 56, 1, 0.5, 0.5,[],[-0.2654320001602173,0.1785709857940674,0,0.1785709857940674,0.4753090143203735,-0.4285714030265808,0.4691359996795654,0.4107139706611633,0,0.2142860293388367,-0.4444443881511688,0.3392860293388367,0.4506170153617859,0],0]
			]
			]
		],
		[
		],
		false,
		false,
		8121845416941624,
		[],
		null
	]
,	[
		"t133",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Idle",
			15,
			true,
			1,
			0,
			false,
			8031161708892983,
			[
				["images/nova-sheet0.png", 987521, 110, 371, 106, 155, 1, 0.1603773534297943, 0.08387096971273422,[],[],0],
				["images/nova-sheet0.png", 987521, 329, 468, 106, 154, 1, 0.1603773534297943, 0.07792207598686218,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 368, 107, 154, 1, 0.15887850522995, 0.07792207598686218,[],[],0],
				["images/nova-sheet0.png", 987521, 437, 471, 106, 154, 1, 0.1603773534297943, 0.07792207598686218,[],[],0],
				["images/nova-sheet0.png", 987521, 718, 464, 106, 155, 1, 0.1603773534297943, 0.08387096971273422,[],[],0],
				["images/nova-sheet0.png", 987521, 500, 314, 107, 155, 1, 0.1682243049144745, 0.08387096971273422,[],[],0],
				["images/nova-sheet0.png", 987521, 609, 317, 107, 155, 1, 0.1682243049144745, 0.08387096971273422,[],[],0],
				["images/nova-sheet0.png", 987521, 111, 213, 107, 156, 1, 0.1682243049144745, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 536, 156, 108, 156, 1, 0.1759259253740311, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 646, 159, 108, 156, 1, 0.1759259253740311, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 281, 184, 108, 156, 1, 0.1759259253740311, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 210, 108, 156, 1, 0.1759259253740311, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 756, 306, 107, 156, 1, 0.1682243049144745, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 865, 306, 107, 156, 1, 0.1682243049144745, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 391, 310, 107, 156, 1, 0.1682243049144745, 0.08974359184503555,[],[],0],
				["images/nova-sheet0.png", 987521, 220, 342, 107, 155, 1, 0.1682243049144745, 0.08387096971273422,[],[],0],
				["images/nova-sheet0.png", 987521, 826, 464, 106, 155, 1, 0.1603773534297943, 0.08387096971273422,[],[],0]
			]
			]
,			[
			"Free",
			15,
			false,
			1,
			0,
			false,
			993971337628127,
			[
				["images/nova-sheet0.png", 987521, 826, 1, 133, 145, 1, 0.3383458554744721, 0.07586207240819931,[],[],0],
				["images/nova-sheet0.png", 987521, 281, 1, 137, 181, 1, 0.3649635016918182, 0.2983425557613373,[],[],0],
				["images/nova-sheet0.png", 987521, 152, 1, 127, 210, 1, 0.3700787425041199, 0.4047619104385376,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 1, 149, 207, 1, 0.3422818779945374, 0.3623188436031342,[],[],0],
				["images/nova-sheet0.png", 987521, 420, 1, 146, 150, 1, 0.2808219194412231, 0.05999999865889549,[],[],0],
				["images/nova-sheet0.png", 987521, 568, 1, 130, 153, 1, 0.2538461685180664, 0.1045751646161079,[],[],0],
				["images/nova-sheet0.png", 987521, 700, 1, 124, 156, 1, 0.2338709682226181, 0.1474359035491943,[],[],0],
				["images/nova-sheet0.png", 987521, 826, 148, 123, 156, 1, 0.2276422828435898, 0.1282051354646683,[],[],0],
				["images/nova-sheet0.png", 987521, 420, 153, 114, 155, 1, 0.1929824501276016, 0.09677419066429138,[],[],0]
			]
			]
,			[
			"Dance1",
			24,
			false,
			3,
			0,
			false,
			47148504498128,
			[
				["images/nova-sheet1.png", 285493, 1, 1, 95, 143, 1, 0.1894736886024475, 0.1678321659564972,[],[],0],
				["images/nova-sheet1.png", 285493, 290, 1, 94, 143, 1, 0.1595744639635086, 0.1678321659564972,[],[],0],
				["images/nova-sheet1.png", 285493, 98, 1, 95, 143, 1, 0.1578947305679321, 0.1678321659564972,[],[],0],
				["images/nova-sheet1.png", 285493, 666, 1, 93, 142, 1, 0.161290317773819, 0.1619718372821808,[],[],0],
				["images/nova-sheet1.png", 285493, 856, 1, 92, 141, 1, 0.1847826093435288, 0.1560283750295639,[],[],0],
				["images/nova-sheet1.png", 285493, 87, 146, 88, 141, 1, 0.2159090936183929, 0.1560283750295639,[],[],0],
				["images/nova-sheet1.png", 285493, 290, 146, 86, 142, 1, 0.3372093141078949, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 517, 767, 97, 142, 1, 0.4742268025875092, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 545, 474, 106, 142, 1, 0.5188679099082947, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 524, 102, 142, 1, 0.5, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 105, 528, 102, 142, 1, 0.5, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 218, 499, 104, 142, 1, 0.4615384638309479, 0.1619718372821808,[],[],0],
				["images/nova-sheet0.png", 987521, 845, 621, 100, 141, 1, 0.4300000071525574, 0.1560283750295639,[],[],0],
				["images/nova-sheet1.png", 285493, 761, 1, 93, 141, 1, 0.3978494703769684, 0.1560283750295639,[],[],0],
				["images/nova-sheet1.png", 285493, 761, 144, 91, 142, 1, 0.3296703398227692, 0.1619718372821808,[],[],0],
				["images/nova-sheet1.png", 285493, 854, 144, 89, 143, 1, 0.2247191071510315, 0.1678321659564972,[],[],0]
			]
			]
,			[
			"Dance2",
			24,
			false,
			3,
			0,
			false,
			8253216657795813,
			[
				["images/nova-sheet0.png", 987521, 845, 764, 94, 147, 1, 0.1489361673593521, 0.1632653027772903,[],[],0],
				["images/nova-sheet0.png", 987521, 745, 769, 93, 148, 1, 0.1505376398563385, 0.1689189225435257,[],[],0],
				["images/nova-sheet0.png", 987521, 209, 643, 93, 149, 1, 0.1505376398563385, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 304, 774, 92, 149, 1, 0.1630434840917587, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 398, 777, 92, 149, 1, 0.1739130467176437, 0.1744966506958008,[],[],0],
				["images/nova-sheet1.png", 285493, 482, 1, 90, 149, 1, 0.1666666716337204, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 934, 464, 88, 148, 1, 0.1590909063816071, 0.1689189225435257,[],[],0],
				["images/nova-sheet1.png", 285493, 666, 145, 84, 148, 1, 0.1666666716337204, 0.1689189225435257,[],[],0],
				["images/nova-sheet0.png", 987521, 941, 764, 81, 148, 1, 0.1728395074605942, 0.1689189225435257,[],[],0],
				["images/nova-sheet1.png", 285493, 1, 146, 84, 148, 1, 0.1666666716337204, 0.1689189225435257,[],[],0],
				["images/nova-sheet1.png", 285493, 574, 1, 90, 148, 1, 0.1555555611848831, 0.1689189225435257,[],[],0],
				["images/nova-sheet0.png", 987521, 191, 794, 92, 149, 1, 0.1630434840917587, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 97, 823, 91, 149, 1, 0.1648351699113846, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 668, 93, 149, 1, 0.161290317773819, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 96, 672, 93, 149, 1, 0.1505376398563385, 0.1744966506958008,[],[],0],
				["images/nova-sheet0.png", 987521, 421, 627, 94, 148, 1, 0.1489361673593521, 0.1689189225435257,[],[],0]
			]
			]
,			[
			"Dance12",
			24,
			false,
			1,
			0,
			false,
			1011243407426311,
			[
				["images/nova-sheet1.png", 285493, 386, 1, 94, 143, 1, 0.1808510571718216, 0.1678321659564972,[],[],0],
				["images/nova-sheet0.png", 987521, 1, 823, 94, 145, 1, 0.1489361673593521, 0.1724137961864471,[],[],0],
				["images/nova-sheet0.png", 987521, 545, 618, 98, 147, 1, 0.1530612260103226, 0.1700680255889893,[],[],0],
				["images/nova-sheet0.png", 987521, 645, 621, 98, 147, 1, 0.1734693944454193, 0.1632653027772903,[],[],0]
			]
			]
,			[
			"Dance21",
			24,
			false,
			1,
			0,
			false,
			2640158422708895,
			[
				["images/nova-sheet0.png", 987521, 616, 770, 93, 148, 1, 0.1505376398563385, 0.1689189225435257,[],[],0],
				["images/nova-sheet0.png", 987521, 324, 624, 95, 148, 1, 0.1473684161901474, 0.1689189225435257,[],[],0],
				["images/nova-sheet0.png", 987521, 745, 621, 98, 146, 1, 0.1632653027772903, 0.1712328791618347,[],[],0],
				["images/nova-sheet1.png", 285493, 195, 1, 93, 145, 1, 0.1505376398563385, 0.1724137961864471,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			2209701182851552
		]
		],
		false,
		false,
		6832626600782471,
		[],
		null
	]
,	[
		"t134",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Climb",
			15,
			false,
			1,
			0,
			false,
			4387077039890813,
			[
				["images/draxclimb-sheet0.png", 195494, 83, 297, 74, 153, 1, 0.8243243098258972, 0.196078434586525,[["Imagepoint 1", 1.581081032752991, 0.1633986979722977]],[],0],
				["images/draxclimb-sheet0.png", 195494, 231, 144, 91, 152, 1, 0.7472527623176575, 0.3618420958518982,[["Imagepoint 1", 1.362637400627136, 0.3289473652839661]],[],0],
				["images/draxclimb-sheet0.png", 195494, 117, 146, 84, 149, 1, 0.7023809552192688, 0.5637583732604981,[["Imagepoint 1", 1.36904764175415, 0.5302013158798218]],[],0],
				["images/draxclimb-sheet0.png", 195494, 413, 284, 81, 147, 1, 0.5555555820465088, 0.7687074542045593,[["Imagepoint 1", 1.246913552284241, 0.7346938848495483]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 287, 80, 143, 1, 0.449999988079071, 0.9440559148788452,[["Imagepoint 1", 1.149999976158142, 0.9090909361839294]],[],0],
				["images/draxclimb-sheet0.png", 195494, 324, 284, 87, 140, 1, 0.3908045887947083, 1.064285755157471,[["Imagepoint 1", 1.034482717514038, 1.028571486473084]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 149, 92, 136, 1, 0.282608687877655, 1.132352948188782,[["Imagepoint 1", 0.8913043737411499, 1.095588207244873]],[],0],
				["images/draxclimb-sheet0.png", 195494, 346, 143, 102, 139, 1, 0.1764705926179886, 1.158273339271545,[["Imagepoint 1", 0.7254902124404907, 1.122302174568176]],[],0],
				["images/draxclimb-sheet0.png", 195494, 346, 1, 109, 140, 1, 0.1192660555243492, 1.178571462631226,[["Imagepoint 1", 0.6330274939537048, 1.142857193946838]],[],0],
				["images/draxclimb-sheet0.png", 195494, 117, 1, 112, 143, 1, 0.0803571417927742, 1.153846144676209,[["Imagepoint 1", 0.5803571343421936, 1.118881106376648]],[],0],
				["images/draxclimb-sheet0.png", 195494, 1, 1, 114, 146, 1, 0.0350877195596695, 1.109589099884033,[["Imagepoint 1", 0.5263158082962036, 1.075342416763306]],[],0],
				["images/draxclimb-sheet0.png", 195494, 231, 1, 113, 141, 1, 0, 1.021276593208313,[["Imagepoint 1", 0.4955752193927765, 0.9858155846595764]],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3215458591578442,
		[],
		null
	]
,	[
		"t135",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1785650515401018,
		[],
		null
	]
,	[
		"t136",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2355268800218658,
		[],
		null
	]
,	[
		"t137",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"1Star",
			5,
			false,
			1,
			0,
			false,
			618253609294099,
			[
				["images/complete_starlord-sheet0.png", 2022, 0, 0, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"2Star",
			5,
			false,
			1,
			0,
			false,
			6627796610814628,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 1, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"3Star",
			5,
			false,
			1,
			0,
			false,
			3193803887471154,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 47, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		9951756318191503,
		[],
		null
	]
,	[
		"t138",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"1Star",
			5,
			false,
			1,
			0,
			false,
			5765929156039686,
			[
				["images/complete_gamora-sheet1.png", 2270, 0, 0, 39, 46, 1, 1.435897469520569, 0.5,[],[],0]
			]
			]
,			[
			"2Star",
			5,
			false,
			1,
			0,
			false,
			2932016924597992,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 1, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"3Star",
			5,
			false,
			1,
			0,
			false,
			1724643000795,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 47, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8844214467341554,
		[],
		null
	]
,	[
		"t139",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"1Star",
			5,
			false,
			1,
			0,
			false,
			5087561966420084,
			[
				["images/complete_gamora-sheet1.png", 2270, 0, 0, 39, 46, 1, 1.435897469520569, 0.5,[],[],0]
			]
			]
,			[
			"2Star",
			5,
			false,
			1,
			0,
			false,
			485940062841503,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 1, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"3Star",
			5,
			false,
			1,
			0,
			false,
			6820185170533581,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 47, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		8476326604773248,
		[],
		null
	]
,	[
		"t140",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"1Star",
			5,
			false,
			1,
			0,
			false,
			4300433636186747,
			[
				["images/complete_gamora-sheet1.png", 2270, 0, 0, 39, 46, 1, 1.435897469520569, 0.5,[],[],0]
			]
			]
,			[
			"2Star",
			5,
			false,
			1,
			0,
			false,
			9340505725094451,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 1, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
,			[
			"3Star",
			5,
			false,
			1,
			0,
			false,
			2252932743270728,
			[
				["images/complete_gamora-sheet0.png", 6308, 1, 47, 109, 44, 1, 0.5045871734619141, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		6912531289214353,
		[],
		null
	]
,	[
		"t141",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Fire",
			3,
			false,
			1,
			0,
			false,
			2924698215229929,
			[
				["images/trainingiconsmobile-sheet0.png", 10889, 1, 125, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0],
				["images/trainingicons-sheet0.png", 58831, 1, 288, 256, 123, 1, 0.5, 0.5040650367736816,[],[],0]
			]
			]
,			[
			"Right",
			3,
			false,
			1,
			0,
			false,
			5302127835973986,
			[
				["images/touchright-sheet0.png", 3946, 0, 0, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0],
				["images/trainingiconsmobile-sheet0.png", 10889, 1, 1, 125, 122, 1, 0.5040000081062317, 0.5,[],[],0]
			]
			]
,			[
			"Jump",
			3,
			false,
			1,
			0,
			false,
			3359996871941703,
			[
				["images/trainingiconsmobile-sheet0.png", 10889, 118, 125, 115, 115, 1, 0.5043478012084961, 0.5043478012084961,[],[],0],
				["images/trainingiconsmobile-sheet0.png", 10889, 128, 1, 125, 122, 1, 0.5040000081062317, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			713763602081326
		]
		],
		false,
		false,
		961254979891702,
		[],
		null
	]
,	[
		"t142",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			469899944495055,
			[
				["images/sprite6-sheet0.png", 1720, 0, 0, 45, 45, 1, 0.5111111402511597, 0.5111111402511597,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		2092540986955949,
		[],
		null
	]
,	[
		"t143",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9673131319286653,
			[
				["images/endstill-sheet0.png", 845598, 0, 0, 930, 600, 1, 0, 0,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		4538601782102497,
		[],
		null
	]
,	[
		"t144",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			24,
			true,
			1,
			0,
			false,
			1846520377953559,
			[
				["images/bosssheild-sheet0.png", 1304378, 671, 588, 329, 194, 1, 0.4893617033958435, 0.5670102834701538,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 1, 780, 328, 193, 1, 0.4908536672592163, 0.5647668242454529,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 664, 784, 327, 193, 1, 0.4923547506332398, 0.5647668242454529,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 1, 1, 325, 192, 1, 0.4953846037387848, 0.5625,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 659, 1, 325, 191, 1, 0.4984615445137024, 0.5654450058937073,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 656, 194, 325, 190, 1, 0.5015384554862976, 0.5684210658073425,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 328, 192, 326, 190, 1, 0.5030674934387207, 0.5684210658073425,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 331, 386, 326, 189, 1, 0.5030674934387207, 0.5714285969734192,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 659, 386, 326, 188, 1, 0.5030674934387207, 0.5744680762290955,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 1, 574, 327, 187, 1, 0.5045871734619141, 0.5775400996208191,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 1, 384, 328, 188, 1, 0.5030487775802612, 0.5797872543334961,[],[],0],
				["images/bosssheild-sheet1.png", 770664, 328, 1, 329, 189, 1, 0.5015197396278381, 0.5767195820808411,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 331, 782, 331, 191, 1, 0.4984894394874573, 0.5759162306785584,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 337, 589, 332, 191, 1, 0.4969879388809204, 0.5759162306785584,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 1, 586, 334, 192, 1, 0.4940119683742523, 0.5729166865348816,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 1, 392, 335, 192, 1, 0.4925373196601868, 0.5729166865348816,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 679, 1, 337, 193, 1, 0.4896142482757568, 0.575129508972168,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 1, 1, 337, 194, 1, 0.4896142482757568, 0.5721649527549744,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 340, 1, 337, 194, 1, 0.4866468906402588, 0.5721649527549744,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 1, 197, 336, 193, 1, 0.4851190447807312, 0.5699481964111328,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 679, 196, 335, 194, 1, 0.4865671694278717, 0.5670102834701538,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 339, 197, 333, 194, 1, 0.4834834933280945, 0.5670102834701538,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 674, 392, 331, 194, 1, 0.4864048361778259, 0.5670102834701538,[],[],0],
				["images/bosssheild-sheet0.png", 1304378, 338, 393, 331, 194, 1, 0.4864048361778259, 0.5670102834701538,[],[],0]
			]
			]
		],
		[
		[
			"Flash",
			cr.behaviors.Flash,
			4651919340046381
		]
		],
		false,
		false,
		2961384890336794,
		[],
		null
	]
,	[
		"t145",
		cr.plugins_.Sprite,
		false,
		[2520880606125493,6035902386394402,1193348494969453],
		3,
		0,
		null,
		[
			[
			"Off",
			5,
			false,
			1,
			0,
			false,
			7957727540610364,
			[
				["images/liftup-sheet0.png", 57943, 1, 1, 258, 118, 1, 0.007751937955617905, 0.06779661029577255,[],[],0]
			]
			]
		],
		[
		[
			"Solid",
			cr.behaviors.solid,
			4144793644829644
		]
,		[
			"CustomMovement",
			cr.behaviors.custom,
			1458557091661945
		]
,		[
			"Flash",
			cr.behaviors.Flash,
			4795898874717334
		]
		],
		false,
		false,
		8866960437901375,
		[],
		null
	]
,	[
		"t146",
		cr.plugins_.Tilemap,
		false,
		[],
		0,
		0,
		["images/tilemap6.png", 2355708, 1],
		null,
		[
		],
		false,
		false,
		4037346724364824,
		[],
		[
		]
	]
,	[
		"t147",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3832941594146414,
		[],
		null
	]
,	[
		"t148",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Level1",
			5,
			false,
			1,
			0,
			false,
			7782569548986057,
			[
				["images/sprite12-sheet0.png", 3696815, 1, 1, 1593, 842, 1, 0.5003138780593872, 0.5,[],[],0]
			]
			]
,			[
			"Level2",
			5,
			false,
			1,
			0,
			false,
			2270064222855515,
			[
				["images/sprite12-sheet0.png", 3696815, 1, 845, 1593, 842, 1, 0.5003138780593872, 0.5,[],[],0]
			]
			]
,			[
			"Level3",
			5,
			false,
			1,
			0,
			false,
			1212957310040126,
			[
				["images/sprite12-sheet1.png", 3697446, 1, 1, 1593, 842, 1, 0.5003138780593872, 0.5,[],[],0]
			]
			]
,			[
			"Level4",
			5,
			false,
			1,
			0,
			false,
			3741712318871932,
			[
				["images/sprite12-sheet1.png", 3697446, 1, 845, 1593, 842, 1, 0.5003138780593872, 0.5,[],[],0]
			]
			]
,			[
			"Level5",
			5,
			false,
			1,
			0,
			false,
			6242460704644078,
			[
				["images/sprite12-sheet2.png", 1806920, 0, 0, 1593, 842, 1, 0.5003138780593872, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		7130870888290167,
		[],
		null
	]
,	[
		"t149",
		cr.plugins_.Text,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		4471605934852382,
		[],
		null
	]
,	[
		"t150",
		cr.plugins_.Sprite,
		true,
		[],
		1,
		0,
		null,
		null,
		[
		[
			"Flash2",
			cr.behaviors.Flash,
			8432272668900365
		]
		],
		false,
		false,
		9107904750875439,
		[],
		null
	]
,	[
		"t151",
		cr.plugins_.Sprite,
		true,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		816508064928813,
		[],
		null
	]
,	[
		"t152",
		cr.plugins_.Sprite,
		true,
		[],
		1,
		0,
		null,
		null,
		[
		[
			"Bullet",
			cr.behaviors.Bullet,
			3022204796097937
		]
		],
		false,
		false,
		7218084588856219,
		[],
		null
	]
	],
	[
		[150,9,11,13,17,19]
,		[151,10,12,134,18,20]
,		[152,5,0,1,2,4]
	],
	[
	[
		"Intro",
		930,
		600,
		false,
		"Event sheet 1",
		4729303228987463,
		[
		[
			"Layer 0",
			0,
			1700991381161397,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[458, 288, 0, 503.9642944335938, 167.9880981445313, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				72,
				134,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-1, 574, 0, 929, 54, 0, 0, 1, 0, 0, 0, 0, []],
				135,
				174,
				[
				],
				[
				],
				[
					"©2014 The LEGO Group. All rights reserved. Use of this site signifies your agreement to the terms of use.",
					0,
					"12pt Arial",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[0, 555, 0, 928, 53, 0, 0, 1, 0, 0, 0, 0, []],
				135,
				130,
				[
				],
				[
				],
				[
					"LEGO, the LEGO logo, and the Minifigure are trademarks of the LEGO Group. ",
					0,
					"12pt Arial",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[1, 566, 0, 927, 30, 0, 0, 1, 0, 0, 0, 0, []],
				147,
				133,
				[
				],
				[
				],
				[
					"© MARVEL",
					1,
					"12pt Arial",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[1, -39, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				149,
				136,
				[
				],
				[
				],
				[
					"1.6",
					0,
					"12pt Arial",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"HubWorld",
		1708,
		960,
		false,
		"HubWorld",
		1215999085806039,
		[
		[
			"Layer 3",
			0,
			2656607177216591,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[462.5866088867188, 301.3019409179688, 0, 930, 600, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				110,
				1037,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 0",
			1,
			2491849705429957,
			true,
			[210, 210, 210],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[699, 264, 0, 178, 219, 0, 0, 1, 0.5, 0, 0, 0, []],
				56,
				76,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[516.2537231445313, 296, 0, 102, 180, 0, 0, 1, 0.5024875402450562, 0, 0, 0, []],
				57,
				77,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[131, 261, 0, 174, 277, 0, 0, 1, 0.5044247508049011, 0.2139037400484085, 0, 0, []],
				58,
				80,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[135.0000915527344, 231.9998779296875, 0, 109, 44, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				65,
				196,
				[
				],
				[
				],
				[
					1,
					"3Star",
					0,
					1
				]
			]
,			[
				[1168, 214, 0, 11, 10, 0, 0, 1, 11.45454502105713, 12.60000038146973, 0, 0, []],
				66,
				198,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[340, 265, 0, 150, 218, 0, 0, 1, 0.5, 0, 0, 0, []],
				69,
				7,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[111, 346, 0, 107, 114, 0, 0, 1, 0.5046728849411011, 0, 0, 0, []],
				71,
				132,
				[
					[1]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[594, 186, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				265,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[424, 185, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				266,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[85, 184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				267,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[257, 185, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				268,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[616, 160, 0, 87, 47, 0, 0, 1, 0, 0, 0, 0, []],
				74,
				270,
				[
				],
				[
				],
				[
					"Text",
					0,
					"18pt Courier New",
					"rgb(255,255,255)",
					0,
					1,
					0,
					0,
					0
				]
			]
,			[
				[308, 65.49978637695313, 0, 322.4991149902344, 49, 0, 0, 1, 0, 0, 0, 0, []],
				75,
				271,
				[
				],
				[
				],
				[
					"Text",
					0,
					"18pt Courier New",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[442, 159, 0, 93, 50, 0, 0, 1, 0, 0, 0, 0, []],
				76,
				272,
				[
				],
				[
				],
				[
					"Text",
					0,
					"18pt Courier New",
					"rgb(255,255,255)",
					0,
					1,
					0,
					0,
					0
				]
			]
,			[
				[104, 159, 0, 96, 50, 0, 0, 1, 0, 0, 0, 0, []],
				77,
				273,
				[
				],
				[
				],
				[
					"Text",
					0,
					"18pt Courier New",
					"rgb(255,255,255)",
					0,
					1,
					0,
					0,
					0
				]
			]
,			[
				[275, 159, 0, 95, 50, 0, 0, 1, 0, 0, 0, 0, []],
				78,
				274,
				[
				],
				[
				],
				[
					"Text",
					0,
					"18pt Courier New",
					"rgb(255,255,255)",
					0,
					1,
					0,
					0,
					0
				]
			]
,			[
				[776, 160, 0, 224, 48, 0, 0, 1, 0, 0, 0, 0, []],
				136,
				181,
				[
				],
				[
				],
				[
					"Text",
					1,
					"18pt Courier New",
					"rgb(255,255,255)",
					0,
					1,
					0,
					0,
					0
				]
			]
,			[
				[760, 185, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				200,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[301.5001220703125, 231.0001983642578, 0, 109, 44, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				137,
				95,
				[
				],
				[
				],
				[
					1,
					"3Star",
					0,
					1
				]
			]
,			[
				[638.5000610351563, 231.00048828125, 0, 39, 46, 0, 0, 1, 1.435897469520569, 0.5, 0, 0, []],
				138,
				184,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[470.0001525878906, 230.5002899169922, 0, 39, 46, 0, 0, 1, 1.435897469520569, 0.5, 0, 0, []],
				139,
				197,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[806, 231.4994659423828, 0, 39, 46, 0, 0, 1, 1.435897469520569, 0.5, 0, 0, []],
				140,
				201,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			2,
			5632663701602244,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				60,
				82,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			3,
			3129917561517616,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[867, 539, 0, 115, 115, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				63,
				99,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[870, 38, 0, 126, 435, 0, 0, 1, 0.5, 0, 0, 0, []],
				84,
				522,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[706, -28, 0, 112.4653854370117, 58.01785659790039, 0, 0.004661343060433865, 1, 0.5, 0.8230769038200378, 0, 0, []],
				102,
				473,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[32, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				898,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				142,
				799,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"levelintro",
			4,
			5875590409365971,
			false,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[745, 409, 0, 1593, 842, 0, 0, 1, 0.5003138780593872, 0.5, 0, 0, []],
				148,
				135,
				[
				],
				[
				],
				[
					0,
					"level5",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Training",
		4000,
		4000,
		false,
		"EventLevel1",
		8985162960665808,
		[
		[
			"BG",
			0,
			6181730073909341,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"Characters",
			1,
			8873343622237071,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1481, -303, 0, 74, 153, 0, 0, 1, 0.8243243098258972, 0.196078434586525, 0, 0, []],
				10,
				55,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[712, -304, 0, 122, 151, 0, 0, 1, 0.4590163826942444, 1.125827789306641, 0, 0, []],
				9,
				53,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[665, -96, 0, 103.5190505981445, 114.6279907226563, 0, 0, 1, 0.262773722410202, 0.9430379867553711, 0, 0, []],
				19,
				492,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1434, -24, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				47,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					700,
					1500,
					1500,
					700,
					1500,
					1000,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[928, -105, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				54,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[907, -103, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				118,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[632, 120, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				122,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1170, -120, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				124,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1717, -206, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				127,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1677, -416, 0, 134.6531829833984, 211.5978851318359, 0, 0, 1, 0.4360902309417725, 0.9952152967453003, 0, 0, []],
				11,
				168,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1056.120971679688, -55.89190673828125, 0, 122.4562149047852, 185.1524200439453, 0, 0, 1, 0.3483870923519135, 1.066666722297669, 0, 0, []],
				17,
				46,
				[
				],
				[
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1322, -524, 0, 81.90960693359375, 155.8280639648438, 0, 0, 1, 0.7560975551605225, 0.2115384638309479, 0, 0, []],
				12,
				169,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2324.9853515625, -131.4537353515625, 0, 98.21559906005859, 203.1821594238281, 0, 0, 1, 0.8442623019218445, 0.6952381134033203, 0, 0, []],
				18,
				172,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			2,
			2348039750609235,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[8, 1, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "100,9x-1,15,6x-1,0,1,2,3,4,5,6,7,8,68,11,12,13,100,115,9x-1,30,15x-1,68,26,27,28,115,100,7x-1,31,32,33,34,35,12x-1,31,32,33,34,35,100,115,29x-1,115,100,12x-1,82hd,2x-1,31,32,33,34,35,9x-1,100,115,2x2,3,4,5,6,7,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2x2,3,4,5,6,7,8,115,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,100hd,115hd,744x-1"]],
				45,
				170,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[1345, -121, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				171,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			3,
			3650703417961588,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[3509, -250, 0, 130, 109, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				173,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[730, 469, 0, 250, 250, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				199,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3918, -431, 0, 250, 250, 0, 0.657842218875885, 1, 0.5, 0.5, 0, 0, []],
				67,
				202,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3733, -462, 0, 250, 250, 0, 0.08455691486597061, 1, 0.5, 0.5, 0, 0, []],
				67,
				203,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3797, -215, 0, 250, 250, 0, -0.4566680788993835, 1, 0.5, 0.5, 0, 0, []],
				67,
				204,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4009, -586, 0, 250, 250, 0, 1.900193810462952, 1, 0.5, 0.5, 0, 0, []],
				67,
				205,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4186, -486, 0, 250, 250, 0, 2.814695596694946, 1, 0.5, 0.5, 0, 0, []],
				67,
				206,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4149, -254, 0, 250, 250, 0, -2.532386779785156, 1, 0.5, 0.5, 0, 0, []],
				67,
				207,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3974, -182, 0, 250, 250, 0, -1.786202430725098, 1, 0.5, 0.5, 0, 0, []],
				67,
				208,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2891, -200, 0, 126, 126, 0, -0.1763093173503876, 1, 0.5, 0.5, 0, 0, []],
				79,
				290,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3930, -412, 0, 23, 252, 0, 0, 1, 5.47826099395752, 0.5, 0, 0, []],
				80,
				491,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2309, -420, 0, 250, 250, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				67,
				493,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2781, -724, 0, 250, 250, 0, -0.4997285604476929, 1, 0.5, 0.5, 0, 0, []],
				67,
				495,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"HUD",
			4,
			3685962333998252,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1365, -130, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				230,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(0,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				242,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[465, 301, 0, 932.0064697265625, 501.369873046875, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				231,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 55, 0, 206.0419616699219, 71.22437286376953, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				232,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[18, 100, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				233,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[18, 80, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				234,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[128, 50, 0, 231.1111145019531, 38, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				235,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[460, 23, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				236,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Arial",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[78, 525, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				238,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[244, 525, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				239,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[636, 531, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				240,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[825, 76, 0, 148, 101, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				486,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[834, 505, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				487,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"level1_",
		4000,
		4000,
		false,
		"EventLevel1",
		7381319849099805,
		[
		[
			"Layer 0",
			0,
			1944162381771282,
			true,
			[255, 255, 255],
			true,
			0.75,
			0.75,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,28x10,3x11,5x10,3x11,12x10,5,6,7,8,9,10,11,10,11,2x10,38,39,40,7x11,36,37,38,39,40,5x11,17,18,19,20,21,10,11,2x10,2x11,50,51,52,125,126,127,125,126,127,125,48,49,50,51,52,125,126,127,125,126,29,30,31,32,33,125,126,125,126,127,126,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,76,62,63,64,87,60,61,62,63,64,87,85,60,61,62,63,64,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,74,75,76,75,72,73,74,75,76,75,73,72,73,74,75,76,62,63,64,73,74,75,73,74,75,73,74,75,73,74,76,86,87,88,87,84,85,86,87,88,87,85,84,85,86,87,88,74,75,76,85,86,87,85,60,61,62,63,64,85,86,88,98,99,100,75,96,97,98,99,100,75,73,96,97,98,99,100,86,87,88,73,74,75,73,72,73,74,75,76,73,74,76,84,85,86,87,72,73,74,75,76,87,85,86,87,85,96,97,98,99,100,85,86,87,85,84,85,86,87,88,85,86,88,72,73,74,75,84,85,86,87,88,75,73,74,75,73,74,75,73,74,75,73,74,75,73,96,97,98,99,100,73,74,76,84,85,86,87,96,97,98,99,100,87,60,61,62,63,64,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,72,73,74,75,73,74,75,73,74,75,72,73,74,75,76,75,73,74,75,60,61,62,63,64,75,73,74,60,61,62,63,84,85,86,87,85,86,87,85,86,87,84,85,86,87,88,87,85,86,87,72,73,74,75,76,87,85,86,72,73,74,75,72,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,84,85,86,87,88,75,73,74,84,85,86,87,84,85,86,87,85,86,87,85,86,87,85,86,87,60,61,62,63,64,87,96,97,98,99,100,87,85,86,96,97,98,99,96,97,98,99,97,98,99,97,98,99,97,98,99,72,73,74,75,76,99,97,98,99,97,98,99,97,98,99,97,98,100,60,61,62,63,61,62,63,61,62,63,61,62,63,84,85,86,87,88,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,73,74,75,73,74,75,73,74,76,84,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,96,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,100,108,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,112,120,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,124"]],
				103,
				797,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[3968, 2, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,28x10,3x11,5x10,3x11,12x10,5,6,7,8,9,10,11,10,11,2x10,38,39,40,7x11,36,37,38,39,40,5x11,17,18,19,20,21,10,11,2x10,2x11,50,51,52,125,126,127,125,126,127,125,48,49,50,51,52,125,126,127,125,126,29,30,31,32,33,125,126,125,126,127,126,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,76,62,63,64,87,60,61,62,63,64,87,85,60,61,62,63,64,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,74,75,76,75,72,73,74,75,76,75,73,72,73,74,75,76,62,63,64,73,74,75,73,74,75,73,74,75,73,74,76,86,87,88,87,84,85,86,87,88,87,85,84,85,86,87,88,74,75,76,85,86,87,85,60,61,62,63,64,85,86,88,98,99,100,75,96,97,98,99,100,75,73,96,97,98,99,100,86,87,88,73,74,75,73,72,73,74,75,76,73,74,76,84,85,86,87,72,73,74,75,76,87,85,86,87,85,96,97,98,99,100,85,86,87,85,84,85,86,87,88,85,86,88,72,73,74,75,84,85,86,87,88,75,73,74,75,73,74,75,73,74,75,73,74,75,73,96,97,98,99,100,73,74,76,84,85,86,87,96,97,98,99,100,87,60,61,62,63,64,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,72,73,74,75,73,74,75,73,74,75,72,73,74,75,76,75,73,74,75,60,61,62,63,64,75,73,74,60,61,62,63,84,85,86,87,85,86,87,85,86,87,84,85,86,87,88,87,85,86,87,72,73,74,75,76,87,85,86,72,73,74,75,72,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,84,85,86,87,88,75,73,74,84,85,86,87,84,85,86,87,85,86,87,85,86,87,85,86,87,60,61,62,63,64,87,96,97,98,99,100,87,85,86,96,97,98,99,96,97,98,99,97,98,99,97,98,99,97,98,99,72,73,74,75,76,99,97,98,99,97,98,99,97,98,99,97,98,100,60,61,62,63,61,62,63,61,62,63,61,62,63,84,85,86,87,88,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,73,74,75,73,74,75,73,74,76,84,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,96,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,100,108,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,112,120,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,124"]],
				103,
				793,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[-3968, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,1,2,3,4,4h,3h,2h,1h,0h,0,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,13,14,15,16,16h,15h,14h,13h,12h,12,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,25,26,27,28,28h,27h,26h,25h,24h,24,28x10,3x11,5x10,3x11,12x10,5,6,7,8,9,10,11,10,11,2x10,38,39,40,7x11,36,37,38,39,40,5x11,17,18,19,20,21,10,11,2x10,2x11,50,51,52,125,126,127,125,126,127,125,48,49,50,51,52,125,126,127,125,126,29,30,31,32,33,125,126,125,126,127,126,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,63,64,60,61,62,60,61,62,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,72,73,74,60,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,75,73,74,76,62,63,64,87,60,61,62,63,64,87,85,60,61,62,63,64,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,74,75,76,75,72,73,74,75,76,75,73,72,73,74,75,76,62,63,64,73,74,75,73,74,75,73,74,75,73,74,76,86,87,88,87,84,85,86,87,88,87,85,84,85,86,87,88,74,75,76,85,86,87,85,60,61,62,63,64,85,86,88,98,99,100,75,96,97,98,99,100,75,73,96,97,98,99,100,86,87,88,73,74,75,73,72,73,74,75,76,73,74,76,84,85,86,87,72,73,74,75,76,87,85,86,87,85,96,97,98,99,100,85,86,87,85,84,85,86,87,88,85,86,88,72,73,74,75,84,85,86,87,88,75,73,74,75,73,74,75,73,74,75,73,74,75,73,96,97,98,99,100,73,74,76,84,85,86,87,96,97,98,99,100,87,60,61,62,63,64,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,72,73,74,75,73,74,75,73,74,75,72,73,74,75,76,75,73,74,75,60,61,62,63,64,75,73,74,60,61,62,63,84,85,86,87,85,86,87,85,86,87,84,85,86,87,88,87,85,86,87,72,73,74,75,76,87,85,86,72,73,74,75,72,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,84,85,86,87,88,75,73,74,84,85,86,87,84,85,86,87,85,86,87,85,86,87,85,86,87,60,61,62,63,64,87,96,97,98,99,100,87,85,86,96,97,98,99,96,97,98,99,97,98,99,97,98,99,97,98,99,72,73,74,75,76,99,97,98,99,97,98,99,97,98,99,97,98,100,60,61,62,63,61,62,63,61,62,63,61,62,63,84,85,86,87,88,63,61,62,63,61,62,63,61,62,63,61,62,64,72,73,74,75,73,74,75,73,74,75,73,74,75,96,97,98,99,100,75,73,74,75,73,74,75,73,74,75,73,74,76,84,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,87,85,86,88,96,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,99,97,98,100,108,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,112,120,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,123,121,122,124"]],
				103,
				794,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "217x-1,62h,61h,60h,62h,61h,60h,62h,61h,60h,62h,61h,60h,62h,61h,60h,62h,61h,60h,62h,61h,60h,59h,58h,57h,62h,61h,60h,62h,61h,60h,62h,2x-1,57,3x-1,92,93,4x-1,92,93,4x-1,59h,-1,57h,69h,68h,67h,13x-1,102,103,4x-1,102,103,7x-1,79h,78h,77h,13x-1,112,113,4x-1,112,113,-1,38,5x-1,89h,88h,87h,28x-1,99h,98h,97h,28x-1,109h,108h,107h,14x-1,0,1,2,11x-1,119h,118h,117h,14x-1,10,11,12,10x-1,8h,7h,6h,5h,4h,3h,12x-1,20,21,22,9x-1,19h,18h,17h,16h,15h,14h,13h,12x-1,30,31,32,3x-1,76h,75h,74h,-1,112v,113v,29h,28h,27h,26h,25h,24h,23h,6x-1,0,1,2,3x-1,40,41,42,3x-1,86h,85h,84h,-1,102v,103v,39h,38h,37h,36h,35h,34h,33h,6x-1,10,11,12,9x-1,96h,95h,94h,-1,92v,93v,13x-1,20,21,22,15x-1,59h,58h,57h,2x-1,3,4,5,6,7,8,9,-1,30,31,32,3x-1,3,4,5,6,7,8,6x-1,69h,68h,67h,2x-1,13,14,15,16,17,18,19,-1,40,41,42,3x-1,13,14,15,16,17,18,6x-1,79h,78h,77h,2x-1,23,24,25,26,27,28,29,7x-1,23,24,25,26,27,28,-1,92,93,3x-1,89h,88h,87h,2x-1,33,34,35,36,37,38,39,7x-1,33,34,35,36,37,38,-1,102,103,3x-1,99h,98h,97h,13x-1,59h,58h,57h,7x-1,112,113,3x-1,109h,108h,107h,10x-1,106h,105h,104h,67,68,69,12x-1,119h,118h,117h,10x-1,116h,115h,114h,77,78,79,28x-1,87,88,89,28x-1,97,98,99,28x-1,107,108,109,55x-1"]],
				146,
				900,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			1,
			5117443724584281,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[288, 3392, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				800,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					500,
					750,
					750,
					700,
					1500,
					1000,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				801,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2708, -317, 0, 74, 153, 0, 0, 1, 0.8243243098258972, 0.196078434586525, 0, 0, []],
				10,
				802,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				803,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[632, 120, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				804,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1634, -248, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				805,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2544.0595703125, -217.8953247070313, 0, 133, 209, 0, 0, 1, 0.4360902309417725, 0.9952152967453003, 0, 0, []],
				11,
				806,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2564.0595703125, -149.8953247070313, 0, 82, 156, 0, 0, 1, 0.7560975551605225, 0.2115384638309479, 0, 0, []],
				12,
				807,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				808,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1497, -201, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				809,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1490, -250, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				812,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1518, -213, 0, 36, 39, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				815,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, -260, 0, 36, 39, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				7,
				816,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 161, 157, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				817,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[211.2251434326172, -42.42211151123047, 0, 57.2628059387207, 13.13259601593018, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				818,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, -314, 0, 189, 176, 0, 0, 1, 0.5026454925537109, 0.5, 0, 0, []],
				4,
				982,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2673.0595703125, -27.89532470703125, 0, 122, 151, 0, 0, 1, 0.4590163826942444, 1.125827789306641, 0, 0, []],
				9,
				976,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1827, 2157, 0, 95, 143, 0, 0, 1, 0.1894736886024475, 0.1678321659564972, 0, 0, []],
				133,
				688,
				[
				],
				[
				[
				]
				],
				[
					1,
					"Dance1",
					0,
					1
				]
			]
,			[
				[3163, 2533, 0, 143.2008972167969, 80.06932067871094, 0, 0, 1, 0.5053763389587402, 0.5, 0, 0, []],
				61,
				690,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					20,
					0
				]
				],
				[
					0,
					"Rocket",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			2,
			8772884188083367,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "82,29x-1,2x82,10x-1,11x77,8x-1,2x82,5x-1,77h,4x-1,11x89,8x-1,2x82,5x-1,89h,12x-1,106v,107v,9x-1,2x82,7x-1,77h,10x-1,94v,95v,9x-1,94,95,7x-1,89h,10x-1,82v,83v,9x-1,106,107,14x77h,2x-1,77h,-1,82,83,2x-1,7x77h,-1,107v,14x89h,2x-1,89h,-1,94,95,2x-1,7x89h,106v,95v,17x-1,77,106,107,9x-1,94v,82,17x-1,89,3x-1,2x77,6x-1,2x82,7x-1,2x77h,7x-1,77h,4x-1,2x89,3x-1,2x77,-1,2x82,7x-1,2x89h,7x-1,89h,3x-1,58v,59v,4x-1,2x89,-1,2x82,105h,104h,103h,102h,101h,15x-1,46v,47v,7x-1,82,95,117h,116h,115h,114h,113h,3x-1,101h,7x-1,4x77,34v,35v,2x77,5x-1,82,107,8x-1,113h,7x-1,8x89,5x-1,82,106hv,27x-1,77,78,82,94hv,27x-1,89,90,82,82hv,8x-1,3x77,101,102,103,104,101,102,103,104,7x-1,101,102,77,82,82hv,2x-1,77,5x-1,3x89,113,114,115,116,113,114,115,116,7x-1,113,114,89,83hv,83v,-1,77,89,26x-1,82,82hv,-1,89,27x-1,82,82hv,102,103,77,78,70,71,70,71,3x-1,79,4x-1,79,2x77,10x-1,82,83v,114,115,89,90,82,83,82,83,3x-1,91,4x-1,91,2x89,77,9x-1,82,82h,4x-1,94,95,94,95,11x-1,89,77,102,-1,104,105,4x-1,94,94h,4x-1,106,107,106,107,12x-1,89,114,-1,116,117,4x-1,106,106h,25x-1,77,3x-1,106v,9x-1,77,6x-1,77,-1,118,119,6x-1,89,3x-1,94v,107v,6x-1,77,-1,89,118,119,2x-1,105,-1,89,118,130,131,119,7x-1,105,-1,82,95v,6x-1,89,-1,66,130,131,2x-1,117,2x-1,130,34,35,131,7x-1,117,-1,82,83v,4x77,79,2x77,102,78,142,143,79,4x77,2x142,2x143,77,70,71,2x77,79,137,138,77,83hv,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,82,83,83hv"]],
				104,
				798,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[3008, 3072, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				820,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				824,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 2816, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				825,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 2816, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				826,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1856, 2816, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				827,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3296, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				828,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3008, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				829,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				830,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				831,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 2304, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				832,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[895, 3564, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				821,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 3436, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				833,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1793, 3563, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				834,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2049, 3436, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				835,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3582, 3562, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				836,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3329, 3307, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				839,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3455, 3310, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				840,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3327, 3053, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				841,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3714, 3564, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				842,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1919, 3566, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				843,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2175, 3438, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				844,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1023, 3566, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				845,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1279, 3438, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				846,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2686, 2924, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				822,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2176, 2795, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				823,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2558, 2798, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				847,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1535, 2797, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				848,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1661, 2800, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				849,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 2542, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				850,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 2799, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				851,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[386, 2416, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				852,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[514, 2413, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				853,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1156, 2282, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				854,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2558, 2287, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				855,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3264, 1920, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				819,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3392, 1568, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				856,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 1792, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				857,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1600, 1792, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				858,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 1792, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				859,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 1408, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				860,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 1408, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				861,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 1408, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				862,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 288, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				863,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 896, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				864,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2030, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				865,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3461, 2285, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				866,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3456, 1387, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				867,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2818, 1259, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				868,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2179, 1773, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				869,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1154, 1769, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				870,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[129, 1641, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				871,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1023, 1391, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				872,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2179, 1385, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				873,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2305, 1133, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				874,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2951, 876, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				875,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1025, 620, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				876,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[767, 367, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				877,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1410, 238, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				878,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3070, 1266, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				879,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2431, 1134, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				882,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2307, 1388, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				880,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3192, 1775, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				883,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3841, 2032, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				884,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[765, 1645, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				885,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1274, 1389, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				886,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2305, 881, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				887,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1148, 624, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				888,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[889, 364, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				889,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2813, 240, 0, -24, 22, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				890,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3331, 1545, 0, -24, 22, 0, 3.141592741012573, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				891,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[501, 3353, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				837,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					25,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			3,
			9617425266637503,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-696, 1288, 0, 250, 250, 0, 0, 1, 0.5090909004211426, 0.5102040767669678, 0, 0, []],
				61,
				892,
				[
				],
				[
				[
					1,
					0,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3776, 864, 0, 109.2923049926758, 103.3394470214844, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				975,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1824, 2134, 0, 89, 135, 0, 0, 1, 0.2584269642829895, -0.04444444552063942, 0, 0, []],
				79,
				977,
				[
				],
				[
				[
					0,
					1,
					0,
					2,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Nova",
					0,
					1
				]
			]
,			[
				[-1018, 1842, 0, 23, 252, 0, 0, 1, 5.47826099395752, 0.5, 0, 0, []],
				80,
				814,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3186, 3806, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				903,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[679, 2781, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				904,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[440, 1629, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				905,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2068, 2268, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				906,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1513, 862, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				907,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[459, 859, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				908,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1613, 223, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				909,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2249, 226, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				910,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3424, 860, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				911,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3040, 768, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				912,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3136, 768, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				913,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3232, 768, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				914,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3520, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				915,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				916,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				917,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, 1120, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				918,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 1120, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				919,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3008, 1120, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				920,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2688, 1184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				921,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2592, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				922,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2528, 1408, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				923,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				924,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 1664, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				925,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2400, 1664, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				926,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 1664, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				927,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2208, 1664, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				928,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				929,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				930,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				931,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 1216, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				932,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 1152, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				933,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 1216, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				934,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 1152, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				935,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 1216, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				936,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 1152, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				937,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				938,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[800, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				939,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				940,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				941,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[224, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				942,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				943,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[384, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				944,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				945,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[576, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				946,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, 1536, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				947,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1088, 544, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				948,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 448, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				949,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 320, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				950,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 256, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				951,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 192, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				952,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				953,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1472, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				954,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				955,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1408, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				956,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1472, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				957,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1536, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				958,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1600, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				959,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				960,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3008, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				961,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3296, 2176, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				962,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				963,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				964,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2368, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				965,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2112, 3360, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				966,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2112, 3296, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				967,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2112, 3200, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				968,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1856, 3456, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				969,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1856, 3392, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				970,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1856, 3296, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				971,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1216, 3328, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				972,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 3456, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				973,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				974,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 2624, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				978,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 2528, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				979,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1856, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				980,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				981,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				983,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[320, 2432, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				984,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[320, 2368, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				985,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[320, 2304, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				986,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				1006,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 2272, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				1007,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 2208, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				1008,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1670, 2173, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1011,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 2176, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1012,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[928, 2688, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1013,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 2688, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1014,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, 3744, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1015,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3552, 3744, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1016,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3200, 800, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1017,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3744, 800, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1018,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2016, 192, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1019,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 160, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1020,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 160, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1021,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 800, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1022,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1728, 800, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1023,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[736, 800, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1024,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 768, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1025,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3774, 3732, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				1027,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[203, 2682, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				1028,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[211, 1548, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				1029,
				[
				],
				[
				[
					1,
					0,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[194, 770, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				1030,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[713, 1568, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1031,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[265, 1536, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1032,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3168, 2624, 0, 130, 167, 0, 0, 1, 0.5, 0.227544903755188, 0, 0, []],
				105,
				128,
				[
				],
				[
				[
					1
				],
				[
				],
				[
					1,
					1,
					0,
					4,
					1,
					0,
					0,
					50,
					5
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			4,
			4015007533879491,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			5,
			6359014625850959,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				987,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				988,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-139, -74, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				989,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-140, -96, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				990,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[96, 27, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				991,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[49, 54, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				992,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[832.50048828125, 501.4999694824219, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				994,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[87, 531, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				995,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[244.9797821044922, 530.1260375976563, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				996,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[644.4996948242188, 532.4998779296875, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				997,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				999,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				1000,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				901,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				1026,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				455,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[177, 29, 0, 75, 48, 0, 0, 1, 0, 0.5, 0, 0, []],
				33,
				490,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Drax",
					0,
					1
				]
			]
,			[
				[278, 28, 0, 40, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				31,
				502,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Drax",
					0,
					1
				]
			]
,			[
				[34, 73, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				683,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			6,
			6618829761023559,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				1001,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[181, 342, 0, 569, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				479,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[348, 273, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				480,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[465, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				481,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[582, 271, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				482,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				771,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				772,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[["grayscale", "Grayscale", [0]]]
	]
,	[
		"Level2_",
		4000,
		4000,
		false,
		"EventLevel1",
		1604366909867575,
		[
		[
			"BG",
			0,
			2982857287407845,
			true,
			[255, 255, 255],
			true,
			0.5,
			0.5,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[27, 132, 0, 3909, 3772, 0, 0, 1, 0, 0, 0, 0, []],
				82,
				141,
				[
				],
				[
				],
				[
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 0",
			1,
			959525903389548,
			true,
			[255, 255, 255],
			true,
			0.75,
			0.75,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "111,29x112,111,126,25x94,151,3x94,126,111,94,172,173,94,174,175,94,176,177,94,137,138,94vd,94,3x94vd,137,138,94,172,173,94,174,175,151,176,177,94,111,126,94,187,188,94,189,190,94,191,192,94,152,153,94vd,94,3x94vd,152,153,94,187,188,94,189,190,166,191,192,94,126,111,29x95,111,126,3x139,98,6x139,140,141,142,167,168,145,146,147,7x148,98,3x148,126,111,3x139,98,5x139,154,155,156,157,182,183,160,161,162,163,6x148,98,3x148,111,126,3x139,98,3x139,154,155,156,157,158,159,160,157,158,159,160,161,162,163,4x148,98,3x148,126,111,29x95,111,126,90,91,92,93,5x94,98,4x94,98,4x94,98,90,91,92,91,92,91,92,93,94,126,111,136,94,174,175,176,177,94,137,138,98,137,138,2x94,98,2x94,137,138,98,137,138,94,174,175,176,177,2x94,111,126,151,94,189,190,191,192,94,152,153,98,152,153,2x94,98,2x94,152,153,98,152,153,94,189,190,191,192,2x94,126,111,29x95,111,126,9x139,98,3x94,112,136,4x94,98,9x139,126,111,167,145,146,147,148,4x139,98,174,175,176,177,151,174,175,176,177,98,4x139,140,141,142,143,167,111,126,182,160,161,162,163,4x139,98,189,190,191,192,166,189,190,191,192,98,3x139,154,155,156,157,158,183,126,111,29x95,111,126,91,92,91,92,91,92,93,2x94,98,2x94,165,166,135,136,90,91,92,93,9x94,126,111,136,205,206,207,202,203,204,137,138,98,137,138,180,181,150,151,94,137,138,94,137,138,94,202,203,204,205,206,207,111,126,151,220,221,222,217,218,219,152,153,98,152,153,2x94,165,166,94,152,153,94,152,153,94,217,218,219,220,221,222,126,111,29x95,111,126,29x99,126,111,139,140,141,142,5x143,167,3x143,145,146,147,148,7x139,140,141,142,143,167,111,126,154,155,156,157,2x158,159,158,159,182,159,158,159,160,161,162,163,6x139,154,155,156,157,158,182,126,111,29x95,111,126,29x94,126,111,202,203,204,205,206,207,94,172,173,94,137,138,2x94,174,175,94,138vd,153vd,94,202,203,204,205,206,207,172,173,94,111,126,217,218,219,220,221,222,94,187,188,94,152,153,2x94,189,190,94,137vd,152vd,94,217,218,219,220,221,222,187,188,94,126,111,29x95,111,126,29x99,126,31x112"]],
				70,
				568,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[4000, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[125, 125, "111,29x112,111,94x-1,126,25x94,151,3x94,126,94x-1,111,94,172,173,94,174,175,94,176,177,94,137,138,94vd,94,3x94vd,137,138,94,172,173,94,174,175,151,176,177,94,111,94x-1,126,94,187,188,94,189,190,94,191,192,94,152,153,94vd,94,3x94vd,152,153,94,187,188,94,189,190,166,191,192,94,126,94x-1,111,29x95,111,94x-1,126,3x139,98,6x139,140,141,142,167,168,145,146,147,7x148,98,3x148,126,94x-1,111,3x139,98,5x139,154,155,156,157,182,183,160,161,162,163,6x148,98,3x148,111,94x-1,126,3x139,98,3x139,154,155,156,157,158,159,160,157,158,159,160,161,162,163,4x148,98,3x148,126,94x-1,111,29x95,111,94x-1,126,90,91,92,93,5x94,98,4x94,98,4x94,98,90,91,92,91,92,91,92,93,94,126,94x-1,111,136,94,174,175,176,177,94,137,138,98,137,138,2x94,98,2x94,137,138,98,137,138,94,174,175,176,177,2x94,111,94x-1,126,151,94,189,190,191,192,94,152,153,98,152,153,2x94,98,2x94,152,153,98,152,153,94,189,190,191,192,2x94,126,94x-1,111,29x95,111,94x-1,126,9x139,98,3x94,112,136,4x94,98,9x139,126,94x-1,111,167,145,146,147,148,4x139,98,174,175,176,177,151,174,175,176,177,98,4x139,140,141,142,143,167,111,94x-1,126,182,160,161,162,163,4x139,98,189,190,191,192,166,189,190,191,192,98,3x139,154,155,156,157,158,183,126,94x-1,111,29x95,111,94x-1,126,91,92,91,92,91,92,93,2x94,98,2x94,165,166,135,136,90,91,92,93,9x94,126,94x-1,111,136,205,206,207,202,203,204,137,138,98,137,138,180,181,150,151,94,137,138,94,137,138,94,202,203,204,205,206,207,111,94x-1,126,151,220,221,222,217,218,219,152,153,98,152,153,2x94,165,166,94,152,153,94,152,153,94,217,218,219,220,221,222,126,94x-1,111,29x95,111,94x-1,126,29x99,126,94x-1,111,139,140,141,142,5x143,167,3x143,145,146,147,148,7x139,140,141,142,143,167,111,94x-1,126,154,155,156,157,2x158,159,158,159,182,159,158,159,160,161,162,163,6x139,154,155,156,157,158,182,126,94x-1,111,29x95,111,94x-1,126,29x94,126,94x-1,111,202,203,204,205,206,207,94,172,173,94,137,138,2x94,174,175,94,138vd,153vd,94,202,203,204,205,206,207,172,173,94,111,94x-1,126,217,218,219,220,221,222,94,187,188,94,152,153,2x94,189,190,94,137vd,152vd,94,217,218,219,220,221,222,187,188,94,126,94x-1,111,29x95,111,94x-1,126,29x99,126,94x-1,31x112,11844x-1"]],
				70,
				784,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[0, -3968, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "111,29x112,111,126,25x94,151,3x94,126,111,94,172,173,94,174,175,94,176,177,94,137,138,94vd,94,3x94vd,137,138,94,172,173,94,174,175,151,176,177,94,111,126,94,187,188,94,189,190,94,191,192,94,152,153,94vd,94,3x94vd,152,153,94,187,188,94,189,190,166,191,192,94,126,111,29x95,111,126,3x139,98,6x139,140,141,142,167,168,145,146,147,7x148,98,3x148,126,111,3x139,98,5x139,154,155,156,157,182,183,160,161,162,163,6x148,98,3x148,111,126,3x139,98,3x139,154,155,156,157,158,159,160,157,158,159,160,161,162,163,4x148,98,3x148,126,111,29x95,111,126,90,91,92,93,5x94,98,4x94,98,4x94,98,90,91,92,91,92,91,92,93,94,126,111,136,94,174,175,176,177,94,137,138,98,137,138,2x94,98,2x94,137,138,98,137,138,94,174,175,176,177,2x94,111,126,151,94,189,190,191,192,94,152,153,98,152,153,2x94,98,2x94,152,153,98,152,153,94,189,190,191,192,2x94,126,111,29x95,111,126,9x139,98,3x94,112,136,4x94,98,9x139,126,111,167,145,146,147,148,4x139,98,174,175,176,177,151,174,175,176,177,98,4x139,140,141,142,143,167,111,126,182,160,161,162,163,4x139,98,189,190,191,192,166,189,190,191,192,98,3x139,154,155,156,157,158,183,126,111,29x95,111,126,91,92,91,92,91,92,93,2x94,98,2x94,165,166,135,136,90,91,92,93,9x94,126,111,136,205,206,207,202,203,204,137,138,98,137,138,180,181,150,151,94,137,138,94,137,138,94,202,203,204,205,206,207,111,126,151,220,221,222,217,218,219,152,153,98,152,153,2x94,165,166,94,152,153,94,152,153,94,217,218,219,220,221,222,126,111,29x95,111,126,29x99,126,111,139,140,141,142,5x143,167,3x143,145,146,147,148,7x139,140,141,142,143,167,111,126,154,155,156,157,2x158,159,158,159,182,159,158,159,160,161,162,163,6x139,154,155,156,157,158,182,126,111,29x95,111,126,29x94,126,111,202,203,204,205,206,207,94,172,173,94,137,138,2x94,174,175,94,138vd,153vd,94,202,203,204,205,206,207,172,173,94,111,126,217,218,219,220,221,222,94,187,188,94,152,153,2x94,189,190,94,137vd,152vd,94,217,218,219,220,221,222,187,188,94,126,111,29x95,111,126,29x99,126,31x112"]],
				70,
				790,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[-3968, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "111,29x112,111,126,25x94,151,3x94,126,111,94,172,173,94,174,175,94,176,177,94,137,138,94vd,94,3x94vd,137,138,94,172,173,94,174,175,151,176,177,94,111,126,94,187,188,94,189,190,94,191,192,94,152,153,94vd,94,3x94vd,152,153,94,187,188,94,189,190,166,191,192,94,126,111,29x95,111,126,3x139,98,6x139,140,141,142,167,168,145,146,147,7x148,98,3x148,126,111,3x139,98,5x139,154,155,156,157,182,183,160,161,162,163,6x148,98,3x148,111,126,3x139,98,3x139,154,155,156,157,158,159,160,157,158,159,160,161,162,163,4x148,98,3x148,126,111,29x95,111,126,90,91,92,93,5x94,98,4x94,98,4x94,98,90,91,92,91,92,91,92,93,94,126,111,136,94,174,175,176,177,94,137,138,98,137,138,2x94,98,2x94,137,138,98,137,138,94,174,175,176,177,2x94,111,126,151,94,189,190,191,192,94,152,153,98,152,153,2x94,98,2x94,152,153,98,152,153,94,189,190,191,192,2x94,126,111,29x95,111,126,9x139,98,3x94,112,136,4x94,98,9x139,126,111,167,145,146,147,148,4x139,98,174,175,176,177,151,174,175,176,177,98,4x139,140,141,142,143,167,111,126,182,160,161,162,163,4x139,98,189,190,191,192,166,189,190,191,192,98,3x139,154,155,156,157,158,183,126,111,29x95,111,126,91,92,91,92,91,92,93,2x94,98,2x94,165,166,135,136,90,91,92,93,9x94,126,111,136,205,206,207,202,203,204,137,138,98,137,138,180,181,150,151,94,137,138,94,137,138,94,202,203,204,205,206,207,111,126,151,220,221,222,217,218,219,152,153,98,152,153,2x94,165,166,94,152,153,94,152,153,94,217,218,219,220,221,222,126,111,29x95,111,126,29x99,126,111,139,140,141,142,5x143,167,3x143,145,146,147,148,7x139,140,141,142,143,167,111,126,154,155,156,157,2x158,159,158,159,182,159,158,159,160,161,162,163,6x139,154,155,156,157,158,182,126,111,29x95,111,126,29x94,126,111,202,203,204,205,206,207,94,172,173,94,137,138,2x94,174,175,94,138vd,153vd,94,202,203,204,205,206,207,172,173,94,111,126,217,218,219,220,221,222,94,187,188,94,152,153,2x94,189,190,94,137vd,152vd,94,217,218,219,220,221,222,187,188,94,126,111,29x95,111,126,29x99,126,31x112"]],
				70,
				791,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[0, 3968, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[125, 125, "111,29x112,111,94x-1,126,25x94,151,3x94,126,94x-1,111,94,172,173,94,174,175,94,176,177,94,137,138,94vd,94,3x94vd,137,138,94,172,173,94,174,175,151,176,177,94,111,94x-1,126,94,187,188,94,189,190,94,191,192,94,152,153,94vd,94,3x94vd,152,153,94,187,188,94,189,190,166,191,192,94,126,94x-1,111,29x95,111,94x-1,126,3x139,98,6x139,140,141,142,167,168,145,146,147,7x148,98,3x148,126,94x-1,111,3x139,98,5x139,154,155,156,157,182,183,160,161,162,163,6x148,98,3x148,111,94x-1,126,3x139,98,3x139,154,155,156,157,158,159,160,157,158,159,160,161,162,163,4x148,98,3x148,126,94x-1,111,29x95,111,94x-1,126,90,91,92,93,5x94,98,4x94,98,4x94,98,90,91,92,91,92,91,92,93,94,126,94x-1,111,136,94,174,175,176,177,94,137,138,98,137,138,2x94,98,2x94,137,138,98,137,138,94,174,175,176,177,2x94,111,94x-1,126,151,94,189,190,191,192,94,152,153,98,152,153,2x94,98,2x94,152,153,98,152,153,94,189,190,191,192,2x94,126,94x-1,111,29x95,111,94x-1,126,9x139,98,3x94,112,136,4x94,98,9x139,126,94x-1,111,167,145,146,147,148,4x139,98,174,175,176,177,151,174,175,176,177,98,4x139,140,141,142,143,167,111,94x-1,126,182,160,161,162,163,4x139,98,189,190,191,192,166,189,190,191,192,98,3x139,154,155,156,157,158,183,126,94x-1,111,29x95,111,94x-1,126,91,92,91,92,91,92,93,2x94,98,2x94,165,166,135,136,90,91,92,93,9x94,126,94x-1,111,136,205,206,207,202,203,204,137,138,98,137,138,180,181,150,151,94,137,138,94,137,138,94,202,203,204,205,206,207,111,94x-1,126,151,220,221,222,217,218,219,152,153,98,152,153,2x94,165,166,94,152,153,94,152,153,94,217,218,219,220,221,222,126,94x-1,111,29x95,111,94x-1,126,29x99,126,94x-1,111,139,140,141,142,5x143,167,3x143,145,146,147,148,7x139,140,141,142,143,167,111,94x-1,126,154,155,156,157,2x158,159,158,159,182,159,158,159,160,161,162,163,6x139,154,155,156,157,158,182,126,94x-1,111,29x95,111,94x-1,126,29x94,126,94x-1,111,202,203,204,205,206,207,94,172,173,94,137,138,2x94,174,175,94,138vd,153vd,94,202,203,204,205,206,207,172,173,94,111,94x-1,126,217,218,219,220,221,222,94,187,188,94,152,153,2x94,189,190,94,137vd,152vd,94,217,218,219,220,221,222,187,188,94,126,94x-1,111,29x95,111,94x-1,126,29x99,126,94x-1,31x112,11844x-1"]],
				70,
				792,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			2,
			4028232579083858,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[3104, 1920, 0, 194.4911804199219, 259.8578491210938, 0, 0, 1, 0.2808988690376282, 0.9955157041549683, 0, 0, []],
				106,
				639,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3222, 1807, 0, 154.1964721679688, 171.9883728027344, 0, 3.134957313537598, 1, 0.2230769246816635, 0.4896551668643951, 0, 0, []],
				59,
				642,
				[
				],
				[
				[
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3249, 1920, 0, 118.2174835205078, 268.0376586914063, 0, 0, 1, 0.5643564462661743, 0.9868995547294617, 0, 0, []],
				108,
				893,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[218, 173, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				570,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					500,
					750,
					750,
					800,
					1500,
					1000,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				571,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				573,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[632, 120, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				574,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1634, -248, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				575,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				578,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1497, -201, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				579,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1888, -224, 0, 99.07277679443359, 155.0375518798828, 0, 0, 1, 0.6412213444709778, 0.1853658556938171, 0, 0, []],
				20,
				580,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, -96, 0, 137, 158, 0, 0, 1, 0.262773722410202, 0.9430379867553711, 0, 0, []],
				19,
				581,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1490, -250, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				582,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1518, -213, 0, 36, 39, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				585,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, -260, 0, 36, 39, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				7,
				586,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 156, 156, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				587,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[211.2251434326172, -42.42211151123047, 0, 57.2628059387207, 13.13259601593018, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				588,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 1792, 0, 250, 250, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				107,
				640,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3117, 2304, 0, 194.4911804199219, 259.8578491210938, 0, 0, 1, 0.2808988690376282, 0.9955157041549683, 0, 0, []],
				106,
				641,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3228.70458984375, 2189.884765625, 0, 160, 160, 0, 3.134957313537598, 1, 0.2230769246816635, 0.4896551668643951, 0, 0, []],
				59,
				894,
				[
				],
				[
				[
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			3,
			9261296242380316,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[4, 1, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "100,22x-1,15,6x-1,100,115,22x-1,30,6x-1,115,100,72,61,62,19x-1,15,6x-1,100,115,87,76,77,78,79,2x-1,37,38,39,40,41,42,33,34,35,6x-1,30,3x-1,0,1,2,115,12,2,3,4,5,6,7,8,2,3,4,5,6,7,2x8,9,10,5x-1,15,9,10,2x-1,16,17,100,115,17,18,19,20,21,22,23,17,18,19,20,21,22,2x23,24,4x-1,66,67,30,24,5x-1,115,100,18x-1,66,3x67,15,3x-1,0,1,2,100,115,16x-1,66,5x67,30,4x-1,16,17,115,100,2x65,2x-1,21x65,4x-1,100,115,68,28x-1,115,100,68,26x-1,0,1,100,115,68,27x-1,16,115,100,4x65,4x-1,2x81,2x-1,2x81,2x-1,2x81,3x-1,8x65,100,115,-1,4x81,24x-1,115,100,29x-1,100,115,5,6,7,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,9,10,3x-1,115,100,20,21,22,17,18,19,20,21,22,23,68,18,19,20,21,22,23,17,18,19,20,21,22,23,24,2x-1,31,32,100,115,10x-1,68,17x-1,47,115,100,32,33,34,35,6x-1,68,11x-1,31,32,34,35,3x-1,100,115,10x-1,68,3x-1,66,-1,0,1,2,3,4,5,6,7,8,2,3,4,5,115,100,4x-1,31,32,33,34,35,-1,68,6x-1,16,17,18,19,20,21,22,2x23,24,19,20,100,115,10x-1,30,73,61,62,15x-1,115,100,33,34,35,7x-1,68,88,54,77,78,62,5x-1,37,38,39,40,41,42,33,34,100,115,10x-1,68,4x54,77,61,62,2x-1,0,1,2,3,4,5,6,7,8,115,100,2x-1,31,32,33,34,35,3x-1,68,6x54,77,61,62,-1,16,17,18,19,20,21,22,23,100,115,10x-1,30,7x82,65,77,78,79,7x-1,115,100,8x-1,0,1,4x2,3,4,5,6,7,2x8,9,10,6x-1,100,115,9x-1,16,4x17,18,19,20,21,22,2x23,24,3x-1,66,3x-1,115,100,2x-1,31,32,33,34,35,22x-1,100,115,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,8,2,3,4,5,6,7,2x8,115,-1,16,18,19,20,21,16,2x17,18,19,20,21,16,2x17,18,19,20,21,16,2x17,18,19,20,21,16,17,18,-1"]],
				45,
				589,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[526.8508911132813, 1826.124755859375, 0, 43.36211395263672, 193.37158203125, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				6,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			4,
			6437861486083408,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1560, 288, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				590,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1994, 282, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				591,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1766, 385, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				592,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[879, 929, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				593,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1461, 928, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				594,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1230, 1024, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				595,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3114, 1441, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				596,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3610, 1437, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				597,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3346, 1534, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				598,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2544, 1921, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				599,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3228, 2814, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				600,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1804, 3714, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				601,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2854, 3709, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				602,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1478, 3617, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				603,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2294, 3613, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				604,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3218, 3613, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				605,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3074, 2718, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				606,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3690, 2722, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				607,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3030, 1826, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				608,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1823, 1819, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				609,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3522, 397, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				610,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3521, 780, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				611,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3271, 527, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				612,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2119, 401, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				613,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2241, 524, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				614,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[387, 1040, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				615,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[641, 1549, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				616,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1411, 1548, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				617,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1922, 1550, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				618,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2434, 1552, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				619,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3328, 1038, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				620,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[581, 2319, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				621,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[455, 2832, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				622,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1223, 2575, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				623,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[967, 3087, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				624,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3397, 2322, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				625,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3400, 1936, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				626,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3647, 2066, 0, 31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				627,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3012, 2322, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				628,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 2444, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				629,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2754, 2964, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				630,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[707, 2576, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				631,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[453, 3081, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				632,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1218, 3344, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				633,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[644, 1040, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				634,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1158, 1552, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				635,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1670, 1552, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				636,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2183, 1552, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				637,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2825, 1552, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				638,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1012, 427, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				643,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1107, 369, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				644,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1204, 322, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				645,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[186, 736, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				646,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[186, 816, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				647,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[186, 887, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				648,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[187, 947, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				649,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2751, 582, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				650,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 647, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				651,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 709, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				652,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, 512, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				653,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2368, 768, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				654,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 832, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				655,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3200, 448, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				656,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3616, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				657,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				658,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3808, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				659,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3744, 1216, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				660,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3200, 928, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				661,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 256, 0, 55, 49, 0, 0, 1, 0.5090909004211426, 0.5102040767669678, 0, 0, []],
				61,
				662,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3650, 1292, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				663,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[773, 1679, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				664,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				665,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				666,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1376, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				667,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1696, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				668,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1792, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				669,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1888, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				670,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2208, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				671,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				672,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2400, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				673,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[384, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				674,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				675,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[576, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				676,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2848, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				677,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				678,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3040, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				679,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, 928, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				680,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 928, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				695,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[864, 928, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				696,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3552, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				697,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				698,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2528, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				699,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				700,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2720, 2336, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				701,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				702,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3680, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				703,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3776, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				704,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2656, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				705,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3680, 2656, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				706,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3776, 2656, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				707,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				708,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3680, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				709,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3776, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				710,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2592, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				711,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3680, 2592, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				712,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3776, 2592, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				713,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1760, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				714,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1824, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				715,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1888, 2752, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				716,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1952, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				717,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2016, 2816, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				718,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2080, 2848, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				719,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2144, 2880, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				720,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2208, 2912, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				721,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2272, 2944, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				722,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2336, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				723,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2400, 3008, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				724,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2464, 3040, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				725,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2528, 3072, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				726,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2592, 3104, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				727,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2656, 3136, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				728,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2720, 3168, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				729,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2784, 3200, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				730,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2848, 3232, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				731,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[608, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				732,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				733,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[800, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				734,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				735,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				736,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[352, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				737,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 2464, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				738,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 2464, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				739,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1088, 2464, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				740,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[510, 2210, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				741,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[416, 2208, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				742,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[192, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				743,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[384, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				744,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				745,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[576, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				746,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				747,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				748,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[864, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				749,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				750,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1056, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				751,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				752,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1248, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				753,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3336, 3538, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				754,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3459, 3535, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				755,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3006, 3346, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				756,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[963, 3599, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				757,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[447, 3600, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				758,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 1920, 0, 128, 128, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				759,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[246, 2216, 0, 64, 42, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				79,
				761,
				[
				],
				[
				[
					1,
					1,
					0,
					2,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1925, 2511, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				762,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2050, 2511, 0, -23, 23, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				763,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 1792, 0, 256, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				83,
				765,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, -314, 0, 189, 176, 0, 0, 1, 0.5026454925537109, 0.5, 0, 0, []],
				4,
				766,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[310, 924, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				767,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3760, 2334, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				768,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3717, 3621, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				769,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[277, 3616, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				770,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[525.834716796875, 1825.98828125, 0, 101.8341674804688, 201.3273162841797, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				5,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 1824, 0, 105, 57, 0, 0, 1, 0.5047619342803955, 0.5087719559669495, 0, 0, []],
				122,
				19,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3263, 2304, 0, 118.2174835205078, 268.0376586914063, 0, 0, 1, 0.5643564462661743, 0.9868995547294617, 0, 0, []],
				108,
				895,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			5,
			880513240392258,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			6,
			6770437311651205,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 929, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				160,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 33, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				161,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-167, -137, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				162,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-159, -158, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				163,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[96, 28, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				164,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[833, 503, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				167,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[87, 532, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				175,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[245, 531, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				176,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[644, 533, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				177,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-12, -17, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				180,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				185,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[175, 28, 0, 55, 49, 0, 0, 1, 0, 0.5102040767669678, 0, 0, []],
				33,
				241,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[225, 7, 0, 64, 41, 0, 0, 1, 0.015625, 0.02439024299383164, 0, 0, []],
				31,
				464,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				229,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				244,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				245,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[50, 59, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				222,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[35, 78, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				686,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			7,
			5161524409624727,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				785,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[181, 343, 0, 569, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				786,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[348, 274, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				787,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[465, 273, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				788,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[582, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				789,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				760,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				764,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[["grayscale", "Grayscale", [0]]]
	]
,	[
		"Level3",
		4000,
		4000,
		false,
		"EventLevel1",
		9955818953053819,
		[
		[
			"Layer 0",
			0,
			9297315810374742,
			true,
			[255, 255, 255],
			true,
			0.75,
			0.75,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[17, 2, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "14,7,6,7,8,3,4,5,6,7,8,14,10,11,3,4,5,9,10,6,14,8,9,3,4,5,13,9,10,11,14,29,22,21,22,23,18,19,20,21,22,23,29,25,26,18,19,20,24,25,21,29,23,24,18,19,20,28,24,25,26,29,44,37,36,37,38,33,34,35,36,37,38,44,40,41,33,34,35,39,40,36,44,38,39,33,34,35,43,39,40,41,44,59,52,51,52,53,48,49,50,51,52,53,59,55,56,48,49,50,54,55,51,59,53,54,48,49,50,58,54,55,56,59,74,67,68,69,70,63,74,65,66,67,68,64,70,71,72,74,66,67,68,69,70,71,72,73,74,67,68,69,70,71,74,14,7,0,1,2,11,14,13,6,7,3,4,5,11,12,14,8,9,10,3,4,5,7,8,14,10,0,1,2,11,14,29,22,15,16,17,26,29,28,21,22,18,19,20,26,27,29,23,24,25,18,19,20,22,23,29,25,15,16,17,26,29,44,37,30,31,32,41,44,43,36,37,33,34,35,41,42,44,38,39,40,33,34,35,37,38,44,40,30,31,32,41,44,59,52,45,46,47,56,59,58,51,52,48,49,50,56,57,59,53,54,55,48,49,50,52,53,59,55,45,46,47,56,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,74,63,64,65,69,70,71,72,73,74,67,68,69,70,71,74,14,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,14vd,29vd,44vd,14,29,24hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,24hv,29,14,9hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,9hv,44,29,11hv,10hv,9hv,11hv,10hv,9hv,14,33,34,35,14,7x11vd,14,33,34,35,44,11hv,10hv,9hv,11hv,10hv,9hv,2x14,9,0,1,2,7,8,29,48,49,50,29,7,8,0,1,2,7,8,14,48,49,50,14,7,8,0,1,2,9,14,29,24,15,16,17,22,23,44,2x28hv,27hv,44,22,23,15,16,17,22,23,29,2x28hv,27hv,29,22,23,15,16,17,24,29,44,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44,29hd,14hd,44hd,44,14hd,44hd,29hd,44hd,29hd,14hd,44,59,51,52,53,54,55,56,57,58,51,52,53,54,55,56,57,58,51,52,53,54,55,51,52,53,54,55,56,57,58,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,73,66,67,68,69,70,71,72,73,74,67,68,69,70,71,72,14,6,0,1,2,10,14,12,11,12,3,4,5,6,7,6,7,8,9,3,4,5,6,7,14,9,0,1,2,12,14,29,21,15,16,17,25,29,27,26,27,18,19,20,21,22,21,22,23,24,18,19,20,21,22,29,24,15,16,17,27,29,44,36,30,31,32,40,44,42,41,42,33,34,35,36,37,36,37,38,39,33,34,35,36,37,44,39,30,31,32,42,44,14,51,45,46,47,55,59,57,56,57,48,49,50,51,52,51,52,53,54,48,49,50,51,52,59,54,45,46,47,57,14,29,63,64,65,66,67,68,69,70,71,72,74,63,64,65,66,67,68,63,64,74,66,67,68,69,70,71,72,73,68,29,44,6,7,8,9,10,11,12,13,6,7,14,9,10,11,12,13,6,7,8,14,10,6,7,8,9,10,11,12,13,44,14,21,22,23,24,25,26,27,28,21,22,14,24,25,26,27,28,21,22,23,14,25,21,22,23,24,25,26,27,28,14,29,6,7,8,9,3,4,5,3x6,14,8,9,3,4,5,3x6,14,8,9,3,4,5,6,7,8,9,29,14,21,22,23,24,18,19,20,3x21,29,23,24,18,19,20,3x21,29,23,24,18,19,20,21,22,23,24,14,29,36,37,38,39,33,34,35,3x36,44,38,39,33,34,35,3x36,44,38,39,33,34,35,36,37,38,39,29,44,51,52,53,54,48,49,50,3x51,59,53,54,48,49,50,3x51,59,53,54,48,49,50,51,52,53,54,44,63,64,65,66,67,68,63,64,65,66,67,68,69,70,71,63,64,65,66,63,64,65,66,67,68,69,70,71,72,73,74"]],
				94,
				286,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[0, -3968, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "14,7,6,7,8,3,4,5,6,7,8,14,10,11,3,4,5,9,10,6,14,8,9,3,4,5,13,9,10,11,14,29,22,21,22,23,18,19,20,21,22,23,29,25,26,18,19,20,24,25,21,29,23,24,18,19,20,28,24,25,26,29,44,37,36,37,38,33,34,35,36,37,38,44,40,41,33,34,35,39,40,36,44,38,39,33,34,35,43,39,40,41,44,59,52,51,52,53,48,49,50,51,52,53,59,55,56,48,49,50,54,55,51,59,53,54,48,49,50,58,54,55,56,59,74,67,68,69,70,63,74,65,66,67,68,64,70,71,72,74,66,67,68,69,70,71,72,73,74,67,68,69,70,71,74,14,7,0,1,2,11,14,13,6,7,3,4,5,11,12,14,8,9,10,3,4,5,7,8,14,10,0,1,2,11,14,29,22,15,16,17,26,29,28,21,22,18,19,20,26,27,29,23,24,25,18,19,20,22,23,29,25,15,16,17,26,29,44,37,30,31,32,41,44,43,36,37,33,34,35,41,42,44,38,39,40,33,34,35,37,38,44,40,30,31,32,41,44,59,52,45,46,47,56,59,58,51,52,48,49,50,56,57,59,53,54,55,48,49,50,52,53,59,55,45,46,47,56,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,74,63,64,65,69,70,71,72,73,74,67,68,69,70,71,74,14,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,14vd,29vd,44vd,14,29,24hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,24hv,29,14,9hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,9hv,44,29,11hv,10hv,9hv,11hv,10hv,9hv,14,33,34,35,14,7x11vd,14,33,34,35,44,11hv,10hv,9hv,11hv,10hv,9hv,2x14,9,0,1,2,7,8,29,48,49,50,29,7,8,0,1,2,7,8,14,48,49,50,14,7,8,0,1,2,9,14,29,24,15,16,17,22,23,44,2x28hv,27hv,44,22,23,15,16,17,22,23,29,2x28hv,27hv,29,22,23,15,16,17,24,29,44,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44,29hd,14hd,44hd,44,14hd,44hd,29hd,44hd,29hd,14hd,44,59,51,52,53,54,55,56,57,58,51,52,53,54,55,56,57,58,51,52,53,54,55,51,52,53,54,55,56,57,58,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,73,66,67,68,69,70,71,72,73,74,67,68,69,70,71,72,14,6,0,1,2,10,14,12,11,12,3,4,5,6,7,6,7,8,9,3,4,5,6,7,14,9,0,1,2,12,14,29,21,15,16,17,25,29,27,26,27,18,19,20,21,22,21,22,23,24,18,19,20,21,22,29,24,15,16,17,27,29,44,36,30,31,32,40,44,42,41,42,33,34,35,36,37,36,37,38,39,33,34,35,36,37,44,39,30,31,32,42,44,14,51,45,46,47,55,59,57,56,57,48,49,50,51,52,51,52,53,54,48,49,50,51,52,59,54,45,46,47,57,14,29,63,64,65,66,67,68,69,70,71,72,74,63,64,65,66,67,68,63,64,74,66,67,68,69,70,71,72,73,68,29,44,6,7,8,9,10,11,12,13,6,7,14,9,10,11,12,13,6,7,8,14,10,6,7,8,9,10,11,12,13,44,14,21,22,23,24,25,26,27,28,21,22,14,24,25,26,27,28,21,22,23,14,25,21,22,23,24,25,26,27,28,14,29,6,7,8,9,3,4,5,3x6,14,8,9,3,4,5,3x6,14,8,9,3,4,5,6,7,8,9,29,14,21,22,23,24,18,19,20,3x21,29,23,24,18,19,20,3x21,29,23,24,18,19,20,21,22,23,24,14,29,36,37,38,39,33,34,35,3x36,44,38,39,33,34,35,3x36,44,38,39,33,34,35,36,37,38,39,29,44,51,52,53,54,48,49,50,3x51,59,53,54,48,49,50,3x51,59,53,54,48,49,50,51,52,53,54,44,63,64,65,66,67,68,63,64,65,66,67,68,69,70,71,63,64,65,66,63,64,65,66,67,68,69,70,71,72,73,74"]],
				94,
				780,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[-3968, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "14,7,6,7,8,3,4,5,6,7,8,14,10,11,3,4,5,9,10,6,14,8,9,3,4,5,13,9,10,11,14,29,22,21,22,23,18,19,20,21,22,23,29,25,26,18,19,20,24,25,21,29,23,24,18,19,20,28,24,25,26,29,44,37,36,37,38,33,34,35,36,37,38,44,40,41,33,34,35,39,40,36,44,38,39,33,34,35,43,39,40,41,44,59,52,51,52,53,48,49,50,51,52,53,59,55,56,48,49,50,54,55,51,59,53,54,48,49,50,58,54,55,56,59,74,67,68,69,70,63,74,65,66,67,68,64,70,71,72,74,66,67,68,69,70,71,72,73,74,67,68,69,70,71,74,14,7,0,1,2,11,14,13,6,7,3,4,5,11,12,14,8,9,10,3,4,5,7,8,14,10,0,1,2,11,14,29,22,15,16,17,26,29,28,21,22,18,19,20,26,27,29,23,24,25,18,19,20,22,23,29,25,15,16,17,26,29,44,37,30,31,32,41,44,43,36,37,33,34,35,41,42,44,38,39,40,33,34,35,37,38,44,40,30,31,32,41,44,59,52,45,46,47,56,59,58,51,52,48,49,50,56,57,59,53,54,55,48,49,50,52,53,59,55,45,46,47,56,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,74,63,64,65,69,70,71,72,73,74,67,68,69,70,71,74,14,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,14vd,29vd,44vd,14,29,24hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,24hv,29,14,9hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,9hv,44,29,11hv,10hv,9hv,11hv,10hv,9hv,14,33,34,35,14,7x11vd,14,33,34,35,44,11hv,10hv,9hv,11hv,10hv,9hv,2x14,9,0,1,2,7,8,29,48,49,50,29,7,8,0,1,2,7,8,14,48,49,50,14,7,8,0,1,2,9,14,29,24,15,16,17,22,23,44,2x28hv,27hv,44,22,23,15,16,17,22,23,29,2x28hv,27hv,29,22,23,15,16,17,24,29,44,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44,29hd,14hd,44hd,44,14hd,44hd,29hd,44hd,29hd,14hd,44,59,51,52,53,54,55,56,57,58,51,52,53,54,55,56,57,58,51,52,53,54,55,51,52,53,54,55,56,57,58,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,73,66,67,68,69,70,71,72,73,74,67,68,69,70,71,72,14,6,0,1,2,10,14,12,11,12,3,4,5,6,7,6,7,8,9,3,4,5,6,7,14,9,0,1,2,12,14,29,21,15,16,17,25,29,27,26,27,18,19,20,21,22,21,22,23,24,18,19,20,21,22,29,24,15,16,17,27,29,44,36,30,31,32,40,44,42,41,42,33,34,35,36,37,36,37,38,39,33,34,35,36,37,44,39,30,31,32,42,44,14,51,45,46,47,55,59,57,56,57,48,49,50,51,52,51,52,53,54,48,49,50,51,52,59,54,45,46,47,57,14,29,63,64,65,66,67,68,69,70,71,72,74,63,64,65,66,67,68,63,64,74,66,67,68,69,70,71,72,73,68,29,44,6,7,8,9,10,11,12,13,6,7,14,9,10,11,12,13,6,7,8,14,10,6,7,8,9,10,11,12,13,44,14,21,22,23,24,25,26,27,28,21,22,14,24,25,26,27,28,21,22,23,14,25,21,22,23,24,25,26,27,28,14,29,6,7,8,9,3,4,5,3x6,14,8,9,3,4,5,3x6,14,8,9,3,4,5,6,7,8,9,29,14,21,22,23,24,18,19,20,3x21,29,23,24,18,19,20,3x21,29,23,24,18,19,20,21,22,23,24,14,29,36,37,38,39,33,34,35,3x36,44,38,39,33,34,35,3x36,44,38,39,33,34,35,36,37,38,39,29,44,51,52,53,54,48,49,50,3x51,59,53,54,48,49,50,3x51,59,53,54,48,49,50,51,52,53,54,44,63,64,65,66,67,68,63,64,65,66,67,68,69,70,71,63,64,65,66,63,64,65,66,67,68,69,70,71,72,73,74"]],
				94,
				781,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[3968, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "14,7,6,7,8,3,4,5,6,7,8,14,10,11,3,4,5,9,10,6,14,8,9,3,4,5,13,9,10,11,14,29,22,21,22,23,18,19,20,21,22,23,29,25,26,18,19,20,24,25,21,29,23,24,18,19,20,28,24,25,26,29,44,37,36,37,38,33,34,35,36,37,38,44,40,41,33,34,35,39,40,36,44,38,39,33,34,35,43,39,40,41,44,59,52,51,52,53,48,49,50,51,52,53,59,55,56,48,49,50,54,55,51,59,53,54,48,49,50,58,54,55,56,59,74,67,68,69,70,63,74,65,66,67,68,64,70,71,72,74,66,67,68,69,70,71,72,73,74,67,68,69,70,71,74,14,7,0,1,2,11,14,13,6,7,3,4,5,11,12,14,8,9,10,3,4,5,7,8,14,10,0,1,2,11,14,29,22,15,16,17,26,29,28,21,22,18,19,20,26,27,29,23,24,25,18,19,20,22,23,29,25,15,16,17,26,29,44,37,30,31,32,41,44,43,36,37,33,34,35,41,42,44,38,39,40,33,34,35,37,38,44,40,30,31,32,41,44,59,52,45,46,47,56,59,58,51,52,48,49,50,56,57,59,53,54,55,48,49,50,52,53,59,55,45,46,47,56,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,74,63,64,65,69,70,71,72,73,74,67,68,69,70,71,74,14,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,14vd,29vd,44vd,14,29,24hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,24hv,29,14,9hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,9hv,44,29,11hv,10hv,9hv,11hv,10hv,9hv,14,33,34,35,14,7x11vd,14,33,34,35,44,11hv,10hv,9hv,11hv,10hv,9hv,2x14,9,0,1,2,7,8,29,48,49,50,29,7,8,0,1,2,7,8,14,48,49,50,14,7,8,0,1,2,9,14,29,24,15,16,17,22,23,44,2x28hv,27hv,44,22,23,15,16,17,22,23,29,2x28hv,27hv,29,22,23,15,16,17,24,29,44,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44,29hd,14hd,44hd,44,14hd,44hd,29hd,44hd,29hd,14hd,44,59,51,52,53,54,55,56,57,58,51,52,53,54,55,56,57,58,51,52,53,54,55,51,52,53,54,55,56,57,58,59,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,73,66,67,68,69,70,71,72,73,74,67,68,69,70,71,72,14,6,0,1,2,10,14,12,11,12,3,4,5,6,7,6,7,8,9,3,4,5,6,7,14,9,0,1,2,12,14,29,21,15,16,17,25,29,27,26,27,18,19,20,21,22,21,22,23,24,18,19,20,21,22,29,24,15,16,17,27,29,44,36,30,31,32,40,44,42,41,42,33,34,35,36,37,36,37,38,39,33,34,35,36,37,44,39,30,31,32,42,44,14,51,45,46,47,55,59,57,56,57,48,49,50,51,52,51,52,53,54,48,49,50,51,52,59,54,45,46,47,57,14,29,63,64,65,66,67,68,69,70,71,72,74,63,64,65,66,67,68,63,64,74,66,67,68,69,70,71,72,73,68,29,44,6,7,8,9,10,11,12,13,6,7,14,9,10,11,12,13,6,7,8,14,10,6,7,8,9,10,11,12,13,44,14,21,22,23,24,25,26,27,28,21,22,14,24,25,26,27,28,21,22,23,14,25,21,22,23,24,25,26,27,28,14,29,6,7,8,9,3,4,5,3x6,14,8,9,3,4,5,3x6,14,8,9,3,4,5,6,7,8,9,29,14,21,22,23,24,18,19,20,3x21,29,23,24,18,19,20,3x21,29,23,24,18,19,20,21,22,23,24,14,29,36,37,38,39,33,34,35,3x36,44,38,39,33,34,35,3x36,44,38,39,33,34,35,36,37,38,39,29,44,51,52,53,54,48,49,50,3x51,59,53,54,48,49,50,3x51,59,53,54,48,49,50,51,52,53,54,44,63,64,65,66,67,68,63,64,65,66,67,68,69,70,71,63,64,65,66,63,64,65,66,67,68,69,70,71,72,73,74"]],
				94,
				782,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[0, 3968, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[125, 125, "14,7,6,7,8,3,4,5,6,7,8,14,10,11,3,4,5,9,10,6,14,8,9,3,4,5,13,9,10,11,14,94x-1,29,22,21,22,23,18,19,20,21,22,23,29,25,26,18,19,20,24,25,21,29,23,24,18,19,20,28,24,25,26,29,94x-1,44,37,36,37,38,33,34,35,36,37,38,44,40,41,33,34,35,39,40,36,44,38,39,33,34,35,43,39,40,41,44,94x-1,59,52,51,52,53,48,49,50,51,52,53,59,55,56,48,49,50,54,55,51,59,53,54,48,49,50,58,54,55,56,59,94x-1,74,67,68,69,70,63,74,65,66,67,68,64,70,71,72,74,66,67,68,69,70,71,72,73,74,67,68,69,70,71,74,94x-1,14,7,0,1,2,11,14,13,6,7,3,4,5,11,12,14,8,9,10,3,4,5,7,8,14,10,0,1,2,11,14,94x-1,29,22,15,16,17,26,29,28,21,22,18,19,20,26,27,29,23,24,25,18,19,20,22,23,29,25,15,16,17,26,29,94x-1,44,37,30,31,32,41,44,43,36,37,33,34,35,41,42,44,38,39,40,33,34,35,37,38,44,40,30,31,32,41,44,94x-1,59,52,45,46,47,56,59,58,51,52,48,49,50,56,57,59,53,54,55,48,49,50,52,53,59,55,45,46,47,56,59,94x-1,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,74,63,64,65,69,70,71,72,73,74,67,68,69,70,71,74,94x-1,14,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,44vd,14vd,29vd,14vd,29vd,44vd,14,94x-1,29,24hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,23hv,22hv,14,3,4,5,14,23hv,22hv,17hv,16hv,15hv,24hv,29,94x-1,14,9hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,8hv,7hv,29,18,19,20,29,8hv,7hv,2hv,1hv,0hv,9hv,44,94x-1,29,11hv,10hv,9hv,11hv,10hv,9hv,14,33,34,35,14,7x11vd,14,33,34,35,44,11hv,10hv,9hv,11hv,10hv,9hv,14,94x-1,14,9,0,1,2,7,8,29,48,49,50,29,7,8,0,1,2,7,8,14,48,49,50,14,7,8,0,1,2,9,14,94x-1,29,24,15,16,17,22,23,44,2x28hv,27hv,44,22,23,15,16,17,22,23,29,2x28hv,27hv,29,22,23,15,16,17,24,29,94x-1,44,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44hd,29hd,14hd,44,29hd,14hd,44hd,44,14hd,44hd,29hd,44hd,29hd,14hd,44,94x-1,59,51,52,53,54,55,56,57,58,51,52,53,54,55,56,57,58,51,52,53,54,55,51,52,53,54,55,56,57,58,59,94x-1,74,67,68,69,70,71,74,73,66,67,68,64,70,71,72,73,66,67,68,69,70,71,72,73,74,67,68,69,70,71,72,94x-1,14,6,0,1,2,10,14,12,11,12,3,4,5,6,7,6,7,8,9,3,4,5,6,7,14,9,0,1,2,12,14,94x-1,29,21,15,16,17,25,29,27,26,27,18,19,20,21,22,21,22,23,24,18,19,20,21,22,29,24,15,16,17,27,29,94x-1,44,36,30,31,32,40,44,42,41,42,33,34,35,36,37,36,37,38,39,33,34,35,36,37,44,39,30,31,32,42,44,94x-1,14,51,45,46,47,55,59,57,56,57,48,49,50,51,52,51,52,53,54,48,49,50,51,52,59,54,45,46,47,57,14,94x-1,29,63,64,65,66,67,68,69,70,71,72,74,63,64,65,66,67,68,63,64,74,66,67,68,69,70,71,72,73,68,29,94x-1,44,6,7,8,9,10,11,12,13,6,7,14,9,10,11,12,13,6,7,8,14,10,6,7,8,9,10,11,12,13,44,94x-1,14,21,22,23,24,25,26,27,28,21,22,14,24,25,26,27,28,21,22,23,14,25,21,22,23,24,25,26,27,28,14,94x-1,29,6,7,8,9,3,4,5,3x6,14,8,9,3,4,5,3x6,14,8,9,3,4,5,6,7,8,9,29,94x-1,14,21,22,23,24,18,19,20,3x21,29,23,24,18,19,20,3x21,29,23,24,18,19,20,21,22,23,24,14,94x-1,29,36,37,38,39,33,34,35,3x36,44,38,39,33,34,35,3x36,44,38,39,33,34,35,36,37,38,39,29,94x-1,44,51,52,53,54,48,49,50,3x51,59,53,54,48,49,50,3x51,59,53,54,48,49,50,51,52,53,54,44,94x-1,63,64,65,66,67,68,63,64,65,66,67,68,69,70,71,63,64,65,66,63,64,65,66,67,68,69,70,71,72,73,74,11844x-1"]],
				94,
				783,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 3",
			1,
			4320228755734464,
			true,
			[255, 255, 255],
			true,
			0.7200000286102295,
			0.7200000286102295,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[4.001708984375, 41.0001220703125, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[62, 62, "134x-1,444,445,446,447,448,449,11x-1,444,445,446,447,448,449,11x-1,444,445,446,447,448,449,13x-1,564,8x-1,474,475,476,477,478,479,11x-1,474,475,476,477,478,479,11x-1,474,475,476,477,478,479,13x-1,594,595,-1,597,598,2x599,2x-1,504,505,506,507,508,509,11x-1,504,505,506,507,508,509,11x-1,504,505,506,507,508,509,22x-1,534,535,536,537,538,539,11x-1,534,535,536,537,538,539,11x-1,534,535,536,537,538,539,22x-1,564,565,566,567,568,569,11x-1,564,565,566,567,568,569,11x-1,564,565,566,567,568,569,22x-1,594,595,596,597,598,599,11x-1,594,595,596,597,598,599,11x-1,594,595,596,597,598,599,217x-1,444,61x-1,444,445,446,447,448,449,12x-1,444,445,446,447,448,449,38x-1,474,475,476,477,478,479,12x-1,474,475,476,477,478,479,38x-1,504,505,506,507,508,509,12x-1,504,505,506,507,508,509,38x-1,534,535,536,537,538,539,12x-1,534,535,536,537,538,539,38x-1,564,565,566,567,568,569,12x-1,564,565,566,567,568,569,38x-1,594,595,596,597,598,2x599,11x-1,594,595,596,597,598,599,344x-1,444,445,446,447,448,449,17x-1,2x444,445,446,447,448,449,32x-1,474,475,476,477,478,479,17x-1,2x474,475,476,477,478,479,32x-1,504,505,506,507,508,509,18x-1,504,505,506,507,508,509,32x-1,534,535,536,537,538,539,18x-1,534,535,536,537,538,539,32x-1,564,565,566,567,568,569,18x-1,564,565,566,567,568,569,32x-1,594,595,596,597,598,599,18x-1,594,3x-1,598,33x-1,594,595,596,597,598,599,18x-1,594,595,37x-1,594,595,596,597,598,599,187x-1,449,304x-1,594,-1,596,597,598,599,56x-1,534,-1,444,445,446,447,448,449,11x-1,444,445,446,447,448,449,37x-1,564,565,474,475,476,477,478,479,11x-1,474,475,476,477,478,479,449,36x-1,594,595,504,505,506,507,508,509,11x-1,504,505,506,507,508,509,38x-1,594,534,535,536,537,538,539,11x-1,534,535,536,537,538,539,39x-1,564,565,566,567,568,569,11x-1,564,565,566,567,568,569,39x-1,594,595,596,597,598,599,11x-1,594,595,596,597,598,599,44x-1,599,12x-1,594,595,596,597,598,599,253x-1,449,180x-1,444,61x-1,444,4x-1,449,5x-1,569,16x-1,444,445,446,447,448,449,12x-1,444,445,446,447,448,449,14x-1,446,447,448,449,3x-1,599,16x-1,474,475,476,477,478,479,11x-1,444,474,475,476,477,478,479,10x-1,444,-1,474,25x-1,504,505,506,507,508,509,12x-1,504,505,506,507,508,509,38x-1,534,535,536,537,538,539,11x-1,504,534,535,536,537,538,539,8x-1,444,12x-1,448,449,15x-1,564,565,566,567,568,569,12x-1,564,565,566,567,568,569,38x-1,594,595,596,597,598,599,12x-1,594,595,596,597,598,599,12x-1,594,595,596,597,598,599,20x-1,594,595,15x-1,594,595,596,597,598,599,91x-1"]],
				111,
				453,
				[
				],
				[
				],
				[
					0,
					64,
					64,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			2,
			1642844698466937,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "77x-1,100,30x-1,115,57x-1,100,30x-1,115,59x-1,100,11x-1,100,18x-1,115,11x-1,115,18x-1,130,22x-1,100,7x-1,115,15x-1,100,14x-1,130,15x-1,115,30x-1,130,15x-1,115,14x-1,115,15x-1,130,14x-1,130,25x-1,100,30x-1,115,30x-1,130,30x-1,130,30x-1,115,30x-1,130,30x-1,115,30x-1,130,30x-1,115,30x-1,130,30x-1,115,30x-1,130,30x-1,115,30x-1,130,41x-1"]],
				96,
				296,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[2336, 2432, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				411,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "97h,22x-1,102,82,84,4x85,97h,112,12x-1,76,77,85,86,82h,81h,80h,6x-1,102,84,2x85,112h,112,86,81h,80h,3x-1,125h,124h,90,122,85h,85,86,108,4x-1,95h,94h,93h,6x-1,102,84,127h,112,2x-1,95h,94h,106h,125h,140h,122,86,121,10x-1,108h,107h,106h,6x-1,112h,112,4x-1,121h,3x120h,82h,84,5x85,86,121,-1,80,81,82h,120,121,5x-1,125h,127h,112,16x-1,93,94,95,8x-1,121h,84,112h,112,14x-1,106,107,108,12x-1,127h,112,125,2x-1,88h,87h,2x82,84,85,86,120,121,2x-1,121h,120h,84,5x85,86,2x87,88,3x-1,112h,112,90,86,81h,80h,25x-1,127h,112,90,2x-1,108h,107h,106h,22x-1,125h,112h,112,2x85h,84h,82,120,121,11x-1,80,94,2x82,84,4x85,86,87,84,127h,112,15x-1,80,94,95,11x-1,112h,112,86,121,2x-1,88h,84,8x85,86,121,13x-1,127h,112,7x-1,95h,86h,85h,84h,95,17x-1,112h,112,29x-1,127h,112,125,3x-1,80,81,82h,81h,80h,80,81,82h,81h,80h,80,81,82h,84,4x85,86,81h,80h,4x-1,112h,112,85,86,2x120,121,3x-1,121h,121,3x-1,121h,121,6x-1,90,2x-1,95h,103,3x-1,127h,112,21x-1,90,7x-1,112h,112,21x-1,90,7x-1,127h,112,2x-1,8x120,90,86,81h,80h,3x-1,121h,3x120,90,86,121,5x-1,112h,112,10x-1,90,2x-1,95h,94h,93h,5x-1,90,7x-1,127h,112,10x-1,90,4x-1,108h,107h,106h,3x-1,90,7x-1,112h,112,125,-1,76,77,122,123,124,125,2x-1,90,6x-1,121h,103,2x-1,90,86,120,121,4x-1,127h,112,86,120,84,2x85,86,87,88,2x-1,90,8x-1,93,81,103,7x-1,112h,112,10x-1,90,6x-1,93,94,95,9x-1,127h,112,120,102h,8x-1,90,4x-1,106,107,108,11x-1,112h,112,10x-1,90,125,2x-1,102,121,13x-1,127h,112,2x120,82,102h,6x-1,90,82h,81h,80h,14x-1,125h,112h,112,10x-1,90,124,125,108h,94h,93h,6x-1,80,81,82,3x87,84,112h,127,5x120,102h,3x-1,125h,90,122,123,124,125,108h,107h,106h,2x-1,106,107,108,4x-1,125h,124h,127h,142h,7x140,11x85,86,120,84,8x85,142h"]],
				95,
				287,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			3,
			7737973492791843,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[392, 192, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				289,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					600,
					350,
					750,
					700,
					1500,
					1500,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				291,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2708, -317, 0, 74, 153, 0, 0, 1, 0.8243243098258972, 0.196078434586525, 0, 0, []],
				10,
				292,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				293,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[632, 120, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				294,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1634, -248, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				295,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2544.0595703125, -217.8953247070313, 0, 133, 209, 0, 0, 1, 0.4360902309417725, 0.9952152967453003, 0, 0, []],
				11,
				318,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2564.0595703125, -149.8953247070313, 0, 82, 156, 0, 0, 1, 0.7560975551605225, 0.2115384638309479, 0, 0, []],
				12,
				319,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				321,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1497, -201, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				322,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1490, -250, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				326,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1518, -213, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				314,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, -260, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				7,
				330,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 161, 157, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				320,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[211.2251434326172, -42.42211151123047, 0, 57.2628059387207, 13.13259601593018, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				533,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			4,
			6433538230856807,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[2748, 2262, 0, 55, 49, 0, 0, 1, 0.5090909004211426, 0.5102040767669678, 0, 0, []],
				61,
				383,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1824, 512, 0, 128, 128, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				484,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2673.0595703125, -27.89532470703125, 0, 122, 151, 0, 0, 1, 0.4590163826942444, 1.125827789306641, 0, 0, []],
				9,
				485,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, -314, 0, 189, 176, 0, 0, 1, 0.5026454925537109, 0.5, 0, 0, []],
				4,
				497,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[520, 909, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				285,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 1546, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				297,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3591, 654, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				298,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1926, 900, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				299,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[379, 1551, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				300,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[894, 1292, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				301,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1653, 910, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				303,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2296, 524, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				304,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3065, 520, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				305,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3449, 909, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				306,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3456, 2062, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				307,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3424, 2848, 0, 227.5555572509766, 43.15151596069336, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				308,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1952, 3328, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				309,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[420, 2449, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				310,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2528, 2816, 0, -31, 25, 0, 3.101487159729004, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				311,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[347, 3213, 0, -31, 25, 0, 3.101487159729004, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				312,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[602, 3470, 0, -31, 25, 0, 3.101487159729004, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				315,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[857, 3726, 0, -31, 25, 0, 3.101487159729004, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				317,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 2944, 0, -31, 25, 0, 3.101487159729004, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				325,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3174, 2438, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				328,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3306, 2834, 0, -31, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				329,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3712, 0, 195.0476226806641, 43.15151596069336, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				331,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 1920, 0, 195.0476226806641, 43.15151596069336, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				332,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1216, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				333,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				334,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				335,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1505, 159, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				336,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1568, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				338,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1632, 160, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				339,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2048, 736, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				337,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2144, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				340,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 640, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				341,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				342,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2528, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				343,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				344,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3520, 1184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				345,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3392, 1184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				346,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3264, 1184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				347,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				348,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1056, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				349,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 800, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				350,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[659, 1067, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				351,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[733, 1110, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				352,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[813, 1154, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				353,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 1824, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				354,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 1824, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				355,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 1824, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				356,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1536, 1856, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				357,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1600, 1856, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				358,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1664, 1856, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				359,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				360,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1376, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				361,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1472, 1440, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				362,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2464, 1792, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				363,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2560, 1792, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				364,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2656, 1792, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				365,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 1792, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				366,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2848, 1792, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				367,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2144, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				368,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2272, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				369,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2400, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				370,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2528, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				371,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2656, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				372,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				373,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 3040, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				374,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 3168, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				375,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2912, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				376,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				377,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2112, 3552, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				378,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1984, 3488, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				379,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2240, 3104, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				380,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2368, 3040, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				381,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				382,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2208, 2592, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				384,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2112, 2528, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				385,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2008, 2481, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				386,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				387,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				388,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				389,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 2720, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				390,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3040, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				391,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3168, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				392,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3296, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				393,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3424, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				394,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3552, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				395,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3680, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				396,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 3584, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				397,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 3456, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				398,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[576, 3328, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				399,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 3200, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				400,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 3136, 0, 64, 42, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				79,
				401,
				[
				],
				[
				[
					1,
					1,
					0,
					2,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3424, 2784, 0, 61, 197, 0, 1.556376218795776, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				402,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3424, 3584, 0, 61, 197, 0, 1.556376218795776, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				403,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 2816, 0, 61, 197, 0, 1.570796370506287, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				404,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1280, 3776, 0, 61, 197, 0, 1.556376218795776, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				405,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 1984, 0, 61, 197, 0, 1.570796370506287, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				406,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 1504, 0, 61, 197, 0, 1.570796370506287, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				407,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 2816, 0, 195.0476226806641, 43.15151596069336, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				408,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 2400, 0, 61, 197, 0, 1.570796370506287, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				409,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 2880, 0, 61, 197, 0, 1.570796370506287, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				410,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2848, 896, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				412,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3200, 800, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				413,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 800, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				414,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1440, 256, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				415,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1664, 160, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				416,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 160, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				417,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 896, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				418,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1344, 800, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				419,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 800, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				435,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 1536, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				436,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1696, 1440, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				437,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 1440, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				438,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 1920, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				439,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2976, 1824, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				440,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2272, 1824, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				441,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2592, 2432, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				442,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2848, 2336, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				443,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2336, 0, 61, 197, 0, 3.102517127990723, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				444,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 2432, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				445,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1344, 2336, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				446,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2336, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				447,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 896, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				448,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[224, 1472, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				449,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2368, 800, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				450,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 2336, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				451,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1983.5830078125, 386.0692749023438, 0, 135.0901947021484, 267.0748596191406, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				0,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1987.862548828125, 386.23974609375, 0, 64.1796875, 255.7603454589844, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				2,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1824, 416, 0, 105, 57, 0, 0, 1, 0.5047619342803955, 0.5087719559669495, 0, 0, []],
				122,
				20,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 2048, 0, 61, 197, 0, 1.556376218795776, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				777,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 2848, 0, 61, 197, 0, 1.556376218795776, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				778,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 2112, 0, 227.5555572509766, 43.15151596069336, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				779,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			5,
			1786619471559966,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			6,
			7641827463244807,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 929, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				186,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				187,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-338, 186, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				188,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-266, 122, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				189,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[96, 27, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				190,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[832, 501, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				193,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[87, 531, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				194,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[245, 530, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				195,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[644, 532, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				210,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				213,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				216,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[176, 28, 0, 126, 16, 0, 0, 1, 0, 0.5, 0, 0, []],
				33,
				470,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Gamora",
					0,
					1
				]
			]
,			[
				[337, 25, 0, 65, 63, 0, 0, 1, 0.5, 0.508474588394165, 0, 0, []],
				31,
				472,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Gamora",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				179,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				182,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				183,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[49, 59, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				165,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[34, 78, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				687,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			7,
			6318390975910278,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				546,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[181.1018676757813, 342.2501831054688, 0, 569, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				426,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[348.1018676757813, 273.2501831054688, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				427,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[465.1018676757813, 272.2501831054688, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				428,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[582.1018676757813, 271.2501831054688, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				429,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				692,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				693,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[["grayscale", "Grayscale", [0]]]
	]
,	[
		"Level4",
		4000,
		4000,
		false,
		"EventLevel1",
		9678365966489478,
		[
		[
			"BG",
			0,
			581173534492967,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "0,7x12vd,24vd,4x12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,36vd,48vd,36vd,48vd,36vd,48vd,36vd,48vd,36vd,48vd,0,12,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,34,72,73,74,75,76,77,72,73,74,75,76,77,78,24,31,32,72,73,74,75,76,77,78,78h,77h,76h,75h,74h,73h,72h,34,84,85,86,87,88,89,84,85,86,87,88,89,90,36,43,44,65hd,53hd,41hd,53hd,41hd,29hd,65hd,53hd,41hd,2x53hd,29hd,85h,84h,24,96,97,65hd,53hd,41hd,53hd,41hd,53hd,41hd,29hd,101,102,36,48,29,30,66hd,54hd,42hd,54hd,42hd,30hd,66hd,54hd,42hd,2x54hd,30hd,2x46,36,29,30,66hd,54hd,42hd,54hd,42hd,54hd,42hd,30hd,113,114,48,12,41,42,13,22h,13,22,14,14h,21,13h,22h,13h,20,21,19,20,48,41,42,13,22h,14,14h,22h,13h,22h,13h,22h,13h,34,24,53,54,25,34h,25,34,26,26h,33,25h,34h,25h,2x34,31,32,12,53,54,25,34h,26,26h,34h,25h,34h,25h,34h,25h,34,36,41,42,37,46h,37,46,38,38h,45,37h,46h,37h,2x46,43,44,24,53,54,37,46h,38,38h,46h,37h,46h,37h,46h,37h,46,48,53,54,49,58h,49,58,50,50h,57,49h,58h,49h,56,57,55,56,36,30hv,29hv,49,58h,50,50h,58h,49h,58h,49h,58h,49h,48,12,65,66,36,46vd,34vd,46vd,24,29,30,24,34vd,46vd,33,34,34vd,46vd,4x34,7x46,41,42,12,24,36vd,48vd,60vd,15hd,27hd,15hd,36,54hv,53hv,36,33,34,45,46,33,2x34,3x46,7x34,53,54,24,36,52hd,40hd,28hd,16hd,28hd,16hd,48,42hv,41hv,48,45,46,34,46,45,46,34vd,46vd,9x46,53,54,36,48,19,20,21,22,20,21,22,54hv,53hv,22,13,14,13,14,13,14,13,14,22,19,20,19,20,19,20,21,22,53,54,48,12,31,32,33,34,31,32,33,42hv,41hv,34,3x25,26,26h,3x25h,34,31,32,33,34,37hv,34,33,37hv,53,54,12,24,43,44,45,46,43,44,45,54hv,53hv,46,3x37,38,38h,3x37h,46,43,44,45,46,25hv,46,45,25hv,53,54,24,36,55,56,57,58,56,57,58,42hv,41hv,58,49,50,49,50,49,50,49,50,58,55,56,55,56,57,58,57,58,53,54,36,48,15,16,12,29,30,12,48,65,66,48,34vd,46vd,34vd,46vd,34vd,46vd,34vd,46vd,0,98hv,97hv,96hv,29,30,102hv,2x34,30hv,29hv,48,12,27,28,24,41,42,24,12hd,36hd,24hd,12hd,72,73,74,75,76,77,46hd,29,30,86hv,85hv,84hv,53,54,90hv,46,3x34,12,24,39,40,36,53,54,36,19,20,21,22,19,20,21,22,19,20,21,41,42,74hv,73hv,72hv,65,66,78hv,34,3x46,24,36,51,52,48,41,42,48,31,32,33,34,31,32,33,78vd,90vd,28,27,53,54,2x78vd,90vd,102vd,34hd,2x46,76,77,78,36,48,39,40,12,53,54,12,43,44,45,46,43,44,45,3x63hv,39,41,42,2x77vd,89vd,101vd,75hv,74hv,73hv,75hv,74hv,73hv,72hv,12,51,52,24,41,42,24,55,56,57,58,55,56,57,3x51hv,51,53,54,2x76vd,88vd,100vd,30vd,2x42vd,54vd,29hd,84hd,72hd,24,46hd,34hd,36,53,54,36,46hd,34hd,46hd,34hd,46hd,34hd,46hd,3x39hv,15,41,42,75vd,90vd,29,30,29vd,2x41vd,53vd,30hd,85hd,73hd,36,19,2x22,41,42,22,19,20,13h,22h,13h,22h,21,3x27hv,27,53,54,74vd,89vd,41,42,68hv,92hv,91hv,68hv,96hd,84hd,74hd,48,46hv,26vd,38vd,53,54,26vd,38vd,34,25h,34h,25h,34h,33,3x15hv,39,41,42,73vd,88vd,41,42,92vd,44hv,43hv,92vd,97hd,85hd,75hd,12,34hv,25vd,37vd,41,42,25vd,37vd,46,37h,46h,37h,46h,45,3x3hv,51,30hv,29hv,72vd,87vd,41,42,91vd,32hv,31hv,91vd,98hd,86hd,76hd,12,55,56,58,53,54,58,55,56,49h,58h,49h,58h,57,58,49,50,49,50,24,74vd,86vd,41,42,68hv,92hv,91hv,68hv,99hd,87hd,77hd,24,46hd,34hd,48,65,66,48,46hd,34hd,46hd,34hd,46hd,34hd,46hd,4x34hd,84v,36,73vd,85vd,41,42,96v,3x67,100hd,88hd,78hd,36,46hd,34hd,48vd,24vd,36vd,48vd,46hd,9x34hd,46hd,72v,48,73vd,85vd,65,66,4x67,101hd,89hd,90v,48,16x46hd,2x34hd,60,2x46,2x34,72v,73v,74v,75v,76v,77v,78v,60,2x12vd,24vd,36vd,6x12vd,48hd,36hd,24hd,12hd,3x12vd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,60"]],
				112,
				1038,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			1,
			6117950025710163,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "0,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,2x12hd,0,12,16x-1,0,12x-1,12,24,16x-1,12,12x-1,24,36,16x-1,24,12x-1,36,48,14x-1,61,62,36,12x-1,48,12,16x-1,48,10x-1,2x67,12,24,16x-1,24,12x-1,12,36,16x-1,36,12x-1,24,48,16x-1,48,12x-1,36,12,2x-1,1,2,1,2,1,2x-1,1,2x2,3x1,2,60,2,1,2,1,2,61,62,2x61,1,2x-1,48,24,91,2x92,2x91,92,48,2x-1,0,91,92,13x91,92,12v,2x-1,12,36,7x1v,2x-1,10x1v,2v,1v,2v,5x1v,2x-1,24,48,18x-1,2x67,9x-1,36,12,18x-1,2x67,9x-1,48,24,29x-1,12,36,29x-1,24,48,1,2x2,2x-1,1,2,2x-1,1,2x2,1,2,1,2,1,2,1,2,1,4x-1,62,61,2x-1,36,12,2x67,0,2x-1,0,91,92,91,92,6x-1,12,8x-1,0,61,2x62,48,24,2x67,12,2x-1,12,10x-1,24,8x-1,48,2x91,92,12,36,2x67,24,2x-1,24,7x-1,61,2x62,36,3x-1,61,62,2x61,62,61,3x-1,24,48,2x67,36,2x-1,36,10x-1,48,12x-1,36,12,2x67,60,2x-1,60,10x-1,12,12x-1,48,24,2x1,2,2x-1,1,2,1,2,1,2,61,62,3x-1,24,2x-1,61,62,8x-1,12,36,16x-1,36,2x-1,48,12,8x-1,24,48,14x-1,2x67,48,2x-1,2x60,8x-1,36,12,13x-1,67,70,67,12,2x-1,2x61,8x-1,48,12,12x-1,3x67,70,24,2x91,92,5x-1,67,3x-1,12,24,2x1,2,2x-1,1,2,1,2,1,2,1,2,2x61,62,36,7x-1,3x67,-1,67,24,36,91,92,91,92,91,92,9x91,92,48,6x-1,6x67,36,48,72,68,74,75,76,77,78,77,78,72,73,74,75,76,68,78,60,61,62,61,62,61,62,61,62,61,62,61,62,48,36hd,24hd,12hd,24hd,12hd,36hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,24hd,12hd,60"]],
				113,
				1039,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[2720, 1024, 0, 135.0901947021484, 267.0748596191406, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				281,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				269,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2560, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				689,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2688, 3616, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				776,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2473, 2053, 0, 201.0470733642578, 268.0148315429688, 0, 0, 1, 0.2808988690376282, 0.9955157041549683, 0, 0, []],
				106,
				1102,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2333, 1926, 0, 250, 250, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				83,
				425,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			2,
			4514143329210834,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[2228.0595703125, -182.8953247070313, 0, 155, 195, 0, 0, 1, 0.3483870923519135, 1.066666722297669, 0, 0, []],
				17,
				1043,
				[
				],
				[
				[
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1916, 1840, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				1044,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					600,
					350,
					750,
					700,
					1500,
					1500,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				1045,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				1047,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[656, -192, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				1048,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1634, -248, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				1049,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				1052,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1497, -201, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				1053,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1490, -250, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				1056,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2285, -115, 0, 122, 210, 0, 0, 1, 0.8442623019218445, 0.6952381134033203, 0, 0, []],
				18,
				1057,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3188, -206, 0, 23, 252, 0, 0, 1, 5.47826099395752, 0.5, 0, 0, []],
				80,
				1058,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1518, -213, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				1059,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, -260, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				7,
				1060,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 161, 157, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				1061,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[235, -354, 0, 57.2628059387207, 13.13259601593018, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				1062,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 2053, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1040,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 3461, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1041,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[128, 1157, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1042,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 2053, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1077,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 2176, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1078,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 1120, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1079,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 1056, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1080,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 1184, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1081,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 480, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1082,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2304, 3205, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1083,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 3328, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1084,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2272, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1085,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2816, 3616, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1086,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 3744, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1087,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 2848, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1088,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 480, 0, 258, 118, 0, 0, 1, 0.01162790693342686, 0.05932203307747841, 0, 0, []],
				116,
				1089,
				[
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3584, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				117,
				1090,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2592, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				118,
				1091,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3072, 2787, 0, 258, 118, 0, 0, 1, 0.01162790693342686, 0.05932203307747841, 0, 0, []],
				116,
				1092,
				[
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3648, 2816, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				117,
				1093,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3034, 2816, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				118,
				1094,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 2336, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				114,
				1095,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3072, 2464, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1096,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3072, 2016, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1097,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			3,
			9882782873888477,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[448, 480, 0, 258, 118, 0, 0, 1, 0.01162790693342686, 0.05932203307747841, 0, 0, []],
				116,
				1064,
				[
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2880, -314, 0, 189, 176, 0, 0, 1, 0.5026454925537109, 0.5, 0, 0, []],
				4,
				1066,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 2176, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1067,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1131, 1124, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1069,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2016, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1068,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 3584, 0, 61, 59, 0, -1.592677712440491, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1070,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 1248, 0, 61, 59, 0, -1.570796489715576, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				1071,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[256, 480, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				115,
				1072,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 480, 0, 258, 118, 0, 0, 1, 0.01162790693342686, 0.05932203307747841, 0, 0, []],
				116,
				1073,
				[
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1888, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				117,
				1063,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1184, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				118,
				1074,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				117,
				1075,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[416, 512, 0, 61, 59, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				118,
				1076,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 637, 0, 128, 128, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				1098,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3712, 3072, 0, 64, 42, 0, -0.1763093173503876, 1, 0.5, 0.5, 0, 0, []],
				79,
				1099,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2060, 412, 0, 143.2008972167969, 80.06932067871094, 0, 0, 1, 0.5053763389587402, 0.5, 0, 0, []],
				61,
				1100,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					20,
					0
				]
				],
				[
					0,
					"Rocket",
					0,
					1
				]
			]
,			[
				[2504, 1934, 0, 151.5803375244141, 169.0703735351563, 0, 0, 1, 0.2230769246816635, 0.4896551668643951, 0, 0, []],
				59,
				1101,
				[
				],
				[
				[
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 3083, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1104,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1794, 3214, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1105,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1665, 3343, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1106,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2560, 2826, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1107,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2685, 2441, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1108,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1794, 2446, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1109,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3330, 2058, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1110,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3588, 652, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1111,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[769, 2060, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1112,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1283, 1164, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1113,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 524, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1114,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1793, 2825, 0, 21, 21, 0, 3.080444812774658, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1115,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[508, 2061, 0, 21, 21, 0, 3.080444812774658, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1116,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 1165, 0, 21, 21, 0, 3.080444812774658, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1117,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3580, 1163, 0, 21, 21, 0, 3.080444812774658, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1118,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2816, 2827, 0, 21, 21, 0, 3.080444812774658, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				1120,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1217, 2815, 0, 130, 27, 0, 0, 1, 0.5, 1, 0, 0, []],
				119,
				1121,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3716, 567, 0, 105, 57, 0, 0, 1, 0.5047619342803955, 0.5087719559669495, 0, 0, []],
				122,
				14,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1536, 1984, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				26,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1632, 1984, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				27,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1728, 1984, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				32,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1408, 1056, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				38,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1504, 1056, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				64,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1600, 1056, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				66,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[800, 1952, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				79,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 1952, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				83,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 1952, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				88,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1952, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				91,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1856, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				97,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1760, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				98,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1664, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				101,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1568, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				103,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1472, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				104,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1376, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				105,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1280, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				106,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1184, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				107,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1152, 1088, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				108,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 3360, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				138,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 3264, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				139,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 3168, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				140,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 3072, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				142,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2976, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				143,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2880, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				144,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2784, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				145,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2688, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				146,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2592, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				147,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2496, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				148,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2400, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				149,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2304, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				150,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2208, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				151,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 2112, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				152,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 3040, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				153,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2944, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				154,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2848, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				155,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2752, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				156,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2656, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				157,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 2560, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				158,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2814, 2059, 0, -29, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				159,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2720, 1024, 0, 64.1796875, 255.7603454589844, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				288,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1632, 1152, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				316,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2048, 1120, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				323,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1536, 1088, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				324,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1248, 2816, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				327,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1632, 2784, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				422,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 2752, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				423,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1120, 3456, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				510,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[1536, 3424, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				512,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1024, 3392, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				523,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2548, 3710, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				552,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[2760, 3620, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				562,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2360, 3624, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				563,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3040, 1152, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				564,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[3424, 1120, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				565,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2912, 1088, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				566,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[224, 2048, 0, 168, 148, 0, 0, 1, 0.3154761791229248, 0.9662162065505981, 0, 0, []],
				14,
				567,
				[
					[4],
					[500],
					[0],
					[2],
					["left"],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"Idle",
					0,
					1
				]
			]
,			[
				[448, 1984, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				569,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 1984, 0, 61, 197, 0, 0, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				572,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 1024, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				576,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 2720, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				577,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2687, 2751, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				583,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3520, 1952, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				584,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[512, 3461, 0, 258, 118, 0, 0, 1, 0.007751937955617905, 0.06779661029577255, 0, 0, []],
				145,
				899,
				[
					[0],
					[0],
					[0]
				],
				[
				[
					1
				],
				[
					0,
					5,
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2624, 2043, 0, 117.0470123291016, 261.0148315429688, 0, 0, 1, 0.5643564462661743, 0.9868995547294617, 0, 0, []],
				108,
				1103,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			4,
			1317872231610944,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			5,
			2480526000202156,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				1207,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 929, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				217,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[97, 33, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				218,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-173, -43, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				219,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-176, -66, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				220,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[97, 28, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				221,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[833, 502, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				224,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[88, 532, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				225,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[246, 531, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				226,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[645, 533, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				227,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-11, -23, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				243,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				246,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[172, 28, 0, 93, 52, 0, 0, 1, 0, 0.5, 0, 0, []],
				33,
				223,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Rocket",
					0,
					1
				]
			]
,			[
				[286, 30, 0, 44, 43, 0, 0, 1, 0.5, 0.508474588394165, 0, 0, []],
				31,
				228,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Rocket",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				503,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				508,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				509,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[51, 56, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				684,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[36, 75, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				685,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			6,
			1822754957650644,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				1211,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[180, 342, 0, 569, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				430,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[347, 273, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				431,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[464, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				432,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[581, 271, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				433,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				549,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				691,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[["grayscale", "Grayscale", [0]]]
	]
,	[
		"Training2",
		8000,
		1000,
		false,
		"EventLevel1",
		4942114279745337,
		[
		[
			"BG",
			0,
			9952181867536542,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[4, -4, 0, 8000, 1000, 0, 0, 1, 0, 0, 0, 0, [],
[62, 7, "15,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,3,27,72,73,74,75,76,77,78,72,73,74,72,73,74,75,76,77,78,3x4,76v,4,76v,4,76v,4,3x4hv,22,34,22,34,22,34,22,34,22,34,22,34,2x22,34,13h,34,22,34,13h,34,22,34,77v,78v,72v,73v,74v,75v,76v,77v,16v,39,49v,46hv,13,46hv,13,2x46hv,13h,46hv,13h,46hv,49hv,73,74,75,19,20,16,76,16,76,16,76,16,76,16,84,85,86,87,88,89,90,88,89,90,84,85,86,87,88,90h,89h,88h,90h,89h,88h,87h,86h,85h,84h,46,5x22h,46,20h,46,27,51,37v,46v,25,46v,25,26,26h,25h,46v,25h,46v,37hv,73v,74v,75v,31,32,28,88,28,88,28,88,28,88,28,96,97,98,99,100,101,102,25h,101,25h,96,25h,98,25h,100,102h,101h,100h,102h,101h,100h,99h,98h,97h,96h,32h,31h,25,26,26h,25h,33h,32h,31h,39,15,25v,34v,37,34v,37,38,38h,37h,34v,37h,34v,25hv,73,74,75,43,44,40,100,40,100,40,100,40,100,40,108,109,110,111,112,113,114,37h,113,37h,108,37h,110,37h,112,114h,113h,112h,114h,113h,112h,111h,110h,109h,108h,44h,43h,37,38,38h,37h,45h,44h,43h,51,27,13v,46hv,49,46hv,49,2x46hv,49h,46hv,49h,46hv,13hv,73v,74v,75v,55,56,52,112,52,112,52,112,52,112,52,58h,58,46,58h,34,58h,34,56h,34,58h,34,56h,34,58h,34,57h,56h,34,7x58h,34,58h,34,58h,34,58h,34,56h,34,51,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,51hd,39hd,27hd,15hd,2x46,27hd,15hd,46,39hd,9x64,15hd,51hd,39hd,27hd,46,51hd,46,27hd,46,51hd,46,27hd,46,51hd,46,27hd,15hd,46,39hd,27hd,15hd,51hd,39hd,27hd,15hd,46,39hd,46,15hd,46,39hd,46,39hd,46,63"]],
				112,
				9,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[1162.07861328125, 817.614990234375, 0, 314, 96, 0, -0.480896532535553, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				813,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1254, 363, 0, 49, 49, 0, 0, 1, 0.4693877696990967, 0.4897959232330322, 0, 0, []],
				8,
				838,
				[
				],
				[
				[
					0,
					2,
					0,
					1,
					0.5,
					0.5,
					0,
					0.01,
					0,
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[85.399169921875, -108.3375549316406, 0, 45.73171234130859, 41.15853881835938, 0, 0, 1, 0.449999988079071, 0.5555555820465088, 0, 0, []],
				101,
				902,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			1,
			3767596083095331,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 8000, 1100, 0, 0, 1, 0, 0, 0, 0, [],
[62, 8, "0,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,48hd,36hd,24hd,12hd,2x24v,12vd,24vd,5x-1,24vd,36vd,48vd,61,6x-1,24,10x-1,60hd,48hd,36hd,24hd,12hd,48vd,48hd,36hd,24hd,12hd,0hd,12,19x61v,62v,12x-1,61,62,5x-1,36,12x-1,4x48vd,4x-1,48hv,24,26x-1,67,5x-1,2x61,5x62,48,61,62,11x-1,3x48vd,4x-1,36hv,12,22x-1,69,70,3x67,14x-1,61,62,3x-1,2x67,7x-1,48vd,4x-1,24hv,24,12x-1,69,67,6x-1,67,5x-1,67,70h,69h,16x-1,4x67,11x-1,12hv,36,8x-1,67,4x-1,67,4x-1,67,7x-1,67,17x-1,6x67,10x-1,0hv,48,61,62,61,62,61,62,61,62,61,62,8x61,2x62,61,62,17x61,62,7x61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,0,48hd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,36vd,48vd,12vd,24vd,12vd,24vd,36vd,48vd,48,60hd,48hd,36hd,24hd,12hd,0hd,12hd,0hd,60hd,48hd,36hd,24hd,12hd,0hd"]],
				113,
				10,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[512, 640, 0, 672, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				127,
				121,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1075, 640, 0, 352, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				128,
				237,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[4204, 640, 0, 1208, 256, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				127,
				489,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5190, 575, 0, 384, 384, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				129,
				498,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5404.1162109375, 765.5201416015625, 0, 194.1535949707031, 259.6255798339844, 0, 0, 1, 0.2808988690376282, 0.9955157041549683, 0, 0, []],
				106,
				87,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			2,
			7299852057245544,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[314, 498, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				12,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					600,
					350,
					750,
					700,
					1500,
					1500,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				13,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				15,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[656, -192, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				16,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1634, -248, 0, 91, 30, 0, 0, 1, 0.5054945349693298, 0.5, 0, 0, []],
				0,
				17,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				21,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1497, -201, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				22,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2426.76123046875, -342.20654296875, 0, 99.69589233398438, 155.8740234375, 0, 0, 1, 0.6412213444709778, 0.1853658556938171, 0, 0, []],
				20,
				23,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2387.76123046875, -60.2066650390625, 0, 137, 158, 0, 0, 1, 0.262773722410202, 0.9430379867553711, 0, 0, []],
				19,
				24,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1490, -250, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				6,
				25,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1518, -213, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				28,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1520, -260, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				7,
				29,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 161, 157, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				30,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[235, -354, 0, 57.2628059387207, 13.13259601593018, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				31,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2691, 523, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				34,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2815, 523, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				35,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2944, 405, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				36,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3586, 266, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				37,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5631, 390, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				39,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5499, 271, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				40,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[3839, 529, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				496,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			3,
			9705530160793444,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[2880, -314, 0, 189, 176, 0, 0, 1, 0.5026454925537109, 0.5, 0, 0, []],
				4,
				65,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[7573, 768, 0, 130, 109, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				81,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[4766, 637, 0, 55, 49, 0, 0, 1, 0.5090909004211426, 0.5102040767669678, 0, 0, []],
				61,
				84,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					10,
					0
				]
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[5433, 651, 0, 151.5803375244141, 169.0703735351563, 0, 0, 1, 0.2230769246816635, 0.4896551668643951, 0, 0, []],
				59,
				86,
				[
				],
				[
				[
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1664, 534, 0, 21, 21, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				96,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1920, 524, 0, 21, 21, 0, 3.098103046417236, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				100,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5323, 171, 0, 64, 42, 0, 0.004904279951006174, 1, 0.5, 0.5, 0, 0, []],
				79,
				42,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				43,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				45,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				48,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				49,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[960, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				50,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1216, 576, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				51,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 512, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				52,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1472, 448, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				56,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1600, 416, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				57,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1760, 416, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				58,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1824, 416, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				59,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1888, 416, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				60,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2080, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				61,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2144, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				62,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2208, 672, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				63,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2496, 544, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				67,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2432, 544, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				68,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2560, 544, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				69,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 448, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				70,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 384, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				71,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2752, 320, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				72,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3104, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				73,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3168, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				74,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[3232, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				78,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[6080, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				92,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[6144, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				93,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[6208, 288, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				94,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[7212, 646, 0, 135.0901947021484, 267.0748596191406, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				89,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[7214.50341796875, 646, 0, 64.1796875, 255.7603454589844, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				90,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[5290.5, 574.5, 0, 128, 352, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				83,
				41,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[7572.51318359375, 687.8110961914063, 0, 105, 57, 0, 0, 1, 0.5047619342803955, 0.5087719559669495, 0, 0, []],
				122,
				11,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					25,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1536, 640, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				212,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					50,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[647, 818, 0, 1056, 96, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				260,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[5549.1162109375, 762.5201416015625, 0, 117.1536331176758, 265.6255798339844, 0, 0, 1, 0.5643564462661743, 0.9868995547294617, 0, 0, []],
				108,
				85,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			4,
			4996993653026147,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			5,
			1957449289552441,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				125,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 929, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				109,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				110,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-126, -114, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				111,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-111, -135, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				112,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[96, 27, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				113,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[50, 59, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				114,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[833, 501, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				116,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[87, 531, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				117,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[245, 530, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				119,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[645, 532, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				120,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				126,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				247,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[480, 448, 0, 203, 160, 0, 0, 1, 0.4975369572639465, 0.518750011920929, 0, 0, []],
				126,
				115,
				[
				],
				[
				[
				]
				],
				[
					1,
					"Right",
					0,
					1
				]
			]
,			[
				[480, 448, 0, 336, 219, 0, 0, 1, 0.5, 0.5022830963134766, 0, 0, []],
				130,
				501,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				27,
				166,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				178,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				192,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 449, 0, 115, 115, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				141,
				209,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[35, 77, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				494,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"BossLevel",
		1425,
		1000,
		false,
		"EventLevel1",
		7207390632185257,
		[
		[
			"Layer 0",
			0,
			4833116348241941,
			true,
			[255, 255, 255],
			true,
			0.75,
			0.75,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "111,10x112,111,19x-1,126,90,91,92,91,92,91,92,91,92,93,126,19x-1,111,94,172,173,94,174,175,94,176,177,94,111,19x-1,126,94,187,188,94,189,190,94,191,192,94,126,19x-1,111,10x95,111,19x-1,126,3x139,98,5x139,140,126,19x-1,111,139,140,139,98,139,140,139,140,139,140,111,19x-1,126,139,140,139,98,139,140,139,140,139,140,126,732x-1"]],
				70,
				44,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Characters",
			1,
			158932163378567,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[717, 397, 0, 64, 103, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				131,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					500,
					750,
					750,
					700,
					1500,
					1000,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1368, -249, 0, 24, 25, 0, 0, 1, -1.679999947547913, 0.5, 0, 0, []],
				39,
				420,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1471, -199, 0, 25, 26, 0, 0, 1, 2.599999904632568, 0.4615384638309479, 0, 0, []],
				41,
				499,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[632, 120, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				500,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1638, -194, 0, 36, 39, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				2,
				504,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1514, -123, 0, 36, 47.4782600402832, 0, 0, 1, 0.5, 0.5897436141967773, 0, 0, []],
				5,
				505,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[220, -361, 0, 97.05924987792969, 151.8866119384766, 0, 0, 1, 0.6412213444709778, 0.1853658556938171, 0, 0, []],
				20,
				506,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[391, -247, 0, 137, 158, 0, 0, 1, 0.262773722410202, 0.9430379867553711, 0, 0, []],
				19,
				507,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1543, -453, 0, 249, 253, 0, 0, 1, 0.0833333358168602, 0.410256415605545, 0, 0, []],
				3,
				511,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2041.770141601563, -345.5605163574219, 0, 161, 157, 0, 0, 1, 0.6474359035491943, 0.5064102411270142, 0, 0, []],
				1,
				513,
				[
				],
				[
				[
					400,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Tilemap",
			2,
			6820675314731408,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1, 1, 0, 4000, 4000, 0, 0, 1, 0, 0, 0, 0, [],
[31, 31, "100,9x-1,100,68,19x-1,115,9x-1,115,68,19x-1,8,9,10,5x-1,0,1,2,68,19x-1,100,24,7x-1,16,100,68,19x-1,115,2x-1,31,32,33,34,35,2x-1,115,68,19x-1,100,3x-1,47,48,49,3x-1,100,68,19x-1,115,65,7x-1,65,115,68,19x-1,2,3,4,5,6,7,2,3,4,5,6,7,732x-1"]],
				45,
				514,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[1120, -320, 0, 161, 157, 0, 0, 1, 0.4658385217189789, 0.4777069985866547, 0, 0, []],
				6,
				811,
				[
				],
				[
				[
					30,
					0,
					0,
					0,
					1,
					1
				]
				],
				[
					0,
					"Boss",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Objects",
			3,
			9233390708072547,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1147, 252, 0, 169, 179, 0, 0, 1, 0.4497041404247284, 0.9776536226272583, 0, 0, []],
				15,
				515,
				[
					[10],
					[0],
					[0],
					[0],
					[""],
					[0],
					[0],
					[0]
				],
				[
				[
				]
				],
				[
					0,
					"\"Idle\"",
					0,
					1
				]
			]
,			[
				[450, 527, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				516,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1091, 272, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				517,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1158, 784, 0, 25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				518,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[261, 783, 0, -25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				519,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[967, 529, 0, -25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				520,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[327, 271, 0, -25, 25, 0, 0, 1, 0, 0.523809552192688, 0, 0, []],
				40,
				521,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1183, 256, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				525,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[198, 702, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				529,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					10,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1214, 711, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				530,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					10,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[714, 161, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				531,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					10,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[673.63134765625, -224, 0, 24, 13, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				87,
				534,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[992, 278, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				524,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[861, 366, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				526,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[828, 515, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				527,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1016, 485, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				528,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1076, 532, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				532,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1057, 895, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				535,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[813, 871, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				536,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[586, 837, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				537,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[353, 897, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				538,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[336, 693, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				539,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[468, 409, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				540,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[624, 515, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				541,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[537, 341, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				542,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[429, 93, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				543,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[232, 254, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				544,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[864, 32, 0, 189, 250, 0, 0, 1, 0.5, 1, 0, 0, []],
				85,
				545,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[604, 773, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				553,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[804, 776, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				554,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[589, 418, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				555,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[699, 416, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				556,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[839, 413, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				557,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[174, 191, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				558,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[286, 193, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				559,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1109, 193, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				560,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1246, 193, 0, 30, 31, 0, 0, 1, 0.5, 0.5161290168762207, 0, 0, []],
				73,
				561,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 512, 0, 128, 128, 0, 0, 1, 0.5, 1, 0, 0, []],
				125,
				483,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			4,
			5293950598862403,
			true,
			[255, 255, 255],
			true,
			1.200000047683716,
			1.200000047683716,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"HUD",
			5,
			7749655176149247,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				694,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 929, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				248,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[96, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				249,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-151, -16, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				250,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-140, -34, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				251,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[97, 27, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				252,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[833, 501, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				255,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[87, 531, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				256,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[245, 530, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				257,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[645, 532, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				258,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-13, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				261,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				264,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				214,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				215,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 32, 0, 147, 30, 0, 0, 1, 0.49659863114357, 0.6666666865348816, 0, 0, []],
				21,
				681,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[640, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				132,
				259,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[49, 57, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				253,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[34, 76, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				682,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			6,
			3391272094327623,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				551,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[181, 342, 0, 569, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				434,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					1,
					0,
					0,
					0
				]
			]
,			[
				[348, 273, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				452,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[465, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				454,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[582, 271, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				471,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				547,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				548,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"BossLevel2",
		3000,
		650,
		false,
		"BossLevel2",
		6173305470447941,
		[
		[
			"BG",
			0,
			9139195130372043,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[0, 0, 0, 3000, 960, 0, 0, 1, 0, 0, 0, 0, [],
[23, 7, "139,3x94vd,135vd,150vd,165vd,180vd,2x94vd,2x95vd,2x140,99vd,2x139,95vd,10x139,95vd,2x139,95vd,140,95vd,2x140,139,99vd,2x139,6x140,142,143,144,145,146,147,139,2x140,139,95vd,141,142,2x143,144,145,146,147,148,139,2x140,157,158,159,160,161,162,163,139,140,154,155,156,157,2x158,159,160,161,162,163,139,95vd,140,4x139,140,9x139,98,10x139,140,4x139,95vd,6x139,99vd,4x139,95vd,3x140,3x139,95vd,10x139,99vd,2x139,95vd,4x139,95vd"]],
				124,
				1,
				[
				],
				[
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 3",
			1,
			1147074163085227,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[-2, -4, 0, 3000, 800, 0, 0, 1, 0, 0, 0, 0, [],
[23, 6, "-1,82hd,8x-1,115,7x-1,115,3x69h,100,-1,82hd,20x-1,115,-1,82hd,20x-1,100,-1,82hd,6x-1,79h,78h,100,62,-1,62h,66,62,-1,62h,100,3x-1,115,0,1,7h,6h,5h,4h,3h,2x2h,8h,115,77,72,77h,60,77,72,77h,115,2,3,4,5,-1,16,18,19,20,21,22,2x23,24,8x-1,16,17,18,19,20"]],
				109,
				897,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					128,
					128,
					0,
					0,
					0,
					0,
					1
				]
			]
,			[
				[1857, 234, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				1035,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1346, 255, 0, 64.1796875, 255.7603454589844, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				129,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2351, 256, 0, 64.1796875, 255.7603454589844, 0, 0, 1, 1.297297239303589, 0.4969696998596191, 0, 0, []],
				121,
				211,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 0",
			2,
			3632221840283171,
			true,
			[0, 0, 0],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1184, -32, 0, 49, 49, 0, 0, 1, 0.4693877696990967, 0.4897959232330322, 0, 0, []],
				8,
				459,
				[
				],
				[
				[
					0,
					2,
					0,
					1,
					0.5,
					0.5,
					0,
					0.01,
					0,
					1
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2072, 174, 0, 188, 79, 0, 0, 1, 0.4485049843788147, 0.6518518328666687, 0, 0, []],
				16,
				456,
				[
					[3],
					[0],
					[0],
					[3],
					[0],
					[0],
					[3]
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					25,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1460, 232, 0, 15, 461, 0, -3.141586780548096, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				457,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2263, 243, 0, 33, 465, 0, -3.141586780548096, 1, 0.5081967115402222, 0.508474588394165, 0, 0, []],
				48,
				458,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1858, 539, 0, 868.5714111328125, 80.90908813476563, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				460,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2251.39453125, 704.6215209960938, 0, 46.00204849243164, 41.4018440246582, 0, 0, 1, 0.449999988079071, 0.5555555820465088, 0, 0, []],
				101,
				461,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2242, 480, 0, 146.7294921875, 13.66813278198242, 0, -0.5023310780525208, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				462,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1404.003540039063, 459, 0, 157.4603118896484, 13.48484897613525, 0, -1.570813894271851, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				463,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1474, 487, 0, 146.7294921875, 13.66813278198242, 0, 0.4215184450149536, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				465,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2300.001220703125, 501, 0, 106.6666641235352, 13.48484897613525, 0, 1.570809841156006, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				466,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1727, 483, 0, 146.7294921875, 13.66813278198242, 0, -0.5071352124214172, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				467,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1980, 485, 0, 146.7294921875, 13.66813278198242, 0, 0.4590927660465241, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				468,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[477, -63, 0, 64, 139, 0, 0, 0.5, 0.5, 1, 0, 0, []],
				35,
				469,
				[
					["right"],
					[0],
					[3],
					[1],
					[0],
					[0],
					[0],
					[1],
					[5],
					[1],
					[0],
					[0]
				],
				[
				[
					500,
					750,
					750,
					700,
					1500,
					1000,
					1,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[2647, 511, 0, 109.2923049926758, 103.3394470214844, 0, 0, 1, 0.5, 1, 0, 0, []],
				64,
				795,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[928, 384, 0, 26, 24, 0, 0, 1, 0.4615384638309479, 0.5, 0, 0, []],
				86,
				796,
				[
				],
				[
				[
					1,
					1,
					0,
					4,
					0,
					0,
					0,
					10,
					0
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1849, 450, 0, 157.4603118896484, 13.48484897613525, 0, -0.03089718706905842, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				896,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1613.315551757813, -231.2724914550781, 0, 154.9455108642578, 227.875732421875, 0, 0, 1, 0.5806451439857483, 0.9948586225509644, 0, 0, []],
				13,
				8,
				[
				],
				[
				[
				],
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1344, 256, 0, 135.0901947021484, 267.0748596191406, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				33,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[2348, 256, 0, 135.0901947021484, 267.0748596191406, 0, 0, 1, 0.3448275923728943, 0.4941860437393189, 0, 0, []],
				120,
				102,
				[
				],
				[
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[704, 544, 0, 868.5714111328125, 80.90908813476563, 0, 0, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				773,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[1157.662353515625, 460.1049194335938, 0, 288, 32, 0, -0.5023310780525208, 1, 0.5, 0.5056179761886597, 0, 0, []],
				97,
				774,
				[
					[-3],
					[0]
				],
				[
				[
					1
				],
				[
					1,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[800, -32, 0, 329, 194, 0, 0, 1, 0.4893617033958435, 0.5670102834701538, 0, 0, []],
				144,
				881,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"HUD",
			3,
			9647000582420012,
			true,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[1248, -192, 0, 129, 109, 0, 0, 1, 0.5038759708404541, 0.5045871734619141, 0, 0, []],
				42,
				1036,
				[
					[0]
				],
				[
				[
					0
				]
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 930, 122, 0, 0, 1, 0, 0, 0, 0, []],
				32,
				275,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[97, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				276,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-110, -133, 0, 568, 64, 0, 0, 1, 0, 0, 0, 0, []],
				43,
				277,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[-113, -154, 0, 200, 30, 0, 0, 1, 0, 0, 0, 0, []],
				44,
				278,
				[
				],
				[
				],
				[
					"Text",
					0,
					"12pt Arial",
					"rgb(255,0,0)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[97, 27, 0, 145, 28, 0, 0, 1, 0.5034482479095459, 0.5, 0, 0, []],
				24,
				279,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[833, 501, 0, 238.9788360595703, 238.9788513183594, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				51,
				282,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[88, 531, 0, 143.3076934814453, 141.1363677978516, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				52,
				283,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[246, 530, 0, 153.8043212890625, 147.8637390136719, 0, 0, 1, 0.5043478012084961, 0.5043478012084961, 0, 0, []],
				53,
				284,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[645, 532, 0, 117, 117, 0, 0, 1, 0.504273533821106, 0.504273533821106, 0, 0, []],
				54,
				302,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[-11, -25, 0, 7, 7, 0, 0, 1, 0.5714285969734192, 0.5714285969734192, 0, 0, []],
				46,
				421,
				[
				],
				[
				[
					1,
					0,
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				26,
				424,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					0
				]
			]
,			[
				[832, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				22,
				262,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[896, 32, 0, 45, 45, 0, 0, 1, 0.5111111402511597, 0.5111111402511597, 0, 0, []],
				28,
				263,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				23,
				254,
				[
				],
				[
				[
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[50.60897827148438, 56.52219390869141, 0, 292, 144, 0, 0, 1, 0, 0, 0, 0, []],
				47,
				191,
				[
					["no"],
					[0]
				],
				[
				],
				[
					"Text",
					0,
					"24pt Courier New",
					"rgb(255,255,255)",
					0,
					0,
					0,
					0,
					0
				]
			]
,			[
				[35.60897827148438, 75.52219390869141, 0, 29, 28, 0, 0, 1, 0.517241358757019, 0.5, 0, 0, []],
				34,
				280,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 32, 0, 162, 56, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				132,
				775,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			4,
			104438303531277,
			false,
			[255, 255, 255],
			true,
			0,
			0,
			1,
			false,
			0,
			0,
			0,
			[
			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				88,
				474,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[180, 344, 0, 570, 64, 0, 0, 1, 0, 0, 0, 0, []],
				89,
				475,
				[
					[-2],
					[0],
					[50]
				],
				[
				],
				[
					"Text",
					0,
					"36pt Arial",
					"rgb(255,255,255)",
					1,
					0,
					0,
					0,
					0
				]
			]
,			[
				[347, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				91,
				476,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[466, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				92,
				477,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[584, 272, 0, 116, 132, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				93,
				478,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
,			[
				[288, 544, 0, 128, 124, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				29,
				123,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[640, 544, 0, 128, 128, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				30,
				488,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[0, 0, 0, 930, 600, 0, 0, 1, 0, 0, 0, 0, []],
				143,
				810,
				[
				],
				[
				],
				[
					1,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
	],
	[
	[
		"EventLevel1",
		[
		[
			1,
			"Dead",
			0,
			0,
false,false,9999548802193399,false
		]
,		[
			1,
			"greyscale",
			0,
			0,
false,false,8067457941657505,false
		]
,		[
			1,
			"Training_DoorPowerup",
			0,
			1,
false,false,4611392663462984,false
		]
,		[
			0,
			[true, "LevelLoad"],
			false,
			null,
			5206743109669954,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				5206743109669954,
				false
				,[
				[
					1,
					[
						2,
						"LevelLoad"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				5347692599577968,
				[
				[
					-1,
					cr.system_object.prototype.cnds.OnLayoutStart,
					null,
					1,
					false,
					false,
					false,
					6968946882315464,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8861992804828963,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2548560284957451,
					false
					,[
					[
						11,
						"greyscale"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2654836859973403,
					false
					,[
					[
						11,
						"Dead"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayoutEffectParam,
					null,
					6389166883079405,
					false
					,[
					[
						1,
						[
							2,
							"Grayscale"
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							23,
							"greyscale"
						]
					]
					]
				]
,				[
					47,
					cr.plugins_.Text.prototype.acts.SetWebFont,
					null,
					3476780315076664,
					false
					,[
					[
						1,
						[
							2,
							"playregular"
						]
					]
,					[
						1,
						[
							2,
							"stylesheet.css"
						]
					]
					]
				]
,				[
					89,
					cr.plugins_.Text.prototype.acts.SetWebFont,
					null,
					7731350790642118,
					false
					,[
					[
						1,
						[
							2,
							"playregular"
						]
					]
,					[
						1,
						[
							2,
							"stylesheet.css"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					405139936507313,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					89,
					cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
					null,
					295001636955751,
					false
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					97,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					3172725313274758,
					false
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5679545964269137,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8952869777290874,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3935777279350478,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					7210999690290896,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1597241106386627,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4822925438125591,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8015434195760779,
				[
				[
					-1,
					cr.system_object.prototype.cnds.OnLayoutStart,
					null,
					1,
					false,
					false,
					false,
					6495006346670928,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					160148837720834,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayoutScale,
					null,
					9858655186665453,
					false
					,[
					[
						0,
						[
							1,
							0.8
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					1950593049142099,
					false
					,[
					[
						5,
						[
							2,
							"HUD"
						]
					]
,					[
						0,
						[
							1,
							1.25
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					3915538082492606,
					false
					,[
					[
						5,
						[
							2,
							"Layer2"
						]
					]
,					[
						0,
						[
							1,
							1.25
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					6813657689138535,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3870932269738109,
						false
						,[
						[
							11,
							"CharacterDrax"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						9,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						2143981894919119,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						17,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8555120017123038,
						false
					]
,					[
						18,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4085515415862673,
						false
					]
,					[
						11,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6232520985513272,
						false
					]
,					[
						12,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8127606153164528,
						false
					]
,					[
						19,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						3050079675822247,
						false
					]
,					[
						20,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2884367909962167,
						false
					]
,					[
						61,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						6689879924015869,
						false
						,[
						[
							1,
							[
								2,
								"Drax"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						9576149281200071,
						false
						,[
						[
							1,
							[
								2,
								"Drax"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1042758237497353,
						false
						,[
						[
							10,
							5
						]
,						[
							7,
							[
								23,
								"DraxWeaponTime"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6298674638335973,
						false
						,[
						[
							10,
							6
						]
,						[
							7,
							[
								23,
								"DraxJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2434700684780872,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								23,
								"DraxJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3096381635732115,
						false
						,[
						[
							10,
							7
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
,					[
						31,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						1373663260983213,
						false
						,[
						[
							1,
							[
								2,
								"Drax"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						79,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						6484442236527253,
						false
						,[
						[
							1,
							[
								2,
								"Nova"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8578401688044101,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						54734546805847,
						false
						,[
						[
							11,
							"CharacterRocket"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						61,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						451343622883932,
						false
						,[
						[
							1,
							[
								2,
								"Rocket"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						4232673214877258,
						false
						,[
						[
							1,
							[
								2,
								"Rocket"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						17,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						8622251084934066,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						9,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8017515677849053,
						false
					]
,					[
						10,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						1718764259353473,
						false
					]
,					[
						11,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						9413060245429687,
						false
					]
,					[
						12,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2926535913677779,
						false
					]
,					[
						19,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6943293808118242,
						false
					]
,					[
						20,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5716966034779985,
						false
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7848177515305812,
						false
						,[
						[
							10,
							5
						]
,						[
							7,
							[
								23,
								"RocketWeaponTime"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3149136321814253,
						false
						,[
						[
							10,
							6
						]
,						[
							7,
							[
								23,
								"RocketJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8093939985488039,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								23,
								"RocketJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5302435477591148,
						false
						,[
						[
							10,
							7
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						79,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5870500441683654,
						false
						,[
						[
							1,
							[
								2,
								"Cloak"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						61,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						7650432376497112,
						false
						,[
						[
							1,
							[
								2,
								"Rocket"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						31,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						8458588549728764,
						false
						,[
						[
							1,
							[
								2,
								"Rocket"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3553321465027938,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						132106473989334,
						false
						,[
						[
							11,
							"CharacterGamora"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						61,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						8227584245075549,
						false
						,[
						[
							1,
							[
								2,
								"Gamora"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						3683294683801692,
						false
						,[
						[
							1,
							[
								2,
								"Gamora"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						11,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						5442263000332165,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						9,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6872366085708507,
						false
					]
,					[
						10,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						7254545882479369,
						false
					]
,					[
						17,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8270074654135663,
						false
					]
,					[
						18,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5176682339549357,
						false
					]
,					[
						19,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						3537129730643157,
						false
					]
,					[
						20,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						3577160905288247,
						false
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3923824352729072,
						false
						,[
						[
							10,
							5
						]
,						[
							7,
							[
								23,
								"GamoraWeaponTime"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5797581989893937,
						false
						,[
						[
							10,
							6
						]
,						[
							7,
							[
								23,
								"GamoraJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3741823914201126,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								23,
								"GamoraJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						9646452433796734,
						false
						,[
						[
							10,
							7
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5516373574170782,
						false
						,[
						[
							10,
							8
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1905280471063525,
						false
						,[
						[
							10,
							9
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						79,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5837919327263156,
						false
						,[
						[
							1,
							[
								2,
								"Orb"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						31,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5611920442280878,
						false
						,[
						[
							1,
							[
								2,
								"Gamora"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					true,
					null,
					9662663753998831,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4340477482441051,
						false
						,[
						[
							11,
							"CharacterStarlord"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						567785181048157,
						false
						,[
						[
							11,
							"Training"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						61,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						6152654405927903,
						false
						,[
						[
							1,
							[
								2,
								"Starlord"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						33,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						4256136486787027,
						false
						,[
						[
							1,
							[
								2,
								"Starlord"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						19,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						9404750011713702,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						9,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2197095731847442,
						false
					]
,					[
						10,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8935145335968523,
						false
					]
,					[
						17,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						1532212877539961,
						false
					]
,					[
						18,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5128541404281407,
						false
					]
,					[
						11,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6154338511616102,
						false
					]
,					[
						12,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						6717204223264886,
						false
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						4736044660726584,
						false
						,[
						[
							10,
							5
						]
,						[
							7,
							[
								23,
								"StarlordWeaponTime"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5692225212784547,
						false
						,[
						[
							10,
							6
						]
,						[
							7,
							[
								23,
								"StarlordJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1263283665459448,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								23,
								"StarlordJumpCount"
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7187714305229523,
						false
						,[
						[
							10,
							7
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
,					[
						79,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						8227644912844367,
						false
						,[
						[
							1,
							[
								2,
								"Tape"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						31,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						3250454938104651,
						false
						,[
						[
							1,
							[
								2,
								"Starlord"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "EveryTick"],
			false,
			null,
			9860130153756622,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				9860130153756622,
				false
				,[
				[
					1,
					[
						2,
						"EveryTick"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7929078591708157,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					2885320323615779,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.ScrollToObject,
					null,
					6783582981906178,
					false
					,[
					[
						4,
						42
					]
					]
				]
,				[
					43,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					1933484737571139,
					false
					,[
					[
						7,
						[
							19,
							cr.system_object.prototype.exps.fps
						]
					]
					]
				]
,				[
					44,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					2819772568702547,
					false
					,[
					[
						7,
						[
							23,
							"Pause"
						]
					]
					]
				]
,				[
					24,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7565983455102416,
					false
					,[
					[
						0,
						[
							21,
							35,
							false,
							null
							,2
						]
					]
					]
				]
,				[
					47,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					8312671098141239,
					false
					,[
					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
,				[
					87,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					9864560941082111,
					false
					,[
					[
						4,
						35
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4547589814338983,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6609454024921803,
						false
						,[
						[
							11,
							"Training"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						6556509945817316,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						39,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						2026517065837228,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						6293080962492769,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6826928824089246,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						25155528845503,
						false
						,[
						[
							11,
							"Training"
						]
,						[
							8,
							3
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						4868870817436497,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						39,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						9985382749488956,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						3893987178635948,
						false
						,[
						[
							4,
							35
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9132366476266288,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					4594264548915162,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					6463517410894089,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7088282833529656,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								-1
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						2382781029649179,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					9984776100726122,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3657040627583915,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						9104049482935602,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.06
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.06
								]
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3710562136597023,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2065460623518181,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						9226583980571138,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									64,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.06
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									64,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.06
								]
								]
							]
						]
						]
					]
,					[
						80,
						cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
						null,
						1531999109412346,
						false
						,[
						[
							0,
							[
								0,
								270
							]
						]
,						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						796640321416651,
						false
						,[
						[
							0,
							[
								0,
								3
							]
						]
						]
					]
,					[
						80,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4467149542909999,
						false
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5395442446264462,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8575388634236773,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						9555635195729108,
						false
						,[
						[
							0,
							[
								20,
								79,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
,						[
							0,
							[
								20,
								79,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					9442595594694992,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						753099210483975,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						9404815606675839,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									61,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									61,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8235251597592773,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8764639787909538,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								4
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						4007914222385637,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									79,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									79,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2425585555477217,
					[
					[
						42,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1341881197866932,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						7884807745997636,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									145,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									145,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "Player"],
			false,
			null,
			4511548308045296,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				4511548308045296,
				false
				,[
				[
					1,
					[
						2,
						"Player"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6484764885078527,
				[
				[
					152,
					cr.plugins_.Sprite.prototype.cnds.OnDestroyed,
					null,
					1,
					false,
					false,
					false,
					1379619192725453,
					false
				]
				],
				[
				[
					152,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					6640508933105651,
					false
					,[
					[
						4,
						3
					]
,					[
						5,
						[
							2,
							"Characters"
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					1399753773647631,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4827713919454332,
						false
						,[
						[
							10,
							10
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						3,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						1581565626162875,
						false
						,[
						[
							1,
							[
								2,
								"Default"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					7226975359589323,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9267536418160282,
						false
						,[
						[
							10,
							10
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						3,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						2563950463462807,
						false
						,[
						[
							1,
							[
								2,
								"powerup"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4437825806103933,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					1537332054803392,
					false
					,[
					[
						4,
						86
					]
					]
				]
				],
				[
				[
					86,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					5998208213820233,
					false
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					1495597174009226,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1086037948689983,
						false
						,[
						[
							10,
							2
						]
,						[
							8,
							3
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						6938423764463696,
						false
						,[
						[
							2,
							["lego gotg_sfx_health pick up_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
,					[
						24,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						5943442539243251,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
						null,
						1301639178825565,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						3259759812778246,
						false
						,[
						[
							0,
							[
								0,
								5
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9301744114582822,
				[
				[
					3,
					cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished,
					null,
					1,
					false,
					false,
					false,
					8747375577531027,
					false
				]
				],
				[
				[
					3,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					533975150508658,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3354112075062636,
				[
				[
					68,
					cr.plugins_.Function.prototype.cnds.OnFunction,
					null,
					2,
					false,
					false,
					false,
					2690185673876391,
					false
					,[
					[
						1,
						[
							2,
							"CreateCharacterBullet"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					8490014064830315,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7723574495931945,
						false
						,[
						[
							11,
							"CharacterDrax"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9718710853013699,
						false
						,[
						[
							2,
							["lego gotg_sfx_sword_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						5557920236359427,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							665995813661072,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"left"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							3363903981291545,
							false
							,[
							[
								4,
								0
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									6
								]
							]
							]
						]
,						[
							0,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							164481560486583,
							false
							,[
							[
								0,
								[
									0,
									-1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							658641279693513,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								8438727130105208,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								0,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								1206810629505393,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							492892588945592,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								6511742857369577,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								0,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								3981336075980071,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						8188606589830775,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							9341681695091988,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"right"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							6831144573237053,
							false
							,[
							[
								4,
								0
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									7
								]
							]
							]
						]
,						[
							0,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							3030090054923023,
							false
							,[
							[
								0,
								[
									0,
									1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							6134211610830071,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								9185185262140265,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								0,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								6476087798988462,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							4057094847646122,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								4824685537253135,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								0,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								1482263193229418,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4302708124476873,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						412330077708958,
						false
						,[
						[
							11,
							"CharacterGamora"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1890008052235847,
						false
						,[
						[
							2,
							["lego gotg_sfx_sword_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						2755444761432457,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							2013547608716266,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"left"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							238692085629147,
							false
							,[
							[
								4,
								4
							]
,							[
								5,
								[
									2,
									"Characters"
								]
							]
,							[
								7,
								[
									0,
									6
								]
							]
							]
						]
,						[
							4,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							9440006952392333,
							false
							,[
							[
								0,
								[
									0,
									-1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							6152579684912082,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								278304199378378,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								4,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								4301218774510702,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							4132084787673042,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								1702614521991688,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								4,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								6405220632089627,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						3901030346242476,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							3609356353909253,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"right"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							7432017367419253,
							false
							,[
							[
								4,
								4
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									7
								]
							]
							]
						]
,						[
							4,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							1917820144274794,
							false
							,[
							[
								0,
								[
									0,
									1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							9443821585505596,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								8184366697539485,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								4,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								4573455247208253,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							7779372535049402,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								7974627505233636,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								4,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								3640924063693373,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6465590112056149,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4854679087775935,
						false
						,[
						[
							11,
							"CharacterRocket"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						6775745912120631,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							5702915565926108,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"left"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							6192127966492096,
							false
							,[
							[
								4,
								2
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									6
								]
							]
							]
						]
,						[
							2,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							1393659371333489,
							false
							,[
							[
								0,
								[
									0,
									-1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							669260660626805,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								910976442263245,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								6004498325659498,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_2",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
,							[
								2,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								4592952977113038,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							9934969952094071,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								9432965342810978,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								3084779202222504,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_1",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
,							[
								2,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								9099377235564333,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						6725860357473282,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							5846837197502412,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"right"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							1365404434753735,
							false
							,[
							[
								4,
								2
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									7
								]
							]
							]
						]
,						[
							2,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							5713769849353653,
							false
							,[
							[
								0,
								[
									0,
									1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							1719442919696532,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								1743541380915399,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								2,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								3073815891269804,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								6013400467238977,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_2",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							1560894420667108,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								7175939211705959,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								2,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								4115724496019697,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								2947002715565207,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_1",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6171602596797455,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7140762709681511,
						false
						,[
						[
							11,
							"CharacterStarlord"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						7949756152142262,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							9833023704178854,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"left"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							8203330239108048,
							false
							,[
							[
								4,
								5
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									6
								]
							]
							]
						]
,						[
							5,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							789500863790893,
							false
							,[
							[
								0,
								[
									0,
									-1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							1260604022842389,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								1076456734703413,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								7707722106594614,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								4049187283891518,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_2",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							4480394757372505,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								2046336410680364,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								6904326197137706,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								4684268854389681,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_3",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						1089582811778824,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							2991189455506796,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									2,
									"right"
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.plugins_.Sprite.prototype.acts.Spawn,
							null,
							4347767611072181,
							false
							,[
							[
								4,
								5
							]
,							[
								5,
								[
									0,
									2
								]
							]
,							[
								7,
								[
									0,
									7
								]
							]
							]
						]
,						[
							5,
							cr.behaviors.Bullet.prototype.acts.SetSpeed,
							"Bullet",
							9531701373592586,
							false
							,[
							[
								0,
								[
									0,
									1200
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							6490564690346288,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								1688036420608912,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								9081844503442673,
								false
								,[
								[
									1,
									[
										2,
										"Default"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								9523566761588293,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_2",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							1316320121669385,
							[
							[
								35,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								1090168789103606,
								false
								,[
								[
									10,
									10
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
							],
							[
							[
								5,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								4895931905607707,
								false
								,[
								[
									1,
									[
										2,
										"powerup"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								90,
								cr.plugins_.Audio.prototype.acts.Play,
								null,
								1667294648434266,
								false
								,[
								[
									2,
									["lego gotg_sfx_gun shot_3",false]
								]
,								[
									3,
									0
								]
,								[
									0,
									[
										0,
										0
									]
								]
,								[
									1,
									[
										2,
										""
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1018576475897668,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9793574880493069,
					false
					,[
					[
						10,
						2
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7607422716129254,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					5083302141564351,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					4568340033590464,
					false
					,[
					[
						1,
						[
							2,
							"Die"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					1782867218795622,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayoutEffectParam,
					null,
					5171893385214537,
					false
					,[
					[
						1,
						[
							2,
							"Grayscale"
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							23,
							"greyscale"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4597996718176208,
					false
					,[
					[
						11,
						"Dead"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3636481204481253,
					false
					,[
					[
						0,
						[
							1,
							2.5
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					8576939530036626,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.RestartLayout,
					null,
					6731419712321899,
					false
				]
,				[
					150,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash2",
					1774308987835716,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							0,
							3
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2775352059691658,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					4490364133157429,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					39705043906344,
					[
					[
						35,
						cr.behaviors.Platform.prototype.cnds.CompareSpeed,
						"Platform",
						0,
						false,
						false,
						false,
						3696877042900247,
						false
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5042047433748088,
						false
						,[
						[
							1,
							[
								2,
								"Run"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				830122708145564,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					9806946748327097,
					false
					,[
					[
						9,
						37
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					3584339869698294,
					false
					,[
					[
						4,
						52
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					2257565320791207,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3880164908946123,
					false
					,[
					[
						1,
						[
							2,
							"Walk"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					4362693670867434,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					39,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					7654835306483425,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					6902291372627441,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3846030366116585,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				8478988467787436,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					5365069211007759,
					false
					,[
					[
						9,
						39
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					3432839094586654,
					false
					,[
					[
						4,
						53
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					3151771811395706,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					1081520513260199,
					false
					,[
					[
						1,
						[
							2,
							"Walk"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					41,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					309181185428484,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					39,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					3264521473841833,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					1349047875780524,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					929078313249841,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6580077685469699,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					2944964383739404,
					false
					,[
					[
						9,
						90
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					5596609507530492,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				4555941811780786,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					7238583288696605,
					false
					,[
					[
						9,
						38
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					false,
					false,
					3972887712991677,
					false
					,[
					[
						4,
						51
					]
					]
				]
,				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					4451293406522374,
					false
					,[
					[
						9,
						90
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					4606705684803654,
					false
					,[
					[
						3,
						2
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4487592504783885,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2940686323040427,
						false
						,[
						[
							10,
							3
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						2645026685448396,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						632179446351677,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				3631730028161854,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					5263453918809456,
					false
					,[
					[
						9,
						88
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					false,
					false,
					7896743944775036,
					false
					,[
					[
						4,
						54
					]
					]
				]
,				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					6839412953700743,
					false
					,[
					[
						9,
						32
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					2980614427300178,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1267188018460395,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					null,
					6522054870235173,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6378206053622227,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						4097645529954167,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							7115901043332475,
							false
							,[
							[
								10,
								10
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						],
						[
						[
							150,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							1087539976404211,
							false
							,[
							[
								1,
								[
									2,
									"Shoot"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							35,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							4195745494901433,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							1703507890661415,
							false
							,[
							[
								0,
								[
									21,
									35,
									false,
									null
									,5
								]
							]
							]
						]
,						[
							68,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							6860760867625372,
							false
							,[
							[
								1,
								[
									2,
									"CreateCharacterBullet"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							152,
							cr.plugins_.Sprite.prototype.acts.SetOpacity,
							null,
							3086376451106857,
							false
							,[
							[
								0,
								[
									6,
									[
										0,
										100
									]
									,[
										21,
										35,
										false,
										null
										,9
									]
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							1855003204414858,
							false
							,[
							[
								0,
								[
									1,
									0.2
								]
							]
							]
						]
,						[
							35,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							3339187769439839,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						9601795867994248,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							8723532338116799,
							false
							,[
							[
								10,
								10
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							150,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							4907091359434974,
							false
							,[
							[
								1,
								[
									2,
									"ShootPower"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							35,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							6105652678899073,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							5725175110175308,
							false
							,[
							[
								0,
								[
									21,
									35,
									false,
									null
									,5
								]
							]
							]
						]
,						[
							68,
							cr.plugins_.Function.prototype.acts.CallFunction,
							null,
							4332732111011121,
							false
							,[
							[
								1,
								[
									2,
									"CreateCharacterBullet"
								]
							]
,							[
								13,
							]
							]
						]
,						[
							152,
							cr.plugins_.Sprite.prototype.acts.SetOpacity,
							null,
							6637821392565988,
							false
							,[
							[
								0,
								[
									6,
									[
										0,
										100
									]
									,[
										21,
										35,
										false,
										null
										,9
									]
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							966961943790079,
							false
							,[
							[
								0,
								[
									1,
									0.2
								]
							]
							]
						]
,						[
							35,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							3833408373495387,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9123444604252127,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.IsJumping,
					"Platform",
					0,
					false,
					false,
					false,
					3670939760960204,
					false
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6496504828828096,
					false
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1467580775513289,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.IsFalling,
					"Platform",
					0,
					false,
					false,
					false,
					9604846471298091,
					false
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9172429581840952,
					false
					,[
					[
						1,
						[
							2,
							"Fall"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
				,[
				[
					0,
					null,
					true,
					null,
					6246974903792593,
					[
					[
						37,
						cr.plugins_.Keyboard.prototype.cnds.OnKey,
						null,
						1,
						false,
						false,
						false,
						4395588535450334,
						false
						,[
						[
							9,
							38
						]
						]
					]
,					[
						55,
						cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
						null,
						0,
						false,
						false,
						false,
						7751342166188504,
						false
						,[
						[
							4,
							51
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						6146221849958105,
						[
						[
							35,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							1759385741197585,
							false
							,[
							[
								10,
								3
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						],
						[
						[
							35,
							cr.behaviors.Platform.prototype.acts.SetVectorY,
							"Platform",
							3603627893446962,
							false
							,[
							[
								0,
								[
									0,
									-500
								]
							]
							]
						]
,						[
							35,
							cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
							null,
							7860968151813642,
							false
							,[
							[
								10,
								3
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2310894746873188,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.OnLand,
					"Platform",
					1,
					false,
					false,
					false,
					3357469948127578,
					false
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5001200140392097,
					false
					,[
					[
						1,
						[
							2,
							"Landed"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					8065488580680235,
					false
					,[
					[
						10,
						3
					]
,					[
						7,
						[
							21,
							35,
							false,
							null
							,6
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				974090075068849,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.OnStop,
					"Platform",
					1,
					false,
					false,
					false,
					1528552677183667,
					false
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2540812152497908,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					4493102335641576,
					false
					,[
					[
						1,
						[
							2,
							"Idle"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6321463986110803,
				[
				[
					150,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					9490851193622647,
					false
					,[
					[
						1,
						[
							2,
							"Shoot"
						]
					]
					]
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					891556175969807,
					false
					,[
					[
						1,
						[
							2,
							"Idle"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8927229683067528,
				[
				[
					150,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					5146701524837041,
					false
					,[
					[
						1,
						[
							2,
							"Landed"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7725994953735658,
					[
					[
						35,
						cr.behaviors.Platform.prototype.cnds.IsMoving,
						"Platform",
						0,
						false,
						false,
						false,
						6267507113656853,
						false
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						6476624901464866,
						false
						,[
						[
							1,
							[
								2,
								"Walk"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					138690612410081,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						0,
						false,
						false,
						false,
						7075826025860212,
						false
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						8217194179746538,
						false
						,[
						[
							1,
							[
								2,
								"Idle"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				[true, "Shooting"],
				false,
				null,
				3850654153623051,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					3850654153623051,
					false
					,[
					[
						1,
						[
							2,
							"Shooting"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5852084676860877,
					[
					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCreated,
						null,
						1,
						false,
						false,
						false,
						7110482364539308,
						false
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						7016147915231755,
						false
						,[
						[
							0,
							[
								21,
								35,
								false,
								null
								,8
							]
						]
						]
					]
,					[
						152,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8892170602264214,
						false
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4337179595837287,
					[
					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						4198044008003409,
						false
						,[
						[
							4,
							14
						]
						]
					]
					],
					[
					[
						152,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2267672407397567,
						false
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						1255038476059858,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								6,
								[
									21,
									35,
									false,
									null
									,7
								]
								,[
									4,
									[
										0,
										1
									]
									,[
										21,
										35,
										false,
										null
										,10
									]
								]
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						6723039635021456,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						1853913109957098,
						false
						,[
						[
							2,
							["lego gotg_sfx_enemy hit",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						4126309796187781,
						[
						[
							14,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							946679992062604,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						],
						[
						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetCollisions,
							null,
							7714873775249196,
							false
							,[
							[
								3,
								1
							]
							]
						]
,						[
							14,
							cr.behaviors.Flash.prototype.acts.Flash,
							"Flash",
							4152579457231782,
							false
							,[
							[
								0,
								[
									1,
									0.1
								]
							]
,							[
								0,
								[
									1,
									0.1
								]
							]
,							[
								0,
								[
									1,
									1
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						4672937677965798,
						[
						[
							14,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							834724690731823,
							false
							,[
							[
								10,
								0
							]
,							[
								8,
								3
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						],
						[
						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetCollisions,
							null,
							6520289481888389,
							false
							,[
							[
								3,
								0
							]
							]
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							2880798777459213,
							false
							,[
							[
								10,
								3
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.StopAnim,
							null,
							3834940749314766,
							false
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							9823625121010464,
							false
							,[
							[
								1,
								[
									2,
									"Death"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.AddVar,
							null,
							9529574500563227,
							false
							,[
							[
								11,
								"level1Score"
							]
,							[
								7,
								[
									0,
									1000
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							6003684349762382,
							false
							,[
							[
								0,
								[
									1,
									1.3
								]
							]
							]
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.Destroy,
							null,
							1437077049583977,
							false
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					908841923514875,
					[
					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						9030185261932739,
						false
						,[
						[
							4,
							59
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3428693138595431,
						false
						,[
						[
							10,
							10
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						152,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4942513381293443,
						false
					]
,					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						2722309849291792,
						false
						,[
						[
							2,
							["lego gotg_sfx_gate deactivate_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
,					[
						59,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5506859094790742,
						false
						,[
						[
							1,
							[
								2,
								"hit"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						9244785224128582,
						false
						,[
						[
							0,
							[
								1,
								0.6
							]
						]
						]
					]
,					[
						59,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5904308019146857,
						false
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						7774718679423336,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							811610331886682,
							false
							,[
							[
								11,
								"Training"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							42,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							4783188317043461,
							false
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									4
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.Wait,
							null,
							5059100099512118,
							false
							,[
							[
								0,
								[
									0,
									3
								]
							]
							]
						]
,						[
							42,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							7335135538669989,
							false
							,[
							[
								10,
								0
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					true,
					null,
					5549447285699913,
					[
					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						9542835349125288,
						false
						,[
						[
							4,
							45
						]
						]
					]
,					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						2496933391318166,
						false
						,[
						[
							4,
							104
						]
						]
					]
,					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						2460327904204552,
						false
						,[
						[
							4,
							95
						]
						]
					]
,					[
						152,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						4278104932315085,
						false
						,[
						[
							4,
							113
						]
						]
					]
					],
					[
					[
						152,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8542091927271589,
						false
					]
					]
				]
				]
			]
,			[
				0,
				[true, "Climbing"],
				false,
				null,
				7502884100280083,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsGroupActive,
					null,
					0,
					false,
					false,
					false,
					7502884100280083,
					false
					,[
					[
						1,
						[
							2,
							"Climbing"
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					8361524519304445,
					[
					[
						39,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						9706670758740534,
						false
						,[
						[
							4,
							40
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6740713751980983,
						false
						,[
						[
							10,
							11
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						6,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						1643907111774646,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						2657728472780318,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						15,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						3336473619054977,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						6611471071113486,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						2494799622143522,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						7321966884392904,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetAcceleration,
						"Platform",
						9202093032524658,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						4744498611474699,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						4973558848588104,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						3099081508398394,
						false
						,[
						[
							4,
							40
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						3578529874953306,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						1934889708310442,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						3517330169753294,
						false
						,[
						[
							1,
							[
								2,
								"Climb"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						3923662680001903,
						false
						,[
						[
							4,
							151
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6148541054824082,
					[
					[
						41,
						cr.plugins_.Sprite.prototype.cnds.OnCollision,
						null,
						0,
						false,
						false,
						true,
						99035911841348,
						false
						,[
						[
							4,
							40
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9892920579525401,
						false
						,[
						[
							10,
							11
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						6,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						5641154636716174,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						1983610885564542,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						15,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						2276882331517079,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						7688015117781365,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						3329956250525633,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						1363902495822954,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetAcceleration,
						"Platform",
						9159535597956573,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5458557875570257,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						4333917112963951,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						920710148490378,
						false
						,[
						[
							4,
							40
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						2616481787623009,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						4896150009220368,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						5138025117058921,
						false
						,[
						[
							1,
							[
								2,
								"Climb"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						1496918372531363,
						false
						,[
						[
							4,
							151
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					756580738409816,
					[
					[
						151,
						cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
						null,
						1,
						false,
						false,
						false,
						6693232874667371,
						false
						,[
						[
							1,
							[
								2,
								"Climb"
							]
						]
						]
					]
					],
					[
					[
						150,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						7519128165710999,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						6,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						6848859381279306,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						15,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						9887181382285979,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						151,
						cr.plugins_.Sprite.prototype.acts.SetVisible,
						null,
						6187434228218234,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetAcceleration,
						"Platform",
						4266589387001022,
						false
						,[
						[
							0,
							[
								0,
								750
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						1219017328892626,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						9657518344831092,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								21,
								35,
								false,
								null
								,6
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						9398908229717774,
						false
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						87,
						cr.plugins_.Sprite.prototype.acts.SetCollisions,
						null,
						1716738025719553,
						false
						,[
						[
							3,
							1
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						3433512649185985,
						[
						[
							37,
							cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
							null,
							0,
							false,
							false,
							false,
							5016727704619767,
							false
							,[
							[
								9,
								39
							]
							]
						]
						],
						[
						[
							150,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							136443666513139,
							false
							,[
							[
								1,
								[
									2,
									"Walk"
								]
							]
,							[
								3,
								1
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						3087526636266519,
						[
						[
							37,
							cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
							null,
							0,
							false,
							false,
							false,
							4599102977473667,
							false
							,[
							[
								9,
								37
							]
							]
						]
						],
						[
						[
							150,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							7958189015667652,
							false
							,[
							[
								1,
								[
									2,
									"Walk"
								]
							]
,							[
								3,
								1
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "Enemy"],
			false,
			null,
			9864578169582264,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				9864578169582264,
				false
				,[
				[
					1,
					[
						2,
						"Enemy"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6889476004349802,
				[
				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnDestroyed,
					null,
					1,
					false,
					false,
					false,
					3815416763347588,
					false
				]
				],
				[
				[
					6,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					9032134111998932,
					false
					,[
					[
						4,
						7
					]
,					[
						5,
						[
							2,
							"Characters"
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				9385856275827248,
				[
				[
					7,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					4252182748944076,
					false
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
					]
				]
,				[
					7,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					5056540473137829,
					false
					,[
					[
						1,
						[
							2,
							"Boss"
						]
					]
					]
				]
				],
				[
				[
					7,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					8894486711049347,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3978238600598769,
				[
				[
					14,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					975140386592961,
					false
					,[
					[
						4,
						48
					]
					]
				]
,				[
					14,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4427980197253688,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				],
				[
				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					6116525422505195,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					14,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7567321478380838,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2739130442965619,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					8353143163508926,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8172679103922599,
				[
				[
					14,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					7941283122291383,
					false
					,[
					[
						4,
						48
					]
					]
				]
,				[
					14,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3270654963694118,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				],
				[
				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					6443415613303453,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					14,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3342016713960096,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2581610594306265,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					7203360424940802,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4919560254710097,
				[
				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					7662209414743035,
					false
					,[
					[
						4,
						35
					]
					]
				]
				],
				[
				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					8704578962598119,
					false
					,[
					[
						2,
						["lego gotg_sfx_player get hit_1",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					966051646729892,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					8098516964541421,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9001351281213571,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						24,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						2438591689576116,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.RotateClockwise,
						null,
						8903615019274241,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						4855695811979588,
						false
						,[
						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						2604843178654467,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						150,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash2",
						3477426743575808,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3982071417779449,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						6,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						5837456595339892,
						false
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						8663940388511053,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						627649442078103,
						false
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						8340652811490954,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						1120178156523993,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2772801480313418,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6657732865209757,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						24,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						1589832662892522,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.RotateClockwise,
						null,
						7676592960023771,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						3454879659810713,
						false
						,[
						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						1168938603341121,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						150,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash2",
						8551825092750732,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						8437455508132823,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						6,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						8644832369558037,
						false
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						3333239150944884,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						2178730308613952,
						false
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						9146487026774951,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						5860015196592188,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				15379716760214,
				[
				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					3696454448859839,
					false
					,[
					[
						4,
						45
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					8463273005250636,
					false
					,[
					[
						4,
						104
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					4368859723762851,
					false
					,[
					[
						4,
						95
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					8170449378558318,
					false
					,[
					[
						4,
						113
					]
					]
				]
				],
				[
				[
					6,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					2452162241827333,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1429397810450184,
				[
				[
					6,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					2231907162006907,
					false
				]
				],
				[
				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9574889369469645,
					false
					,[
					[
						2,
						["lego gotg_sfx_gun shot_2",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9195285522852103,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3736909958853173,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				42099988288866,
				[
				[
					14,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5278690471709882,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5209599573485588,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Every,
						null,
						0,
						false,
						false,
						false,
						8440255479699312,
						false
						,[
						[
							0,
							[
								0,
								3
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareY,
						null,
						0,
						false,
						false,
						false,
						4633967822844638,
						false
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								4,
								[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									20
								]
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareY,
						null,
						0,
						false,
						false,
						false,
						8422392108068883,
						false
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								5,
								[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
								,[
									0,
									20
								]
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						2967646643459692,
						[
						[
							14,
							cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
							null,
							0,
							false,
							false,
							false,
							6427302887261057,
							false
							,[
							[
								10,
								2
							]
,							[
								8,
								2
							]
,							[
								7,
								[
									0,
									400
								]
							]
							]
						]
						],
						[
						[
							14,
							cr.plugins_.Sprite.prototype.acts.StopAnim,
							null,
							2350590307056119,
							false
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetAnim,
							null,
							7087097371732651,
							false
							,[
							[
								1,
								[
									2,
									"Shoot"
								]
							]
,							[
								3,
								1
							]
							]
						]
,						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							7611268029990266,
							false
							,[
							[
								10,
								5
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							2250906995673713,
							[
							[
								14,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								4456567534931909,
								false
								,[
								[
									10,
									4
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										2,
										"left"
									]
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								2457611240534416,
								false
								,[
								[
									10,
									0
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								14,
								cr.plugins_.Sprite.prototype.acts.Spawn,
								null,
								8357036193480889,
								false
								,[
								[
									4,
									6
								]
,								[
									5,
									[
										0,
										2
									]
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
,							[
								6,
								cr.behaviors.Bullet.prototype.acts.SetSpeed,
								"Bullet",
								657990749647723,
								false
								,[
								[
									0,
									[
										0,
										-350
									]
								]
								]
							]
,							[
								-1,
								cr.system_object.prototype.acts.Wait,
								null,
								5376249168599118,
								false
								,[
								[
									0,
									[
										0,
										1
									]
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								6037849577322759,
								false
								,[
								[
									1,
									[
										2,
										"Idle"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								8818549528080745,
								false
								,[
								[
									10,
									5
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							]
						]
,						[
							0,
							null,
							false,
							null,
							2388297553183018,
							[
							[
								14,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								7875652975618764,
								false
								,[
								[
									10,
									4
								]
,								[
									8,
									0
								]
,								[
									7,
									[
										2,
										"right"
									]
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
								null,
								0,
								false,
								false,
								false,
								6106710151906015,
								false
								,[
								[
									10,
									0
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							],
							[
							[
								14,
								cr.plugins_.Sprite.prototype.acts.Spawn,
								null,
								9452939243183281,
								false
								,[
								[
									4,
									6
								]
,								[
									5,
									[
										0,
										2
									]
								]
,								[
									7,
									[
										0,
										1
									]
								]
								]
							]
,							[
								6,
								cr.behaviors.Bullet.prototype.acts.SetSpeed,
								"Bullet",
								6985750415311136,
								false
								,[
								[
									0,
									[
										0,
										350
									]
								]
								]
							]
,							[
								-1,
								cr.system_object.prototype.acts.Wait,
								null,
								5808705560964616,
								false
								,[
								[
									0,
									[
										0,
										1
									]
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.acts.SetAnim,
								null,
								7928225380257227,
								false
								,[
								[
									1,
									[
										2,
										"Idle"
									]
								]
,								[
									3,
									1
								]
								]
							]
,							[
								14,
								cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
								null,
								6311899230855149,
								false
								,[
								[
									10,
									5
								]
,								[
									7,
									[
										0,
										0
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					309537198589955,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						6552086410989395,
						false
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9122352916616584,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						693860936050591,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								5,
								[
									20,
									14,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
								,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1454587437219008,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						7439878119481813,
						false
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8036643605589194,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						9170250302326367,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								6,
								[
									5,
									[
										20,
										14,
										cr.plugins_.Sprite.prototype.exps.X,
										false,
										null
									]
									,[
										20,
										35,
										cr.plugins_.Sprite.prototype.exps.X,
										false,
										null
									]
								]
								,[
									0,
									-1
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					true,
					null,
					9217612446026875,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8262192237683615,
						false
						,[
						[
							10,
							2
						]
,						[
							8,
							5
						]
,						[
							7,
							[
								0,
								400
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7821924204674042,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						56765011931615,
						false
						,[
						[
							1,
							[
								2,
								"Walk"
							]
						]
,						[
							3,
							1
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6516590517366399,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6937141383656102,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6528522437916144,
						false
						,[
						[
							10,
							2
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								400
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						263816158206796,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						50040156595016,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						9419136968383619,
						[
						[
							14,
							cr.plugins_.Sprite.prototype.cnds.CompareX,
							null,
							0,
							false,
							false,
							false,
							8768830665753611,
							false
							,[
							[
								8,
								2
							]
,							[
								0,
								[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
							]
							]
						]
						],
						[
						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							1082281641118373,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									2,
									"right"
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						2554179341306975,
						[
						[
							14,
							cr.plugins_.Sprite.prototype.cnds.CompareX,
							null,
							0,
							false,
							false,
							false,
							7267477179428401,
							false
							,[
							[
								8,
								4
							]
,							[
								0,
								[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
							]
							]
						]
						],
						[
						[
							14,
							cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
							null,
							4016913876685279,
							false
							,[
							[
								10,
								4
							]
,							[
								7,
								[
									2,
									"left"
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2047006383741574,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3470861947069018,
						false
						,[
						[
							10,
							2
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								400
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						9006311496652246,
						false
						,[
						[
							10,
							5
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						4895603798947059,
						false
						,[
						[
							1,
							[
								2,
								"Idle"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1809391198633916,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					3027874893479772,
					false
				]
,				[
					14,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1166800670173747,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1102007796763629,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1493059813116929,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						1544278001448859,
						false
						,[
						[
							10,
							3
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						5523949607029048,
						false
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetAnim,
						null,
						3519452923345504,
						false
						,[
						[
							1,
							[
								2,
								"Idle"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2314250621605269,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						849425518534498,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						6025070784629246,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.MoveForward,
						null,
						3689890312586044,
						false
						,[
						[
							0,
							[
								6,
								[
									0,
									-1
								]
								,[
									21,
									14,
									false,
									null
									,3
								]
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						8128049959317029,
						false
						,[
						[
							3,
							0
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5467667146861501,
					[
					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4689834150522981,
						false
						,[
						[
							10,
							4
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2584739138294064,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						14,
						cr.plugins_.Sprite.prototype.acts.MoveForward,
						null,
						5821374443368542,
						false
						,[
						[
							0,
							[
								6,
								[
									0,
									1
								]
								,[
									21,
									14,
									false,
									null
									,3
								]
							]
						]
						]
					]
,					[
						14,
						cr.plugins_.Sprite.prototype.acts.SetMirrored,
						null,
						3035205149719748,
						false
						,[
						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "Upgrades"],
			false,
			null,
			8595218547739602,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				8595218547739602,
				false
				,[
				[
					1,
					[
						2,
						"Upgrades"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9961367493582659,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2425018531337655,
					false
					,[
					[
						4,
						49
					]
					]
				]
				],
				[
				[
					49,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					6098125901875706,
					false
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					7976809280558629,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					2165995842488233,
					false
					,[
					[
						10,
						3
					]
,					[
						7,
						[
							21,
							35,
							false,
							null
							,6
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7187839833635242,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					5351186493758508,
					false
					,[
					[
						4,
						61
					]
					]
				]
				],
				[
				[
					61,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7656375439323783,
					false
				]
,				[
					83,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					6060362455997172,
					false
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					124485597793284,
					false
					,[
					[
						2,
						["lego gotg_sfx_generic collect item_2",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					6837364946331121,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							2500
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7547288802323194,
					false
					,[
					[
						10,
						10
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					33,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					2348830413265252,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "TouchControlls"],
			false,
			null,
			1942003184326101,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				1942003184326101,
				false
				,[
				[
					1,
					[
						2,
						"TouchControlls"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				4838540047677498,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					848983421532903,
					false
				]
				],
				[
				[
					52,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5829773750081466,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					53,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8271534311084877,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					51,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2770703840313733,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					54,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6809911722036064,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6950990550320202,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					2649394115999936,
					false
				]
				],
				[
				[
					52,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					975894171853777,
					false
				]
,				[
					53,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					488307887400613,
					false
				]
,				[
					51,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4277711862505684,
					false
				]
,				[
					54,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4721819395333854,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				840189986091638,
				[
				[
					55,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					false,
					false,
					8885448722119926,
					false
					,[
					[
						4,
						52
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					5153792527000025,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9445671822922315,
				[
				[
					55,
					cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
					null,
					0,
					false,
					false,
					false,
					9217074628178823,
					false
					,[
					[
						4,
						53
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SimulateControl,
					"Platform",
					4569055186060231,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			1,
			"Map",
			0,
			1,
false,false,6506822056063545,false
		]
,		[
			0,
			[true, "Map"],
			false,
			null,
			2629177310862363,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2629177310862363,
				false
				,[
				[
					1,
					[
						2,
						"Map"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				1208787555573202,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					920302231674797,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.TriggerOnce,
					null,
					0,
					false,
					false,
					false,
					7674050782419718,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayoutScale,
					null,
					222378904112807,
					false
					,[
					[
						0,
						[
							1,
							0.25
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					3380165603611284,
					false
					,[
					[
						5,
						[
							2,
							"HUD"
						]
					]
,					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8412813250906125,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				9772241288431824,
				[
				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					7253295527601241,
					false
					,[
					[
						4,
						27
					]
					]
				]
,				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					7819225446187551,
					false
					,[
					[
						9,
						49
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3715378416007241,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						7,
						[
							6,
							[
								23,
								"Map"
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3571713958855437,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6691565618566307,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.TriggerOnce,
					null,
					0,
					false,
					false,
					false,
					1545523453198495,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayoutScale,
					null,
					6057490593745131,
					false
					,[
					[
						0,
						[
							1,
							0.8
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					8639938794917366,
					false
					,[
					[
						5,
						[
							2,
							"HUD"
						]
					]
,					[
						0,
						[
							1,
							1.25
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1474491990079153,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "Collectables"],
			false,
			null,
			3328492354053045,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3328492354053045,
				false
				,[
				[
					1,
					[
						2,
						"Collectables"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				3294962208609296,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					5717163413927026,
					false
					,[
					[
						4,
						64
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8982582136818649,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					518630507698396,
					false
					,[
					[
						6,
						"HubWorld"
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					947944684308145,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					29,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8442638554371622,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					30,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8208792749845132,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4870647533634624,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
					null,
					0,
					false,
					false,
					false,
					6273653912548954,
					false
					,[
					[
						10,
						1
					]
					]
				]
,				[
					89,
					cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8702037658246017,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					6256051350948572,
					false
				]
				],
				[
				[
					89,
					cr.plugins_.Text.prototype.acts.AddInstanceVar,
					null,
					7068450290030308,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							21,
							89,
							false,
							null
							,2
						]
					]
					]
				]
,				[
					89,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					2495419293633556,
					false
					,[
					[
						7,
						[
							21,
							89,
							false,
							null
							,0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9989324896970433,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4356399018202729,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					91,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					347046175821286,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6179619769614994,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3555172204305764,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					92,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					1584882648565844,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1104994707954855,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					673592882363311,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					93,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9245258530723757,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7192670753921734,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
					null,
					0,
					false,
					false,
					false,
					4760181537680941,
					false
					,[
					[
						10,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.Every,
					null,
					0,
					false,
					false,
					false,
					7648059251035857,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					89,
					cr.plugins_.Text.prototype.acts.AddInstanceVar,
					null,
					793911235605525,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7141932663538652,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					44076220474248,
					false
					,[
					[
						4,
						64
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6658762675362808,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						8,
						3
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					29,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					7320597333850466,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					30,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6023325308423556,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					6284304300790829,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					89,
					cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
					null,
					8223057461034263,
					false
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2853364320274811,
					false
					,[
					[
						2,
						["lego gotg_sfx_win sound_1",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5516131671033268,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					29,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					7032184086822676,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					30,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3101460439959067,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					29,
					cr.behaviors.Fade.prototype.acts.RestartFade,
					"Fade",
					45005501271316,
					false
				]
,				[
					30,
					cr.behaviors.Fade.prototype.acts.RestartFade,
					"Fade",
					7456761807836561,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7571621814745653,
				[
				[
					89,
					cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7045498374130883,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
				],
				[
				[
					89,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					5308936600775726,
					false
					,[
					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9437072056616154,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					1605455410515915,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
,					[
						3,
						0
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4582959918478165,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2222969135767891,
						false
						,[
						[
							11,
							"CharacterDrax"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5678303058245132,
						false
						,[
						[
							11,
							"PlayIntro"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2875608142430576,
						false
						,[
						[
							11,
							"DraxComplete"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayout,
						null,
						494692485358681,
						false
						,[
						[
							6,
							"HubWorld"
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						1299338264481727,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4713968817176724,
							false
							,[
							[
								11,
								"level1Score"
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									23,
									"level1HighScore"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							8286426687701187,
							false
							,[
							[
								11,
								"level1HighScore"
							]
,							[
								7,
								[
									23,
									"level1Score"
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4719424395492172,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9289089111629708,
						false
						,[
						[
							11,
							"CharacterGamora"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						9496248467314959,
						false
						,[
						[
							11,
							"PlayIntro"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						7729391970411864,
						false
						,[
						[
							11,
							"GamoraComplete"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayout,
						null,
						7310955370068516,
						false
						,[
						[
							6,
							"HubWorld"
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						9993424978257201,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8188319393014253,
							false
							,[
							[
								11,
								"level1Score"
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									23,
									"level3HighScore"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							7515790679955967,
							false
							,[
							[
								11,
								"level3HighScore"
							]
,							[
								7,
								[
									23,
									"level1Score"
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5336684436066721,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2699946645540002,
						false
						,[
						[
							11,
							"CharacterRocket"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						6160037875189785,
						false
						,[
						[
							11,
							"PlayIntro"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						649130164163668,
						false
						,[
						[
							11,
							"RocketComplete"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayout,
						null,
						4292690415335937,
						false
						,[
						[
							6,
							"HubWorld"
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						5509648577380276,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							1515071448513936,
							false
							,[
							[
								11,
								"level1Score"
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									23,
									"level2HighScore"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4505948552455659,
							false
							,[
							[
								11,
								"level2HighScore"
							]
,							[
								7,
								[
									23,
									"level1Score"
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					7164049887020471,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4278055189642097,
						false
						,[
						[
							11,
							"CharacterStarlord"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						507720887058066,
						false
						,[
						[
							11,
							"PlayIntro"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						988442681617721,
						false
						,[
						[
							11,
							"StarlordComplete"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayout,
						null,
						3870113642732838,
						false
						,[
						[
							6,
							"HubWorld"
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						2568999160754622,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4696479477933997,
							false
							,[
							[
								11,
								"level1Score"
							]
,							[
								8,
								4
							]
,							[
								7,
								[
									23,
									"level4HighScore"
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4298669565636168,
							false
							,[
							[
								11,
								"level4HighScore"
							]
,							[
								7,
								[
									23,
									"level1Score"
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2116743319594573,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					8210114185557529,
					false
					,[
					[
						4,
						73
					]
					]
				]
				],
				[
				[
					73,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					562235163519823,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9824950936396226,
					false
					,[
					[
						2,
						["lego gotg_sfx_coin collect_1",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					73,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					2497294612423006,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					5556182778677938,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							100
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3935747059478178,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					73,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					6113813799799606,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5068055609358481,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					4458479094990576,
					false
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					6899702439527459,
					[
					[
						73,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8105246776999159,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6728414580333959,
						false
						,[
						[
							11,
							"Pause"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						73,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						6934563558527083,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									73,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									35,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.01
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									73,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									5,
									[
										20,
										35,
										cr.plugins_.Sprite.prototype.exps.Y,
										false,
										null
									]
									,[
										0,
										1000
									]
								]
,[
									1,
									0.01
								]
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4787031581901321,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					7563413580342449,
					false
					,[
					[
						4,
						83
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					2869626717675348,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9780098708795212,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					61,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					5561612075598568,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					119,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5966215961317894,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					119,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					8034111109923994,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					83,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					412157776184002,
					false
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7457294611637209,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					7237247653412036,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					9958451193958526,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					2278863022003808,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1912836832503132,
				[
				[
					79,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					3441669591355348,
					false
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				null,
				7746731407016127,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2010431925468768,
					false
					,[
					[
						4,
						79
					]
					]
				]
				],
				[
				[
					6,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					3172937751178673,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					79,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4881288269918573,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					7510595400060278,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							2500
						]
					]
					]
				]
,				[
					133,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3639760490415233,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					133,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5340445978447317,
					false
					,[
					[
						1,
						[
							2,
							"Free"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					979499461939239,
					false
					,[
					[
						2,
						["lego gotg_sfx_generic collect item_2",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4300056463287053,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					31,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					4492802733519049,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					31,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					7609156185572674,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8869070637920974,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					5171111430975208,
					false
					,[
					[
						2,
						["lego gotg_sfx_gate deactivate_1",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					120,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3825219027150589,
					false
					,[
					[
						1,
						[
							2,
							"Open"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					120,
					cr.behaviors.solid.prototype.acts.SetEnabled,
					"Solid",
					797164730778146,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					268147269992048,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					9163520172147417,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					8243157570775347,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					97,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					2557288705248482,
					false
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "Boss1"],
			false,
			null,
			1020630065254576,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				1020630065254576,
				false
				,[
				[
					1,
					[
						2,
						"Boss1"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6522534387760468,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished,
					null,
					1,
					false,
					false,
					false,
					3934816406981996,
					false
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8781081145277947,
					false
					,[
					[
						1,
						[
							2,
							"Idle"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1047750338152233,
				[
				[
					87,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					9594847876292138,
					false
					,[
					[
						4,
						15
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					2232160117977721,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9876900765415597,
					false
					,[
					[
						2,
						["lego gotg_sfx_enemy hit",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					8216131626719566,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					4928932730193744,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					4285207785683443,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					1928680167732428,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7523396322763231,
					false
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2766437000160982,
					false
					,[
					[
						0,
						[
							1,
							0.55
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9400877729875572,
					false
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					6586499305131784,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					974054304952448,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					152179213259759,
					false
					,[
					[
						0,
						[
							1,
							0.25
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					6674077738878343,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					46417515990328,
					false
					,[
					[
						0,
						[
							1,
							0.25
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					5446938867981986,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8556608770893514,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
					null,
					0,
					false,
					false,
					false,
					2656815279666309,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayoutScale,
					null,
					8301161432126577,
					false
					,[
					[
						0,
						[
							1,
							0.6
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerScale,
					null,
					9561487733263589,
					false
					,[
					[
						5,
						[
							2,
							"HUD"
						]
					]
,					[
						0,
						[
							1,
							1.67
						]
					]
					]
				]
,				[
					79,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4735687068855932,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					79,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					8650241640082421,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					1811048701661792,
					false
					,[
					[
						1,
						[
							2,
							"Boss"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					7,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9118186661668092,
					false
					,[
					[
						1,
						[
							2,
							"Boss"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7564729807515982,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					1743190232402788,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							20,
							35,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					3721672081916625,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2433134836353388,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareX,
					null,
					0,
					false,
					false,
					false,
					5736251150309708,
					false
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							20,
							35,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					4184810944977728,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5385188234084869,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					3005920960048201,
					false
				]
,				[
					-1,
					cr.system_object.prototype.cnds.PickNth,
					null,
					0,
					false,
					false,
					false,
					8569022852075389,
					false
					,[
					[
						4,
						85
					]
,					[
						0,
						[
							21,
							15,
							false,
							null
							,6
						]
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					8757517136767373,
					false
					,[
					[
						0,
						[
							19,
							cr.system_object.prototype.exps.lerp
							,[
[
								20,
								15,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
,[
								20,
								85,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
,[
								1,
								0.05
							]
							]
						]
					]
,					[
						0,
						[
							19,
							cr.system_object.prototype.exps.lerp
							,[
[
								20,
								15,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
,[
								20,
								85,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
,[
								1,
								0.1
							]
							]
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					9512217888503014,
					false
					,[
					[
						0,
						[
							21,
							15,
							false,
							null
							,0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9084777447505662,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Every,
					null,
					0,
					false,
					false,
					false,
					7672957989077793,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					7817312284688567,
					false
					,[
					[
						4,
						85
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					1599328235874072,
					false
					,[
					[
						8,
						2
					]
,					[
						0,
						[
							4,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								100
							]
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareY,
					null,
					0,
					false,
					false,
					false,
					7655096271741045,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							5,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								100
							]
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					0,
					false,
					true,
					false,
					8870494628939096,
					false
					,[
					[
						10,
						7
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8359616822689047,
					false
					,[
					[
						1,
						[
							2,
							"Shoot"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3403201284005013,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					426073514843745,
					false
					,[
					[
						4,
						6
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4649440621907522,
					[
					[
						15,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						5023178359505068,
						false
						,[
						[
							8,
							4
						]
,						[
							0,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
						]
					]
					],
					[
					[
						6,
						cr.behaviors.Bullet.prototype.acts.SetSpeed,
						"Bullet",
						7652479081743194,
						false
						,[
						[
							0,
							[
								0,
								-800
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4261612937522275,
					[
					[
						15,
						cr.plugins_.Sprite.prototype.cnds.CompareX,
						null,
						0,
						false,
						false,
						false,
						5371897617572508,
						false
						,[
						[
							8,
							2
						]
,						[
							0,
							[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
						]
					]
					],
					[
					[
						6,
						cr.behaviors.Bullet.prototype.acts.SetSpeed,
						"Bullet",
						6766085524890143,
						false
						,[
						[
							0,
							[
								0,
								800
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6343892903139075,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					818624324176717,
					false
					,[
					[
						4,
						152
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					6243208190057764,
					false
					,[
					[
						10,
						7
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					8534445729319871,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					21,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					2982824778584354,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					8011920009083688,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					4734749025463463,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					152,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					842950805335659,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					277241022194158,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						7,
						[
							0,
							200
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2512693315593638,
					false
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1652277578756678,
					false
					,[
					[
						0,
						[
							1,
							0.55
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7242461675816726,
					false
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					9548626432439554,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					2904704208412531,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5278510541019596,
					false
					,[
					[
						0,
						[
							1,
							0.25
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					9940513792546913,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5420884965721774,
					false
					,[
					[
						0,
						[
							1,
							0.25
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					9550486219555736,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					8987612316003352,
					false
					,[
					[
						10,
						7
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8240238508664327,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9259762123079315,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3132050917081622,
					false
					,[
					[
						1,
						[
							2,
							"Die"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					125,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2715576723503846,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					125,
					cr.behaviors.Fade.prototype.acts.RestartFade,
					"Fade",
					2611032415267171,
					false
				]
,				[
					125,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					1962470786580463,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1310822836064052,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3783236636173475,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5801541625801256,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9075198752349599,
					false
					,[
					[
						10,
						6
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							18
						]
					]
					]
				]
				],
				[
				[
					15,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5817923614393051,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				9234442836171177,
				[
				[
					15,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					6583947820208453,
					false
					,[
					[
						4,
						35
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					5099737447749912,
					false
					,[
					[
						4,
						14
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7224818682654263,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3922678205580686,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"left"
							]
						]
						]
					]
					],
					[
					[
						24,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						5036701113749577,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.RotateClockwise,
						null,
						678816616452968,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						3715102791050403,
						false
						,[
						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						9906442434454212,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						150,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash2",
						2183064902121926,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6263307294177269,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						6,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						4103170059399458,
						false
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						1904733535450904,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						6377200259718668,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						9390484912720855,
						false
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						7273818106400672,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						3083669936124527,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					987945864920918,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						8805015036074541,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"right"
							]
						]
						]
					]
					],
					[
					[
						24,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash",
						3617063914519988,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						150,
						cr.plugins_.Sprite.prototype.acts.RotateClockwise,
						null,
						9534592871505475,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorX,
						"Platform",
						8503225063951493,
						false
						,[
						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						453198001809613,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						150,
						cr.behaviors.Flash.prototype.acts.Flash,
						"Flash2",
						1994646812617924,
						false
						,[
						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								0.1
							]
						]
,						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						2715769042840774,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						6,
						cr.plugins_.Sprite.prototype.acts.Destroy,
						null,
						2405606377439683,
						false
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						1060162027151048,
						false
						,[
						[
							10,
							2
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						5762044117620241,
						false
						,[
						[
							3,
							1
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						6264904095594615,
						false
						,[
						[
							0,
							[
								1,
								1
							]
						]
						]
					]
,					[
						35,
						cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
						"Platform",
						4090105387446577,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						7302906149550404,
						false
						,[
						[
							10,
							11
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7013668713569666,
			[
			[
				87,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3020138756048857,
				false
				,[
				[
					4,
					14
				]
				]
			]
			],
			[
			[
				35,
				cr.behaviors.Platform.prototype.acts.SetVectorY,
				"Platform",
				5902573942605914,
				false
				,[
				[
					0,
					[
						0,
						-500
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				9812067975851893,
				false
				,[
				[
					2,
					["lego gotg_sfx_enemy hit",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
				null,
				4916094431799072,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				9983312926264193,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				6793861440264783,
				false
				,[
				[
					1,
					[
						2,
						"Death"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				8606109425141739,
				false
				,[
				[
					11,
					"level1Score"
				]
,				[
					7,
					[
						0,
						1000
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1059117074098512,
				false
				,[
				[
					0,
					[
						1,
						1.3
					]
				]
				]
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				8232672493646034,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2140967204633964,
			[
			[
				97,
				cr.plugins_.Sprite.prototype.cnds.OnCreated,
				null,
				1,
				false,
				false,
				false,
				5356172015981504,
				false
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			null,
			5588696807682191,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				7250500385506361,
				false
			]
,			[
				97,
				cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				5170694616335967,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1138061650839829,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				97,
				cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
				null,
				4506583896017536,
				false
				,[
				[
					0,
					[
						0,
						90
					]
				]
,				[
					0,
					[
						21,
						97,
						false,
						null
						,0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6205824445523043,
			[
			[
				97,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3593521310041116,
				false
				,[
				[
					4,
					48
				]
				]
			]
			],
			[
			[
				48,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				2393855350538389,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				97,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				7120703553326371,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						6,
						[
							21,
							97,
							false,
							null
							,0
						]
						,[
							0,
							-1
						]
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				5054129830204032,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				48,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				4423161041920588,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2687318537638857,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				6208078697300508,
				false
				,[
				[
					4,
					105
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				5547818282428557,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				105,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				4727499355045377,
				false
				,[
				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				4931334961265983,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				105,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				5109868030198094,
				false
				,[
				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1774742425819524,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				105,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				4824626756592586,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				105,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				6079270363332019,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				2472298186850147,
				false
				,[
				[
					0,
					[
						0,
						3
					]
				]
				]
			]
,			[
				105,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				8187158924221008,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				105,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				2926341036274193,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9370935724375333,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlappingOffset,
				null,
				0,
				false,
				false,
				false,
				5083988604618896,
				false
				,[
				[
					4,
					116
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						30
					]
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9102868036547597,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				7197962302484047,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6080078883517589,
				[
				[
					116,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					6859153761073149,
					false
					,[
					[
						4,
						117
					]
					]
				]
				],
				[
				[
					116,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					2375653663932523,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				451982995835423,
				[
				[
					116,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					true,
					false,
					8366201955868308,
					false
					,[
					[
						4,
						117
					]
					]
				]
				],
				[
				[
					116,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					4880826375816454,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							5
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3533763018212236,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlappingOffset,
				null,
				0,
				false,
				true,
				false,
				1773044137959462,
				false
				,[
				[
					4,
					116
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						30
					]
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9094430761820642,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1314437978382364,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7806983878196053,
				[
				[
					116,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					8185636148035071,
					false
					,[
					[
						4,
						118
					]
					]
				]
				],
				[
				[
					116,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					4400787224184068,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2726895988847885,
				[
				[
					116,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					true,
					false,
					206525278405379,
					false
					,[
					[
						4,
						118
					]
					]
				]
				],
				[
				[
					116,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					3275480549953977,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							-5
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5285761993359037,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlappingOffset,
				null,
				0,
				false,
				false,
				false,
				3331475600677932,
				false
				,[
				[
					4,
					114
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						30
					]
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4327328654522609,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				90326313735897,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				230934889557522,
				[
				[
					114,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					3145036774688182,
					false
					,[
					[
						4,
						115
					]
					]
				]
				],
				[
				[
					114,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					1912137078462733,
					false
					,[
					[
						0,
						[
							0,
							270
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2588179642058083,
				[
				[
					114,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					true,
					false,
					32622440478163,
					false
					,[
					[
						4,
						115
					]
					]
				]
				],
				[
				[
					114,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					8949304800080641,
					false
					,[
					[
						0,
						[
							0,
							270
						]
					]
,					[
						0,
						[
							0,
							5
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9587208472466931,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlappingOffset,
				null,
				0,
				false,
				true,
				false,
				7611065490935042,
				false
				,[
				[
					4,
					114
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						30
					]
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4018389594097811,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				9615851217233984,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9252705630709224,
				[
				[
					114,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					6814009346000024,
					false
					,[
					[
						4,
						48
					]
					]
				]
				],
				[
				[
					114,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					5667227266502121,
					false
					,[
					[
						0,
						[
							0,
							270
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6353113471198473,
				[
				[
					114,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					true,
					false,
					3683040613010266,
					false
					,[
					[
						4,
						48
					]
					]
				]
				],
				[
				[
					114,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					3926257488607512,
					false
					,[
					[
						0,
						[
							0,
							270
						]
					]
,					[
						0,
						[
							0,
							-5
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			297741171567977,
			[
			[
				114,
				cr.plugins_.Sprite.prototype.cnds.OnCreated,
				null,
				1,
				false,
				false,
				false,
				9979994232697062,
				false
			]
			],
			[
			[
				114,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				1395953668233729,
				false
				,[
				[
					10,
					1
				]
,				[
					7,
					[
						20,
						114,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7325644876195461,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9422628786793758,
				false
				,[
				[
					4,
					119
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9974907967578723,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				4801816015206179,
				false
				,[
				[
					2,
					["lego gotg_sfx_gate deactivate_1",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				119,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				9049567990742817,
				false
				,[
				[
					1,
					[
						2,
						"On"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				511884017520007,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				114,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2636954955219224,
				false
				,[
				[
					1,
					[
						2,
						"On"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				116,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				830592644273466,
				false
				,[
				[
					1,
					[
						2,
						"On"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3719903036119421,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6750170328712749,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				602252628834113,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				145,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				5337044018661486,
				false
				,[
				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				9662795217937482,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				145,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				2785106904314135,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				704487764503315,
				false
				,[
				[
					0,
					[
						0,
						2
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				4973212456509185,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5477042780395205,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				890820722855675,
				false
				,[
				[
					4,
					125
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				732144976987214,
				false
				,[
				[
					6,
					"BossLevel2"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6314821395966935,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				6502882395783989,
				false
				,[
				[
					4,
					127
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2896876791744318,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					9366280006428924,
					false
				]
				],
				[
				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					787051184997815,
					false
					,[
					[
						1,
						[
							2,
							"Right"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2656565561946483,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2819207466793611,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8726146076884119,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3373063599279882,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6235936163448152,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3188903943473498,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					5852015309383184,
					false
				]
				],
				[
				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5084860805967295,
					false
					,[
					[
						1,
						[
							2,
							"Right"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9826137434381644,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4644304457990743,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8118133522229062,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					1492654238496056,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					775239306144489,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2549880374111133,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				8433949402391296,
				false
				,[
				[
					4,
					128
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2701922310169467,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					9907880851947092,
					false
				]
				],
				[
				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6485798076520895,
					false
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3343437981860499,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					521733258110452,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5122541173536822,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5316622281229659,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2940781887002633,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6368136356601597,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					9968669409345192,
					false
				]
				],
				[
				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6072329674409379,
					false
					,[
					[
						1,
						[
							2,
							"Jump"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6916968210527846,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8108035194247389,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5254949458553794,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					436840093606907,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4040743153643196,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2821689656906745,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				9239616583161763,
				false
				,[
				[
					4,
					129
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2336877684247994,
				false
				,[
				[
					10,
					10
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2350298403975574,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					false,
					false,
					5866633189101072,
					false
				]
				],
				[
				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6169828662182042,
					false
					,[
					[
						1,
						[
							2,
							"Fire"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5813743481137684,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5165950081810854,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1533694833366057,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3920509267966615,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					141,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4583012920224022,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4366149271518725,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					5036209120640299,
					false
				]
				],
				[
				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9834521904864767,
					false
					,[
					[
						1,
						[
							2,
							"Fire"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2792908323956894,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2774149835837689,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3230312958329051,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					126,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2469794776551149,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					130,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6851274010489426,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			993127244798381,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2821737594274624,
				false
				,[
				[
					10,
					10
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				9627647113856034,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5702634811895069,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2967227278866226,
				false
				,[
				[
					10,
					10
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				33,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				4887258938680855,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4287441226747549,
			[
			[
				133,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				1739550593611874,
				false
				,[
				[
					1,
					[
						2,
						"Free"
					]
				]
				]
			]
			],
			[
			[
				133,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5545377411599292,
				false
				,[
				[
					1,
					[
						2,
						"Dance1"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6420572776970301,
			[
			[
				133,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				9102475405341306,
				false
				,[
				[
					1,
					[
						2,
						"Dance1"
					]
				]
				]
			]
			],
			[
			[
				133,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2781447167111154,
				false
				,[
				[
					1,
					[
						2,
						"Dance12"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2156255256670235,
			[
			[
				133,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				3149919520007776,
				false
				,[
				[
					1,
					[
						2,
						"Dance12"
					]
				]
				]
			]
			],
			[
			[
				133,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				1905343859462708,
				false
				,[
				[
					1,
					[
						2,
						"Dance2"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2090792951415217,
			[
			[
				133,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				2337355340542915,
				false
				,[
				[
					1,
					[
						2,
						"Dance2"
					]
				]
				]
			]
			],
			[
			[
				133,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				313092937001377,
				false
				,[
				[
					1,
					[
						2,
						"Dance21"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1886711894991952,
			[
			[
				133,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				2885725035335721,
				false
				,[
				[
					1,
					[
						2,
						"Dance21"
					]
				]
				]
			]
			],
			[
			[
				133,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				6034695644589886,
				false
				,[
				[
					1,
					[
						2,
						"Dance1"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			[true, "HUD"],
			false,
			null,
			8349655092773096,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				8349655092773096,
				false
				,[
				[
					1,
					[
						2,
						"HUD"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				1337132674970733,
				[
				[
					38,
					cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
					null,
					1,
					false,
					false,
					false,
					7449518055717143,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
,					[
						4,
						22
					]
					]
				]
				],
				[
				[
					90,
					cr.plugins_.Audio.prototype.acts.SetSilent,
					null,
					7085837379484074,
					false
					,[
					[
						3,
						2
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3069432560215693,
					false
					,[
					[
						11,
						"Mute"
					]
,					[
						7,
						[
							6,
							[
								23,
								"Mute"
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					3351309203674846,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4529921432489226,
						false
						,[
						[
							11,
							"Mute"
						]
,						[
							8,
							2
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						3971448429659112,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3675695726248619,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5640862981214771,
						false
						,[
						[
							11,
							"Mute"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						22,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6774546386500775,
						false
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1701316994137585,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8542454348565423,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					28,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					4453068601881262,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					3049516101694574,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3172578243192541,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					26,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					7071828541533943,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6958398259864936,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7231356715711094,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					28,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					2669096412440745,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					636397218619962,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8200478044779045,
					false
					,[
					[
						11,
						"Map"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.SetVolume,
					null,
					4385769725233679,
					false
					,[
					[
						1,
						[
							2,
							"bgm"
						]
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3436990237166647,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					26,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					7371300485678356,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3183277019628372,
				[
				[
					38,
					cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
					null,
					1,
					false,
					false,
					false,
					9949559402296869,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
,					[
						4,
						28
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5213408363009396,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						7,
						[
							6,
							[
								23,
								"Pause"
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.SetVolume,
					null,
					3153002910610671,
					false
					,[
					[
						1,
						[
							2,
							"bgm"
						]
					]
,					[
						0,
						[
							0,
							-30
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				3656501938180141,
				[
				[
					38,
					cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
					null,
					1,
					false,
					false,
					false,
					4902599221902069,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
,					[
						4,
						26
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					4416591780745537,
					false
					,[
					[
						4,
						26
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					9998154201665011,
					[
					[
						26,
						cr.plugins_.Sprite.prototype.cnds.IsVisible,
						null,
						0,
						false,
						false,
						false,
						6325571106686585,
						false
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4471950699574484,
						false
						,[
						[
							11,
							"Pause"
						]
,						[
							7,
							[
								0,
								-1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4838791384758299,
						false
						,[
						[
							11,
							"Training"
						]
,						[
							7,
							[
								0,
								-1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						9324023677831156,
						false
						,[
						[
							0,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						1525034602884793,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayoutByName,
						null,
						1873578799830603,
						false
						,[
						[
							1,
							[
								2,
								"HubWorld"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				696163619924077,
				[
				[
					38,
					cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
					null,
					1,
					false,
					false,
					false,
					3861883266362474,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
,					[
						4,
						29
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					8642669384722251,
					false
					,[
					[
						4,
						29
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					9853739409844473,
					[
					[
						-1,
						cr.system_object.prototype.cnds.LayerVisible,
						null,
						0,
						false,
						false,
						false,
						6597381061322067,
						false
						,[
						[
							5,
							[
								2,
								"Layer 2"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetLayerVisible,
						null,
						1420622491383609,
						false
						,[
						[
							5,
							[
								2,
								"Layer 2"
							]
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.RestartLayout,
						null,
						1249245571358181,
						false
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				663171550720648,
				[
				[
					38,
					cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
					null,
					1,
					false,
					false,
					false,
					3729048903432853,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
,					[
						4,
						30
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					2400980104447867,
					false
					,[
					[
						4,
						30
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7440620381216239,
					[
					[
						-1,
						cr.system_object.prototype.cnds.LayerVisible,
						null,
						0,
						false,
						false,
						false,
						5495335575493155,
						false
						,[
						[
							5,
							[
								2,
								"Layer 2"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetLayerVisible,
						null,
						1258579669295624,
						false
						,[
						[
							5,
							[
								2,
								"Layer 2"
							]
						]
,						[
							3,
							0
						]
						]
					]
					]
					,[
					[
						0,
						null,
						false,
						null,
						5812397308169624,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3498443984612661,
							false
							,[
							[
								11,
								"CharacterDrax"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2776334231836732,
							false
							,[
							[
								11,
								"PlayIntro"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							885863047162244,
							false
							,[
							[
								11,
								"DraxComplete"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.GoToLayout,
							null,
							8232190481470743,
							false
							,[
							[
								6,
								"HubWorld"
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							3121833162036767,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								2586565471281175,
								false
								,[
								[
									11,
									"level1Score"
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										23,
										"level1HighScore"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.SetVar,
								null,
								3400039377327848,
								false
								,[
								[
									11,
									"level1HighScore"
								]
,								[
									7,
									[
										23,
										"level1Score"
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						7427086899921604,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							4700307767144941,
							false
							,[
							[
								11,
								"CharacterGamora"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							5994873081988618,
							false
							,[
							[
								11,
								"PlayIntro"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6860230691543199,
							false
							,[
							[
								11,
								"GamoraComplete"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.GoToLayout,
							null,
							3583858652649409,
							false
							,[
							[
								6,
								"HubWorld"
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							4106141742066581,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								6260950623183938,
								false
								,[
								[
									11,
									"level1Score"
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										23,
										"level3HighScore"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.SetVar,
								null,
								8717725226792031,
								false
								,[
								[
									11,
									"level3HighScore"
								]
,								[
									7,
									[
										23,
										"level1Score"
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						1888362251529254,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							3408229426231419,
							false
							,[
							[
								11,
								"CharacterRocket"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6838664758858774,
							false
							,[
							[
								11,
								"PlayIntro"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							7036627471561709,
							false
							,[
							[
								11,
								"RocketComplete"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.GoToLayout,
							null,
							8673438964205182,
							false
							,[
							[
								6,
								"HubWorld"
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							4108363591972501,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								8591020381304921,
								false
								,[
								[
									11,
									"level1Score"
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										23,
										"level2HighScore"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.SetVar,
								null,
								5752670495967625,
								false
								,[
								[
									11,
									"level2HighScore"
								]
,								[
									7,
									[
										23,
										"level1Score"
									]
								]
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						4168018093879545,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							8418069270140376,
							false
							,[
							[
								11,
								"CharacterStarlord"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							2924597762545779,
							false
							,[
							[
								11,
								"PlayIntro"
							]
,							[
								7,
								[
									0,
									0
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							1795806528665833,
							false
							,[
							[
								11,
								"StarlordComplete"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.GoToLayout,
							null,
							6850351666894408,
							false
							,[
							[
								6,
								"HubWorld"
							]
							]
						]
						]
						,[
						[
							0,
							null,
							false,
							null,
							6910038756132946,
							[
							[
								-1,
								cr.system_object.prototype.cnds.CompareVar,
								null,
								0,
								false,
								false,
								false,
								3901361595627596,
								false
								,[
								[
									11,
									"level1Score"
								]
,								[
									8,
									4
								]
,								[
									7,
									[
										23,
										"level4HighScore"
									]
								]
								]
							]
							],
							[
							[
								-1,
								cr.system_object.prototype.acts.SetVar,
								null,
								6350292172595539,
								false
								,[
								[
									11,
									"level4HighScore"
								]
,								[
									7,
									[
										23,
										"level1Score"
									]
								]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			842273656900552,
			[
			[
				8,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				1792037036713379,
				false
				,[
				[
					4,
					35
				]
				]
			]
			],
			[
			[
				8,
				cr.plugins_.Sprite.prototype.acts.Spawn,
				null,
				3275730946288042,
				false
				,[
				[
					4,
					101
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				8,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				1065399028933608,
				false
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				8196953965236821,
				false
				,[
				[
					2,
					["lego gotg_sfx_gun shot_1",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				3499315278123524,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4748357081857759,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				],
				[
				[
					24,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					6226535477743395,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.RotateClockwise,
					null,
					5994210222367053,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorX,
					"Platform",
					6612612192222944,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					927999166128317,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					150,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash2",
					7722583335410591,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1556833095964763,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					4592675835314373,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					4759028534099202,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					6113630977262365,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					6788124498420672,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3137085426788919,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8609103805412984,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4606206720465014,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				],
				[
				[
					24,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					5229457659679979,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.RotateClockwise,
					null,
					52032608938932,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorX,
					"Platform",
					3926359278744637,
					false
					,[
					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					45827640973997,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					150,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash2",
					7334374641886376,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4564028169997283,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					3558158471128603,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					8907928834683708,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					4939570656895529,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					9986498878750837,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					148745553757466,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6686346652306903,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3372648919317999,
				false
				,[
				[
					11,
					"Dead"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				6376765508817134,
				false
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				2323661799224732,
				false
				,[
				[
					11,
					"greyscale"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						100
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				9598752093946697,
				false
				,[
				[
					11,
					"greyscale"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6920369044116727,
			[
			[
				59,
				cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying,
				null,
				0,
				false,
				false,
				false,
				676038389928748,
				false
				,[
				[
					1,
					[
						2,
						"Hit"
					]
				]
				]
			]
,			[
				59,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				6749287971288437,
				false
				,[
				[
					4,
					106
				]
				]
			]
,			[
				59,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				9075856959451654,
				false
				,[
				[
					4,
					108
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				3688489689298162,
				false
			]
			],
			[
			[
				106,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				9673212211327782,
				false
				,[
				[
					1,
					[
						2,
						"break"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				108,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2311060304236289,
				false
				,[
				[
					1,
					[
						2,
						"break"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2592239394626018,
			[
			[
				14,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				9510970912322959,
				false
				,[
				[
					1,
					[
						2,
						"Death"
					]
				]
				]
			]
			],
			[
			[
				14,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				193855689805077,
				false
			]
			]
		]
		]
	]
,	[
		"GlobalVariables",
		[
		[
			1,
			"CharactersUnlocked",
			0,
			4,
false,false,5342810214366294,false
		]
,		[
			1,
			"Pause",
			0,
			-1,
false,false,3187744780551646,false
		]
,		[
			1,
			"Mute",
			0,
			-1,
false,false,2341998377660087,false
		]
,		[
			1,
			"TotalScore",
			0,
			0,
false,false,3897061607644613,false
		]
,		[
			1,
			"level1Score",
			0,
			0,
false,false,3496377114803232,false
		]
,		[
			1,
			"level2Score",
			0,
			0,
false,false,5180913987650614,false
		]
,		[
			1,
			"level3Score",
			0,
			0,
false,false,7627389519872302,false
		]
,		[
			1,
			"level4Score",
			0,
			0,
false,false,7761696551823859,false
		]
,		[
			1,
			"level1HighScore",
			0,
			0,
false,false,2719140092406074,false
		]
,		[
			1,
			"level2HighScore",
			0,
			0,
false,false,7718178819853451,false
		]
,		[
			1,
			"level3HighScore",
			0,
			0,
false,false,8274804495661532,false
		]
,		[
			1,
			"level4HighScore",
			0,
			0,
false,false,6264262050308682,false
		]
,		[
			1,
			"level5HighScore",
			0,
			0,
false,false,9296247555061222,false
		]
,		[
			1,
			"PlayIntro",
			0,
			1,
false,false,1670677833055207,false
		]
,		[
			1,
			"DraxComplete",
			0,
			0,
false,false,4688830041001087,false
		]
,		[
			1,
			"GamoraComplete",
			0,
			0,
false,false,2708635778864517,false
		]
,		[
			1,
			"RocketComplete",
			0,
			0,
false,false,1485746772470856,false
		]
,		[
			1,
			"StarlordComplete",
			0,
			0,
false,false,4948774725564531,false
		]
,		[
			0,
			[true, "Variables"],
			false,
			null,
			5599060225477554,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				5599060225477554,
				false
				,[
				[
					1,
					[
						2,
						"Variables"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			1,
			"Training",
			0,
			1,
false,false,3434196823855982,false
		]
,		[
			1,
			"CharacterDrax",
			0,
			0,
false,false,3422760488319112,false
		]
,		[
			1,
			"CharacterGamora",
			0,
			0,
false,false,8469321823791492,false
		]
,		[
			1,
			"CharacterRocket",
			0,
			0,
false,false,2770597571472314,false
		]
,		[
			1,
			"CharacterStarlord",
			0,
			0,
false,false,9163450776578284,false
		]
,		[
			1,
			"Training_DoubleJump",
			0,
			1,
false,false,5283736333171768,false
		]
,		[
			0,
			[true, "CharacterStats"],
			false,
			null,
			3615062546860241,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3615062546860241,
				false
				,[
				[
					1,
					[
						2,
						"CharacterStats"
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			1,
			"DraxJumpCount",
			0,
			1,
false,false,7514337227548548,false
		]
,		[
			1,
			"DraxWeaponPower",
			0,
			1,
false,false,4424052239401973,false
		]
,		[
			1,
			"DraxWeaponTime",
			0,
			0.3,
false,false,9439565864164529,false
		]
,		[
			1,
			"RocketJumpCount",
			0,
			1,
false,false,1381537690373586,false
		]
,		[
			1,
			"RocketWeaponPower",
			0,
			0,
false,false,5859111402447512,false
		]
,		[
			1,
			"RocketWeaponTime",
			0,
			0.1,
false,false,1767967135790243,false
		]
,		[
			1,
			"GamoraJumpCount",
			0,
			1,
false,false,9470975413329961,false
		]
,		[
			1,
			"GamoraWeaponPower",
			0,
			0,
false,false,122107103831517,false
		]
,		[
			1,
			"GamoraWeaponTime",
			0,
			0.3,
false,false,5928971036507783,false
		]
,		[
			1,
			"StarlordJumpCount",
			0,
			1,
false,false,3021649177049497,false
		]
,		[
			1,
			"StarlordWeaponPower",
			0,
			1,
false,false,7083795389218861,false
		]
,		[
			1,
			"StarlordWeaponTime",
			0,
			0.2,
false,false,737367894387632,false
		]
		]
	]
,	[
		"HubWorld",
		[
		[
			0,
			null,
			true,
			null,
			4625951584001251,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				205535078522089,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					56
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				9626569842729208,
				false
				,[
				[
					4,
					56
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8000558441178172,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5928110904592157,
				false
				,[
				[
					11,
					"CharacterDrax"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5413954086032222,
				false
				,[
				[
					11,
					"CharacterRocket"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7381632752766733,
				false
				,[
				[
					11,
					"CharacterGamora"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1778984785118455,
				false
				,[
				[
					11,
					"CharacterStarlord"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2674875989763112,
				false
				,[
				[
					5,
					[
						2,
						"levelintro"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				4410596328669857,
				false
				,[
				[
					6,
					"level1_"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			2635012687499071,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				4056260939778367,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					57
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				5294492977992278,
				false
				,[
				[
					4,
					57
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5412741459174548,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2796482773464575,
				false
				,[
				[
					11,
					"CharacterRocket"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9412927063520322,
				false
				,[
				[
					11,
					"CharacterDrax"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2345939653713294,
				false
				,[
				[
					11,
					"CharacterGamora"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7690445957436993,
				false
				,[
				[
					11,
					"CharacterStarlord"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				346239739446081,
				false
				,[
				[
					5,
					[
						2,
						"levelintro"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				1364374229902904,
				false
				,[
				[
					6,
					"Level4"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			7135229900489496,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				224735963203002,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					58
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				9788763521328658,
				false
				,[
				[
					4,
					58
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4923743569661032,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4176851803100437,
				false
				,[
				[
					11,
					"CharacterGamora"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3040019086066676,
				false
				,[
				[
					11,
					"CharacterDrax"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4231465150677509,
				false
				,[
				[
					11,
					"CharacterRocket"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1813097738001452,
				false
				,[
				[
					11,
					"CharacterStarlord"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2210117041444584,
				false
				,[
				[
					5,
					[
						2,
						"levelintro"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				6248064259363886,
				false
				,[
				[
					6,
					"Level3"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			306796845873894,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				8078700796442387,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					69
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				508537381681808,
				false
				,[
				[
					4,
					69
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				314879422776846,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2573072592728106,
				false
				,[
				[
					11,
					"CharacterGamora"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2914399992483815,
				false
				,[
				[
					11,
					"CharacterDrax"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				5736398453271093,
				false
				,[
				[
					11,
					"CharacterRocket"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3379351764327262,
				false
				,[
				[
					11,
					"CharacterStarlord"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				4100453571103489,
				false
				,[
				[
					5,
					[
						2,
						"levelintro"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				5551671659274526,
				false
				,[
				[
					6,
					"Level2_"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			1547828432444332,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				8663161430785714,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					84
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				9227558706117701,
				false
				,[
				[
					4,
					84
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6819126747181646,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5883990345667208,
					false
					,[
					[
						11,
						"CharactersUnlocked"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5700298589550553,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6184967059178834,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7976704128890491,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2260340887450232,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7195371179498263,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					547599322004744,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					5227732666667333,
					false
					,[
					[
						6,
						"BossLevel"
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6325253002084025,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				9839902286112895,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					102
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				3415513438733481,
				false
				,[
				[
					4,
					102
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				8534847229230927,
				false
				,[
				[
					6,
					"BossLevel2"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			4902758622516631,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				6068476351983997,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					63
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				4025919403387724,
				false
				,[
				[
					4,
					63
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7188556900919287,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
,			[
				60,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				7137432011479176,
				false
			]
,			[
				63,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				2753108741538795,
				false
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			5766927300139521,
			[
			[
				60,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				6586808635277175,
				false
				,[
				[
					1,
					[
						2,
						"Part1"
					]
				]
				]
			]
,			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				5779170310479904,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					142
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				3991500965081213,
				false
				,[
				[
					4,
					142
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1781523103653239,
				false
				,[
				[
					11,
					"CharacterGamora"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2899520562990322,
				false
				,[
				[
					11,
					"CharacterDrax"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9704388201846629,
				false
				,[
				[
					11,
					"CharacterRocket"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8697726989604391,
				false
				,[
				[
					11,
					"CharacterStarlord"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				9257887606832704,
				false
				,[
				[
					6,
					"Training2"
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6421246958208547,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7824041569980139,
			[
			[
				60,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				3990106858114164,
				false
				,[
				[
					1,
					[
						2,
						"Part2"
					]
				]
				]
			]
			],
			[
			[
				60,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				8330124791161099,
				false
			]
,			[
				63,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				8781818134747813,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			457641592369528,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3728550424193964,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				60,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				4646317349479669,
				false
				,[
				[
					1,
					[
						2,
						"Part2"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7164540147402233,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3642214599654988,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				60,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				8842551536615426,
				false
			]
,			[
				63,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				4539877059166996,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9508725961272229,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				5814026119367654,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				60,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2525172724605107,
				false
				,[
				[
					1,
					[
						2,
						"Part1"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1943642039866257,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1066046989573565,
				false
				,[
				[
					11,
					"DraxComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			null,
			2807472050791596,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				5570512835694372,
				false
				,[
				[
					11,
					"RocketComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			null,
			1667635549482456,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3604799586121511,
				false
				,[
				[
					11,
					"GamoraComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			null,
			6446716557569479,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				2063367021553511,
				false
				,[
				[
					11,
					"StarlordComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			null,
			1199433478724503,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				7884022159070538,
				false
				,[
				[
					11,
					"RocketComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				7469105923767204,
				false
				,[
				[
					11,
					"GamoraComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				9496510758116503,
				false
				,[
				[
					11,
					"DraxComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				5476787455676451,
				false
				,[
				[
					11,
					"StarlordComplete"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				66,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				4604538702037036,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				110,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				2732859313829904,
				false
				,[
				[
					1,
					[
						2,
						"MenuBoss"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1964758720046803,
				false
				,[
				[
					11,
					"CharactersUnlocked"
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4800015663741024,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				3037459155610408,
				false
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				4664524593957537,
				false
				,[
				[
					11,
					"PlayIntro"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				60,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				7658298180481561,
				false
			]
,			[
				63,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				6782038861951534,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9813876793094178,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				6037206056403107,
				false
				,[
				[
					9,
					39
				]
				]
			]
,			[
				71,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				3546289468484555,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						23,
						"CharactersUnlocked"
					]
				]
				]
			]
			],
			[
			[
				71,
				cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
				null,
				88934055713238,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8032103313727813,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				9905619237114072,
				false
				,[
				[
					11,
					"CharactersUnlocked"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
			],
			[
			[
				136,
				cr.plugins_.Text.prototype.acts.SetVisible,
				null,
				8723767977535657,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8409720744427023,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				5532722083486966,
				false
				,[
				[
					9,
					37
				]
				]
			]
,			[
				71,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9133790672816318,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				71,
				cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
				null,
				2760314735924155,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9911478300726494,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				6826212084803906,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				30148143990864,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					3343655054310259,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					3477614186099962,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3852090763608232,
						false
						,[
						[
							11,
							"CharactersUnlocked"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								5
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						7855807124577647,
						false
					]
					],
					[
					[
						71,
						cr.plugins_.Sprite.prototype.acts.SetPosToObject,
						null,
						3746103693712338,
						false
						,[
						[
							4,
							84
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						7512446405207893,
						false
						,[
						[
							2,
							["lego gotg_sfx_generic collect item_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				9750759706032524,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5064792508881213,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							4
						]
					]
					]
				]
				],
				[
				[
					71,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					1144290782622937,
					false
					,[
					[
						4,
						56
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4319310304677848,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						9222741288426119,
						false
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						7228196787035084,
						false
						,[
						[
							2,
							["lego gotg_sfx_generic collect item_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				2948736513852523,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2586601073291938,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					71,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					1376064435630882,
					false
					,[
					[
						4,
						57
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					8480707089488244,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						8917709187687973,
						false
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8779253962377235,
						false
						,[
						[
							2,
							["lego gotg_sfx_generic collect item_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				5050368719578335,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2428070789555951,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					71,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					9671378890379824,
					false
					,[
					[
						4,
						58
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					864027910742257,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						7478015676037053,
						false
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						4384618020172395,
						false
						,[
						[
							2,
							["lego gotg_sfx_generic collect item_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				8544760130526887,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2374917747536006,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
				],
				[
				[
					71,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					9081237956731337,
					false
					,[
					[
						4,
						69
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					5441982902576698,
					[
					[
						-1,
						cr.system_object.prototype.cnds.TriggerOnce,
						null,
						0,
						false,
						false,
						false,
						981131120691515,
						false
					]
					],
					[
					[
						90,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8484874795987505,
						false
						,[
						[
							2,
							["lego gotg_sfx_generic collect item_1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			7087397488102747,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				286282574475444,
				false
				,[
				[
					9,
					32
				]
				]
			]
,			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				8149303230346617,
				false
				,[
				[
					9,
					13
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				171862474867809,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					7,
					[
						0,
						-1
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5407469822426872,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5252985459652874,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1608527460661584,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7278124605388382,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2337852289842306,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1977656636260139,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3740676924374573,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5147911208658447,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					8354273115932475,
					false
					,[
					[
						6,
						"BossLevel"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8883944472754787,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2622836423140207,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							4
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3272903203945274,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8251056130537533,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					566231503931214,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6187650774906044,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					6838470201114967,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					1931753998789126,
					false
					,[
					[
						6,
						"level1_"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7201612699428592,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6974201840317444,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6179642543234368,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3567535425737464,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8681872941414266,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4974994842375823,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					806983113321988,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					2355810116848471,
					false
					,[
					[
						6,
						"Level4"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9959665155281567,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1555165110907899,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9548186347078515,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5243677096798801,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4234187900424591,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7974621751292431,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					8035956893185647,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					1090767349372675,
					false
					,[
					[
						6,
						"Level3"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5969542355238384,
				[
				[
					71,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1286129194446097,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3788598640611213,
					false
					,[
					[
						11,
						"CharacterGamora"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5349193882979356,
					false
					,[
					[
						11,
						"CharacterDrax"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1472928727314431,
					false
					,[
					[
						11,
						"CharacterRocket"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5783295509270245,
					false
					,[
					[
						11,
						"CharacterStarlord"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					2940077834210652,
					false
					,[
					[
						5,
						[
							2,
							"levelintro"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					1619672048185785,
					false
					,[
					[
						6,
						"Level2_"
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7073096574256442,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				6034594108778867,
				false
			]
			],
			[
			[
				74,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				3459448210238501,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				76,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				9440982287725838,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				77,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				1029236006403551,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				78,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				9734193256259238,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				136,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				1206774021961214,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				75,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				5351369846177581,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				75,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				3001455406072222,
				false
				,[
				[
					7,
					[
						4,
						[
							4,
							[
								4,
								[
									4,
									[
										23,
										"level1HighScore"
									]
									,[
										23,
										"level2HighScore"
									]
								]
								,[
									23,
									"level3HighScore"
								]
							]
							,[
								23,
								"level4HighScore"
							]
						]
						,[
							23,
							"level5HighScore"
						]
					]
				]
				]
			]
,			[
				74,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				2180770672175735,
				false
				,[
				[
					7,
					[
						23,
						"level1HighScore"
					]
				]
				]
			]
,			[
				76,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				5312234082988132,
				false
				,[
				[
					7,
					[
						23,
						"level2HighScore"
					]
				]
				]
			]
,			[
				77,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				7499482758372446,
				false
				,[
				[
					7,
					[
						23,
						"level3HighScore"
					]
				]
				]
			]
,			[
				78,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				9634880376695007,
				false
				,[
				[
					7,
					[
						23,
						"level4HighScore"
					]
				]
				]
			]
,			[
				136,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				7536430291983154,
				false
				,[
				[
					7,
					[
						23,
						"level5HighScore"
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				1477010697632891,
				false
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				6934998944707962,
				false
				,[
				[
					2,
					["lego gotg_main music_mix 1_1",false]
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						"bgm"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6382474573921402,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				3960096765822146,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					22
				]
				]
			]
			],
			[
			[
				90,
				cr.plugins_.Audio.prototype.acts.SetSilent,
				null,
				7227051862571418,
				false
				,[
				[
					3,
					2
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				595899943117403,
				false
				,[
				[
					11,
					"Mute"
				]
,				[
					7,
					[
						6,
						[
							23,
							"Mute"
						]
						,[
							0,
							-1
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				6268570897579728,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7907936209822187,
					false
					,[
					[
						11,
						"Mute"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					22,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					8917821087076374,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				93557432345561,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					789061902096491,
					false
					,[
					[
						11,
						"Mute"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					22,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					9727646376392575,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "StarRating"],
			false,
			null,
			3185884928504591,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				3185884928504591,
				false
				,[
				[
					1,
					[
						2,
						"StarRating"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9958185697456944,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7885108825448095,
					false
					,[
					[
						11,
						"level4HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					5561327290022343,
					false
					,[
					[
						1,
						[
							2,
							"1Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5047791832114142,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6329086818081829,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1199466006787935,
					false
					,[
					[
						11,
						"level4HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					390166448256347,
					false
					,[
					[
						1,
						[
							2,
							"2Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					212205666959757,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4955916280703241,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2203306837569135,
					false
					,[
					[
						11,
						"level4HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2255145817020047,
					false
					,[
					[
						1,
						[
							2,
							"3Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					137,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					5530079481505851,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8347755814918984,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6091939518409235,
					false
					,[
					[
						11,
						"level3HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					967319497290648,
					false
					,[
					[
						1,
						[
							2,
							"1Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4864924757645168,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4837349673715659,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7235865070843718,
					false
					,[
					[
						11,
						"level3HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7573328832561495,
					false
					,[
					[
						1,
						[
							2,
							"2Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					18251423633185,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3330327034884775,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8196574768577946,
					false
					,[
					[
						11,
						"level3HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9095960638390432,
					false
					,[
					[
						1,
						[
							2,
							"3Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					65,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					275181969756314,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4533398196466305,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6852798135848359,
					false
					,[
					[
						11,
						"level2HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6356950675795809,
					false
					,[
					[
						1,
						[
							2,
							"1Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8445155206529631,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1449038601407636,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5257045387764189,
					false
					,[
					[
						11,
						"level2HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					3163437140593851,
					false
					,[
					[
						1,
						[
							2,
							"2Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6874201689064859,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8947558452782353,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2476473677141226,
					false
					,[
					[
						11,
						"level2HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6650739115478274,
					false
					,[
					[
						1,
						[
							2,
							"3Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					139,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6290519403952694,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				915052041638055,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9627043006780137,
					false
					,[
					[
						11,
						"level1HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2428307530387736,
					false
					,[
					[
						1,
						[
							2,
							"1Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					6810697895497097,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3858322592375337,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2585025297647095,
					false
					,[
					[
						11,
						"level1HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7790684355595559,
					false
					,[
					[
						1,
						[
							2,
							"2Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					7061289759586059,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6702061092922101,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6200044818843292,
					false
					,[
					[
						11,
						"level1HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8373720496714387,
					false
					,[
					[
						1,
						[
							2,
							"3Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					138,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					965207799603671,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8619363296377443,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7731813135908203,
					false
					,[
					[
						11,
						"level5HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							5000
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					401076045445953,
					false
					,[
					[
						1,
						[
							2,
							"1Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					4715011763092894,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5062648970132072,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1190382688049028,
					false
					,[
					[
						11,
						"level5HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							10000
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					6638032681861363,
					false
					,[
					[
						1,
						[
							2,
							"2Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					8252462130899105,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				742006146944643,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6042940450163034,
					false
					,[
					[
						11,
						"level5HighScore"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15000
						]
					]
					]
				]
				],
				[
				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7363336072383613,
					false
					,[
					[
						1,
						[
							2,
							"3Star"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					140,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					3593353587276101,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"Event sheet 1",
		[
		[
			0,
			null,
			false,
			null,
			6810230553556971,
			[
			[
				72,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				5450574409438095,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				308099751603171,
				false
				,[
				[
					6,
					"HubWorld"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9935301128387968,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				3346400950434642,
				false
			]
			],
			[
			[
				135,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				994510709473454,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				147,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				4577951702395563,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5216173696685452,
			[
			[
				72,
				cr.plugins_.Sprite.prototype.cnds.OnFrameChanged,
				null,
				1,
				false,
				false,
				false,
				761095732744069,
				false
			]
			],
			[
			[
				135,
				cr.plugins_.Text.prototype.acts.SetVisible,
				null,
				6579393467941542,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				147,
				cr.plugins_.Text.prototype.acts.SetVisible,
				null,
				876772966067816,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
		]
	]
,	[
		"BossLevel2",
		[
		[
			0,
			[true, "Boss2"],
			false,
			null,
			2409687084979019,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				0,
				false,
				false,
				false,
				2409687084979019,
				false
				,[
				[
					1,
					[
						2,
						"Boss2"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6617970283437623,
				[
				[
					-1,
					cr.system_object.prototype.cnds.EveryTick,
					null,
					0,
					false,
					false,
					false,
					1509803882532445,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.ScrollToObject,
					null,
					248095474697708,
					false
					,[
					[
						4,
						42
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveAtAngle,
					null,
					9829897668886529,
					false
					,[
					[
						0,
						[
							21,
							16,
							false,
							null
							,2
						]
					]
,					[
						0,
						[
							21,
							16,
							false,
							null
							,0
						]
					]
					]
				]
,				[
					47,
					cr.plugins_.Text.prototype.acts.SetText,
					null,
					4828231100175068,
					false
					,[
					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
,				[
					23,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					896117294134119,
					false
					,[
					[
						0,
						[
							21,
							16,
							false,
							null
							,6
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.Sprite.prototype.acts.SetPos,
					null,
					7945865952276953,
					false
					,[
					[
						0,
						[
							19,
							cr.system_object.prototype.exps.lerp
							,[
[
								20,
								42,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
,[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
,[
								1,
								0.02
							]
							]
						]
					]
,					[
						0,
						[
							19,
							cr.system_object.prototype.exps.lerp
							,[
[
								20,
								42,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
,[
								20,
								35,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
,[
								1,
								0.02
							]
							]
						]
					]
					]
				]
,				[
					144,
					cr.plugins_.Sprite.prototype.acts.SetPosToObject,
					null,
					5738017147506768,
					false
					,[
					[
						4,
						16
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					5100600839803235,
					[
					[
						16,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						5710325219974834,
						false
						,[
						[
							10,
							6
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
				]
,				[
					0,
					null,
					false,
					null,
					1145188453782218,
					[
					[
						16,
						cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
						null,
						0,
						false,
						false,
						false,
						3153324327167182,
						false
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2332000294704949,
						false
						,[
						[
							10,
							6
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						42,
						cr.plugins_.Sprite.prototype.acts.SetPos,
						null,
						9770419214042599,
						false
						,[
						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									20,
									46,
									cr.plugins_.Sprite.prototype.exps.X,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
,						[
							0,
							[
								19,
								cr.system_object.prototype.exps.lerp
								,[
[
									20,
									42,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									20,
									46,
									cr.plugins_.Sprite.prototype.exps.Y,
									false,
									null
								]
,[
									1,
									0.02
								]
								]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8289180921958934,
					[
					[
						16,
						cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
						null,
						0,
						false,
						true,
						false,
						1079907958112959,
						false
					]
					],
					[
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8528350642242922,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1598832057951304,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					9163568286648303,
					false
					,[
					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2788696055393397,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6990774649249253,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							-3
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetMirrored,
					null,
					8960215628843292,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4062074549162849,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					7714191251892625,
					false
					,[
					[
						4,
						48
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6643724291732595,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							21,
							16,
							false,
							null
							,3
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4690651242834775,
					false
					,[
					[
						10,
						6
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					6017300918121372,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							6,
							[
								21,
								16,
								false,
								null
								,0
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					1499392442517962,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3156163953076585,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					906289199739562,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9456426256148967,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.OnCollision,
					null,
					0,
					false,
					false,
					true,
					2527024699281774,
					false
					,[
					[
						4,
						48
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7175412868026087,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							21,
							16,
							false,
							null
							,3
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6074562256555355,
					false
					,[
					[
						10,
						6
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					4445679150335703,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1936389755209384,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							6,
							[
								21,
								16,
								false,
								null
								,0
							]
							,[
								0,
								-1
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5648163459732376,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetCollisions,
					null,
					3506233638193188,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3242269532859681,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							90
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7959739554246128,
					false
					,[
					[
						1,
						[
							2,
							"Front"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1999280035850733,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					144,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					2198834817198007,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9920571015808813,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					144,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					2257087024410754,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					764292012559779,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					3295255308640756,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1664398009827001,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				418924310938381,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Every,
					null,
					0,
					false,
					false,
					false,
					5715551301870706,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					660205158795676,
					false
					,[
					[
						10,
						1
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							21,
							16,
							false,
							null
							,3
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.IsOnScreen,
					null,
					0,
					false,
					false,
					false,
					4485371190743634,
					false
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					7691659680693233,
					false
					,[
					[
						10,
						6
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					286344950206353,
					false
					,[
					[
						4,
						8
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					4859915508831422,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				301427887297617,
				[
				[
					8,
					cr.plugins_.Sprite.prototype.cnds.OnCreated,
					null,
					1,
					false,
					false,
					false,
					3062144424358701,
					false
				]
				],
				[
				[
					8,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9271688694483804,
					false
					,[
					[
						1,
						[
							2,
							"None"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3446266591239708,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2339550464039259,
					false
					,[
					[
						1,
						[
							2,
							"Slow"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8124281304118236,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9190310509175859,
					false
					,[
					[
						1,
						[
							2,
							"Fast"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					687149937440411,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					8364755777508172,
					false
					,[
					[
						2,
						["lego gotg_sfx_gun shot_1",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					9032215805944883,
					false
					,[
					[
						4,
						101
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3718702824803141,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					543750471476689,
					false
					,[
					[
						0,
						[
							1,
							0.9
						]
					]
					]
				]
,				[
					101,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					2990462230825101,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4115241054004045,
				[
				[
					13,
					cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
					null,
					0,
					false,
					false,
					false,
					3312480139169382,
					false
					,[
					[
						4,
						16
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					588310637388953,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					0,
					false,
					false,
					false,
					6889780543112062,
					false
					,[
					[
						10,
						5
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4556861417867555,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					23,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					6249500784388021,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					90,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2259377842814454,
					false
					,[
					[
						2,
						["lego gotg_sfx_enemy hit",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9653824181587714,
					false
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Spawn,
					null,
					7054124047357217,
					false
					,[
					[
						4,
						86
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					7799249331987349,
					false
					,[
					[
						10,
						6
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					9075577438751225,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5465664949930965,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5650251509941635,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5399887497886215,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					144,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					7072023305048824,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					144,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					9789797869702375,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7243982617013873,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					9039416146253824,
					false
					,[
					[
						1,
						[
							2,
							"Side"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					6368389844766507,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							-3
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
					null,
					3443272431885861,
					false
					,[
					[
						10,
						3
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					5854208419104897,
					false
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7085592001674164,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
					null,
					1,
					false,
					false,
					false,
					4755429218279307,
					false
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8495933641524807,
					false
					,[
					[
						1,
						[
							2,
							"Front"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8785074664779342,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				9161313505412611,
				false
			]
			],
			[
			[
				13,
				cr.plugins_.Sprite.prototype.acts.SetPosToObject,
				null,
				7032299372256156,
				false
				,[
				[
					4,
					35
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				24,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				862425578142563,
				false
				,[
				[
					0,
					[
						21,
						35,
						false,
						null
						,2
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			608780129253384,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				3991402261583181,
				false
			]
			],
			[
			[
				47,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				5379720752233725,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetWebFont,
				null,
				7515327766052893,
				false
				,[
				[
					1,
					[
						2,
						"playregular"
					]
				]
,				[
					1,
					[
						2,
						"stylesheet.css"
					]
				]
				]
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				161930859055904,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1728666063453291,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				9490813210842319,
				false
				,[
				[
					4,
					86
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4916738487783126,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						2
					]
				]
				]
			]
			],
			[
			[
				86,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				5035745222163706,
				false
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				5311711862248646,
				false
				,[
				[
					2,
					["lego gotg_sfx_health pick up_1",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				24,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				1322967151639137,
				false
				,[
				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						1
					]
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.acts.AddInstanceVar,
				null,
				4403969818879654,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3305705012430283,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6350863099715017,
			[
			[
				3,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				8580443908482317,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
				]
			]
			],
			[
			[
				3,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				4573590425541521,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			594398707050192,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				849653894293848,
				false
				,[
				[
					10,
					2
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				35,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				2449495652468442,
				false
				,[
				[
					10,
					11
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				3100353922867165,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				9454736253900527,
				false
				,[
				[
					2,
					["lego gotg_sfx_player get hit_1",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5211845634879833,
				false
				,[
				[
					1,
					[
						2,
						"Die"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				35,
				cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
				"Platform",
				1772324641429823,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				2549329335350756,
				false
				,[
				[
					0,
					[
						1,
						1.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.RestartLayout,
				null,
				5503041752309896,
				false
			]
,			[
				150,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash2",
				5825802837393312,
				false
				,[
				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						0,
						3
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3405429688107505,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				8828961130391383,
				false
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				66799351302268,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.CompareSpeed,
					"Platform",
					0,
					false,
					false,
					false,
					8838861124240253,
					false
					,[
					[
						8,
						4
					]
,					[
						0,
						[
							0,
							350
						]
					]
					]
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2329213903782957,
					false
					,[
					[
						1,
						[
							2,
							"Run"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			5525403844537466,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				9022566064657835,
				false
				,[
				[
					9,
					37
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				1723581705114028,
				false
				,[
				[
					4,
					52
				]
				]
			]
			],
			[
			[
				35,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				1714310511578814,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				9242568884184272,
				false
				,[
				[
					1,
					[
						2,
						"Walk"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				2900424766844036,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				39,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				2578323656204808,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetMirrored,
				null,
				2747073183049809,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				7754836881447566,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"left"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			598561766439925,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				3171989613793267,
				false
				,[
				[
					9,
					39
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				653700394089359,
				false
				,[
				[
					4,
					53
				]
				]
			]
			],
			[
			[
				35,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				3286050162615261,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				6980458128741507,
				false
				,[
				[
					1,
					[
						2,
						"Walk"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				41,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				8853085759617104,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				39,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				4507121233298302,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetMirrored,
				null,
				8819866880678657,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				179679204524574,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						2,
						"right"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2729476801717968,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				7451730375306052,
				false
				,[
				[
					9,
					90
				]
				]
			]
			],
			[
			[
				35,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				4049481683565748,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			5952905159060334,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				6795272701825522,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				6190661566952361,
				false
				,[
				[
					4,
					51
				]
				]
			]
,			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				6288663100375774,
				false
				,[
				[
					9,
					90
				]
				]
			]
			],
			[
			[
				35,
				cr.behaviors.Platform.prototype.acts.SimulateControl,
				"Platform",
				3361201047191781,
				false
				,[
				[
					3,
					2
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				7639971228918687,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1105252160122161,
					false
					,[
					[
						10,
						3
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					9878510644511337,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					4601583073205542,
					false
					,[
					[
						10,
						3
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			3193363702462816,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				2353255868787078,
				false
				,[
				[
					9,
					32
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				8890289011767408,
				false
				,[
				[
					4,
					54
				]
				]
			]
,			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				2670644680225159,
				false
				,[
				[
					9,
					88
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7470595809081078,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5084863337041049,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				]
			]
,			[
				0,
				null,
				false,
				null,
				3211249752256954,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9697162048577983,
					false
					,[
					[
						10,
						4
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					8935386556976547,
					false
					,[
					[
						1,
						[
							2,
							"Shoot"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1141608440426888,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9960746153351525,
					false
					,[
					[
						0,
						[
							21,
							35,
							false,
							null
							,5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2183053610880358,
					false
					,[
					[
						0,
						[
							1,
							0.2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					100951252428078,
					false
					,[
					[
						10,
						5
					]
,					[
						3,
						1
					]
					]
				]
,				[
					152,
					cr.plugins_.Sprite.prototype.acts.SetOpacity,
					null,
					3236652878155133,
					false
					,[
					[
						0,
						[
							6,
							[
								0,
								100
							]
							,[
								21,
								35,
								false,
								null
								,9
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					4337301722386192,
					false
					,[
					[
						0,
						[
							1,
							0.2
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4756496637746148,
					false
					,[
					[
						10,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null,
					2154926988253864,
					false
					,[
					[
						10,
						5
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					575498081936298,
					false
					,[
					[
						0,
						[
							1,
							0.2
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6815291566549884,
			[
			[
				35,
				cr.behaviors.Platform.prototype.cnds.IsJumping,
				"Platform",
				0,
				false,
				false,
				false,
				3717991849636919,
				false
			]
			],
			[
			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				8079785946785665,
				false
				,[
				[
					1,
					[
						2,
						"Jump"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7322868065504663,
			[
			[
				35,
				cr.behaviors.Platform.prototype.cnds.IsFalling,
				"Platform",
				0,
				false,
				false,
				false,
				6767264891213878,
				false
			]
			],
			[
			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				585048016384483,
				false
				,[
				[
					1,
					[
						2,
						"Fall"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
			,[
			[
				0,
				null,
				true,
				null,
				1752295014279965,
				[
				[
					37,
					cr.plugins_.Keyboard.prototype.cnds.OnKey,
					null,
					1,
					false,
					false,
					false,
					2661435400911449,
					false
					,[
					[
						9,
						38
					]
					]
				]
,				[
					55,
					cr.plugins_.Touch.prototype.cnds.OnTouchObject,
					null,
					1,
					false,
					false,
					false,
					8946238960713246,
					false
					,[
					[
						4,
						51
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					8610150089008565,
					[
					[
						35,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						5891065570735548,
						false
						,[
						[
							10,
							3
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.behaviors.Platform.prototype.acts.SetVectorY,
						"Platform",
						881672200081625,
						false
						,[
						[
							0,
							[
								0,
								-500
							]
						]
						]
					]
,					[
						35,
						cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
						null,
						7093381888864189,
						false
						,[
						[
							10,
							3
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3724451984473549,
			[
			[
				35,
				cr.behaviors.Platform.prototype.cnds.OnLand,
				"Platform",
				1,
				false,
				false,
				false,
				3587314628382209,
				false
			]
			],
			[
			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5135789060702949,
				false
				,[
				[
					1,
					[
						2,
						"Landed"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				2182685203759908,
				false
				,[
				[
					10,
					3
				]
,				[
					7,
					[
						21,
						35,
						false,
						null
						,6
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			215893209694553,
			[
			[
				35,
				cr.behaviors.Platform.prototype.cnds.OnStop,
				"Platform",
				1,
				false,
				false,
				false,
				4409342901216299,
				false
			]
,			[
				35,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				8279697371084716,
				false
				,[
				[
					10,
					4
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				4306391614989807,
				false
				,[
				[
					1,
					[
						2,
						"Idle"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2989228807964991,
			[
			[
				150,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				6740006997078414,
				false
				,[
				[
					1,
					[
						2,
						"Shoot"
					]
				]
				]
			]
			],
			[
			[
				150,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				355770474759383,
				false
				,[
				[
					1,
					[
						2,
						"Idle"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8687945170690603,
			[
			[
				150,
				cr.plugins_.Sprite.prototype.cnds.OnAnimFinished,
				null,
				1,
				false,
				false,
				false,
				9638446419582463,
				false
				,[
				[
					1,
					[
						2,
						"Landed"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9445829146896206,
				[
				[
					35,
					cr.behaviors.Platform.prototype.cnds.IsMoving,
					"Platform",
					0,
					false,
					false,
					false,
					5403956402577612,
					false
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					7776007279514014,
					false
					,[
					[
						1,
						[
							2,
							"Walk"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4801286393799588,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					3144944135332841,
					false
				]
				],
				[
				[
					150,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null,
					2641473679802341,
					false
					,[
					[
						1,
						[
							2,
							"Idle"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6702236473167824,
			[
			[
				101,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3108832808734462,
				false
				,[
				[
					4,
					35
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6395785493727748,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5200796699688591,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"left"
						]
					]
					]
				]
				],
				[
				[
					24,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					8713409279501284,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.RotateClockwise,
					null,
					669254125469146,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorX,
					"Platform",
					2463214841807221,
					false
					,[
					[
						0,
						[
							0,
							1000
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					1519672488388914,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					150,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash2",
					7952347586535558,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7151363119287674,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4491196028413512,
					false
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					160288790625218,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					2409028108427721,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9869267711148933,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					7872227446001746,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					1159172096805336,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				115980112475527,
				[
				[
					35,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					6735620520055077,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"right"
						]
					]
					]
				]
				],
				[
				[
					24,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash",
					2211075824323059,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					150,
					cr.plugins_.Sprite.prototype.acts.RotateClockwise,
					null,
					2408817620830559,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorX,
					"Platform",
					1120465657163382,
					false
					,[
					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetVectorY,
					"Platform",
					5445778560098727,
					false
					,[
					[
						0,
						[
							0,
							-500
						]
					]
					]
				]
,				[
					150,
					cr.behaviors.Flash.prototype.acts.Flash,
					"Flash2",
					5276965818822368,
					false
					,[
					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							0.1
						]
					]
,					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					916474713020208,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4727630329379343,
					false
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
					null,
					9999339676498415,
					false
					,[
					[
						10,
						2
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					4884121497995938,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9054013120576136,
					false
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					35,
					cr.behaviors.Platform.prototype.acts.SetIgnoreInput,
					"Platform",
					5541966640830324,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					35,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					7021460551847853,
					false
					,[
					[
						10,
						11
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8190249218556097,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				9452998037145304,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				5722083654557241,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						23,
						"level1Score"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				6745074592990548,
				false
			]
			],
			[
			[
				89,
				cr.plugins_.Text.prototype.acts.AddInstanceVar,
				null,
				323616360472858,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						21,
						89,
						false,
						null
						,2
					]
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				2234776438775944,
				false
				,[
				[
					7,
					[
						21,
						89,
						false,
						null
						,0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1450810611721592,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4978860267633639,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						5000
					]
				]
				]
			]
			],
			[
			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				3648693568245893,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8924637043479797,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				1495660406060622,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						10000
					]
				]
				]
			]
			],
			[
			[
				92,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				2757142572416216,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7416652525918567,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9196873990503369,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						15000
					]
				]
				]
			]
			],
			[
			[
				93,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				9345620567665881,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8297161173113379,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				8626300216085377,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				0,
				false,
				false,
				false,
				7351895848417505,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				89,
				cr.plugins_.Text.prototype.acts.AddInstanceVar,
				null,
				8289120726234147,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6012094341698103,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3558736386585733,
				false
				,[
				[
					4,
					64
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				3609614115985543,
				false
				,[
				[
					5,
					[
						2,
						"Layer 1"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
				null,
				4106316971878553,
				false
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5973597057819215,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				4219014190519339,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				7244630565205051,
				false
				,[
				[
					5,
					[
						2,
						"Layer 1"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				64,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				8230566802753177,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				64,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				5313016044525645,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5655287770898718,
			[
			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				9929611408259472,
				false
				,[
				[
					10,
					6
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				8934560548001161,
				false
			]
			],
			[
			[
				64,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				4771816792265339,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				6258002121523569,
				false
				,[
				[
					2,
					["lego gotg_sfx_generic collect item_2",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				64,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				687018886713002,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				1957044524097209,
				false
				,[
				[
					11,
					"level1Score"
				]
,				[
					7,
					[
						0,
						15000
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				7396176068401186,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						90
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				75955119064158,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						4
					]
				]
				]
			]
,			[
				120,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				4335471487402678,
				false
				,[
				[
					1,
					[
						2,
						"Opened"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				120,
				cr.behaviors.solid.prototype.acts.SetEnabled,
				"Solid",
				9963713451919942,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				5173389660272123,
				false
				,[
				[
					0,
					[
						0,
						3
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				5604278304888383,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4402353883766046,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				8846377410999433,
				false
			]
			],
			[
			[
				120,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				5848100305669837,
				false
				,[
				[
					1,
					[
						2,
						"Opened"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				120,
				cr.behaviors.solid.prototype.acts.SetEnabled,
				"Solid",
				614117440506336,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1603226829004746,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				6995268160202034,
				false
				,[
				[
					4,
					48
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				7306000879217869,
				false
				,[
				[
					10,
					6
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				120,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null,
				9547363414547004,
				false
				,[
				[
					1,
					[
						2,
						"Default"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				120,
				cr.behaviors.solid.prototype.acts.SetEnabled,
				"Solid",
				5663149816226237,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7070758991332355,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsMobile,
				null,
				0,
				false,
				false,
				false,
				9420834869153052,
				false
			]
			],
			[
			[
				52,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				4982870374507644,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				53,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				869978254443832,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				51,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				484036513846369,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				54,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				7367598409569775,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5693977058286062,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				3383153369928899,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				5328236710946738,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						23,
						"level1Score"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				8210654137867996,
				false
			]
			],
			[
			[
				89,
				cr.plugins_.Text.prototype.acts.AddInstanceVar,
				null,
				5058889058410087,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						21,
						89,
						false,
						null
						,2
					]
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetText,
				null,
				2182190856599401,
				false
				,[
				[
					7,
					[
						21,
						89,
						false,
						null
						,0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8631460717230342,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				5171228986910503,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				0,
				false,
				false,
				false,
				7368481398093863,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				89,
				cr.plugins_.Text.prototype.acts.AddInstanceVar,
				null,
				9331006450718791,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2348285870327517,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				6919559395492317,
				false
				,[
				[
					4,
					64
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1021068873951324,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2230037405278175,
				false
				,[
				[
					5,
					[
						2,
						"Layer 2"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
				null,
				5089211833302312,
				false
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			411860117880577,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				2257731515504706,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						5000
					]
				]
				]
			]
			],
			[
			[
				91,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				6795576424285209,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2657521434924416,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				5971373729881385,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						10000
					]
				]
				]
			]
			],
			[
			[
				92,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				1330677995271677,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6217628339985713,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				4063832536555571,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						15000
					]
				]
				]
			]
			],
			[
			[
				93,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				2659485186060941,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2577167191106992,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.IsBoolInstanceVarSet,
				null,
				0,
				false,
				false,
				false,
				250388846875643,
				false
				,[
				[
					10,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				0,
				false,
				false,
				false,
				8204794913048683,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				89,
				cr.plugins_.Text.prototype.acts.AddInstanceVar,
				null,
				6314454944602246,
				false
				,[
				[
					10,
					2
				]
,				[
					7,
					[
						0,
						3
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2368828083635744,
			[
			[
				35,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				5007173196762091,
				false
				,[
				[
					4,
					64
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				4305959625701484,
				false
				,[
				[
					11,
					"Training"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				5075096768414342,
				false
				,[
				[
					5,
					[
						2,
						"Layer 2"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
				null,
				8607799174503785,
				false
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.Play,
				null,
				988156652980147,
				false
				,[
				[
					2,
					["lego gotg_sfx_win sound_1",false]
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5525440677786204,
			[
			[
				89,
				cr.plugins_.Text.prototype.cnds.CompareInstanceVar,
				null,
				0,
				false,
				false,
				false,
				6037188802100615,
				false
				,[
				[
					10,
					0
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						23,
						"level1Score"
					]
				]
				]
			]
			],
			[
			[
				143,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				1863385016820566,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				370387316668277,
				false
				,[
				[
					0,
					[
						0,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				7025591507954339,
				false
				,[
				[
					5,
					[
						2,
						"Layer 2"
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1083038709611867,
				false
				,[
				[
					11,
					"PlayIntro"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				2166547468900103,
				false
				,[
				[
					6,
					"HubWorld"
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				6129527362290052,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7671080824106809,
					false
					,[
					[
						11,
						"level1Score"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							23,
							"level5HighScore"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6284095619912157,
					false
					,[
					[
						11,
						"level5HighScore"
					]
,					[
						7,
						[
							23,
							"level1Score"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			1044444017835201,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				4102078771968915,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					29
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				640233778336952,
				false
				,[
				[
					4,
					29
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				5149181798952695,
				[
				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					6317510014732264,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5296740836476677,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.RestartLayout,
					null,
					5124032237995534,
					false
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			4105861890440962,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				4145529077903616,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					30
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				6249175787750856,
				false
				,[
				[
					4,
					30
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				718113470463633,
				[
				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					2391280808868231,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
					]
				]
				],
				[
				[
					143,
					cr.plugins_.Sprite.prototype.acts.SetVisible,
					null,
					9969431209274333,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					4102474016541668,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					6867673263243874,
					false
					,[
					[
						5,
						[
							2,
							"Layer 2"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9258099764948702,
					false
					,[
					[
						11,
						"PlayIntro"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					9009519895344198,
					false
					,[
					[
						6,
						"HubWorld"
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					3142453645958672,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3847352936435084,
						false
						,[
						[
							11,
							"level1Score"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								23,
								"level5HighScore"
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1920889924283228,
						false
						,[
						[
							11,
							"level5HighScore"
						]
,						[
							7,
							[
								23,
								"level1Score"
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8556936689656056,
			[
			[
				86,
				cr.plugins_.Sprite.prototype.cnds.OnCreated,
				null,
				1,
				false,
				false,
				false,
				2661501992953007,
				false
			]
			],
			[
			[
				86,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				7330991281626853,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				86,
				cr.behaviors.Sin.prototype.acts.SetMovement,
				"Sine",
				2464834321299588,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3021704942621798,
				false
				,[
				[
					0,
					[
						0,
						2
					]
				]
				]
			]
,			[
				86,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				3246196700685288,
				false
				,[
				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						0.2
					]
				]
,				[
					0,
					[
						1,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3449656243210366,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				86,
				cr.behaviors.Flash.prototype.acts.Flash,
				"Flash",
				8850009857338339,
				false
				,[
				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						0.1
					]
				]
,				[
					0,
					[
						1,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1463380922673175,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				86,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				853672574250931,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4300083682947409,
			[
			[
				37,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				1,
				false,
				false,
				false,
				9464691310815494,
				false
				,[
				[
					9,
					87
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2709236114916664,
				false
				,[
				[
					5,
					[
						2,
						"Layer 2"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				89,
				cr.plugins_.Text.prototype.acts.SetBoolInstanceVar,
				null,
				7869070551945114,
				false
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3213344146347447,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				6648686886569272,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					22
				]
				]
			]
			],
			[
			[
				90,
				cr.plugins_.Audio.prototype.acts.SetSilent,
				null,
				1713940403083552,
				false
				,[
				[
					3,
					2
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				417096389984133,
				false
				,[
				[
					11,
					"Mute"
				]
,				[
					7,
					[
						6,
						[
							23,
							"Mute"
						]
						,[
							0,
							-1
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5993359200737129,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1711554362401734,
					false
					,[
					[
						11,
						"Mute"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					22,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3535844120811462,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1315261158177546,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6579250232457474,
					false
					,[
					[
						11,
						"Mute"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					22,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					9744625271350021,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1153361018137344,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				7462431400116088,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					4
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				28,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				736591339712492,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				4713449423167613,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				26,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				5660131225752315,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				26,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				1467424158945524,
				false
				,[
				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1791483590920597,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				4487045215969201,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					8,
					2
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				28,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				8918241037805918,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				194351506673492,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.SetVolume,
				null,
				9000083686432843,
				false
				,[
				[
					1,
					[
						2,
						"bgm"
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				26,
				cr.plugins_.Sprite.prototype.acts.SetVisible,
				null,
				1453300390854727,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				26,
				cr.plugins_.Sprite.prototype.acts.SetCollisions,
				null,
				3042287701399231,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1506058311840315,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				2894546759160334,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					28
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6740007017171436,
				false
				,[
				[
					11,
					"Pause"
				]
,				[
					7,
					[
						6,
						[
							23,
							"Pause"
						]
						,[
							0,
							-1
						]
					]
				]
				]
			]
,			[
				90,
				cr.plugins_.Audio.prototype.acts.SetVolume,
				null,
				5390938548323222,
				false
				,[
				[
					1,
					[
						2,
						"bgm"
					]
				]
,				[
					0,
					[
						0,
						-30
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			4327506298922348,
			[
			[
				38,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				4038346339876402,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					26
				]
				]
			]
,			[
				55,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				6312403882803996,
				false
				,[
				[
					4,
					26
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				4525002773898962,
				[
				[
					26,
					cr.plugins_.Sprite.prototype.cnds.IsVisible,
					null,
					0,
					false,
					false,
					false,
					4716719412921391,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6053224626857683,
					false
					,[
					[
						11,
						"Pause"
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9557237314083365,
					false
					,[
					[
						11,
						"Training"
					]
,					[
						7,
						[
							0,
							-1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					7566563880771417,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5152288274756581,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					5624584598024026,
					false
					,[
					[
						1,
						[
							2,
							"HubWorld"
						]
					]
					]
				]
				]
			]
			]
		]
		]
	]
	],
	"media/",
	true,
	930,
	600,
	4,
	true,
	false,
	true,
	"1.0.0.0",
	true,
	false,
	0,
	2,
	1212,
	false,
	true,
	1,
	[
	]
];};
